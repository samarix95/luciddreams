{"version":3,"sources":["styles.js","functions/fetch.js","components/StyledBreadcrumb.js","components/multiple/CardDream.js","components/Dreams.js"],"names":["makeStyles","theme","BigImg","breakpoints","up","height","width","MedImg","Border3","border","borderRadius","BackgroundImg","backgroundPosition","backgroundRepeat","backgroundSize","root","position","flexGrow","stickyTop","top","zIndex","paper","marginLeft","marginRight","input","flex","MenuButtons","minWidth","MuiRteRead","backgroundColor","palette","text","main","padding","skeletonCard","minHeight","smallAvatar","spacing","largeAvatar","filterFab","bottom","right","addPostFab","flexSpaceBetween","display","flexDirection","justifyContent","margin1","margin","margin2","padding1","padding2","fullWidth","FadeIn","animation","FadeOut","InvertIn","InvertOut","opacity","filter","path","userSignIn","data","dispatch","setUserPending","fetch","method","headers","body","JSON","stringify","then","response","ok","Promise","resolve","json","reject","result","decode","setToken","token","setUserData","setOpenSnackbar","variant","message","dict","language","texts","Wellcome","history","push","historyPath","MainPage","catch","error","resetUserData","err","errors","userSignUp","fetchTechnics","setTechnicsPending","Accept","localStorage","setTechnicsData","setTechnicsError","fetchTags","setTagsPending","setTagsData","setTagsError","fetchUpdateTechnics","id","pathname","ReadTechnic","defaultData","fetchUserPosts","setUserPostsPending","create_user","setUserPostsData","setUserPostsError","fetchAddPost","setAddPostPending","setAddPostData","Dreams","setAddPostError","fetchUpdatePost","setUpdatePostPending","setUpdatePostData","redirect","ReadDream","setUpdatePostError","fetchDeletePost","setDeletePostPending","setDeletePostData","setDeletePostError","fetchPostComments","setPostCommentsPending","post_id","setPostCommentsData","setPostCommentsError","fetchAddPostComment","setAddPostCommentsPending","setAddPostCommentsData","setAddPostCommentsError","fetchUpdatePostComment","setUpdatePostCommentsPending","setUpdatePostCommentsData","setUpdatePostCommentsError","fetchSearchIcon","setSearchIconPending","length","setSearchIconData","Math","floor","random","setSearchIconError","fetchAddLocation","setAddLocationPending","setAddLocationData","backPath","setAddLocationError","withStyles","maxWidth","typography","fontWeightRegular","grey","boxShadow","shadows","emphasize","Chip","connect","store","appTheme","getThemePalette","getLanguage","authData","getAuthData","userPostsData","getUserPostsData","dialogConfirmData","getDialogConfirmData","dialogConfirmAction","getDialogConfirmAction","bindActionCreators","openDialogConfirm","setOpenDialogConfirm","resetDialogConfirm","setResetDialogConfirm","updatePost","props","card_id","classes","Styles","React","useState","anchorEl","setAnchorEl","dateOfDream","Date","find","item","getDate","getMonth","getFullYear","getHours","getMinutes","slice","popOpen","Boolean","popId","undefined","handleReadDream","handleChangePublic","title","ChangePublic","UsersCanRead","action","value","UsersCantRead","useEffect","defaultTags","map","tag","defaultTechnics","technic","content","rating","post_type","dream_date","is_public","tags","technics","Grid","xs","sm","md","style","Card","raised","className","CardContent","Typography","paragraph","container","direction","justify","alignItems","marginTop","LucidDream","RegularDream","noWrap","EditorState","createWithContent","convertFromRaw","parse","toString","getCurrentContent","getPlainText","CardActions","Button","size","color","onClick","buttons","Read","IconButton","Badge","badgeContent","e","currentTarget","console","log","Popover","open","onClose","anchorOrigin","vertical","horizontal","transformOrigin","key","Tooltip","disableFocusListener","disableTouchListener","Paper","Avatar","src","img_url","type","Fragment","defaultSettings","isInc","sortBy","haveLucid","haveRegular","userPostsPending","getUserPostsPending","isFabVisible","setIsFabVisible","tempViewSettings","setTempViewSettings","viewSettings","setViewSettings","handleShowFab","Dialog","aria-labelledby","aria-describedby","DialogTitle","Settings","DialogContent","dividers","align","Sort","FormControl","Select","labelId","onChange","event","prevState","target","MenuItem","Title","ToggleButtonGroup","exclusive","newAlignment","ToggleButton","transform","Divider","Filter","Checkbox","checked","DialogActions","Close","Reset","Breadcrumbs","separator","aria-label","StyledBreadcrumb","component","label","Main","icon","disabled","MyDreams","Container","sort","a","b","valA","valB","toUpperCase","Skeleton","Zoom","in","unmountOnExit","Fab","AddDream"],"mappings":"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","file":"static/js/16.21288765.chunk.js","sourcesContent":["import { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nexport default makeStyles(theme => ({\r\n    BigImg: {\r\n        [theme.breakpoints.up(\"xs\")]: {\r\n            height: 130,\r\n            width: 130\r\n        },\r\n        [theme.breakpoints.up(\"390\")]: {\r\n            height: 150,\r\n            width: 150\r\n        },\r\n        [theme.breakpoints.up(\"sm\")]: {\r\n            height: 190,\r\n            width: 190\r\n        },\r\n        [theme.breakpoints.up(\"md\")]: {\r\n            height: 230,\r\n            width: 230\r\n        }\r\n    },\r\n    MedImg: {\r\n        [theme.breakpoints.up(\"xs\")]: {\r\n            height: 90,\r\n            width: 90\r\n        },\r\n        [theme.breakpoints.up(\"390\")]: {\r\n            height: 110,\r\n            width: 110\r\n        },\r\n        [theme.breakpoints.up(\"sm\")]: {\r\n            height: 150,\r\n            width: 150\r\n        },\r\n        [theme.breakpoints.up(\"md\")]: {\r\n            height: 190,\r\n            width: 190\r\n        }\r\n    },\r\n    Border3: {\r\n        border: \"3px solid\",\r\n        borderRadius: \"0%\"\r\n    },\r\n    BackgroundImg: {\r\n        borderRadius: \"50%\",\r\n        backgroundPosition: \"center center\",\r\n        backgroundRepeat: \"no-repeat\",\r\n        backgroundSize: \"90% 90%\"\r\n    },\r\n    root: {\r\n        position: \"relative\",\r\n        flexGrow: 1\r\n    },\r\n    stickyTop: {\r\n        position: \"sticky\",\r\n        top: 0,\r\n        zIndex: 10000\r\n    },\r\n    paper: {\r\n        position: \"relative\",\r\n        [theme.breakpoints.up(\"xs\")]: {\r\n            marginLeft: \"15%\",\r\n            marginRight: \"15%\"\r\n        },\r\n        [theme.breakpoints.up(\"sm\")]: {\r\n            marginLeft: \"25%\",\r\n            marginRight: \"25%\"\r\n        },\r\n        [theme.breakpoints.up(\"md\")]: {\r\n            marginLeft: \"35%\",\r\n            marginRight: \"35%\"\r\n        }\r\n    },\r\n    input: {\r\n        width: \"100%\",\r\n        flex: 1\r\n    },\r\n    MenuButtons: {\r\n        minWidth: 300\r\n    },\r\n    MuiRteRead: {\r\n        backgroundColor: theme.palette.text.main,\r\n        padding: 10\r\n    },\r\n    skeletonCard: {\r\n        minHeight: 150,\r\n        borderRadius: 8\r\n    },\r\n    smallAvatar: {\r\n        width: theme.spacing(1),\r\n        height: theme.spacing(1),\r\n    },\r\n    largeAvatar: {\r\n        width: theme.spacing(7),\r\n        height: theme.spacing(7),\r\n    },\r\n    filterFab: {\r\n        position: \"fixed\",\r\n        bottom: theme.spacing(1),\r\n        right: theme.spacing(1)\r\n    },\r\n    addPostFab: {\r\n        position: \"fixed\",\r\n        bottom: theme.spacing(10),\r\n        right: theme.spacing(1)\r\n    },\r\n    flexSpaceBetween: {\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        justifyContent: \"space-between\"\r\n    },\r\n    margin1: {\r\n        margin: theme.spacing(1)\r\n    },\r\n    margin2: {\r\n        margin: theme.spacing(2)\r\n    },\r\n    padding1: {\r\n        padding: theme.spacing(1)\r\n    },\r\n    padding2: {\r\n        padding: theme.spacing(2)\r\n    },\r\n    fullWidth: {\r\n        width: \"100%\"\r\n    },\r\n    FadeIn: {\r\n        animation: `1s ease 0s normal forwards 1 $fadeIn`\r\n    },\r\n    FadeOut: {\r\n        animation: `1s ease 0s normal forwards 1 $fadeOut`\r\n    },\r\n    InvertIn: {\r\n        animation: `0.5s ease 0s normal forwards 1 $invertIn`\r\n    },\r\n    InvertOut: {\r\n        animation: `0.5s ease 0s normal forwards 1 $invertOut`\r\n    },\r\n    \"@keyframes fadeIn\": {\r\n        \"0%\": {\r\n            opacity: \"0\"\r\n        },\r\n        \"55%\": {\r\n            opacity: \"1\"\r\n        },\r\n        \"100%\": {\r\n            opacity: \"1\"\r\n        }\r\n    },\r\n    \"@keyframes fadeOut\": {\r\n        \"0%\": {\r\n            opacity: \"1\"\r\n        },\r\n        \"45%\": {\r\n            opacity: \"0\"\r\n        },\r\n        \"100%\": {\r\n            opacity: \"0\"\r\n        }\r\n    },\r\n    \"@keyframes invertIn\": {\r\n        \"0%\": {\r\n            filter: \"invert(0)\"\r\n        },\r\n        \"100%\": {\r\n            filter: \"invert(1)\"\r\n        }\r\n    },\r\n    \"@keyframes invertOut\": {\r\n        \"0%\": {\r\n            filter: \"invert(1)\"\r\n        },\r\n        \"100%\": {\r\n            filter: \"invert(0)\"\r\n        }\r\n    },\r\n}));","import {\r\n    setOpenSnackbar,\r\n    setUserPending, setUserData, resetUserData,\r\n    setTechnicsPending, setTechnicsData, setTechnicsError,\r\n    setTagsPending, setTagsData, setTagsError,\r\n    setUserPostsPending, setUserPostsData, setUserPostsError,\r\n    setAddPostPending, setAddPostData, setAddPostError,\r\n    setUpdatePostPending, setUpdatePostData, setUpdatePostError,\r\n    setDeletePostPending, setDeletePostData, setDeletePostError,\r\n    setPostCommentsPending, setPostCommentsData, setPostCommentsError,\r\n    setAddPostCommentsPending, setAddPostCommentsData, setAddPostCommentsError,\r\n    setUpdatePostCommentsPending, setUpdatePostCommentsData, setUpdatePostCommentsError,\r\n    setSearchIconPending, setSearchIconData, setSearchIconError,\r\n    setAddLocationPending, setAddLocationData, setAddLocationError\r\n} from \"../actions/actions\";\r\nimport { setToken } from \"../functions/auth\";\r\nimport history from \"../history\";\r\nimport historyPath from \"../historyPath\";\r\nimport dict from \"../dictionary\";\r\n\r\n//const path = \"http://192.168.1.32:8080\";\r\nconst path = \"https://ldserver.herokuapp.com\";\r\n\r\nexport const userSignIn = (data) => {\r\n    return dispatch => {\r\n        dispatch(setUserPending());\r\n        return fetch(path + \"/api/auth/signin\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(data)\r\n        })\r\n            .then(response => {\r\n                if (!response.ok) return Promise.reject(response);\r\n                else return Promise.resolve(response.json());\r\n            })\r\n            .then(result => {\r\n                const decode = setToken(result.token);\r\n                dispatch(setUserData(decode));\r\n                dispatch(setOpenSnackbar({ variant: \"success\", message: dict[data.language].texts.Wellcome }));\r\n                history.push(historyPath.MainPage);\r\n            })\r\n            .catch(error => {\r\n                dispatch(resetUserData());\r\n                error.json().then(err => {\r\n                    dispatch(setOpenSnackbar({ variant: \"error\", message: dict[data.language].errors[err.error] }));\r\n                });\r\n            });\r\n    }\r\n}\r\n\r\nexport const userSignUp = (data) => {\r\n    return dispatch => {\r\n        dispatch(setUserPending());\r\n        return fetch(path + \"/api/auth/signup\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(data)\r\n        })\r\n            .then(response => {\r\n                if (!response.ok) return Promise.reject(response);\r\n                else return Promise.resolve(response.json());\r\n            })\r\n            .then(result => {\r\n                const decode = setToken(result.token);\r\n                dispatch(setUserData(decode));\r\n                dispatch(setOpenSnackbar({ variant: \"success\", message: dict[data.language].texts.Wellcome }));\r\n                history.push(historyPath.MainPage);\r\n            })\r\n            .catch(error => {\r\n                dispatch(resetUserData());\r\n                error.json().then(err => {\r\n                    dispatch(setOpenSnackbar({ variant: \"error\", message: dict[data.language].errors[err.error] }));\r\n                });\r\n            });\r\n    }\r\n}\r\n\r\nexport const fetchTechnics = () => {\r\n    return dispatch => {\r\n        dispatch(setTechnicsPending());\r\n        return fetch(path + \"/api/technic/published\", {\r\n            method: \"GET\",\r\n            headers: ({\r\n                Accept: \"application/json\",\r\n                \"Content-Type\": \"application/json\",\r\n                \"token\": localStorage.token\r\n            }),\r\n            body: JSON.stringify()\r\n        })\r\n            .then(response => {\r\n                if (!response.ok) return Promise.reject(response);\r\n                else return Promise.resolve(response.json());\r\n            })\r\n            .then(result => {\r\n                dispatch(setTechnicsData(result));\r\n            })\r\n            .catch(error => {\r\n                dispatch(setTechnicsError());\r\n                error.json().then(err => {\r\n                    dispatch(setOpenSnackbar({ variant: \"error\", message: err.error }));\r\n                });\r\n            });\r\n    }\r\n}\r\n\r\nexport const fetchTags = () => {\r\n    return dispatch => {\r\n        dispatch(setTagsPending());\r\n        return fetch(path + \"/api/tag\", {\r\n            method: \"GET\",\r\n            headers: ({\r\n                Accept: \"application/json\",\r\n                \"Content-Type\": \"application/json\",\r\n                \"token\": localStorage.token\r\n            }),\r\n            body: JSON.stringify()\r\n        })\r\n            .then(response => {\r\n                if (!response.ok) return Promise.reject(response);\r\n                else return Promise.resolve(response.json());\r\n            })\r\n            .then(result => {\r\n                dispatch(setTagsData(result));\r\n            })\r\n            .catch(error => {\r\n                dispatch(setTagsError());\r\n                error.json().then(err => {\r\n                    dispatch(setOpenSnackbar({ variant: \"error\", message: err.error }));\r\n                });\r\n            });\r\n    }\r\n}\r\n\r\nexport const fetchUpdateTechnics = (data) => {\r\n    return dispatch => {\r\n        dispatch(setTechnicsPending());\r\n        return fetch(`${path}/api/technic/${data.id}`, {\r\n            method: \"PUT\",\r\n            headers: ({\r\n                \"Content-Type\": \"application/json\",\r\n                \"Accept\": \"application/json\",\r\n                \"token\": localStorage.token\r\n            }),\r\n            body: JSON.stringify(data.data)\r\n        })\r\n            .then(response => {\r\n                if (!response.ok) return Promise.reject(response);\r\n                else return Promise.resolve(response.json());\r\n            })\r\n            .then(result => {\r\n                dispatch(setOpenSnackbar({ variant: \"success\", message: result.result }));\r\n                dispatch(fetchTechnics());\r\n                history.push({\r\n                    pathname: historyPath.ReadTechnic,\r\n                    defaultData: {\r\n                        id: data.id\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch(setTechnicsError());\r\n                error.json().then(err => {\r\n                    dispatch(setOpenSnackbar({ variant: \"error\", message: dict[data.language].errors[err.error] }));\r\n                });\r\n            });\r\n    }\r\n}\r\n\r\nexport const fetchUserPosts = (data) => {\r\n    return dispatch => {\r\n        dispatch(setUserPostsPending());\r\n        return fetch(`${path}/api/post/user/${data.create_user}`, {\r\n            method: \"GET\",\r\n            headers: ({\r\n                Accept: \"application/json\",\r\n                \"Content-Type\": \"application/json\",\r\n                \"token\": localStorage.token\r\n            }),\r\n            body: JSON.stringify()\r\n        })\r\n            .then(response => {\r\n                if (!response.ok) return Promise.reject(response);\r\n                else return Promise.resolve(response.json());\r\n            })\r\n            .then(result => {\r\n                dispatch(setUserPostsData(result));\r\n            })\r\n            .catch(error => {\r\n                dispatch(setUserPostsError());\r\n                error.json().then(err => {\r\n                    dispatch(setOpenSnackbar({ variant: \"error\", message: dict[data.language].errors[err.error] }));\r\n                });\r\n            });\r\n    }\r\n}\r\n\r\nexport const fetchAddPost = (data) => {\r\n    return dispatch => {\r\n        dispatch(setAddPostPending());\r\n        return fetch(`${path}/api/post`, {\r\n            method: \"POST\",\r\n            headers: ({\r\n                Accept: \"application/json\",\r\n                \"Content-Type\": \"application/json\",\r\n                \"token\": localStorage.token\r\n            }),\r\n            body: JSON.stringify(data)\r\n        })\r\n            .then(response => {\r\n                if (!response.ok) return Promise.reject(response);\r\n                else return Promise.resolve(response.json());\r\n            })\r\n            .then(result => {\r\n                dispatch(setAddPostData(result));\r\n                history.push(historyPath.Dreams);\r\n            })\r\n            .catch(error => {\r\n                dispatch(setAddPostError());\r\n                error.json().then(err => {\r\n                    dispatch(setOpenSnackbar({ variant: \"error\", message: dict[data.language].errors[err.error] }));\r\n                });\r\n            });\r\n    }\r\n}\r\n\r\nexport const fetchUpdatePost = (data) => {\r\n    return dispatch => {\r\n        dispatch(setUpdatePostPending());\r\n        return fetch(`${path}/api/post/${data.id}`, {\r\n            method: \"PUT\",\r\n            headers: ({\r\n                Accept: \"application/json\",\r\n                \"Content-Type\": \"application/json\",\r\n                \"token\": localStorage.token\r\n            }),\r\n            body: JSON.stringify(data)\r\n        })\r\n            .then(response => {\r\n                if (!response.ok) return Promise.reject(response);\r\n                else return Promise.resolve(response.json());\r\n            })\r\n            .then(result => {\r\n                dispatch(setUpdatePostData(result));\r\n                dispatch(fetchUserPosts({ language: data.language, create_user: data.create_user }));\r\n                if (data.redirect !== false)\r\n                    history.push({\r\n                        pathname: historyPath.ReadDream,\r\n                        defaultData: {\r\n                            id: data.id\r\n                        }\r\n                    });\r\n            })\r\n            .catch(error => {\r\n                dispatch(setUpdatePostError());\r\n                error.json().then(err => {\r\n                    dispatch(setOpenSnackbar({ variant: \"error\", message: dict[data.language].errors[err.error] }));\r\n                });\r\n            });\r\n    }\r\n}\r\n\r\nexport const fetchDeletePost = (data) => {\r\n    return dispatch => {\r\n        dispatch(setDeletePostPending());\r\n        return fetch(`${path}/api/post/${data.id}`, {\r\n            method: \"DELETE\",\r\n            headers: ({\r\n                Accept: \"application/json\",\r\n                \"Content-Type\": \"application/json\",\r\n                \"token\": localStorage.token\r\n            }),\r\n            body: JSON.stringify()\r\n        })\r\n            .then(response => {\r\n                if (!response.ok) return Promise.reject(response);\r\n                else return Promise.resolve(response.json());\r\n            })\r\n            .then(result => {\r\n                dispatch(setDeletePostData(result));\r\n                dispatch(fetchUserPosts({ language: data.language, create_user: data.create_user }));\r\n                history.push(historyPath.Dreams);\r\n            })\r\n            .catch(error => {\r\n                dispatch(setDeletePostError());\r\n                error.json().then(err => {\r\n                    dispatch(setOpenSnackbar({ variant: \"error\", message: dict[data.language].errors[err.error] }));\r\n                });\r\n            });\r\n    }\r\n}\r\n\r\nexport const fetchPostComments = (data) => {\r\n    return dispatch => {\r\n        dispatch(setPostCommentsPending());\r\n        return fetch(`${path}/api/comment/${data.post_id}`, {\r\n            method: \"GET\",\r\n            headers: ({\r\n                Accept: \"application/json\",\r\n                \"Content-Type\": \"application/json\",\r\n                \"token\": localStorage.token\r\n            }),\r\n            body: JSON.stringify()\r\n        })\r\n            .then(response => {\r\n                if (!response.ok) return Promise.reject(response);\r\n                else return Promise.resolve(response.json());\r\n            })\r\n            .then(result => {\r\n                dispatch(setPostCommentsData(result));\r\n            })\r\n            .catch(error => {\r\n                dispatch(setPostCommentsError());\r\n                error.json().then(err => {\r\n                    dispatch(setOpenSnackbar({ variant: \"error\", message: dict[data.language].errors[err.error] }));\r\n                });\r\n            });\r\n    }\r\n}\r\n\r\nexport const fetchAddPostComment = (data) => {\r\n    return dispatch => {\r\n        dispatch(setAddPostCommentsPending());\r\n        return fetch(`${path}/api/comment`, {\r\n            method: \"POST\",\r\n            headers: ({\r\n                Accept: \"application/json\",\r\n                \"Content-Type\": \"application/json\",\r\n                \"token\": localStorage.token\r\n            }),\r\n            body: JSON.stringify(data)\r\n        })\r\n            .then(response => {\r\n                if (!response.ok) return Promise.reject(response);\r\n                else return Promise.resolve(response.json());\r\n            })\r\n            .then(result => {\r\n                dispatch(setAddPostCommentsData(result));\r\n                dispatch(fetchPostComments({ language: data.language, post_id: data.post_id }));\r\n            })\r\n            .catch(error => {\r\n                dispatch(setAddPostCommentsError());\r\n                error.json().then(err => {\r\n                    dispatch(setOpenSnackbar({ variant: \"error\", message: dict[data.language].errors[err.error] }));\r\n                });\r\n            });\r\n    }\r\n}\r\n\r\nexport const fetchUpdatePostComment = (data) => {\r\n    return dispatch => {\r\n        dispatch(setUpdatePostCommentsPending());\r\n        return fetch(`${path}/api/comment/${data.id}`, {\r\n            method: \"PUT\",\r\n            headers: ({\r\n                Accept: \"application/json\",\r\n                \"Content-Type\": \"application/json\",\r\n                \"token\": localStorage.token\r\n            }),\r\n            body: JSON.stringify(data)\r\n        })\r\n            .then(response => {\r\n                if (!response.ok) return Promise.reject(response);\r\n                else return Promise.resolve(response.json());\r\n            })\r\n            .then(result => {\r\n                dispatch(setUpdatePostCommentsData(result));\r\n                dispatch(fetchPostComments({ language: data.language, post_id: data.post_id }));\r\n            })\r\n            .catch(error => {\r\n                dispatch(setUpdatePostCommentsError());\r\n                error.json().then(err => {\r\n                    dispatch(setOpenSnackbar({ variant: \"error\", message: dict[data.language].errors[err.error] }));\r\n                });\r\n            });\r\n    }\r\n}\r\n\r\nexport const fetchSearchIcon = (data) => {\r\n    return dispatch => {\r\n        dispatch(setSearchIconPending());\r\n        return fetch(`${path}/geticons`, {\r\n            method: \"POST\",\r\n            headers: ({\r\n                Accept: \"application/json\",\r\n                \"Content-Type\": \"application/json\",\r\n                \"token\": localStorage.token\r\n            }),\r\n            body: JSON.stringify(data)\r\n        })\r\n            .then(response => {\r\n                if (!response.ok) return Promise.reject(response);\r\n                else return Promise.resolve(response.json());\r\n            })\r\n            .then(result => {\r\n                if (result.length > 0) dispatch(setSearchIconData(result));\r\n                else {\r\n                    dispatch(setOpenSnackbar({ variant: \"info\", message: dict[data.language].texts[`FindIcon${Math.floor(Math.random() * 5)}`] }));\r\n                    dispatch(fetchSearchIcon(data));\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch(setSearchIconError());\r\n                error.json().then(err => {\r\n                    dispatch(setOpenSnackbar({ variant: \"error\", message: dict[data.language].errors[err.error] }));\r\n                });\r\n            });\r\n    }\r\n}\r\n\r\nexport const fetchAddLocation = (data) => {\r\n    return dispatch => {\r\n        dispatch(setAddLocationPending());\r\n        return fetch(`${path}/api/tag`, {\r\n            method: \"POST\",\r\n            headers: ({\r\n                Accept: \"application/json\",\r\n                \"Content-Type\": \"application/json\",\r\n                \"token\": localStorage.token\r\n            }),\r\n            body: JSON.stringify(data)\r\n        })\r\n            .then(response => {\r\n                if (!response.ok) return Promise.reject(response);\r\n                else return Promise.resolve(response.json());\r\n            })\r\n            .then(result => {\r\n                dispatch(setAddLocationData(result));\r\n                history.push(data.backPath);\r\n            })\r\n            .catch(error => {\r\n                dispatch(setAddLocationError());\r\n                error.json().then(err => {\r\n                    dispatch(setOpenSnackbar({ variant: \"error\", message: dict[data.language].errors[err.error] }));\r\n                });\r\n            });\r\n    }\r\n}","import { emphasize, withStyles } from \"@material-ui/core/styles\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\n\r\nexport default withStyles((theme) => ({\r\n    root: {\r\n        [theme.breakpoints.up(\"xs\")]: {\r\n            maxWidth: 150\r\n        },\r\n        [theme.breakpoints.up(\"sm\")]: {\r\n            maxWidth: \"100%\"\r\n        },\r\n        userSelect: \"none\",\r\n        height: theme.spacing(3),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n        \"&:hover, &:focus\": {\r\n            backgroundColor: theme.palette.grey[500]\r\n        },\r\n        \"&:active\": {\r\n            boxShadow: theme.shadows[1],\r\n            backgroundColor: emphasize(theme.palette.grey[500], 0.12)\r\n        }\r\n    }\r\n}))(Chip);","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { EditorState, convertFromRaw } from \"draft-js\";\r\n\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Popover from \"@material-ui/core/Popover\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Badge from \"@material-ui/core/Badge\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Card from \"@material-ui/core/Card\";\r\n\r\nimport ChatBubbleOutlineIcon from \"@material-ui/icons/ChatBubbleOutline\";\r\nimport VisibilityOffIcon from \"@material-ui/icons/VisibilityOff\";\r\nimport VisibilityIcon from \"@material-ui/icons/Visibility\";\r\nimport ExploreIcon from \"@material-ui/icons/Explore\";\r\n\r\nimport history from \"../../history\";\r\nimport historyPath from \"../../historyPath\";\r\nimport Styles from \"../../styles\";\r\nimport dict from \"../../dictionary\";\r\n\r\nimport { setOpenDialogConfirm, setResetDialogConfirm } from \"../../actions/actions\";\r\nimport { fetchUpdatePost } from \"../../functions/fetch\";\r\nimport { getLanguage } from \"../../reducers/languageReducer\";\r\nimport { getAuthData } from \"../../reducers/authReducer\";\r\nimport { getUserPostsData } from \"../../reducers/userPostsReducer\";\r\nimport { getThemePalette } from \"../../reducers/appThemeReducer\";\r\nimport { getDialogConfirmData, getDialogConfirmAction } from \"../../reducers/dialogConfirmReducer\";\r\n\r\nfunction CardDream(props) {\r\n    const { appTheme, language, authData, userPostsData, card_id,\r\n        openDialogConfirm, resetDialogConfirm, dialogConfirmData, dialogConfirmAction,\r\n        updatePost } = props;\r\n    const classes = Styles();\r\n    const [anchorEl, setAnchorEl] = React.useState(null);\r\n    const dateOfDream = new Date(userPostsData.find(item => (item.id === card_id))[`dream_date`]).getDate() + \".\" + (new Date(userPostsData.find(item => (item.id === card_id))[`dream_date`]).getMonth() + 1) + \".\" + new Date(userPostsData.find(item => (item.id === card_id))[`dream_date`]).getFullYear() + \" \" + new Date(userPostsData.find(item => (item.id === card_id))[`dream_date`]).getHours() + \":\" + (\"0\" + new Date(userPostsData.find(item => (item.id === card_id))[`dream_date`]).getMinutes()).slice(-2);\r\n    const popOpen = Boolean(anchorEl);\r\n    const popId = popOpen ? 'simple-popover' : undefined;\r\n\r\n    const handleReadDream = () => {\r\n        history.push({\r\n            pathname: historyPath.ReadDream,\r\n            defaultData: {\r\n                id: card_id\r\n            }\r\n        });\r\n    };\r\n\r\n    const hadlePopTags = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClosePopTags = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    const handleChangePublic = () => {\r\n        openDialogConfirm(\r\n            userPostsData.find(item => (item.id === card_id))[`is_public`] === 0\r\n                ? {\r\n                    title: dict[language].texts.ChangePublic,\r\n                    message: dict[language].texts.UsersCanRead,\r\n                    action: \"change_public\",\r\n                    value: 1,\r\n                    id: card_id\r\n                }\r\n                : {\r\n                    title: dict[language].texts.ChangePublic,\r\n                    message: dict[language].texts.UsersCantRead,\r\n                    action: \"change_public\",\r\n                    value: 0,\r\n                    id: card_id\r\n                }\r\n        );\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        if (typeof dialogConfirmAction === \"boolean\" && dialogConfirmData.action === \"change_public\" && card_id === dialogConfirmData.id) {\r\n            if (dialogConfirmAction) {\r\n                let defaultTags = [];\r\n                userPostsData.find(item => (item.id === card_id))[`posts_tags`].map(item => defaultTags.push(item.tag));\r\n                let defaultTechnics = [];\r\n                userPostsData.find(item => (item.id === card_id))[`posts_technics`].map(item => defaultTechnics.push(item.technic));\r\n                updatePost({\r\n                    title: userPostsData.find(item => (item.id === card_id)).title,\r\n                    content: userPostsData.find(item => (item.id === card_id)).content,\r\n                    rating: userPostsData.find(item => (item.id === card_id)).rating,\r\n                    post_type: userPostsData.find(item => (item.id === card_id)).post_type,\r\n                    dream_date: userPostsData.find(item => (item.id === card_id)).dream_date,\r\n                    is_public: dialogConfirmData.value,\r\n                    tags: defaultTags,\r\n                    technics: defaultTechnics,\r\n                    language: language,\r\n                    id: dialogConfirmData.id,\r\n                    create_user: authData.id,\r\n                    redirect: false\r\n                });\r\n            }\r\n            resetDialogConfirm();\r\n        }\r\n    }, [card_id, dialogConfirmAction, resetDialogConfirm, dialogConfirmData, updatePost, language, authData, userPostsData]);\r\n\r\n    return (\r\n        <Grid item xs={12} sm={4} md={3} style={{ display: \"flex\" }}>\r\n            <Card raised className={`${classes.margin1} ${classes.flexSpaceBetween}`} style={{ width: \"100%\" }} >\r\n                <CardContent className={`${classes.flexSpaceBetween}`} style={{ height: \"100%\" }} >\r\n                    <Typography variant=\"h6\" paragraph>\r\n                        {userPostsData.find(item => (item.id === card_id))[`title`]}\r\n                    </Typography>\r\n                    <Grid\r\n                        container\r\n                        direction=\"row\"\r\n                        justify=\"space-around\"\r\n                        alignItems=\"center\"\r\n                        style={{ marginTop: \"auto\" }}\r\n                    >\r\n                        <Grid item>\r\n                            <Typography variant=\"body2\" paragraph>\r\n                                {dateOfDream}\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Typography variant=\"body2\" paragraph>\r\n                                {userPostsData.find(item => (item.id === card_id))[`post_type`] === 1\r\n                                    ? dict[language].texts.LucidDream\r\n                                    : dict[language].texts.RegularDream\r\n                                }\r\n                            </Typography>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Typography variant=\"body2\" noWrap>\r\n                        {EditorState.createWithContent(convertFromRaw(JSON.parse(userPostsData.find(item => (item.id === card_id))[`content`].toString()))).getCurrentContent().getPlainText(\"\")}\r\n                    </Typography>\r\n                </CardContent>\r\n                <CardActions>\r\n                    <Grid\r\n                        container\r\n                        direction=\"row\"\r\n                        justify=\"space-between\"\r\n                        alignItems=\"center\"\r\n                    >\r\n                        <Grid item xs={6}>\r\n                            <Grid\r\n                                container\r\n                                direction=\"row\"\r\n                                justify=\"flex-start\"\r\n                                alignItems=\"center\"\r\n                            >\r\n                                <Grid item>\r\n                                    <Button size=\"small\" variant=\"outlined\" color=\"primary\" onClick={handleReadDream}>\r\n                                        {dict[language].buttons.Read}\r\n                                    </Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                            <Grid container\r\n                                direction=\"row\"\r\n                                justify=\"space-around\"\r\n                                alignItems=\"center\"\r\n                            >\r\n                                <Grid item>\r\n                                    <IconButton size=\"small\" onClick={handleReadDream}>\r\n                                        <Badge badgeContent={userPostsData.find(item => (item.id === card_id))[`comm_count`]} color=\"primary\">\r\n                                            <ChatBubbleOutlineIcon />\r\n                                        </Badge>\r\n                                    </IconButton>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <IconButton size=\"small\" onClick={(e) => userPostsData.find(item => (item.id === card_id))[`posts_tags`].length > 0 ? hadlePopTags(e) : console.log(e)}>\r\n                                        <Badge badgeContent={userPostsData.find(item => (item.id === card_id))[`posts_tags`].length} color=\"primary\">\r\n                                            <ExploreIcon />\r\n                                        </Badge>\r\n                                    </IconButton>\r\n                                    {userPostsData.find(item => (item.id === card_id))[`posts_tags`].length > 0\r\n                                        ? <Popover\r\n                                            id={popId}\r\n                                            open={popOpen}\r\n                                            anchorEl={anchorEl}\r\n                                            onClose={handleClosePopTags}\r\n                                            anchorOrigin={{\r\n                                                vertical: 'bottom',\r\n                                                horizontal: 'center',\r\n                                            }}\r\n                                            transformOrigin={{\r\n                                                vertical: 'top',\r\n                                                horizontal: 'center',\r\n                                            }}\r\n                                        >\r\n                                            <Grid container\r\n                                                direction=\"row\"\r\n                                                justify=\"space-around\"\r\n                                                alignItems=\"center\"\r\n                                            >\r\n                                                {userPostsData.find(item => (item.id === card_id))[`posts_tags`].map((item, key) =>\r\n                                                    <Grid item key={key} className={`${classes.margin1}`}>\r\n                                                        <Tooltip disableFocusListener disableTouchListener title={item.tag[`name_${language}`]} >\r\n                                                            <Paper>\r\n                                                                <Avatar src={item.tag.img_url} style={appTheme.palette.type === 'dark' ? { filter: 'invert(1)' } : {}} />\r\n                                                            </Paper>\r\n                                                        </Tooltip>\r\n                                                    </Grid>\r\n                                                )}\r\n                                            </Grid>\r\n                                        </Popover>\r\n                                        : <React.Fragment />\r\n                                    }\r\n                                </Grid>\r\n                                <Grid item className={`${classes.flexSpaceBetween}`}>\r\n                                    {userPostsData.find(item => (item.id === card_id))[`is_public`]\r\n                                        ? <IconButton size=\"small\" onClick={handleChangePublic}>\r\n                                            <VisibilityIcon />\r\n                                        </IconButton>\r\n                                        : <IconButton size=\"small\" onClick={handleChangePublic}>\r\n                                            <VisibilityOffIcon />\r\n                                        </IconButton>\r\n                                    }\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </CardActions>\r\n            </Card>\r\n        </Grid >\r\n    );\r\n}\r\n\r\nCardDream.propTypes = {\r\n    appTheme: PropTypes.object.isRequired,\r\n    language: PropTypes.string.isRequired,\r\n    authData: PropTypes.object.isRequired,\r\n    userPostsData: PropTypes.oneOfType([PropTypes.array, PropTypes.object]).isRequired,\r\n    dialogConfirmData: PropTypes.object.isRequired,\r\n    openDialogConfirm: PropTypes.func.isRequired,\r\n    resetDialogConfirm: PropTypes.func.isRequired,\r\n    updatePost: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        appTheme: getThemePalette(store),\r\n        language: getLanguage(store),\r\n        authData: getAuthData(store),\r\n        userPostsData: getUserPostsData(store),\r\n        dialogConfirmData: getDialogConfirmData(store),\r\n        dialogConfirmAction: getDialogConfirmAction(store)\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => bindActionCreators({\r\n    openDialogConfirm: setOpenDialogConfirm,\r\n    resetDialogConfirm: setResetDialogConfirm,\r\n    updatePost: fetchUpdatePost,\r\n}, dispatch)\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(CardDream);","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport ToggleButtonGroup from \"@material-ui/lab/ToggleButtonGroup\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport ToggleButton from \"@material-ui/lab/ToggleButton\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport Breadcrumbs from \"@material-ui/core/Breadcrumbs\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Zoom from \"@material-ui/core/Zoom\";\r\nimport Fab from \"@material-ui/core/Fab\";\r\n\r\nimport Skeleton from \"@material-ui/lab/Skeleton\";\r\n\r\nimport FilterListIcon from \"@material-ui/icons/FilterList\";\r\nimport SortIcon from \"@material-ui/icons/Sort\";\r\nimport HomeIcon from \"@material-ui/icons/Home\";\r\nimport AddIcon from '@material-ui/icons/Add';\r\n\r\nimport history from \"../history\";\r\nimport historyPath from \"../historyPath\";\r\nimport Styles from \"../styles\";\r\nimport dict from \"../dictionary\";\r\n\r\nimport { fetchUserPosts } from \"../functions/fetch\";\r\nimport { getLanguage } from \"../reducers/languageReducer\";\r\nimport { getAuthData } from \"../reducers/authReducer\";\r\nimport { getUserPostsPending, getUserPostsData } from \"../reducers/userPostsReducer\";\r\n\r\nimport CardDream from \"./multiple/CardDream\";\r\nimport StyledBreadcrumb from \"./StyledBreadcrumb\";\r\n\r\nconst defaultSettings = {\r\n    isInc: false,\r\n    sortBy: \"date\",\r\n    haveLucid: true,\r\n    haveRegular: true\r\n};\r\n\r\nfunction Dreams(props) {\r\n    const { language, authData, fetchUserPosts, userPostsPending, userPostsData } = props;\r\n    const classes = Styles();\r\n    const [isFabVisible, setIsFabVisible] = React.useState(true);\r\n\r\n    const [tempViewSettings, setTempViewSettings] = React.useState(defaultSettings);\r\n\r\n    const [viewSettings, setViewSettings] = React.useState(defaultSettings);\r\n\r\n    React.useEffect(() => {\r\n        fetchUserPosts({ language: language, create_user: authData.id });\r\n    }, [fetchUserPosts, language, authData]);\r\n\r\n    const handleBack = () => {\r\n        history.push(historyPath.MainPage);\r\n    };\r\n\r\n    const handleAddPost = () => {\r\n        history.push(historyPath.AddDream);\r\n    };\r\n\r\n    const handleShowFab = () => {\r\n        setIsFabVisible(true);\r\n    };\r\n\r\n    const handleHideFab = () => {\r\n        setIsFabVisible(false);\r\n    };\r\n\r\n    const handleChangeSortBy = (event) => {\r\n        setTempViewSettings(prevState => ({\r\n            ...prevState,\r\n            sortBy: event.target.value\r\n        }));\r\n    };\r\n\r\n    const handleChangeIsInc = (event, newAlignment) => {\r\n        setTempViewSettings(prevState => ({\r\n            ...prevState,\r\n            isInc: newAlignment\r\n        }));\r\n    };\r\n\r\n    const handleChangeLucid = (event) => {\r\n        setTempViewSettings(prevState => ({\r\n            ...prevState,\r\n            haveLucid: event.target.checked\r\n        }));\r\n    };\r\n\r\n    const handleChangeRegular = (event) => {\r\n        setTempViewSettings(prevState => ({\r\n            ...prevState,\r\n            haveRegular: event.target.checked\r\n        }));\r\n    };\r\n\r\n    const hadleResetFilter = () => {\r\n        setTempViewSettings(defaultSettings);\r\n        setViewSettings(defaultSettings);\r\n        setIsFabVisible(true);\r\n    };\r\n\r\n    const hadleAcceptFilter = () => {\r\n        setViewSettings(tempViewSettings);\r\n        setIsFabVisible(true);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Dialog\r\n                open={!isFabVisible}\r\n                onClose={handleShowFab}\r\n                aria-labelledby=\"filter-dialog-title\"\r\n                aria-describedby=\"filter-dialog-description\"\r\n            >\r\n                <DialogTitle id=\"filter-dialog-title\">\r\n                    {dict[language].texts.Settings}\r\n                </DialogTitle>\r\n                <DialogContent dividers>\r\n                    <Grid container\r\n                        direction=\"column\"\r\n                        justify=\"center\"\r\n                        alignItems=\"stretch\"\r\n                    >\r\n                        <Grid item>\r\n                            <Typography paragraph align=\"center\">\r\n                                {dict[language].texts.Sort}\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Grid container\r\n                                direction=\"row\"\r\n                                justify=\"space-around\"\r\n                                alignItems=\"center\"\r\n                                spacing={1}\r\n                            >\r\n                                <Grid item>\r\n                                    <FormControl variant=\"outlined\" size=\"small\">\r\n                                        <Select\r\n                                            id=\"sort-by-select\"\r\n                                            labelId=\"sort-by-select-label\"\r\n                                            value={tempViewSettings.sortBy}\r\n                                            onChange={handleChangeSortBy}\r\n                                        >\r\n                                            <MenuItem value={\"date\"}>{dict[language].texts.Date}</MenuItem>\r\n                                            <MenuItem value={\"title\"}>{dict[language].texts.Title}</MenuItem>\r\n                                        </Select>\r\n                                    </FormControl>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <ToggleButtonGroup size=\"small\" value={tempViewSettings.isInc} exclusive onChange={handleChangeIsInc}>\r\n                                        <ToggleButton key={1} value={true}>\r\n                                            <SortIcon style={{ transform: \"rotate(-180deg) scale(-1, 1)\" }} />\r\n                                        </ToggleButton>\r\n                                        <ToggleButton key={2} value={false}>\r\n                                            <SortIcon />\r\n                                        </ToggleButton>\r\n                                    </ToggleButtonGroup>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Typography paragraph />\r\n                    <Divider />\r\n                    <Typography paragraph />\r\n                    <Grid container\r\n                        direction=\"column\"\r\n                        justify=\"center\"\r\n                        alignItems=\"stretch\"\r\n                    >\r\n                        <Grid item>\r\n                            <Typography paragraph align=\"center\">\r\n                                {dict[language].texts.Filter}\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Grid container\r\n                                direction=\"column\"\r\n                                justify=\"center\"\r\n                                alignItems=\"stretch\"\r\n                            >\r\n                                <Grid item>\r\n                                    <Grid container\r\n                                        direction=\"row\"\r\n                                        justify=\"space-around\"\r\n                                        alignItems=\"center\"\r\n                                    >\r\n                                        <Grid item xs={8}>\r\n                                            <Typography align=\"left\">\r\n                                                {dict[language].texts.LucidDream}\r\n                                            </Typography>\r\n                                        </Grid>\r\n                                        <Grid item>\r\n                                            <Checkbox\r\n                                                checked={tempViewSettings.haveLucid}\r\n                                                onChange={handleChangeLucid}\r\n                                                color=\"primary\"\r\n                                            />\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Grid container\r\n                                        direction=\"row\"\r\n                                        justify=\"space-around\"\r\n                                        alignItems=\"center\"\r\n                                    >\r\n                                        <Grid item xs={8}>\r\n                                            <Typography align=\"left\">\r\n                                                {dict[language].texts.RegularDream}\r\n                                            </Typography>\r\n                                        </Grid>\r\n                                        <Grid item>\r\n                                            <Checkbox\r\n                                                checked={tempViewSettings.haveRegular}\r\n                                                onChange={handleChangeRegular}\r\n                                                color=\"primary\"\r\n                                            />\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleShowFab} size=\"small\" color=\"primary\" variant=\"outlined\">\r\n                        {dict[language].buttons.Close}\r\n                    </Button>\r\n                    <Button onClick={hadleResetFilter} size=\"small\" color=\"primary\" variant=\"outlined\">\r\n                        {dict[language].buttons.Reset}\r\n                    </Button>\r\n                    <Button onClick={hadleAcceptFilter} size=\"small\" color=\"primary\" variant=\"outlined\">\r\n                        {dict[language].buttons.Accept}\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n            <Paper className={`${classes.padding1} ${classes.stickyTop}`} >\r\n                <Breadcrumbs separator=\"›\" aria-label=\"breadcrumb\">\r\n                    <StyledBreadcrumb component=\"a\" color=\"primary\" label={dict[language].buttons.Main} icon={<HomeIcon />} onClick={handleBack} />\r\n                    <StyledBreadcrumb component=\"a\" color=\"primary\" disabled={true} label={dict[language].buttons.MyDreams} />\r\n                </Breadcrumbs>\r\n            </Paper>\r\n            <Container className={`${classes.margin2}`}>\r\n                <Grid container alignItems=\"stretch\" justify=\"center\" spacing={1}>\r\n                    {userPostsData.length\r\n                        ? userPostsData.filter(item => item.post_type === 0 ? viewSettings.haveRegular ? item : null : item)\r\n                            .filter(item => item.post_type === 1 ? viewSettings.haveLucid ? item : null : item)\r\n                            .sort(function (a, b) {\r\n                                let valA;\r\n                                let valB;\r\n                                switch (viewSettings.sortBy) {\r\n                                    case \"date\":\r\n                                        valA = a.dream_date;\r\n                                        valB = b.dream_date;\r\n                                        break;\r\n                                    case \"title\":\r\n                                        valA = a.title.toUpperCase();\r\n                                        valB = b.title.toUpperCase();\r\n                                        break;\r\n                                    default:\r\n                                        break;\r\n                                }\r\n\r\n                                if (valA < valB) {\r\n                                    if (viewSettings.isInc) return -1;\r\n                                    return 1;\r\n                                }\r\n                                if (valA > valB) {\r\n                                    if (viewSettings.isInc) return 1;\r\n                                    return -1;\r\n                                }\r\n                                return 0;\r\n                            })\r\n                            .map((item, key) => <CardDream key={key} card_id={item.id} />)\r\n                        : userPostsPending\r\n                            ? <React.Fragment>\r\n                                <Grid item xs={12} sm={4} md={3}>\r\n                                    <Skeleton animation=\"wave\" variant=\"rect\" className={`${classes.skeletonCard} ${classes.margin1}`} />\r\n                                </Grid>\r\n                                <Grid item xs={12} sm={4} md={3}>\r\n                                    <Skeleton animation=\"wave\" variant=\"rect\" className={`${classes.skeletonCard} ${classes.margin1}`} />\r\n                                </Grid>\r\n                                <Grid item xs={12} sm={4} md={3}>\r\n                                    <Skeleton animation=\"wave\" variant=\"rect\" className={`${classes.skeletonCard} ${classes.margin1}`} />\r\n                                </Grid>\r\n                                <Grid item xs={12} sm={4} md={3}>\r\n                                    <Skeleton animation=\"wave\" variant=\"rect\" className={`${classes.skeletonCard} ${classes.margin1}`} />\r\n                                </Grid>\r\n                            </React.Fragment>\r\n                            : <React.Fragment />\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n            <Zoom in={isFabVisible} unmountOnExit >\r\n                <Fab aria-label=\"fab-filter\"\r\n                    className={`${classes.addPostFab}`}\r\n                    color=\"primary\"\r\n                    onClick={handleAddPost}\r\n                >\r\n                    <AddIcon />\r\n                </Fab>\r\n            </Zoom>\r\n            <Zoom in={isFabVisible} unmountOnExit >\r\n                <Fab aria-label=\"fab-filter\"\r\n                    className={`${classes.filterFab}`}\r\n                    color=\"primary\"\r\n                    onClick={handleHideFab}\r\n                >\r\n                    <FilterListIcon />\r\n                </Fab>\r\n            </Zoom>\r\n        </div >\r\n    );\r\n}\r\n\r\nDreams.propTypes = {\r\n    language: PropTypes.string.isRequired,\r\n    authData: PropTypes.object.isRequired,\r\n    userPostsPending: PropTypes.bool.isRequired,\r\n    userPostsData: PropTypes.oneOfType([PropTypes.array, PropTypes.object]).isRequired,\r\n    fetchUserPosts: PropTypes.func.isRequired\r\n};\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        language: getLanguage(store),\r\n        authData: getAuthData(store),\r\n        userPostsPending: getUserPostsPending(store),\r\n        userPostsData: getUserPostsData(store)\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => bindActionCreators({\r\n    fetchUserPosts: fetchUserPosts,\r\n}, dispatch)\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Dreams);"],"sourceRoot":""}