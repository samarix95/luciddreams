{"version":3,"sources":["img/map.png","img/sun.png","img/moon.png","img/astronaut.png","history.js","actions/types.js","dictionary/en.js","reducers/currLang.js","reducers/cloud.js","reducers/star.js","reducers/themeMode.js","reducers/authReducer.js","reducers/errorReducer.js","reducers/index.js","store.js","utils/setAuthToken.js","utils/CheckLoginTimeOut.js","actions/Actions.js","components/PrivateRoute.js","styles/Styles.js","components/Config.js","components/AddDream.jsx","components/muiltiple/DreamCard.jsx","components/ViewDreams.jsx","components/AddCDream.jsx","dictionary/ru.js","components/MainPage.jsx","components/Sign.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","createBrowserHistory","GET_ERRORS","SET_CURRENT_USER","SET_CLOUD","CLEAR_CLOUD","SET_STAR","CLEAR_STAR","SET_LANG","SET_THEME_MODE","words","current","buttons","signIn","signUp","dreamJoirnal","addDream","addCDream","techniques","adventures","close","about","cancel","add","texts","or","nickname","password","passwordAgain","sucessRegistration","hello","changleLanguage","success","title","content","tags","technics","rating","Dream","Cdream","NoDreams","errors","emailLenght","nicknameLenght","passwordLenght","password2Lenght","passwordsCompare","UserNotExist","EmailIsNotValid","IncorrectPassword","EmailIsBusy","PasswordLenght5Symbols","NotLogin","EmptyTitle","EmptyDream","initialState","currLang","EnDict","clouds","stars","palette","type","primary","main","secondary","error","isempty","require","isAuthenticated","user","loading","rootReducer","combineReducers","lang","state","action","currLangState","cloudState","starState","themeMode","auth","payload","middleware","thunk","store","createStore","applyMiddleware","setAuthToken","token","axios","defaults","headers","common","CheckTimeOut","localStorage","jwtToken","decoded","jwt_decode","dispatch","currentTime","Date","now","exp","setCurrLang","setTheme","connect","Component","component","rest","render","props","to","params","amountStars","amountClouds","size","min","max","giant","duration","variantIcon","CheckCircleIcon","warning","WarningIcon","ErrorIcon","info","InfoIcon","randomBetween","a","b","Math","random","useStyles","makeStyles","theme","pickerGridContainer","position","width","left","transform","marginBottom","ratingGridContainer","top","pickers","avatarRoot","display","flexWrap","overflow","smallAvatar","margin","spacing","height","smallChip","mainGridDreamsBodyItemContainer","boxSizing","maxHeight","borderRadius","mainGridDreamsBodyItemContainerPaper","opacity","mainGridDreamsBodyItem","mainGridDreamsContainer","card","maxWidth","expand","marginLeft","transition","transitions","create","shortest","expandOpen","textField","root","flexGrow","window","innerHeight","mainPage","aboutPage","AppDivDark","background","zIndex","AppDivLight","AppStarsDiv","AppCloudsDiv","AppStar","filter","animation","AppCloud","backgroundRepeat","backgroundImage","image","SkyDiv","MoonSrc","backgroundSize","MoonImg","SunSrc","SunImg","AstronautButton","AstronautDiv","AstronautImg","MapButton","MapDiv","MapImg","mainGridContainer","mainGridHeadItem","mainGridBodyItem","menuButtonContainerItem","menuButtonContainer","menuButtonGrid","menuDivButton","padding","menuButton","minWidth","actionButton","mainGridFooterItem","menuButtonContainerFooterLanguageButtons","aboutGridContainer","fullMinWidth","inputDiv","inputScrollableDiv","chips","chip","aboutGridItem","mainPaperGridBodyItem","paper","minMargin","VKLoginDiv","VKLoginButton","boxShadow","instance","baseURL","timeout","MenuProps","PaperProps","style","ITEM_HEIGHT","getStyles","name","selectedLocations","fontWeight","indexOf","typography","fontWeightSmall","fontWeightMedium","useStyles1","backgroundColor","dark","icon","fontSize","iconVariant","marginRight","message","alignItems","MySnackbarContentWrapper","classes","className","onClose","Icon","SnackbarContent","clsx","aria-describedby","id","Typography","align","variant","IconButton","key","aria-label","color","onClick","useTheme","history","muiTheme","createMuiTheme","Object","assign","overrides","MUIRichTextEditor","border","container","toolbar","justifyContent","minHeight","borderBottom","placeHolder","editor","editorContainer","React","useState","openSnackbar","setOpenSnackbar","snackbarMessage","setSnackbarMessage","isLoading","setIsLoading","titleText","setTitleText","selectedDate","setSelectedDate","contentText","setContentText","setselectedLocations","locations","setLocations","handleDateChange","date","handleCloseSnackbar","event","reason","useEffect","get","then","res","data","catch","err","console","log","CssBaseline","Grid","direction","justify","item","xs","Paper","TextField","required","label","onChange","e","target","value","utils","DateFnsUtils","locale","ruLocale","format","KeyboardButtonProps","ampm","controls","raw","convertToRaw","getCurrentContent","inlineToolbar","customControls","inlineStyle","FormControl","InputLabel","Select","labelId","multiple","input","Input","renderValue","selected","map","Chip","avatar","Avatar","alt","find","name_rus","name_eng","src","img_url","keys","MenuItem","LinearProgress","Button","push","havErr","length","blocks","text","convert","JSON","stringify","postData","dreamDate","toLocaleString","timeZone","create_user","post_type","post","savepost","Snackbar","open","autoHideDuration","DreamCard","post_title","create_date","post_content","expanded","setExpanded","handleExpandClick","marginTop","Card","CardHeader","subheader","CardContent","tag","Tooltip","disableFocusListener","disableTouchListener","technic","CardActions","disableSpacing","aria-expanded","Collapse","in","unmountOnExit","replace","readOnly","dreams","setDreams","zeroMinWidth","CircularProgress","Container","textAlign","selectedTechnics","setselectedTechnics","realisticsValue","setRealisticsValue","setTechnics","onBlur","Rating","newValue","TransitionDown","Slide","green","amber","SnackbarContentWrapper","setCurrLangAction","undefined","prevLanguage","setPrevLanguage","openLangSnakbar","setOpenLangSnakbar","openMessageSnackbar","setOpenMessageSnackbar","langSnakbarMessage","setLangSnakbarMessage","setTransition","infoSnackbar","setInfoSnackbar","changeLanguage","language","RuDict","handleCloseLangSnakbar","handleCloseMessageSnackbar","times_mode","anchorOrigin","vertical","horizontal","TransitionComponent","newLang","newUserData","newInfoSnackbar","ButtonBase","focusRipple","alert","newPaletteType","primaryColor","secondaryColor","Transition","forwardRef","ref","setUserState","State","email","loginData","setLoginData","password2","registData","setRegistData","emailErr","emailErrText","nicknameErr","nicknameErrText","passwordErr","passwordErrText","password2Err","password2ErrText","regFieldErrors","setRegFieldErrors","showPassword","setShowPassword","openLogin","setOpenLogin","openRegist","setOpenRegist","page","setPage","handleMouseDownPassword","preventDefault","singUp","isErr","newRegFieldErrors","newRegistData","click","response","newPages","setItem","passwordincorrect","Dialog","keepMounted","aria-labelledby","DialogTitle","DialogContent","newLoginData","changeAuthLogin","changeAuthPassword","InputProps","endAdornment","InputAdornment","tabIndex","edge","onMouseDown","button","disabled","path","mdiVk","DialogActions","helperText","changeRegistLogin","changeRegistNickname","changeRegistPassword","changeRegistPassword2","aboutPaper","removeItem","getHours","i","round","animationDuration","scale","speed","exact","Sign","MainPage","AddCDream","AddDream","ViewDreams","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.016f9c08.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/map.71ce46a8.png\";","module.exports = __webpack_public_path__ + \"static/media/sun.4f817e2f.png\";","module.exports = __webpack_public_path__ + \"static/media/moon.ca0fb531.png\";","module.exports = __webpack_public_path__ + \"static/media/astronaut.7219d35a.png\";","import { createBrowserHistory } from \"history\";\r\n\r\nexport default createBrowserHistory();","export const GET_ERRORS = \"GET_ERRORS\";\r\nexport const USER_LOADING = \"USER_LOADING\";\r\nexport const SET_CURRENT_USER = \"SET_CURRENT_USER\";\r\n\r\nexport const SET_CLOUD = 'SET_CLOUD'\r\nexport const CLEAR_CLOUD = 'CLEAR_CLOUD'\r\n\r\nexport const SET_STAR = 'SET_STAR'\r\nexport const CLEAR_STAR = 'CLEAR_STAR'\r\n\r\nexport const SET_LANG = 'SET_LANG'\r\nexport const SET_THEME_MODE = 'SET_THEME_MODE'","const words = {\r\n    current: 'En',\r\n    buttons : {\r\n        signIn: 'Sign in',\r\n        signUp: 'Sign up',\r\n        dreamJoirnal: 'Dream joirnal',\r\n        addDream: 'Add dream',\r\n        addCDream: 'Add C-dream',\r\n        techniques: 'Techniques',\r\n        adventures: 'Adventures',\r\n        close: 'Back',\r\n        about: 'About us',\r\n        cancel: 'Cancel',\r\n        add: 'Add',\r\n    },\r\n    texts: {\r\n        about: 'About us About us About us About us About us About us About us About us About us About us ',\r\n        or: 'OR',\r\n        nickname: 'Nickname',\r\n        password: 'Password',\r\n        passwordAgain: 'Password again',\r\n        cancel: 'Cancel',\r\n        sucessRegistration: 'You are sign up successful',\r\n        hello: 'Hello, ',\r\n        changleLanguage: 'Save change language to ',\r\n        success: 'Success',\r\n        title: 'Title',\r\n        content: \"What's a dream\",\r\n        tags: 'Locations',\r\n        technics: 'Technics',\r\n        rating: 'Realistics',\r\n        Dream: 'Regular dream',\r\n        Cdream: 'C-dream',\r\n        NoDreams: \"You don't have dreams\",\r\n    },\r\n    errors: {\r\n        emailLenght: 'Email must not be empty',\r\n        nicknameLenght: 'Nickname must not be empty',\r\n        passwordLenght: 'Password must not be empty',\r\n        password2Lenght: 'Password must not be empty',\r\n        passwordsCompare: 'Passwords not equal',\r\n        UserNotExist: 'Invalid email or password',\r\n        EmailIsNotValid: 'Invalid email',\r\n        IncorrectPassword: 'Invalid email or password',\r\n        EmailIsBusy: 'Email is busy',\r\n        PasswordLenght5Symbols: 'Minimum password length: 5 symbols',\r\n        NotLogin: 'You not loggin in',\r\n        EmptyTitle: 'Title must not be empty',\r\n        EmptyDream: 'Dream must not be empty',\r\n    },\r\n};\r\n\r\nexport default words;","import { SET_LANG } from '../actions/types';\r\nimport EnDict from '../dictionary/en';\r\n\r\nconst initialState = {\r\n    currLang: EnDict,\r\n}\r\n\r\nexport function currLangReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case SET_LANG:\r\n            return { ...state, currLang: action.currLangState }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}","import { SET_CLOUD, CLEAR_CLOUD } from '../actions/types';\r\n\r\nconst initialState = {\r\n\tclouds: [],\r\n}\r\n\r\nexport function cloudsReducer(state = initialState, action) {\r\n\tswitch (action.type) {\r\n\t\tcase SET_CLOUD:\r\n\t\t\treturn {\r\n\t\t\t\t...state, clouds: [...state.clouds, action.cloudState]\r\n\t\t\t}\r\n\t\tcase CLEAR_CLOUD:\r\n\t\t\treturn {\r\n\t\t\t\t...state, clouds: []\r\n\t\t\t}\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n}","import { SET_STAR, CLEAR_STAR } from '../actions/types';\r\n\r\nconst initialState = {\r\n\tstars: [],\r\n}\r\n\r\nexport function starsReducer(state = initialState, action) {\r\n\tswitch (action.type) {\r\n\t\tcase SET_STAR:\r\n\t\t\treturn {\r\n\t\t\t\t...state, stars: [...state.stars, action.starState]\r\n\t\t\t}\r\n\t\tcase CLEAR_STAR:\r\n\t\t\treturn {\r\n\t\t\t\t...state, stars: []\r\n\t\t\t}\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n}","import { SET_THEME_MODE } from '../actions/types';\r\n\r\nconst initialState = {\r\n    palette: {\r\n        type: \"dark\",\r\n        primary: { main: \"#f9a825\" },\r\n        secondary: { main: \"#f50057\" },\r\n        error: { main: \"#cc0000\" },\r\n    },\r\n}\r\n\r\nexport function themeReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case SET_THEME_MODE:\r\n            return { ...state, palette: action.palette }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}","import { SET_CURRENT_USER, USER_LOADING } from \"../actions/types\";\r\n\r\nconst isempty = require(\"is-empty\");\r\n\r\nconst initialState = {\r\n    isAuthenticated: false,\r\n    user: {},\r\n    loading: false\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case SET_CURRENT_USER:\r\n            return {\r\n                ...state,\r\n                isAuthenticated: !isempty(action.payload),\r\n                user: action.payload\r\n            };\r\n        case USER_LOADING:\r\n            return {\r\n                ...state,\r\n                loading: true\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}","import { GET_ERRORS } from \"../actions/types\";\r\nconst initialState = {};\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case GET_ERRORS:\r\n            return action.payload;\r\n        default:\r\n            return state;\r\n    }\r\n}","import { combineReducers } from 'redux';\r\nimport { currLangReducer } from './currLang';\r\nimport { cloudsReducer } from './cloud';\r\nimport { starsReducer } from './star';\r\nimport { themeReducer } from './themeMode';\r\nimport authReducer from './authReducer';\r\nimport errorReducer from './errorReducer';\r\n\r\nexport const rootReducer = combineReducers({\r\n    lang: currLangReducer,\r\n    clouds: cloudsReducer,\r\n    stars: starsReducer,\r\n    themeMode: themeReducer,\r\n    auth: authReducer,\r\n    errors: errorReducer,\r\n});","import { createStore, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { rootReducer } from './reducers';\r\n\r\nconst middleware = [thunk];\r\n\r\nexport const store = createStore(\r\n    rootReducer,\r\n    {},\r\n    applyMiddleware(...middleware)\r\n);","import axios from \"axios\";\r\n\r\nconst setAuthToken = token => {\r\n    if (token) {\r\n        // Apply authorization token to every request if logged in\r\n        axios.defaults.headers.common[\"Authorization\"] = token;\r\n    }\r\n    else {\r\n        // Delete auth header\r\n        delete axios.defaults.headers.common[\"Authorization\"];\r\n    }\r\n};\r\n\r\nexport default setAuthToken;","import jwt_decode from \"jwt-decode\";\r\n\r\nimport { store } from \"../store\";\r\nimport setAuthToken from \"../utils/setAuthToken\";\r\nimport { SET_CURRENT_USER } from \"../actions/types\"\r\n\r\nexport function CheckTimeOut() {\r\n    if (localStorage.jwtToken) {\r\n        const token = localStorage.jwtToken;\r\n        setAuthToken(token);\r\n        const decoded = jwt_decode(token);\r\n        store.dispatch({\r\n            type: SET_CURRENT_USER,\r\n            payload: decoded\r\n        });\r\n\r\n        const currentTime = Date.now() / 1000; // to get in milliseconds\r\n        if (decoded.exp < currentTime) {\r\n            return false;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }\r\n}","import { SET_LANG } from '../actions/types';\r\n\r\nexport function setCloud(state) {\r\n\treturn {\r\n\t\ttype: state.type,\r\n\t\tcloudState: state.cloudState,\r\n\t}\r\n}\r\nexport function setStar(state) {\r\n\treturn {\r\n\t\ttype: state.type,\r\n\t\tstarState: state.starState,\r\n\t}\r\n}\r\nexport function setCurrLang(state) {\r\n\treturn {\r\n\t\ttype: SET_LANG,\r\n\t\tcurrLangState: state,\r\n\t}\r\n}\r\nexport function setTheme(state) {\r\n\treturn {\r\n\t\ttype: state.type,\r\n\t\tpalette: state.palette,\r\n\t}\r\n}\r\nexport function setUserState(state) {\r\n\treturn {\r\n\t\ttype: state.type,\r\n\t\tpayload: state.payload\r\n\t}\r\n}","import React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst PrivateRoute = ({ component: Component, auth, ...rest }) => (\r\n    <Route\r\n        {...rest}\r\n        render={props =>\r\n            auth.isAuthenticated === true\r\n                ? <Component {...props} />\r\n                : <Redirect to=\"/\" />\r\n        }\r\n    />\r\n);\r\n\r\nPrivateRoute.propTypes = {\r\n    auth: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    auth: state.auth\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps\r\n)(PrivateRoute);","import { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\nimport WarningIcon from '@material-ui/icons/Warning';\r\nimport ErrorIcon from '@material-ui/icons/Error';\r\nimport InfoIcon from '@material-ui/icons/Info';\r\n\r\nimport MapImg from '../img/map.png';\r\nimport SunImg from '../img/sun.png';\r\nimport MoonImg from '../img/moon.png';\r\nimport AstronautImg from '../img/astronaut.png';\r\n\r\nexport const params = {\r\n    amountStars: 25,\r\n    amountClouds: 5,\r\n    size: {\r\n        min: 1,\r\n        max: 5,\r\n        giant: 9\r\n    },\r\n    duration: {\r\n        min: 5,\r\n        max: 25,\r\n    }\r\n}\r\n\r\nexport const variantIcon = {\r\n    success: CheckCircleIcon,\r\n    warning: WarningIcon,\r\n    error: ErrorIcon,\r\n    info: InfoIcon,\r\n};\r\n\r\nexport function randomBetween(a, b) {\r\n    return (a + (Math.random() * (b - a)));\r\n}\r\n\r\nexport const useStyles = makeStyles(theme => ({\r\n    pickerGridContainer: {\r\n        position: \"relative\",\r\n        width: \"85%\",\r\n        left: \"50%\",\r\n        transform: \"translateX(-50%)\",\r\n        marginBottom: \"5px\",\r\n    },\r\n    ratingGridContainer: {\r\n        position: \"relative\",\r\n        width: \"85%\",\r\n        top: \"65%\",\r\n        left: \"50%\",\r\n        transform: \"translate(-50%, -50%)\",\r\n    },\r\n    pickers: {\r\n        position: \"relative\",\r\n        width: \"90%\",\r\n        left: \"50%\",\r\n        transform: \"translateX(-50%)\",\r\n    },\r\n    avatarRoot: {\r\n        display: \"flex\",\r\n        flexWrap: \"wrap\",\r\n        overflow: 'auto',\r\n    },\r\n    smallAvatar: {\r\n        margin: theme.spacing(0.5),\r\n        width: theme.spacing(5),\r\n        height: theme.spacing(5),\r\n    },\r\n    smallChip: {\r\n        margin: theme.spacing(0.5),\r\n    },\r\n    mainGridDreamsBodyItemContainer: {\r\n        position: 'absolute',\r\n        boxSizing: 'border-box',\r\n        maxHeight: '90%',\r\n        overflow: 'auto',\r\n        borderRadius: '4px',\r\n    },\r\n    mainGridDreamsBodyItemContainerPaper: {\r\n        height: '100%',\r\n        opacity: 0.9,\r\n    },\r\n    mainGridDreamsBodyItem: {\r\n        overflow: 'hidden',\r\n    },\r\n    mainGridDreamsContainer: {\r\n        height: '100%',\r\n        position: 'relative',\r\n        width: '90%',\r\n        left: '50%',\r\n        transform: 'translateX(-50%)',\r\n    },\r\n    card: {\r\n        maxWidth: '100%',\r\n        height: '100%',\r\n    },\r\n    expand: {\r\n        transform: \"rotate(0deg)\",\r\n        marginLeft: \"auto\",\r\n        transition: theme.transitions.create(\"transform\", {\r\n            duration: theme.transitions.duration.shortest\r\n        })\r\n    },\r\n    expandOpen: {\r\n        transform: \"rotate(180deg)\"\r\n    },\r\n    textField: {\r\n        width: '100%',\r\n    },\r\n    margin: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    root: {\r\n        flexGrow: 1,\r\n        position: 'relative',\r\n        width: '100%',\r\n        height: window.innerHeight - 1,\r\n        overflow: 'hidden',\r\n    },\r\n    mainPage: {\r\n        top: 0,\r\n        left: 0,\r\n        position: 'absolute',\r\n        transition: 'all 0.3s linear',\r\n        width: '100%',\r\n        height: '100%',\r\n    },\r\n    aboutPage: {\r\n        position: 'absolute',\r\n        transition: 'all 0.3s linear',\r\n        top: '100%',\r\n        width: '100%',\r\n        height: '100%',\r\n    },\r\n    AppDivDark: {\r\n        position: 'fixed',\r\n        background: 'radial-gradient(ellipse at center, rgba(8, 25, 42, 1) 20%, rgba(1, 4, 6, 1) 100%)',\r\n        opacity: 1,\r\n        margin: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        zIndex: -3,\r\n    },\r\n    AppDivLight: {\r\n        position: 'absolute',\r\n        background: 'radial-gradient(ellipse at center, rgba(207, 225, 237, 1) 20%, rgba(127, 170, 202, 1) 100%)',\r\n        transition: 'opacity 0.5s linear',\r\n        margin: 0,\r\n        opacity: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        zIndex: -3,\r\n    },\r\n    AppStarsDiv: {\r\n        transition: 'opacity 0.5s linear',\r\n        opacity: 0,\r\n        position: 'absolute',\r\n        width: '100%',\r\n        height: '100%',\r\n        overflow: 'hidden',\r\n        zIndex: -2,\r\n    },\r\n    AppCloudsDiv: {\r\n        transition: 'opacity 0.5s linear',\r\n        opacity: 0,\r\n        position: 'absolute',\r\n        width: '100%',\r\n        height: '100%',\r\n        overflow: 'hidden',\r\n        zIndex: -2,\r\n    },\r\n    AppStar: {\r\n        borderRadius: '100%',\r\n        position: 'absolute',\r\n        background: 'radial-gradient(ellipse at center, rgba(177, 198, 219, 1) 2%, rgba(5, 63, 118, 1) 100%)',\r\n        filter: 'blur(1px)',\r\n        animation: '$shine infinite alternate',\r\n        zIndex: -1,\r\n    },\r\n    AppCloud: {\r\n        position: 'absolute',\r\n        backgroundRepeat: 'no-repeat',\r\n        backgroundImage: 'url(https://www.turbotobias.dk/wp-content/uploads/2019/03/White-cloud-type3.svg)',\r\n        animation: '$moveclouds infinite linear',\r\n        zIndex: -1,\r\n    },\r\n    image: {\r\n        position: 'relative',\r\n        left: '50%',\r\n        top: '25%',\r\n        transform: 'translate(-50%, -25%)',\r\n        width: '35vw !important',\r\n        height: '35vw',\r\n        borderRadius: '50%',\r\n    },\r\n    SkyDiv: {\r\n        position: 'absolute',\r\n        borderRadius: '50%',\r\n        top: 0,\r\n        left: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        overflow: 'hidden',\r\n    },\r\n    MoonSrc: {\r\n        backgroundSize: 'cover',\r\n        background: 'url(' + MoonImg + ')',\r\n        backgroundRepeat: 'no-repeat',\r\n        position: 'absolute',\r\n        top: 0,\r\n        left: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        transition: 'all 0.3s linear',\r\n    },\r\n    SunSrc: {\r\n        backgroundSize: 'cover',\r\n        background: 'url(' + SunImg + ')',\r\n        backgroundRepeat: 'no-repeat',\r\n        position: 'absolute',\r\n        top: 0,\r\n        left: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        transition: 'all 0.3s linear',\r\n    },\r\n    AstronautButton: {\r\n        position: 'relative',\r\n        left: '50%',\r\n        top: '50%',\r\n        transform: 'translate(-50%, -50%)',\r\n        width: '25vw !important',\r\n        height: '25vw',\r\n        borderRadius: '50%',\r\n    },\r\n    AstronautDiv: {\r\n        position: 'absolute',\r\n        borderRadius: '50%',\r\n        top: 0,\r\n        left: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        overflow: 'hidden',\r\n        animation: '$swinging 30s infinite linear',\r\n    },\r\n    AstronautImg: {\r\n        backgroundSize: 'cover',\r\n        background: 'url(' + AstronautImg + ')',\r\n        backgroundRepeat: 'no-repeat',\r\n        position: 'absolute',\r\n        top: 0,\r\n        left: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        transition: 'filter 0.5s linear',\r\n    },\r\n    MapButton: {\r\n        position: 'relative',\r\n        left: '50%',\r\n        top: '50%',\r\n        transform: 'translate(-50%, -50%)',\r\n        width: '25vw !important',\r\n        height: '25vw',\r\n        borderRadius: '10%',\r\n    },\r\n    MapDiv: {\r\n        position: 'absolute',\r\n        top: 0,\r\n        left: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        overflow: 'hidden',\r\n        animation: '$swinging 30s infinite linear',\r\n    },\r\n    MapImg: {\r\n        backgroundSize: 'cover',\r\n        background: 'url(' + MapImg + ')',\r\n        backgroundRepeat: 'no-repeat',\r\n        position: 'absolute',\r\n        top: 0,\r\n        left: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        transition: 'filter 0.5s linear',\r\n    },\r\n    mainGridContainer: {\r\n        height: '100%',\r\n    },\r\n    mainGridHeadItem: {\r\n        maxWidth: '100% !Important',\r\n    },\r\n    mainGridBodyItem: {\r\n        maxWidth: '100% !Important',\r\n    },\r\n    menuButtonContainerItem: {\r\n        maxWidth: '100% !Important',\r\n    },\r\n    menuButtonContainer: {\r\n        height: '100% !Important',\r\n    },\r\n    menuButtonGrid: {\r\n    },\r\n    menuDivButton: {\r\n        maxWidth: '100% !Important',\r\n        padding: '10px',\r\n    },\r\n    menuButton: {\r\n        minWidth: '55vw',\r\n        maxWidth: '55vw',\r\n    },\r\n    actionButton: {\r\n        minWidth: '40vw',\r\n        maxWidth: '40vw',\r\n    },\r\n    mainGridFooterItem: {\r\n        maxWidth: '100% !Important',\r\n    },\r\n    menuButtonContainerFooterLanguageButtons: {\r\n    },\r\n    aboutGridContainer: {\r\n        width: '100%',\r\n        height: '100%',\r\n        margin: 0,\r\n    },\r\n    fullMinWidth: {\r\n        minWidth: '100% !Important',\r\n        position: 'relative'\r\n    },\r\n    inputDiv: {\r\n        minWidth: '85% !Important',\r\n        maxWidth: '85% !Important',\r\n        position: 'absolute',\r\n        top: '50%',\r\n        left: '50%',\r\n        transform: 'translate(-50%, -50%)',\r\n        opacity: 1,\r\n    },\r\n    inputScrollableDiv: {\r\n        minWidth: '85% !Important',\r\n        maxWidth: '85% !Important',\r\n        height: '100%',\r\n        position: 'absolute',\r\n        top: '50%',\r\n        left: '50%',\r\n        transform: 'translate(-50%, -50%)',\r\n        opacity: 1,\r\n        //overflowY: 'auto',\r\n    },\r\n    chips: {\r\n        display: \"flex\",\r\n        flexWrap: \"wrap\"\r\n    },\r\n    chip: {\r\n        margin: 1\r\n    },\r\n    aboutGridItem: {\r\n        width: '100%',\r\n    },\r\n    mainPaperGridBodyItem: {\r\n        maxWidth: '100% !Important',\r\n    },\r\n    paper: {\r\n        height: '90%',\r\n        margin: theme.spacing(3, 2),\r\n        opacity: 0.9,\r\n    },\r\n    minMargin: {\r\n        margin: theme.spacing(0.5),\r\n    },\r\n    VKLoginDiv: {\r\n        position: 'absolute',\r\n        width: '15vw',\r\n        height: '15vw',\r\n    },\r\n    VKLoginButton: {\r\n        background: 'url(https://dressirovka70.ru/wp-content/uploads/2019/10/1200px-VK.com-logo.svg1_-1024x1024.png)',\r\n        boxShadow: '0px 3px 1px -2px rgba(0,0,0,0.2), 0px 2px 2px 0px rgba(0,0,0,0.14), 0px 1px 5px 0px rgba(0,0,0,0.12)',\r\n        backgroundSize: 'cover',\r\n        borderRadius: '25%',\r\n        width: '100%',\r\n        height: '100%',\r\n    },\r\n    \"@keyframes shine\": {\r\n        \"0%\": {\r\n            transform: 'scale(1)',\r\n            opacity: '1',\r\n        },\r\n        \"20%\": {\r\n            transform: 'scale(.9)',\r\n            opacity: '.8',\r\n        },\r\n        \"40%\": {\r\n            transform: 'scale(1)',\r\n            opacity: '.9',\r\n        },\r\n        \"60%\": {\r\n            transform: 'scale(.2)',\r\n            opacity: '.1',\r\n        },\r\n        \"80%\": {\r\n            transform: 'scale(.5)',\r\n            opacity: '.5',\r\n        },\r\n        \"100%\": {\r\n            transform: 'scale(.9)',\r\n            opacity: '.9',\r\n        },\r\n    },\r\n    \"@keyframes moveclouds\": {\r\n        '100%': {\r\n            left: '-100%',\r\n        },\r\n    },\r\n    \"@keyframes swinging\": {\r\n        '0%': {\r\n            transform: 'rotate(0)',\r\n        },\r\n        '10%': {\r\n            transform: 'rotate(12deg)',\r\n        },\r\n        '20%': {\r\n            transform: 'rotate(-10deg)',\r\n        },\r\n        '30%': {\r\n            transform: 'rotate(9deg)',\r\n        },\r\n        '40%': {\r\n            transform: 'rotate(-8deg)',\r\n        },\r\n        '50%': {\r\n            transform: 'rotate(7deg)',\r\n        },\r\n        '60%': {\r\n            transform: 'rotate(-6deg)',\r\n        },\r\n        '70%': {\r\n            transform: 'rotate(5deg)',\r\n        },\r\n        '80%': {\r\n            transform: 'rotate(-4deg)',\r\n        },\r\n        '90%': {\r\n            transform: 'rotate(3deg)',\r\n        },\r\n        '100%': {\r\n            transform: 'rotate(0)',\r\n        },\r\n    }\r\n}));","import axios from \"axios\";\r\n\r\n\r\nexport const instance = axios.create({\r\n    baseURL: 'https://ldserver.herokuapp.com',\r\n    timeout: 10000,\r\n    headers: { \"Access-Control-Allow-Origin\": \"*\" }\r\n});","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport ruLocale from \"date-fns/locale/ru\";\r\nimport enLocale from \"date-fns/locale/ru\";\r\n\r\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Typography from '@material-ui/core/Typography';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport Button from '@material-ui/core/Button';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Input from \"@material-ui/core/Input\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport MUIRichTextEditor from 'mui-rte';\r\nimport { convertToRaw } from 'draft-js';\r\n\r\nimport { MuiThemeProvider, createMuiTheme, useTheme, makeStyles } from '@material-ui/core/styles';\r\n\r\nimport { MuiPickersUtilsProvider, KeyboardTimePicker, KeyboardDatePicker } from '@material-ui/pickers';\r\n\r\nimport FormatColorFillIcon from '@material-ui/icons/FormatColorFill';\r\nimport ErrorIcon from '@material-ui/icons/Error';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nimport { useStyles } from '../styles/Styles';\r\n\r\nimport { instance } from './Config';\r\n\r\nconst ITEM_HEIGHT = 48;\r\nconst ITEM_PADDING_TOP = 8;\r\nconst MenuProps = {\r\n    PaperProps: {\r\n        style: {\r\n            maxHeight: ITEM_HEIGHT * 5 + ITEM_PADDING_TOP,\r\n            width: 250\r\n        }\r\n    }\r\n};\r\n\r\nfunction getStyles(name, selectedLocations, theme) {\r\n    return {\r\n        fontWeight:\r\n            selectedLocations.indexOf(name) === -1\r\n                ? theme.typography.fontWeightSmall\r\n                : theme.typography.fontWeightMedium\r\n    };\r\n}\r\n\r\nconst useStyles1 = makeStyles(theme => ({\r\n    error: {\r\n        backgroundColor: theme.palette.error.dark,\r\n    },\r\n    icon: {\r\n        fontSize: 20,\r\n    },\r\n    iconVariant: {\r\n        opacity: 0.9,\r\n        marginRight: theme.spacing(1),\r\n    },\r\n    message: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n    },\r\n}));\r\n\r\nfunction MySnackbarContentWrapper(props) {\r\n    const classes = useStyles1();\r\n    const { className, message, onClose } = props;\r\n    const Icon = ErrorIcon;\r\n\r\n    return (\r\n        <SnackbarContent\r\n            className={clsx(classes.error, className)}\r\n            aria-describedby=\"client-snackbar\"\r\n            message={\r\n                <span id=\"client-snackbar\" className={classes.message}>\r\n                    <Icon className={clsx(classes.icon, classes.iconVariant)} />\r\n                    <Typography className={classes.mainGridContainer}\r\n                        align='center'\r\n                        variant='body2'>\r\n                        {message}\r\n                    </Typography>\r\n                </span>\r\n            }\r\n            action={[\r\n                <IconButton key=\"close\" aria-label=\"close\" color=\"inherit\" onClick={onClose}>\r\n                    <CloseIcon className={classes.icon} />\r\n                </IconButton>,\r\n            ]}\r\n        />\r\n    );\r\n}\r\n\r\nfunction AddDream(props) {\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const { lang, themeMode, history, auth } = props;\r\n    const muiTheme = createMuiTheme(themeMode);\r\n\r\n    Object.assign(muiTheme, {\r\n        overrides: {\r\n            MUIRichTextEditor: {\r\n                root: {\r\n                    border: \"1px solid gray\",\r\n                    borderRadius: '4px',\r\n                    height: '100%',\r\n                    //Весь компонент\r\n                },\r\n                container: {\r\n                    height: '100%',\r\n                    margin: '0 !Important',\r\n                    //Без шапки\r\n                },\r\n                toolbar: {\r\n                    //textAlign: 'center',\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    justifyContent: 'center',\r\n                    height: '20%',\r\n                    minHeight: '48px',\r\n                    margin: '0 !Important',\r\n                    borderBottom: \"1px solid gray\",\r\n                    borderRadius: '4px',\r\n                },\r\n                placeHolder: {\r\n                },\r\n                editor: {\r\n                    height: '69%',\r\n                    width: '100%',\r\n                    position: 'relative',\r\n                    overflow: 'hidden',\r\n                    //Эдитор\r\n                },\r\n                editorContainer: {\r\n                    padding: \"18.5px 14px\",\r\n                    borderRadius: '4px',\r\n                    position: 'relative',\r\n                    boxSizing: 'border-box',\r\n                    maxHeight: '100%',\r\n                    overflow: 'auto',\r\n                    //Редактор\r\n                },\r\n            }\r\n        }\r\n    })\r\n    const [openSnackbar, setOpenSnackbar] = React.useState(false);\r\n    const [snackbarMessage, setSnackbarMessage] = React.useState('');\r\n    const [isLoading, setIsLoading] = React.useState(false);\r\n    const [titleText, setTitleText] = React.useState();\r\n    const [selectedDate, setSelectedDate] = React.useState(new Date());\r\n    const [contentText, setContentText] = React.useState();\r\n    const [selectedLocations, setselectedLocations] = React.useState([]);\r\n    const [locations, setLocations] = React.useState({});\r\n\r\n    const handleChangeLocations = (event) => {\r\n        setselectedLocations(event.target.value);\r\n    };\r\n\r\n    const changeTitle = (event) => {\r\n        setTitleText(event.target.value);\r\n    };\r\n\r\n    const handleDateChange = date => {\r\n        setSelectedDate(date);\r\n    };\r\n\r\n    const changeContent = (state) => {\r\n        const raw = convertToRaw(state.getCurrentContent())\r\n        setContentText(raw);\r\n    };\r\n\r\n    const savepost = () => {\r\n        setIsLoading(true);\r\n        let havErr = false;\r\n\r\n        if (typeof (titleText) !== 'undefined') {\r\n            if (titleText.length === 0) {\r\n                setSnackbarMessage(lang.currLang.errors.EmptyTitle);\r\n                havErr = true;\r\n            }\r\n        }\r\n        else {\r\n            setSnackbarMessage(lang.currLang.errors.EmptyTitle);\r\n            havErr = true;\r\n        }\r\n\r\n        if (typeof (contentText) !== 'undefined') {\r\n            if (contentText.blocks[0].text.length === 0) {\r\n                setSnackbarMessage(lang.currLang.errors.EmptyDream);\r\n                havErr = true;\r\n            }\r\n        }\r\n        else {\r\n            setSnackbarMessage(lang.currLang.errors.EmptyDream);\r\n            havErr = true;\r\n        }\r\n\r\n        if (havErr) {\r\n            setOpenSnackbar(true);\r\n            setIsLoading(false);\r\n        }\r\n        else {\r\n\r\n            let convert = JSON.stringify(contentText);\r\n\r\n            let postData = {\r\n                title: titleText,\r\n                dreamDate: selectedDate.toLocaleString(\"ru-RU\", {timeZone: 'Europe/London'}),\r\n                content: convert,\r\n                create_user: auth.user.id,\r\n                post_type: 0,\r\n                nickname: auth.user.nickname,\r\n                tags: selectedLocations,\r\n            }\r\n\r\n            instance\r\n                .post('/actions/users/createpost', postData)\r\n                .then(res => {\r\n                    setIsLoading(false);\r\n                    history.push(\"/luciddreams\")\r\n                })\r\n                .catch(err => {\r\n                    setIsLoading(false);\r\n                });\r\n        }\r\n    };\r\n\r\n    const handleCloseSnackbar = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setOpenSnackbar(false);\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        instance.get(\"/gettags\")\r\n            .then(res => {\r\n                setLocations(res.data);\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            });\r\n    }, []);\r\n\r\n    return (\r\n        <MuiThemeProvider theme={muiTheme}>\r\n            <CssBaseline />\r\n\r\n            <div className={classes.root} >\r\n\r\n                <Grid className={classes.mainGridContainer}\r\n                    container\r\n                    direction=\"column\"\r\n                    justify=\"center\"\r\n                    alignItems=\"stretch\" >\r\n\r\n                    <Grid item xs={11} className={classes.mainGridBodyItem}>\r\n\r\n                        <Paper className={classes.paper}>\r\n\r\n                            <Grid container\r\n                                className={classes.mainGridContainer}\r\n                                direction=\"column\"\r\n                                justify=\"center\"\r\n                                alignItems=\"center\"\r\n                            >\r\n\r\n                                <Grid item xs={2} className={classes.fullMinWidth} >\r\n                                    <TextField className={classes.inputDiv}\r\n                                        required\r\n                                        id=\"outlined-required\"\r\n                                        label={lang.currLang.texts.title}\r\n                                        variant=\"outlined\"\r\n                                        onChange={(e) => { changeTitle(e) }}\r\n                                    />\r\n                                </Grid>\r\n\r\n                                <Grid item xs={2} className={classes.fullMinWidth} >\r\n                                    <MuiPickersUtilsProvider utils={DateFnsUtils}\r\n                                        locale={lang.currLang.current === \"Ru\"\r\n                                            ? ruLocale\r\n                                            : enLocale}\r\n                                    >\r\n                                        <Grid className={classes.pickerGridContainer}\r\n                                            container\r\n                                            direction=\"row\"\r\n                                            justify=\"center\"\r\n                                            alignItems=\"stretch\" >\r\n                                            <Grid item xs={7} >\r\n                                                <KeyboardDatePicker className={classes.pickers}\r\n                                                    id=\"date-picker-dialog\"\r\n                                                    label=\"Date picker dialog\"\r\n                                                    format=\"dd.MM.yyyy\"\r\n                                                    value={selectedDate}\r\n                                                    onChange={handleDateChange}\r\n                                                    KeyboardButtonProps={{\r\n                                                        'aria-label': 'change date',\r\n                                                    }}\r\n                                                />\r\n                                            </Grid>\r\n                                            <Grid item xs={5} >\r\n                                                <KeyboardTimePicker className={classes.pickers}\r\n                                                    id=\"time-picker\"\r\n                                                    label=\"Time picker\"\r\n                                                    value={selectedDate}\r\n                                                    onChange={handleDateChange}\r\n                                                    ampm={false}\r\n                                                    KeyboardButtonProps={{\r\n                                                        'aria-label': 'change time',\r\n                                                    }}\r\n                                                />\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </MuiPickersUtilsProvider>\r\n                                </Grid>\r\n\r\n                                <Grid item xs={5} className={classes.fullMinWidth} >\r\n\r\n                                    <div className={classes.inputScrollableDiv}>\r\n\r\n                                        <MUIRichTextEditor\r\n                                            controls={[\r\n                                                \"bold\",\r\n                                                \"italic\",\r\n                                                \"underline\",\r\n                                                \"strikethrough\",\r\n                                            ]}\r\n                                            onChange={changeContent}\r\n                                            label={lang.currLang.texts.content}\r\n                                            inlineToolbar={false}\r\n                                            customControls={[\r\n                                                {\r\n                                                    name: \"colorfill\",\r\n                                                    icon: <FormatColorFillIcon />,\r\n                                                    type: \"inline\",\r\n                                                    inlineStyle: {\r\n                                                        backgroundColor: \"yellow\",\r\n                                                        color: \"black\"\r\n                                                    }\r\n                                                }\r\n                                            ]}\r\n                                        />\r\n\r\n                                    </div>\r\n\r\n                                </Grid>\r\n\r\n                                <Grid item xs={3} className={classes.fullMinWidth} >\r\n                                    <FormControl className={classes.inputDiv}>\r\n                                        <InputLabel id=\"location-chip-label\">\r\n                                            {lang.currLang.texts.tags}\r\n                                        </InputLabel>\r\n                                        <Select\r\n                                            labelId=\"location-chip-label\"\r\n                                            id=\"location-chip\"\r\n                                            multiple\r\n                                            value={selectedLocations}\r\n                                            onChange={handleChangeLocations}\r\n                                            input={\r\n                                                <Input id=\"select-location-chip\" />\r\n                                            }\r\n                                            renderValue={selected =>\r\n                                                (\r\n                                                    <div className={classes.chips}>\r\n                                                        {selected.map(value => (\r\n                                                            <Chip\r\n                                                                avatar={\r\n                                                                    lang.currLang.current === \"Ru\"\r\n                                                                        ? < Avatar\r\n                                                                            alt={locations.find(locations => locations.name_rus === value).name_eng}\r\n                                                                            src={locations.find(locations => locations.name_rus === value).img_url}\r\n                                                                        />\r\n                                                                        : < Avatar\r\n                                                                            alt={locations.find(locations => locations.name_eng === value).name_eng}\r\n                                                                            src={locations.find(locations => locations.name_eng === value).img_url}\r\n                                                                        />\r\n                                                                }\r\n                                                                key={value}\r\n                                                                label={value}\r\n                                                                className={classes.chip}\r\n                                                            />\r\n                                                        ))}\r\n                                                    </div>\r\n                                                )\r\n                                            }\r\n                                            MenuProps={MenuProps}\r\n                                        >\r\n                                            {Object.keys(locations)\r\n                                                .map(item =>\r\n                                                    <MenuItem\r\n                                                        key={locations[item].id + ' chip'}\r\n                                                        value={\r\n                                                            lang.currLang.current === \"Ru\"\r\n                                                                ? locations[item].name_rus\r\n                                                                : locations[item].name_eng\r\n                                                        }\r\n                                                        style={getStyles(locations[item].name_eng, selectedLocations, theme)}\r\n                                                    >\r\n                                                        {lang.currLang.current === \"Ru\"\r\n                                                            ? locations[item].name_rus\r\n                                                            : locations[item].name_eng}\r\n                                                    </MenuItem>\r\n                                                )}\r\n                                        </Select>\r\n                                    </FormControl>\r\n                                </Grid>\r\n\r\n                            </Grid>\r\n\r\n                        </Paper>\r\n\r\n                    </Grid>\r\n\r\n                    <Grid item xs={1} className={classes.mainGridBodyItem} >\r\n\r\n                        {isLoading\r\n                            ? <LinearProgress />\r\n                            : <Grid\r\n                                container\r\n                                direction=\"row\"\r\n                                justify=\"space-evenly\"\r\n                                alignItems=\"center\"\r\n                            >\r\n\r\n                                <Grid item>\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        color=\"secondary\"\r\n                                        className={classes.actionButton}\r\n                                        onClick={() => { history.push(\"/luciddreams\") }}\r\n                                    >\r\n                                        {lang.currLang.buttons.close}\r\n                                    </Button>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        color=\"primary\"\r\n                                        className={classes.actionButton}\r\n                                        onClick={() => savepost()}\r\n                                    >\r\n                                        {lang.currLang.buttons.add}\r\n                                    </Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                        }\r\n                    </Grid>\r\n                </Grid>\r\n\r\n            </div>\r\n\r\n            <Snackbar\r\n                open={openSnackbar}\r\n                onClose={handleCloseSnackbar}\r\n                autoHideDuration={3000}>\r\n                <MySnackbarContentWrapper\r\n                    className={classes.margin}\r\n                    onClose={handleCloseSnackbar}\r\n                    variant='error'\r\n                    message={snackbarMessage}\r\n                />\r\n            </Snackbar>\r\n\r\n        </MuiThemeProvider >\r\n    );\r\n};\r\n\r\nAddDream.propTypes = {\r\n    themeMode: PropTypes.object.isRequired,\r\n    lang: PropTypes.object.isRequired,\r\n    auth: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        themeMode: store.themeMode,\r\n        lang: store.lang,\r\n        auth: store.auth,\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(AddDream);","import React from 'react';\r\nimport clsx from \"clsx\";\r\nimport MUIRichTextEditor from 'mui-rte';\r\n\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport CardHeader from \"@material-ui/core/CardHeader\";\r\nimport Collapse from \"@material-ui/core/Collapse\";\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Card from \"@material-ui/core/Card\";\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Chip from '@material-ui/core/Chip';\r\n\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\r\n\r\nimport { useStyles } from '../../styles/Styles';\r\n\r\nexport default function DreamCard(props) {\r\n    const classes = useStyles();\r\n    const { post_title, create_date, post_content, post_type, tags, technics } = props.item;\r\n    const { lang } = props;\r\n    const [expanded, setExpanded] = React.useState(false);\r\n\r\n    const handleExpandClick = () => {\r\n        setExpanded(!expanded);\r\n    };\r\n\r\n    return (\r\n        <Grid item xs={12}\r\n            style={{\r\n                marginTop: '10px',\r\n                marginBottom: '10px',\r\n                width: '100%',\r\n                height: 'auto',\r\n                borderRadius: '4px',\r\n            }}>\r\n            <Card className={classes.card}>\r\n                <CardHeader\r\n                    action={\r\n                        <IconButton aria-label=\"settings\">\r\n                            <MoreVertIcon />\r\n                        </IconButton>\r\n                    }\r\n                    title={post_title}\r\n                    subheader={create_date}\r\n                />\r\n                <CardContent>\r\n                    <Chip variant=\"outlined\"\r\n                        label={post_type === 0\r\n                            ? lang.currLang.texts.Dream\r\n                            : lang.currLang.texts.Cdream\r\n                        } />\r\n\r\n                    <div className={classes.avatarRoot}>\r\n                        {tags.map((tag, key) =>\r\n                            tag[0]\r\n                                ? <Tooltip key={key}\r\n                                    disableFocusListener\r\n                                    disableTouchListener\r\n                                    title={\r\n                                        lang.currLang.current === \"Ru\"\r\n                                            ? tag[1]\r\n                                            : tag[2]\r\n                                    }\r\n                                >\r\n                                    <Avatar className={classes.smallAvatar}\r\n                                        alt=\"Remy Sharp\"\r\n                                        src={tag[3]}\r\n                                    />\r\n                                </Tooltip>\r\n                                : ''\r\n                        )}\r\n                    </div>\r\n\r\n                    <div className={classes.avatarRoot}>\r\n                        {technics.map((technic, key) =>\r\n                            technic[0]\r\n                                ? <Chip className={classes.smallChip}\r\n                                    key={key}\r\n                                    label={lang.currLang.current === \"Ru\"\r\n                                        ? technic[1]\r\n                                        : technic[2]}\r\n                                />\r\n                                : ''\r\n                        )}\r\n                    </div>\r\n                </CardContent>\r\n                <CardActions disableSpacing>\r\n                    <IconButton\r\n                        className={clsx(classes.expand, {\r\n                            [classes.expandOpen]: expanded\r\n                        })}\r\n                        onClick={handleExpandClick}\r\n                        aria-expanded={expanded}\r\n                        aria-label=\"show more\"\r\n                    >\r\n                        <ExpandMoreIcon />\r\n                    </IconButton>\r\n                </CardActions>\r\n                <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\r\n                    <CardContent>\r\n                        <div\r\n                            style={{\r\n                                backgroundColor: '#8080801f',\r\n                                borderRadius: '4px',\r\n                                padding: '4px',\r\n                            }}\r\n                        >\r\n                            <MUIRichTextEditor\r\n                                value={post_content.replace(/(:\"\\w+)(\")(\")/g, '$1\\\\$2$3')}\r\n                                readOnly={true}\r\n                                toolbar={false}\r\n                            />\r\n                        </div>\r\n                    </CardContent>\r\n                    <CardActions disableSpacing>\r\n                        <IconButton\r\n                            className={clsx(classes.expand, {\r\n                                [classes.expandOpen]: expanded\r\n                            })}\r\n                            onClick={handleExpandClick}\r\n                            aria-expanded={expanded}\r\n                            aria-label=\"show more\"\r\n                        >\r\n                            <ExpandMoreIcon />\r\n                        </IconButton>\r\n                    </CardActions>\r\n                </Collapse>\r\n            </Card>\r\n        </Grid>\r\n    );\r\n}","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Button from '@material-ui/core/Button';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\n\r\nimport DreamCard from './muiltiple/DreamCard';\r\nimport { useStyles } from '../styles/Styles';\r\nimport { instance } from './Config';\r\n\r\nfunction ViewDreams(props) {\r\n    const { lang, themeMode, history, auth } = props;\r\n    const muiTheme = createMuiTheme(themeMode);\r\n    const classes = useStyles();\r\n    const [isLoading, setIsLoading] = React.useState(true);\r\n    const [dreams, setDreams] = React.useState([]);\r\n\r\n    React.useEffect(() => {\r\n        setIsLoading(true);\r\n        instance.post(\"/actions/users/getuserposts\", { id: auth.user.id })\r\n            .then(res => {\r\n                setDreams(res.data);\r\n                setIsLoading(false);\r\n            })\r\n            .catch(err => {\r\n                setIsLoading(false);\r\n            });\r\n    }, [auth.user.id]);\r\n\r\n    return (\r\n        <MuiThemeProvider theme={muiTheme}>\r\n            <CssBaseline />\r\n            \r\n            <div className={classes.root}>\r\n                <Grid className={classes.mainGridContainer}\r\n                    container\r\n                    direction=\"column\"\r\n                    justify=\"center\"\r\n                    alignItems=\"stretch\" >\r\n                    <Grid item xs={11} zeroMinWidth className={classes.mainGridDreamsBodyItem}>\r\n                        {isLoading\r\n                            ? <CircularProgress />\r\n                            : <Container className={classes.mainGridDreamsBodyItemContainer}>\r\n                                <Paper className={classes.mainGridDreamsBodyItemContainerPaper}>\r\n                                    {dreams.length !== 0\r\n                                        ? <Grid className={classes.mainGridDreamsContainer}\r\n                                            container\r\n                                            direction=\"column\"\r\n                                            justify=\"center\"\r\n                                            alignItems=\"stretch\"\r\n                                        >\r\n                                            {dreams.map((item, key) => (\r\n                                                <DreamCard\r\n                                                    item={item}\r\n                                                    key={key}\r\n                                                    lang={lang}\r\n                                                />\r\n                                            ))}\r\n                                        </Grid>\r\n                                        :\r\n                                        <div>\r\n                                            <div\r\n                                                style={{\r\n                                                    position: \"relative\",\r\n                                                    left: \"50%\",\r\n                                                    transform: \"translateX(-50%)\",\r\n                                                    width: 200,\r\n                                                    height: 100,\r\n                                                }}\r\n                                            >\r\n                                            </div>\r\n                                            <div\r\n                                                style={{\r\n                                                    position: \"relative\",\r\n                                                    left: \"50%\",\r\n                                                    transform: \"translateX(-50%)\",\r\n                                                    width: 200,\r\n                                                    height: 200,\r\n                                                    background: \"url('https://static.thenounproject.com/png/603669-200.png') no-repeat center\",\r\n                                                }}>\r\n                                            </div>\r\n                                            <div\r\n                                                style={{\r\n                                                    position: \"relative\",\r\n                                                    left: \"50%\",\r\n                                                    transform: \"translateX(-50%)\",\r\n                                                    width: 200,\r\n                                                    height: 100,\r\n                                                    textAlign: \"center\",\r\n                                                }}\r\n                                            >\r\n                                                <Typography>\r\n                                                    {lang.currLang.texts.NoDreams}\r\n                                                </Typography>\r\n                                            </div>\r\n                                        </div>\r\n                                    }\r\n                                </Paper>\r\n                            </Container>\r\n                        }\r\n                    </Grid>\r\n                    <Grid item xs={1} zeroMinWidth className={classes.mainGridBodyItem}>\r\n                        <Grid\r\n                            container\r\n                            direction=\"row\"\r\n                            justify=\"space-evenly\"\r\n                            alignItems=\"center\"\r\n                            spacing={1}\r\n                        >\r\n                            <Grid item xs={6} align=\"center\">\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    color=\"secondary\"\r\n                                    className={classes.actionButton}\r\n                                    onClick={() => { history.push(\"/luciddreams\") }}\r\n                                >\r\n                                    {lang.currLang.buttons.close}\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid item xs={6} />\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </MuiThemeProvider >\r\n    );\r\n\r\n}\r\n\r\nViewDreams.propTypes = {\r\n    themeMode: PropTypes.object.isRequired,\r\n    lang: PropTypes.object.isRequired,\r\n    auth: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        themeMode: store.themeMode,\r\n        lang: store.lang,\r\n        auth: store.auth,\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(ViewDreams);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport ruLocale from \"date-fns/locale/ru\";\r\nimport enLocale from \"date-fns/locale/ru\";\r\n\r\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Typography from '@material-ui/core/Typography';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport Button from '@material-ui/core/Button';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Input from \"@material-ui/core/Input\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport MUIRichTextEditor from 'mui-rte';\r\nimport { convertToRaw } from 'draft-js';\r\n\r\nimport Rating from \"@material-ui/lab/Rating\";\r\n\r\nimport { MuiThemeProvider, createMuiTheme, useTheme, makeStyles } from '@material-ui/core/styles';\r\n\r\nimport { MuiPickersUtilsProvider, KeyboardTimePicker, KeyboardDatePicker } from '@material-ui/pickers';\r\n\r\nimport FormatColorFillIcon from '@material-ui/icons/FormatColorFill';\r\nimport ErrorIcon from '@material-ui/icons/Error';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nimport { useStyles } from '../styles/Styles';\r\n\r\nimport { instance } from './Config';\r\n\r\nconst ITEM_HEIGHT = 48;\r\nconst ITEM_PADDING_TOP = 8;\r\nconst MenuProps = {\r\n    PaperProps: {\r\n        style: {\r\n            maxHeight: ITEM_HEIGHT * 5 + ITEM_PADDING_TOP,\r\n            width: 250\r\n        }\r\n    }\r\n};\r\n\r\nfunction getStyles(name, selectedLocations, theme) {\r\n    return {\r\n        fontWeight:\r\n            selectedLocations.indexOf(name) === -1\r\n                ? theme.typography.fontWeightSmall\r\n                : theme.typography.fontWeightMedium\r\n    };\r\n}\r\n\r\nconst useStyles1 = makeStyles(theme => ({\r\n    error: {\r\n        backgroundColor: theme.palette.error.dark,\r\n    },\r\n    icon: {\r\n        fontSize: 20,\r\n    },\r\n    iconVariant: {\r\n        opacity: 0.9,\r\n        marginRight: theme.spacing(1),\r\n    },\r\n    message: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n    },\r\n}));\r\n\r\nfunction MySnackbarContentWrapper(props) {\r\n    const classes = useStyles1();\r\n    const { className, message, onClose } = props;\r\n    const Icon = ErrorIcon;\r\n\r\n    return (\r\n        <SnackbarContent\r\n            className={clsx(classes.error, className)}\r\n            aria-describedby=\"client-snackbar\"\r\n            message={\r\n                <span id=\"client-snackbar\" className={classes.message}>\r\n                    <Icon className={clsx(classes.icon, classes.iconVariant)} />\r\n                    <Typography className={classes.mainGridContainer}\r\n                        align='center'\r\n                        variant='body2'>\r\n                        {message}\r\n                    </Typography>\r\n                </span>\r\n            }\r\n            action={[\r\n                <IconButton key=\"close\" aria-label=\"close\" color=\"inherit\" onClick={onClose}>\r\n                    <CloseIcon className={classes.icon} />\r\n                </IconButton>,\r\n            ]}\r\n        />\r\n    );\r\n}\r\n\r\nfunction AddCDream(props) {\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const { lang, themeMode, history, auth } = props;\r\n    const muiTheme = createMuiTheme(themeMode);\r\n    Object.assign(muiTheme, {\r\n        overrides: {\r\n            MUIRichTextEditor: {\r\n                root: {\r\n                    border: \"1px solid gray\",\r\n                    borderRadius: '4px',\r\n                    height: '100%',\r\n                    //Весь компонент\r\n                },\r\n                container: {\r\n                    height: '100%',\r\n                    margin: '0 !Important',\r\n                    //Без шапки\r\n                },\r\n                toolbar: {\r\n                    //textAlign: 'center',\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    justifyContent: 'center',\r\n                    height: '20%',\r\n                    minHeight: '48px',\r\n                    margin: '0 !Important',\r\n                    borderBottom: \"1px solid gray\",\r\n                    borderRadius: '4px',\r\n                },\r\n                placeHolder: {\r\n                },\r\n                editor: {\r\n                    height: '69%',\r\n                    width: '100%',\r\n                    position: 'relative',\r\n                    overflow: 'hidden',\r\n                    //Эдитор\r\n                },\r\n                editorContainer: {\r\n                    padding: \"18.5px 14px\",\r\n                    borderRadius: '4px',\r\n                    position: 'relative',\r\n                    boxSizing: 'border-box',\r\n                    maxHeight: '100%',\r\n                    overflow: 'auto',\r\n                    //Редактор\r\n                },\r\n            }\r\n        }\r\n    })\r\n    const [openSnackbar, setOpenSnackbar] = React.useState(false);\r\n    const [snackbarMessage, setSnackbarMessage] = React.useState('');\r\n    const [isLoading, setIsLoading] = React.useState(false);\r\n    const [titleText, setTitleText] = React.useState();\r\n    const [selectedDate, setSelectedDate] = React.useState(new Date());\r\n    const [contentText, setContentText] = React.useState();\r\n    const [selectedLocations, setselectedLocations] = React.useState([]);\r\n    const [selectedTechnics, setselectedTechnics] = React.useState([]);\r\n    const [realisticsValue, setRealisticsValue] = React.useState(1);\r\n    const [locations, setLocations] = React.useState({});\r\n    const [technics, setTechnics] = React.useState({});\r\n\r\n    const handleChangeRealistics = (event, newValue) => {\r\n        setRealisticsValue(newValue);\r\n    };\r\n    const handleChangeLocations = (event) => {\r\n        setselectedLocations(event.target.value);\r\n    };\r\n    const handleChangeTechnics = (event) => {\r\n        setselectedTechnics(event.target.value);\r\n    };\r\n    const blurTitle = (event) => {\r\n        setTitleText(event.target.value);\r\n    };\r\n    const handleDateChange = date => {\r\n        setSelectedDate(date);\r\n    };\r\n    const changeContent = (state) => {\r\n        const raw = convertToRaw(state.getCurrentContent())\r\n        setContentText(raw);\r\n    };\r\n    const savepost = () => {\r\n        setIsLoading(true);\r\n        let havErr = false;\r\n        if (typeof (titleText) !== 'undefined') {\r\n            if (titleText.length === 0) {\r\n                setSnackbarMessage(lang.currLang.errors.EmptyTitle);\r\n                havErr = true;\r\n            }\r\n        }\r\n        else {\r\n            setSnackbarMessage(lang.currLang.errors.EmptyTitle);\r\n            havErr = true;\r\n        }\r\n        if (typeof (contentText) !== 'undefined') {\r\n            if (contentText.blocks[0].text.length === 0) {\r\n                setSnackbarMessage(lang.currLang.errors.EmptyDream);\r\n                havErr = true;\r\n            }\r\n        }\r\n        else {\r\n            setSnackbarMessage(lang.currLang.errors.EmptyDream);\r\n            havErr = true;\r\n        }\r\n        if (havErr) {\r\n            setOpenSnackbar(true);\r\n            setIsLoading(false);\r\n        }\r\n        else {\r\n            let convert = JSON.stringify(contentText);\r\n            \r\n            let postData = {\r\n                title: titleText,\r\n                dreamDate: selectedDate.toLocaleString(\"ru-RU\", {timeZone: 'Europe/London'}),\r\n                content: convert,\r\n                create_user: auth.user.id,\r\n                rating: realisticsValue,\r\n                post_type: 1,\r\n                nickname: auth.user.nickname,\r\n                tags: selectedLocations,\r\n                technics: selectedTechnics\r\n            }\r\n\r\n            instance\r\n                .post('/actions/users/createpost', postData)\r\n                .then(res => {\r\n                    setIsLoading(false);\r\n                    history.push(\"/luciddreams\")\r\n                })\r\n                .catch(err => {\r\n                    setIsLoading(false);\r\n                });\r\n        }\r\n    };\r\n\r\n    const handleCloseSnackbar = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setOpenSnackbar(false);\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        instance.get(\"/gettags\")\r\n            .then(res => {\r\n                setLocations(res.data);\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            });\r\n        instance.get(\"/gettechnics\")\r\n            .then(res => {\r\n                setTechnics(res.data);\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            });\r\n    }, [auth.user.id]);\r\n\r\n    return (\r\n        <MuiThemeProvider theme={muiTheme}>\r\n            <CssBaseline />\r\n            <div className={classes.root} >\r\n                <Grid className={classes.mainGridContainer}\r\n                    container\r\n                    direction=\"column\"\r\n                    justify=\"center\"\r\n                    alignItems=\"stretch\" >\r\n                    <Grid item xs={11} className={classes.mainGridBodyItem}>\r\n                        <Paper className={classes.paper}>\r\n                            <Grid className={classes.mainGridContainer}\r\n                                style={{ flexWrap: 'nowrap' }}\r\n                                container\r\n                                direction=\"column\"\r\n                                justify=\"center\"\r\n                                alignItems=\"center\"\r\n                            >\r\n                                <Grid item xs={2} className={classes.fullMinWidth} >\r\n                                    <TextField className={classes.inputDiv}\r\n                                        required\r\n                                        id=\"outlined-required\"\r\n                                        label={lang.currLang.texts.title}\r\n                                        variant=\"outlined\"\r\n                                        //onChange={(e) => { changeTitle(e) }}\r\n                                        onBlur={(e) => { blurTitle(e) }}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={1} className={classes.fullMinWidth} >\r\n                                    <MuiPickersUtilsProvider utils={DateFnsUtils}\r\n                                        locale={lang.currLang.current === \"Ru\"\r\n                                            ? ruLocale\r\n                                            : enLocale}\r\n                                    >\r\n                                        <Grid className={classes.pickerGridContainer}\r\n                                            container\r\n                                            direction=\"row\"\r\n                                            justify=\"center\"\r\n                                            alignItems=\"stretch\" >\r\n                                            <Grid item xs={7} >\r\n                                                <KeyboardDatePicker className={classes.pickers}\r\n                                                    id=\"date-picker-dialog\"\r\n                                                    label=\"Date picker dialog\"\r\n                                                    format=\"dd.MM.yyyy\"\r\n                                                    value={selectedDate}\r\n                                                    onChange={handleDateChange}\r\n                                                    KeyboardButtonProps={{\r\n                                                        'aria-label': 'change date',\r\n                                                    }}\r\n                                                />\r\n                                            </Grid>\r\n                                            <Grid item xs={5} >\r\n                                                <KeyboardTimePicker className={classes.pickers}\r\n                                                    id=\"time-picker\"\r\n                                                    label=\"Time picker\"\r\n                                                    value={selectedDate}\r\n                                                    onChange={handleDateChange}\r\n                                                    ampm={false}\r\n                                                    KeyboardButtonProps={{\r\n                                                        'aria-label': 'change time',\r\n                                                    }}\r\n                                                />\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </MuiPickersUtilsProvider>\r\n                                </Grid>\r\n                                <Grid item xs={4} className={classes.fullMinWidth} >\r\n                                    <div className={classes.inputScrollableDiv}>\r\n                                        <MUIRichTextEditor\r\n                                            controls={[\r\n                                                \"bold\",\r\n                                                \"italic\",\r\n                                                \"underline\",\r\n                                                \"strikethrough\",\r\n                                                //\"highlight\",\r\n                                                \"colorfill\",\r\n                                            ]}\r\n                                            onChange={changeContent}\r\n                                            label={lang.currLang.texts.content}\r\n                                            inlineToolbar={false}\r\n                                            customControls={[\r\n                                                {\r\n                                                    name: \"colorfill\",\r\n                                                    icon: <FormatColorFillIcon />,\r\n                                                    type: \"inline\",\r\n                                                    inlineStyle: {\r\n                                                        backgroundColor: \"yellow\",\r\n                                                        color: \"black\"\r\n                                                    }\r\n                                                }\r\n                                            ]}\r\n                                        />\r\n                                    </div>\r\n                                </Grid>\r\n                                <Grid item xs={2} className={classes.fullMinWidth} >\r\n                                    <FormControl className={classes.inputDiv}>\r\n                                        <InputLabel id=\"technics-chip-label\">\r\n                                            {lang.currLang.texts.technics}\r\n                                        </InputLabel>\r\n                                        <Select\r\n                                            labelId=\"technics-chip-label\"\r\n                                            id=\"technics-chip\"\r\n                                            multiple\r\n                                            value={selectedTechnics}\r\n                                            onChange={handleChangeTechnics}\r\n                                            input={\r\n                                                <Input id=\"select-technics-chip\" />\r\n                                            }\r\n                                            renderValue={selected =>\r\n                                                (\r\n                                                    <div className={classes.chips}>\r\n                                                        {selected.map(value => (\r\n                                                            <Chip\r\n                                                                size=\"small\"\r\n                                                                key={value}\r\n                                                                label={value}\r\n                                                                className={classes.chip}\r\n                                                            />\r\n                                                        ))}\r\n                                                    </div>\r\n                                                )\r\n                                            }\r\n                                            MenuProps={MenuProps}\r\n                                        >\r\n                                            {Object.keys(technics)\r\n                                                .map(item =>\r\n                                                    <MenuItem\r\n                                                        key={technics[item].id + ' chip'}\r\n                                                        value={\r\n                                                            lang.currLang.current === \"Ru\"\r\n                                                                ? technics[item].name_rus\r\n                                                                : technics[item].name_eng\r\n                                                        }\r\n                                                        style={getStyles(technics[item].name_eng, selectedTechnics, theme)}\r\n                                                    >\r\n                                                        {lang.currLang.current === \"Ru\"\r\n                                                            ? technics[item].name_rus\r\n                                                            : technics[item].name_eng}\r\n                                                    </MenuItem>\r\n                                                )}\r\n                                        </Select>\r\n                                    </FormControl>\r\n                                </Grid>\r\n                                <Grid item xs={2} className={classes.fullMinWidth} >\r\n                                    <FormControl className={classes.inputDiv}>\r\n                                        <InputLabel id=\"location-chip-label\">\r\n                                            {lang.currLang.texts.tags}\r\n                                        </InputLabel>\r\n                                        <Select\r\n                                            labelId=\"location-chip-label\"\r\n                                            id=\"location-chip\"\r\n                                            multiple\r\n                                            value={selectedLocations}\r\n                                            onChange={handleChangeLocations}\r\n                                            input={\r\n                                                <Input id=\"select-location-chip\" />\r\n                                            }\r\n                                            renderValue={selected =>\r\n                                                (\r\n                                                    <div className={classes.chips}>\r\n                                                        {selected.map(value => (\r\n                                                            <Chip\r\n                                                                size=\"small\"\r\n                                                                avatar={\r\n                                                                    lang.currLang.current === \"Ru\"\r\n                                                                        ? < Avatar\r\n                                                                            alt={locations.find(locations => locations.name_rus === value).name_eng}\r\n                                                                            src={locations.find(locations => locations.name_rus === value).img_url}\r\n                                                                        />\r\n                                                                        : < Avatar\r\n                                                                            alt={locations.find(locations => locations.name_eng === value).name_eng}\r\n                                                                            src={locations.find(locations => locations.name_eng === value).img_url}\r\n                                                                        />\r\n                                                                }\r\n                                                                key={value}\r\n                                                                label={value}\r\n                                                                className={classes.chip}\r\n                                                            />\r\n                                                        ))}\r\n                                                    </div>\r\n                                                )\r\n                                            }\r\n                                            MenuProps={MenuProps}\r\n                                        >\r\n                                            {Object.keys(locations)\r\n                                                .map(item =>\r\n                                                    <MenuItem\r\n                                                        key={locations[item].id + ' chip'}\r\n                                                        value={\r\n                                                            lang.currLang.current === \"Ru\"\r\n                                                                ? locations[item].name_rus\r\n                                                                : locations[item].name_eng\r\n                                                        }\r\n                                                        style={getStyles(locations[item].name_eng, selectedLocations, theme)}\r\n                                                    >\r\n                                                        {lang.currLang.current === \"Ru\"\r\n                                                            ? locations[item].name_rus\r\n                                                            : locations[item].name_eng}\r\n                                                    </MenuItem>\r\n                                                )}\r\n                                        </Select>\r\n                                    </FormControl>\r\n                                </Grid>\r\n                                <Grid item xs={1} className={classes.fullMinWidth} >\r\n                                    <Grid className={classes.ratingGridContainer}\r\n                                        container\r\n                                        direction=\"row\"\r\n                                        justify=\"center\"\r\n                                        alignItems=\"stretch\" >\r\n                                        <Grid item xs={6}>\r\n                                            <Typography component=\"legend\">\r\n                                                {lang.currLang.texts.rating} :\r\n                                            </Typography>\r\n                                        </Grid>\r\n                                        <Grid item xs={6}>\r\n                                            <Rating name=\"simple-controlled\"\r\n                                                value={realisticsValue}\r\n                                                onChange={handleChangeRealistics}\r\n                                            />\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Paper>\r\n                    </Grid>\r\n                    <Grid item xs={1} className={classes.mainGridBodyItem} >\r\n                        {isLoading\r\n                            ? <LinearProgress />\r\n                            : <Grid\r\n                                container\r\n                                direction=\"row\"\r\n                                justify=\"space-evenly\"\r\n                                alignItems=\"center\"\r\n                            >\r\n                                <Grid item>\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        color=\"secondary\"\r\n                                        className={classes.actionButton}\r\n                                        onClick={() => { history.push(\"/luciddreams\") }}\r\n                                    >\r\n                                        {lang.currLang.buttons.close}\r\n                                    </Button>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        color=\"primary\"\r\n                                        className={classes.actionButton}\r\n                                        onClick={() => savepost()}\r\n                                    >\r\n                                        {lang.currLang.buttons.add}\r\n                                    </Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                        }\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n            <Snackbar\r\n                open={openSnackbar}\r\n                onClose={handleCloseSnackbar}\r\n                autoHideDuration={3000}>\r\n                <MySnackbarContentWrapper\r\n                    className={classes.margin}\r\n                    onClose={handleCloseSnackbar}\r\n                    variant='error'\r\n                    message={snackbarMessage}\r\n                />\r\n            </Snackbar>\r\n        </MuiThemeProvider >\r\n    );\r\n};\r\n\r\nAddCDream.propTypes = {\r\n    themeMode: PropTypes.object.isRequired,\r\n    lang: PropTypes.object.isRequired,\r\n    auth: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        themeMode: store.themeMode,\r\n        lang: store.lang,\r\n        auth: store.auth,\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddCDream);","const words = {\r\n    current: 'Ru',\r\n    buttons: {\r\n        signIn: 'Вход',\r\n        signUp: 'Регистрация',\r\n        dreamJoirnal: 'Дневник снов',\r\n        addDream: 'Добавить сон',\r\n        addCDream: 'Добавить осознанный сон',\r\n        techniques: 'Техники',\r\n        adventures: 'Приключения',\r\n        close: 'Назад',\r\n        about: 'О нас',\r\n        cancel: 'Отмена',\r\n        add: 'Добавить',\r\n    },\r\n    texts: {\r\n        about: 'О нас О нас О нас О нас О нас О нас О нас О нас О нас О нас О нас О нас',\r\n        or: 'ИЛИ',\r\n        nickname: 'Отображаемое имя',\r\n        password: 'Пароль',\r\n        passwordAgain: 'Поторите пароль',\r\n        cancel: 'Отмена',\r\n        sucessRegistration: 'Вы успешно зарегистрировались',\r\n        hello: 'Привет, ',\r\n        changleLanguage: 'Сохранить изменение языка на ',\r\n        success: 'Успешно',\r\n        title: 'Заголовок',\r\n        content: 'Что снилось',\r\n        tags: 'Места',\r\n        technics: 'Техники',\r\n        rating: 'Реалистичность',\r\n        Dream: 'Обычный сон',\r\n        Cdream: 'Осознанный сон',\r\n        NoDreams: \"У вас нет снов\",\r\n    },\r\n    errors: {\r\n        emailLenght: 'Введите email',\r\n        nicknameLenght: 'Введите отображаемое имя',\r\n        passwordLenght: 'Введите пароль',\r\n        password2Lenght: 'Введите пароль',\r\n        passwordsCompare: 'Пароли не совпадают',\r\n        UserNotExist: 'Неверный email или пароль',\r\n        EmailIsNotValid: 'Введен некорректный email',\r\n        IncorrectPassword: 'Неверный email или пароль',\r\n        EmailIsBusy: 'Email занят',\r\n        PasswordLenght5Symbols: 'Минимальная длина пароля: 5 символов',\r\n        NotLogin: 'Вы не авторизированы',\r\n        EmptyTitle: 'Пустой заголовок',\r\n        EmptyDream: 'Пустое поле сна',\r\n    },\r\n};\r\n\r\nexport default words;","import React, { useEffect } from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\n\r\nimport SnackbarContent from \"@material-ui/core/SnackbarContent\";\r\nimport ButtonBase from '@material-ui/core/ButtonBase';\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport Button from '@material-ui/core/Button';\r\nimport Slide from \"@material-ui/core/Slide\";\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport { SET_THEME_MODE } from \"../actions/types\";\r\n\r\nimport { setCurrLang, setTheme } from '../actions/Actions';\r\nimport { useStyles, variantIcon } from '../styles/Styles';\r\nimport { instance } from './Config';\r\nimport { CheckTimeOut } from '../utils/CheckLoginTimeOut';\r\n\r\nimport { MuiThemeProvider, createMuiTheme, makeStyles } from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\n\r\nimport { amber, green } from '@material-ui/core/colors';\r\n\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\n\r\nimport RuDict from '../dictionary/ru';\r\nimport EnDict from '../dictionary/en';\r\n\r\nfunction TransitionDown(props) {\r\n    return <Slide {...props} direction=\"down\" />;\r\n}\r\n\r\nconst useStyles1 = makeStyles(theme => ({\r\n    success: {\r\n        backgroundColor: green[600],\r\n    },\r\n    error: {\r\n        backgroundColor: theme.palette.error.dark,\r\n    },\r\n    info: {\r\n        backgroundColor: theme.palette.primary.main,\r\n    },\r\n    warning: {\r\n        backgroundColor: amber[700],\r\n    },\r\n    icon: {\r\n        fontSize: 20,\r\n    },\r\n    iconVariant: {\r\n        opacity: 0.9,\r\n        marginRight: theme.spacing(1),\r\n    },\r\n    message: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n    },\r\n}));\r\n\r\nfunction SnackbarContentWrapper(props) {\r\n    const classes = useStyles1();\r\n    const { className, message, onClose, variant } = props;\r\n    const Icon = variantIcon[variant];\r\n\r\n    return (\r\n        <SnackbarContent\r\n            className={clsx(classes[variant], className)}\r\n            aria-describedby=\"message-snackbar\"\r\n            message={\r\n                <span id=\"message-snackbar\" className={classes.message}>\r\n                    <Icon className={clsx(classes.icon, classes.iconVariant)} />\r\n                    <Typography className={classes.mainGridContainer}\r\n                        align='center'\r\n                        variant='body2'>\r\n                        {message}\r\n                    </Typography>\r\n                </span>\r\n            }\r\n            action={[\r\n                <IconButton key=\"close\" aria-label=\"close\" color=\"inherit\" onClick={onClose}>\r\n                    <CloseIcon className={classes.icon} />\r\n                </IconButton>,\r\n            ]}\r\n        />\r\n    );\r\n}\r\n\r\nfunction MainPage(props) {\r\n    const classes = useStyles();\r\n    const { lang, themeMode, auth } = props.store;\r\n    const muiTheme = createMuiTheme(themeMode);\r\n    const { setCurrLangAction, setTheme, history } = props;\r\n    const [prevLanguage, setPrevLanguage] = React.useState(undefined);\r\n    const [openLangSnakbar, setOpenLangSnakbar] = React.useState(false);\r\n    const [openMessageSnackbar, setOpenMessageSnackbar] = React.useState(false);\r\n    const [langSnakbarMessage, setLangSnakbarMessage] = React.useState('');\r\n    const [transition, setTransition] = React.useState(undefined);\r\n    const [infoSnackbar, setInfoSnackbar] = React.useState({\r\n        variant: '',\r\n        message: '',\r\n    });\r\n\r\n    const switchMode = () => {\r\n        let newPaletteType = themeMode.palette.type === \"light\" ? \"dark\" : \"light\";\r\n        let primaryColor = themeMode.palette.type === \"light\" ? \"#f9a825\" : \"#3f51b5\";\r\n        let secondaryColor = themeMode.palette.type === \"light\" ? \"#f50057\" : \"#f50057\";\r\n        setTheme({\r\n            type: SET_THEME_MODE,\r\n            palette: {\r\n                type: newPaletteType,\r\n                primary: { main: primaryColor },\r\n                secondary: { main: secondaryColor },\r\n            }\r\n        });\r\n    }\r\n    const onAstronautClick = () => {\r\n        alert('Тут должны перейти на страницу космонафта');\r\n    };\r\n    const onMapClick = () => {\r\n        alert('Тут должны перейти на страницу карты');\r\n    };\r\n    const changeLanguage = (language) => {\r\n        if (language !== lang.currLang.current) {\r\n            if (language === 'Ru') {\r\n                setPrevLanguage(lang.currLang.current);\r\n                setCurrLangAction(RuDict);\r\n                setLangSnakbarMessage(language);\r\n                setTransition(() => TransitionDown);\r\n                setOpenLangSnakbar(true);\r\n            }\r\n            if (lang.currLang.current !== 'En') {\r\n                setPrevLanguage(lang.currLang.current);\r\n                setCurrLangAction(EnDict);\r\n                setLangSnakbarMessage(language);\r\n                setTransition(() => TransitionDown);\r\n                setOpenLangSnakbar(true);\r\n            }\r\n        }\r\n    }\r\n    const handleCloseLangSnakbar = () => {\r\n        switch (prevLanguage) {\r\n            case 'En':\r\n                setCurrLangAction(EnDict);\r\n                break;\r\n            case 'Ru':\r\n                setCurrLangAction(RuDict);\r\n                break;\r\n            default:\r\n                setCurrLangAction(EnDict);\r\n                break;\r\n        }\r\n        setOpenLangSnakbar(false);\r\n    };\r\n    const handleSaveLangSnakbar = () => {\r\n        let newLang;\r\n        switch (lang.currLang.current) {\r\n            case 'En':\r\n                newLang = 0;\r\n                break;\r\n            case 'Ru':\r\n                newLang = 1;\r\n                break;\r\n            default:\r\n                newLang = 0;\r\n                break;\r\n        }\r\n        let userid = props.store.auth.user.id;\r\n        let usernickname = props.store.auth.user.nickname;\r\n        let newUserData = {\r\n            language: newLang,\r\n            id: userid,\r\n            nickname: usernickname,\r\n        };\r\n\r\n        //Проверка на таймаут\r\n        let check = CheckTimeOut();\r\n\r\n        if (check) {\r\n            instance\r\n                .post('/actions/users/updateuserdata', newUserData)\r\n                .then(res => {\r\n                    let newInfoSnackbar = infoSnackbar;\r\n                    newInfoSnackbar = { ...newInfoSnackbar, variant: \"success\" };\r\n                    newInfoSnackbar = { ...newInfoSnackbar, message: lang.currLang.texts.success };\r\n                    setInfoSnackbar(newInfoSnackbar);\r\n                    setOpenMessageSnackbar(true);\r\n                    setOpenLangSnakbar(false);\r\n                })\r\n                .catch(err => {\r\n                    handleCloseLangSnakbar();\r\n                });\r\n\r\n        }\r\n        else {\r\n            let newInfoSnackbar = infoSnackbar;\r\n            newInfoSnackbar = { ...newInfoSnackbar, variant: \"error\" };\r\n            newInfoSnackbar = { ...newInfoSnackbar, message: lang.currLang.errors.NotLogin };\r\n            setInfoSnackbar(newInfoSnackbar);\r\n            setOpenMessageSnackbar(true);\r\n            handleCloseLangSnakbar();\r\n        }\r\n    };\r\n    const handleCloseMessageSnackbar = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setOpenMessageSnackbar(false);\r\n    };\r\n    useEffect(() => {\r\n\r\n        let id = {\r\n            id: auth.user.id,\r\n        };\r\n\r\n        instance\r\n            .post('/actions/users/getuserdata', id)\r\n            .then(res => {\r\n                res.data.language === 0 ? setCurrLangAction(EnDict) : setCurrLangAction(RuDict);\r\n            })\r\n            .catch(err => {\r\n                auth.user.language === 0 ? setCurrLangAction(EnDict) : setCurrLangAction(RuDict);\r\n            });\r\n\r\n        if (auth.user.times_mode === 0) {\r\n            setTheme({\r\n                type: SET_THEME_MODE,\r\n                palette: {\r\n                    type: \"dark\",\r\n                    primary: { main: \"#f9a825\" },\r\n                    secondary: { main: \"#f50057\" },\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            setTheme({\r\n                type: SET_THEME_MODE,\r\n                palette: {\r\n                    type: \"light\",\r\n                    primary: { main: \"#3f51b5\" },\r\n                    secondary: { main: \"#f50057\" },\r\n                }\r\n            });\r\n        }\r\n\r\n    }, [classes, setTheme, setCurrLangAction, auth.user.language, auth.user.times_mode, auth.user.id]);\r\n\r\n    return (\r\n        <MuiThemeProvider theme={muiTheme}>\r\n            <CssBaseline />\r\n\r\n            <Snackbar\r\n                anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }}\r\n                key={\"top, center\"}\r\n                open={openLangSnakbar}\r\n                TransitionComponent={transition}\r\n            >\r\n                <SnackbarContent\r\n                    aria-describedby=\"lang-snackbar\"\r\n                    message={\r\n                        <Typography className={classes.mainGridContainer}\r\n                            align='center'\r\n                            id=\"lang-snackbar\"\r\n                            variant='body2'>\r\n                            {lang.currLang.texts.changleLanguage + langSnakbarMessage + ' ?'}\r\n                        </Typography>\r\n                    }\r\n                    action={[\r\n                        <div key={\"lang-snackbar-buttons\"}>\r\n                            <IconButton\r\n                                key=\"save\"\r\n                                aria-label=\"save\"\r\n                                color=\"inherit\"\r\n                                onClick={handleSaveLangSnakbar}\r\n                            >\r\n                                <SaveIcon />\r\n                            </IconButton>\r\n                            <IconButton\r\n                                key=\"close\"\r\n                                aria-label=\"close\"\r\n                                color=\"inherit\"\r\n                                onClick={handleCloseLangSnakbar}\r\n                            >\r\n                                <CloseIcon />\r\n                            </IconButton>\r\n                        </div>\r\n                    ]}\r\n                />\r\n            </Snackbar>\r\n\r\n            <div className={classes.root} id='rootDiv'>\r\n\r\n                <div className={classes.mainPage}>\r\n\r\n                    <Grid className={classes.mainGridContainer}\r\n                        container\r\n                        direction=\"column\"\r\n                        justify=\"center\"\r\n                        alignItems=\"stretch\" >\r\n\r\n                        <Grid item xs={4} className={classes.mainGridHeadItem} >\r\n                            <Grid container className={classes.mainGridContainer}\r\n                                direction=\"row\"\r\n                                justify=\"space-around\"\r\n                                alignItems=\"stretch\" >\r\n\r\n                                <Grid item xs={4} >\r\n                                    <ButtonBase className={classes.AstronautButton}\r\n                                        type='button'\r\n                                        focusRipple\r\n                                        onClick={onAstronautClick}>\r\n                                        <div className={classes.AstronautDiv}>\r\n                                            <div className={classes.AstronautImg} style={themeMode.palette.type === \"light\" ? { filter: 'invert(0)', } : { filter: 'invert(1)', }} />\r\n                                        </div>\r\n                                    </ButtonBase>\r\n                                </Grid>\r\n\r\n                                <Grid item xs={4} >\r\n                                    <ButtonBase className={classes.image}\r\n                                        type='button'\r\n                                        focusRipple\r\n                                        onClick={switchMode}>\r\n                                        <div className={classes.SkyDiv}>\r\n                                            <div className={classes.SunSrc} style={themeMode.palette.type === \"dark\" ? { transform: 'translateY(36vw)' } : { transform: 'translateY(0)' }} />\r\n                                            <div className={classes.MoonSrc} style={themeMode.palette.type === \"dark\" ? { transform: 'translateY(0)' } : { transform: 'translateY(-36vw)' }} />\r\n                                        </div>\r\n                                    </ButtonBase>\r\n                                </Grid>\r\n                                <Grid item xs={4} >\r\n                                    <ButtonBase className={classes.MapButton}\r\n                                        type='button'\r\n                                        focusRipple\r\n                                        onClick={onMapClick}>\r\n                                        <div className={classes.MapDiv}>\r\n                                            <div className={classes.MapImg} style={themeMode.palette.type === \"light\" ? { filter: 'invert(0)', } : { filter: 'invert(1)', }} />\r\n                                        </div>\r\n                                    </ButtonBase>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={1} className={classes.mainGridHeadItem} >\r\n                            <Grid className={classes.mainGridContainer}\r\n                                container\r\n                                direction=\"column\"\r\n                                justify=\"center\"\r\n                                alignItems=\"stretch\" >\r\n                                <Grid item xs={12} className={classes.menuButtonContainerItem} >\r\n                                    <Typography className={classes.mainGridContainer}\r\n                                        align='center'\r\n                                        variant='h6'>\r\n                                        {lang.currLang.texts.hello + props.store.auth.user.nickname}\r\n                                    </Typography>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={6} className={classes.mainGridBodyItem} >\r\n\r\n                            <Grid className={classes.mainGridContainer}\r\n                                container\r\n                                direction=\"column\"\r\n                                justify=\"center\"\r\n                                alignItems=\"stretch\" >\r\n\r\n                                <Grid className={classes.menuButtonContainer}\r\n                                    container\r\n                                    direction=\"column\"\r\n                                    justify=\"center\"\r\n                                    alignItems=\"stretch\" >\r\n\r\n\r\n                                    <Grid item xs={12} className={classes.menuButtonContainerItem} >\r\n\r\n                                        <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                            <Button\r\n                                                variant=\"contained\"\r\n                                                color=\"primary\"\r\n                                                className={classes.menuButton}\r\n                                                onClick={() => {\r\n                                                    let check = CheckTimeOut();\r\n                                                    if (check) history.push(\"/dreams\");\r\n                                                    else history.push(\"/\");\r\n                                                }}\r\n                                            >\r\n                                                {lang.currLang.buttons.dreamJoirnal}\r\n                                            </Button>\r\n                                        </Grid>\r\n\r\n                                        <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                            <Button\r\n                                                variant=\"contained\"\r\n                                                color=\"primary\"\r\n                                                className={classes.menuButton}\r\n                                                onClick={() => {\r\n                                                    let check = CheckTimeOut();\r\n                                                    if (check) history.push(\"/adddream\");\r\n                                                    else history.push(\"/\");\r\n                                                }}\r\n                                            >\r\n                                                {lang.currLang.buttons.addDream}\r\n                                            </Button>\r\n                                        </Grid>\r\n\r\n                                        <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                            <Button\r\n                                                variant=\"contained\"\r\n                                                color=\"primary\"\r\n                                                className={classes.menuButton}\r\n                                                onClick={() => {\r\n                                                    let check = CheckTimeOut();\r\n                                                    if (check) history.push(\"/addcdream\");\r\n                                                    else history.push(\"/\");\r\n                                                }}\r\n                                            >\r\n                                                {lang.currLang.buttons.addCDream}\r\n                                            </Button>\r\n                                        </Grid>\r\n\r\n                                        <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                            <Button variant=\"contained\" color=\"primary\" className={classes.menuButton}>\r\n                                                {lang.currLang.buttons.techniques}\r\n                                            </Button>\r\n                                        </Grid>\r\n\r\n                                        <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                            <Button variant=\"contained\" color=\"primary\" className={classes.menuButton}>\r\n                                                {lang.currLang.buttons.adventures}\r\n                                            </Button>\r\n                                        </Grid>\r\n\r\n                                    </Grid>\r\n\r\n                                </Grid>\r\n\r\n                            </Grid>\r\n\r\n                        </Grid>\r\n\r\n                        <Grid item xs={1} className={classes.mainGridFooterItem} >\r\n\r\n                            <Grid className={classes.menuButtonContainerFooterLanguageButtons}\r\n                                container\r\n                                direction=\"row\"\r\n                                justify=\"center\"\r\n                                alignItems=\"center\" >\r\n                                <Grid item>\r\n                                    <Button onClick={() => { changeLanguage('Ru') }}>\r\n                                        RU\r\n                                    </Button>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Button onClick={() => { changeLanguage('En') }}>\r\n                                        EN\r\n                                    </Button>\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                        </Grid>\r\n\r\n                    </Grid>\r\n\r\n                </div>\r\n\r\n            </div>\r\n\r\n            <Snackbar\r\n                open={openMessageSnackbar}\r\n                onClose={handleCloseMessageSnackbar}\r\n                autoHideDuration={3000}>\r\n                <SnackbarContentWrapper\r\n                    className={classes.margin}\r\n                    onClose={handleCloseMessageSnackbar}\r\n                    variant={infoSnackbar.variant}\r\n                    message={infoSnackbar.message}\r\n                />\r\n            </Snackbar>\r\n\r\n        </MuiThemeProvider>\r\n    );\r\n};\r\n\r\n\r\n\r\nMainPage.propTypes = {\r\n    setTheme: PropTypes.func.isRequired,\r\n    setCurrLangAction: PropTypes.func.isRequired,\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        store,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setCurrLangAction: currLangState => dispatch(setCurrLang(currLangState)),\r\n        setTheme: palette => dispatch(setTheme(palette)),\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(MainPage);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport jwt_decode from \"jwt-decode\";\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\n\r\nimport { setCurrLang, setUserState } from '../actions/Actions';\r\nimport { useStyles, variantIcon } from '../styles/Styles';\r\nimport setAuthToken from \"../utils/setAuthToken\";\r\nimport { instance } from './Config';\r\nimport { GET_ERRORS, SET_CURRENT_USER } from \"../actions/types\";\r\n\r\nimport RuDict from '../dictionary/ru';\r\nimport EnDict from '../dictionary/en';\r\n\r\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\r\nimport Visibility from '@material-ui/icons/Visibility';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nimport { MuiThemeProvider, createMuiTheme, makeStyles } from '@material-ui/core/styles';\r\n\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\n\r\nimport { mdiVk } from '@mdi/js';\r\nimport Icon from '@mdi/react';\r\n\r\nimport { amber, green } from '@material-ui/core/colors';\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nconst useStyles1 = makeStyles(theme => ({\r\n    success: {\r\n        backgroundColor: green[600],\r\n    },\r\n    error: {\r\n        backgroundColor: theme.palette.error.dark,\r\n    },\r\n    info: {\r\n        backgroundColor: theme.palette.primary.main,\r\n    },\r\n    warning: {\r\n        backgroundColor: amber[700],\r\n    },\r\n    icon: {\r\n        fontSize: 20,\r\n    },\r\n    iconVariant: {\r\n        opacity: 0.9,\r\n        marginRight: theme.spacing(1),\r\n    },\r\n    message: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n    },\r\n}));\r\n\r\nfunction MySnackbarContentWrapper(props) {\r\n    const classes = useStyles1();\r\n    const { className, message, onClose, variant } = props;\r\n    const Icon = variantIcon[variant];\r\n\r\n    return (\r\n        <SnackbarContent\r\n            className={clsx(classes[variant], className)}\r\n            aria-describedby=\"client-snackbar\"\r\n            message={\r\n                <span id=\"client-snackbar\" className={classes.message}>\r\n                    <Icon className={clsx(classes.icon, classes.iconVariant)} />\r\n                    <Typography className={classes.mainGridContainer}\r\n                        align='center'\r\n                        variant='body2'>\r\n                        {message}\r\n                    </Typography>\r\n                </span>\r\n            }\r\n            action={[\r\n                <IconButton key=\"close\" aria-label=\"close\" color=\"inherit\" onClick={onClose}>\r\n                    <CloseIcon className={classes.icon} />\r\n                </IconButton>,\r\n            ]}\r\n        />\r\n    );\r\n}\r\n\r\nfunction Sign(props) {\r\n    const classes = useStyles();\r\n    const { history } = props;\r\n    const { themeMode, lang } = props.store;\r\n    const muiTheme = createMuiTheme(themeMode);\r\n    const [openSnackbar, setOpenSnackbar] = React.useState(false);\r\n    const [snackbarMessage, setSnackbarMessage] = React.useState('');\r\n    const [loginData, setLoginData] = React.useState({\r\n        email: '',\r\n        password: '',\r\n    });\r\n    const [registData, setRegistData] = React.useState({\r\n        email: '',\r\n        nickname: '',\r\n        password: '',\r\n        password2: '',\r\n    });\r\n    const [regFieldErrors, setRegFieldErrors] = React.useState({\r\n        emailErr: false,\r\n        emailErrText: '',\r\n        nicknameErr: false,\r\n        nicknameErrText: '',\r\n        passwordErr: false,\r\n        passwordErrText: '',\r\n        password2Err: false,\r\n        password2ErrText: '',\r\n    });\r\n    const [isLoading, setIsLoading] = React.useState(false);\r\n    const [showPassword, setShowPassword] = React.useState(false);\r\n    const [openLogin, setOpenLogin] = React.useState(false);\r\n    const [openRegist, setOpenRegist] = React.useState(false);\r\n    const [page, setPage] = React.useState({\r\n        mainPage: true,\r\n        aboutPage: false,\r\n    });\r\n\r\n    const handleMouseDownPassword = event => {\r\n        event.preventDefault();\r\n    };\r\n    const changeAuthLogin = (e) => {\r\n        let newLoginData = loginData;\r\n        newLoginData = { ...newLoginData, email: e.target.value };\r\n        setLoginData(newLoginData);\r\n    };\r\n    const changeAuthPassword = (e) => {\r\n        let newLoginData = loginData;\r\n        newLoginData = { ...newLoginData, password: e.target.value };\r\n        setLoginData(newLoginData);\r\n    };\r\n    const changeRegistLogin = (e) => {\r\n        let newRegFieldErrors = regFieldErrors;\r\n        newRegFieldErrors = { ...newRegFieldErrors, emailErr: false };\r\n        newRegFieldErrors = { ...newRegFieldErrors, emailErrText: '' };\r\n        setRegFieldErrors(newRegFieldErrors);\r\n\r\n        let newRegistData = registData;\r\n        newRegistData = { ...newRegistData, email: e.target.value };\r\n        setRegistData(newRegistData);\r\n    };\r\n    const changeRegistNickname = (e) => {\r\n        let newRegFieldErrors = regFieldErrors;\r\n        newRegFieldErrors = { ...newRegFieldErrors, nicknameErr: false };\r\n        newRegFieldErrors = { ...newRegFieldErrors, nicknameErrText: '' };\r\n        setRegFieldErrors(newRegFieldErrors);\r\n\r\n        let newRegistData = registData;\r\n        newRegistData = { ...newRegistData, nickname: e.target.value };\r\n        setRegistData(newRegistData);\r\n    };\r\n    const changeRegistPassword = (e) => {\r\n        let newRegFieldErrors = regFieldErrors;\r\n        newRegFieldErrors = { ...newRegFieldErrors, passwordErr: false };\r\n        newRegFieldErrors = { ...newRegFieldErrors, passwordErrText: '' };\r\n        newRegFieldErrors = { ...newRegFieldErrors, password2Err: false };\r\n        newRegFieldErrors = { ...newRegFieldErrors, password2ErrText: '' };\r\n        setRegFieldErrors(newRegFieldErrors);\r\n\r\n        let newRegistData = registData;\r\n        newRegistData = { ...newRegistData, password: e.target.value };\r\n        setRegistData(newRegistData);\r\n    };\r\n    const changeRegistPassword2 = (e) => {\r\n        let newRegFieldErrors = regFieldErrors;\r\n        newRegFieldErrors = { ...newRegFieldErrors, passwordErr: false };\r\n        newRegFieldErrors = { ...newRegFieldErrors, passwordErrText: '' };\r\n        newRegFieldErrors = { ...newRegFieldErrors, password2Err: false };\r\n        newRegFieldErrors = { ...newRegFieldErrors, password2ErrText: '' };\r\n        setRegFieldErrors(newRegFieldErrors);\r\n        let newRegistData = registData;\r\n        newRegistData = { ...newRegistData, password2: e.target.value };\r\n        setRegistData(newRegistData);\r\n    };\r\n    const singIn = () => {\r\n        instance\r\n            .post(\"/actions/users/login\", loginData)\r\n            .then(res => {\r\n                const { token } = res.data;\r\n                localStorage.setItem(\"jwtToken\", token);\r\n                setAuthToken(token);\r\n                const decoded = jwt_decode(token);\r\n                props.setUserState({\r\n                    type: SET_CURRENT_USER,\r\n                    payload: decoded\r\n                });\r\n                setIsLoading(false);\r\n                history.push(\"/luciddreams\");\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                if (err.response.data.email === 'UserNotExist') {\r\n                    setSnackbarMessage(lang.currLang.errors.UserNotExist);\r\n                }\r\n                if (err.response.data.email === 'EmailIsNotValid') {\r\n                    setSnackbarMessage(lang.currLang.errors.EmailIsNotValid);\r\n                }\r\n                if (err.response.data.passwordincorrect === 'IncorrectPassword') {\r\n                    setSnackbarMessage(lang.currLang.errors.IncorrectPassword);\r\n                }\r\n                setOpenSnackbar(true);\r\n                setIsLoading(false);\r\n            });\r\n    };\r\n    const singUp = () => {\r\n        let isErr = false;\r\n        let newRegFieldErrors = regFieldErrors;\r\n        if (registData.email.length === 0) {\r\n            newRegFieldErrors = { ...newRegFieldErrors, emailErr: true };\r\n            newRegFieldErrors = { ...newRegFieldErrors, emailErrText: lang.currLang.errors.emailLenght };\r\n            isErr = true;\r\n        }\r\n        if (registData.nickname.length === 0) {\r\n            newRegFieldErrors = { ...newRegFieldErrors, nicknameErr: true };\r\n            newRegFieldErrors = { ...newRegFieldErrors, nicknameErrText: lang.currLang.errors.nicknameLenght };\r\n            isErr = true;\r\n        }\r\n        if (registData.password.length === 0) {\r\n            newRegFieldErrors = { ...newRegFieldErrors, passwordErr: true };\r\n            newRegFieldErrors = { ...newRegFieldErrors, passwordErrText: lang.currLang.errors.passwordLenght };\r\n            isErr = true;\r\n        }\r\n        if (registData.password2.length === 0) {\r\n            newRegFieldErrors = { ...newRegFieldErrors, password2Err: true };\r\n            newRegFieldErrors = { ...newRegFieldErrors, password2ErrText: lang.currLang.errors.password2Lenght };\r\n            isErr = true;\r\n        }\r\n        if (registData.password !== registData.password2) {\r\n            newRegFieldErrors = { ...newRegFieldErrors, passwordErr: true };\r\n            newRegFieldErrors = { ...newRegFieldErrors, passwordErrText: lang.currLang.errors.passwordsCompare };\r\n            newRegFieldErrors = { ...newRegFieldErrors, password2Err: true };\r\n            newRegFieldErrors = { ...newRegFieldErrors, password2ErrText: lang.currLang.errors.passwordsCompare };\r\n            isErr = true;\r\n        }\r\n        if (isErr) {\r\n            setRegFieldErrors(newRegFieldErrors);\r\n            setIsLoading(false);\r\n        }\r\n        else {\r\n            instance\r\n                .post('/actions/users/register', registData)\r\n                .then(res => {\r\n                    //TODO нормальный popup\r\n                    alert(lang.currLang.texts.sucessRegistration);\r\n                    let newRegistData = registData;\r\n                    newRegistData = { ...newRegistData, email: '' };\r\n                    newRegistData = { ...newRegistData, nickname: '' };\r\n                    newRegistData = { ...newRegistData, password: '' };\r\n                    newRegistData = { ...newRegistData, password2: '' };\r\n                    setRegistData(newRegistData);\r\n                    click('closeRegist');\r\n                    click('openLogin');\r\n                    setIsLoading(false);\r\n                })\r\n                .catch(err => {\r\n                    props.setUserState({\r\n                        type: GET_ERRORS,\r\n                        payload: err.response.data\r\n                    });\r\n                    if (err.response.data.email === 'EmailIsBusy') {\r\n                        setSnackbarMessage(lang.currLang.errors.EmailIsBusy);\r\n                    }\r\n                    if (err.response.data.password === 'PasswordLenght5Symbols') {\r\n                        setSnackbarMessage(lang.currLang.errors.PasswordLenght5Symbols);\r\n                    }\r\n                    setOpenSnackbar(true);\r\n                    setIsLoading(false);\r\n                });\r\n        }\r\n    };\r\n    const click = (action) => {\r\n        let newPages = page;\r\n        switch (action) {\r\n            case 'useVk':\r\n                // window.VK.Auth.login(checkLoginState, 4194304);\r\n                // let loadItems = async () => {\r\n                //     const response = await fetch('http://10.203.117.137:3001/auth/vk', {\r\n                //         method: 'GET',\r\n                //         credentials: 'include',\r\n                //     });\r\n                //     const body = await response.json();\r\n\r\n                //     console.log(response);\r\n                // }\r\n                break;\r\n            case 'openLogin':\r\n                setOpenLogin(true);\r\n                break;\r\n            case 'openRegist':\r\n                setOpenRegist(true);\r\n                break;\r\n            case 'closeLogin':\r\n                setOpenLogin(false);\r\n                setShowPassword(false);\r\n                break;\r\n            case 'closeRegist':\r\n                setOpenRegist(false);\r\n                setShowPassword(false);\r\n                break;\r\n            case 'signIn':\r\n                setIsLoading(true);\r\n                singIn();\r\n                break;\r\n            case 'signUp':\r\n                setIsLoading(true);\r\n                singUp();\r\n                break;\r\n            case 'openAboutPage':\r\n                newPages = { ...newPages, aboutPage: true };\r\n                newPages = { ...newPages, mainPage: false };\r\n                setPage(newPages);\r\n                break;\r\n            case 'closeAboutPage':\r\n                newPages = { ...newPages, aboutPage: false };\r\n                newPages = { ...newPages, mainPage: true };\r\n                setPage(newPages);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    };\r\n    const handleCloseSnackbar = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setOpenSnackbar(false);\r\n    };\r\n    const changeLanguage = (language) => {\r\n        if (language === 'Ru') {\r\n            props.setCurrLang(RuDict);\r\n        }\r\n        else {\r\n            props.setCurrLang(EnDict);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <MuiThemeProvider theme={muiTheme}>\r\n            <CssBaseline />\r\n\r\n            <div className={classes.root} id='rootDiv'>\r\n\r\n                <div className={classes.mainPage}\r\n                    style={\r\n                        page.mainPage === true\r\n                            ? { transform: 'translateY(0%)' }\r\n                            : { transform: 'translateY(-100%)' }\r\n                    } >\r\n                    <Grid className={classes.mainGridContainer}\r\n                        container\r\n                        direction=\"column\"\r\n                        justify=\"center\"\r\n                        alignItems=\"stretch\"\r\n                    >\r\n                        <Grid item xs={11} className={classes.mainGridBodyItem} >\r\n                            <Grid className={classes.menuButtonContainer}\r\n                                container\r\n                                direction=\"column\"\r\n                                justify=\"center\"\r\n                                alignItems=\"stretch\" >\r\n                                <Grid item xs={3} />\r\n                                <Grid item xs={6} className={classes.menuButtonContainerItem}>\r\n                                    <Dialog\r\n                                        open={openLogin}\r\n                                        TransitionComponent={Transition}\r\n                                        keepMounted\r\n                                        aria-labelledby=\"alert-dialog-slide-title\"\r\n                                        aria-describedby=\"alert-dialog-slide-description\"\r\n                                    >\r\n                                        <DialogTitle id=\"alert-dialog-slide-title\">\r\n                                            {lang.currLang.buttons.signIn}\r\n                                        </DialogTitle>\r\n                                        <DialogContent>\r\n                                            <Grid item xs={12} className={classes.menuButtonContainerItem}>\r\n                                                <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                                    <TextField\r\n                                                        className={classes.textField}\r\n                                                        id=\"email-field\"\r\n                                                        type=\"email\"\r\n                                                        label=\"Email\"\r\n                                                        onBlur={(e) => { changeAuthLogin(e) }} />\r\n                                                </Grid>\r\n                                                <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                                    <TextField\r\n                                                        id=\"password-field\"\r\n                                                        className={classes.textField}\r\n                                                        type={showPassword ? 'text' : 'password'}\r\n                                                        label={lang.currLang.texts.password}\r\n                                                        onBlur={(e) => { changeAuthPassword(e) }}\r\n                                                        InputProps={{\r\n                                                            endAdornment: (\r\n                                                                <InputAdornment position=\"end\">\r\n                                                                    <IconButton\r\n                                                                        tabIndex=\"-1\"\r\n                                                                        edge=\"end\"\r\n                                                                        aria-label=\"toggle password visibility\"\r\n                                                                        onClick={() => { showPassword ? setShowPassword(false) : setShowPassword(true) }}\r\n                                                                        onMouseDown={handleMouseDownPassword} >\r\n                                                                        {showPassword ? <VisibilityOff /> : <Visibility />}\r\n                                                                    </IconButton>\r\n                                                                </InputAdornment>\r\n                                                            ),\r\n                                                        }} />\r\n                                                </Grid>\r\n                                                <Grid item xs={2} className={classes.menuDivButton}\r\n                                                    align=\"center\"\r\n                                                >\r\n                                                    <Typography>\r\n                                                        {lang.currLang.texts.or}\r\n                                                    </Typography>\r\n                                                </Grid>\r\n                                                <Grid item xs={2} className={classes.menuDivButton}\r\n                                                    align=\"center\"\r\n                                                >\r\n                                                    <IconButton className={classes.button}\r\n                                                        onClick={() => { click('useVk') }}\r\n                                                        disabled={isLoading}>\r\n                                                        <Icon path={mdiVk} size={2} color={themeMode.palette.type === 'light' ? 'rgba(0, 0, 0, 0.54)' : 'rgba(255, 255, 255, 1)'} />\r\n                                                    </IconButton>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                            {isLoading\r\n                                                ? <LinearProgress /> :\r\n                                                ''}\r\n                                        </DialogContent>\r\n                                        {!isLoading\r\n                                            ?\r\n                                            <DialogActions>\r\n                                                <Button onClick={() => { click('closeLogin') }}\r\n                                                    color=\"secondary\"\r\n                                                    disabled={isLoading}>\r\n                                                    {lang.currLang.buttons.cancel}\r\n                                                </Button>\r\n                                                <Button onClick={() => { click('signIn') }}\r\n                                                    color=\"primary\"\r\n                                                    disabled={isLoading}>\r\n                                                    {lang.currLang.buttons.signIn}\r\n                                                </Button>\r\n                                            </DialogActions>\r\n                                            : ''}\r\n                                    </Dialog>\r\n                                    <Dialog\r\n                                        open={openRegist}\r\n                                        TransitionComponent={Transition}\r\n                                        keepMounted\r\n                                        aria-labelledby=\"alert-dialog-slide-title\"\r\n                                        aria-describedby=\"alert-dialog-slide-description\"\r\n                                    >\r\n                                        <DialogTitle id=\"alert-dialog-slide-title\">\r\n                                            {lang.currLang.buttons.signUp}\r\n                                        </DialogTitle>\r\n                                        <DialogContent>\r\n                                            <Grid item xs={12} className={classes.menuButtonContainerItem}>\r\n                                                <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                                    <TextField\r\n                                                        error={regFieldErrors.emailErr}\r\n                                                        helperText={regFieldErrors.emailErrText}\r\n                                                        className={classes.textField}\r\n                                                        id=\"reg-email-field\"\r\n                                                        type=\"email\"\r\n                                                        label=\"Email\"\r\n                                                        onBlur={(e) => { changeRegistLogin(e) }} />\r\n                                                </Grid>\r\n                                                <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                                    <TextField\r\n                                                        error={regFieldErrors.nicknameErr}\r\n                                                        helperText={regFieldErrors.nicknameErrText}\r\n                                                        className={classes.textField}\r\n                                                        id=\"reg-nickname-field\"\r\n                                                        type=\"text\"\r\n                                                        label={lang.currLang.texts.nickname}\r\n                                                        onBlur={(e) => { changeRegistNickname(e) }} />\r\n                                                </Grid>\r\n                                                <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                                    <TextField\r\n                                                        error={regFieldErrors.passwordErr}\r\n                                                        helperText={regFieldErrors.passwordErrText}\r\n                                                        id=\"reg-password-field\"\r\n                                                        className={classes.textField}\r\n                                                        type={showPassword ? 'text' : 'password'}\r\n                                                        label={lang.currLang.texts.password}\r\n                                                        onBlur={(e) => { changeRegistPassword(e) }}\r\n                                                        InputProps={{\r\n                                                            endAdornment: (\r\n                                                                <InputAdornment position=\"end\">\r\n                                                                    <IconButton\r\n                                                                        tabIndex=\"-1\"\r\n                                                                        edge=\"end\"\r\n                                                                        aria-label=\"toggle password visibility\"\r\n                                                                        onClick={() => { showPassword ? setShowPassword(false) : setShowPassword(true) }}\r\n                                                                        onMouseDown={handleMouseDownPassword} >\r\n                                                                        {showPassword ? <VisibilityOff /> : <Visibility />}\r\n                                                                    </IconButton>\r\n                                                                </InputAdornment>\r\n                                                            ),\r\n                                                        }} />\r\n                                                </Grid>\r\n                                                <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                                    <TextField\r\n                                                        error={regFieldErrors.password2Err}\r\n                                                        helperText={regFieldErrors.password2ErrText}\r\n                                                        id=\"reg-password2-field\"\r\n                                                        className={classes.textField}\r\n                                                        type={showPassword ? 'text' : 'password'}\r\n                                                        label={lang.currLang.texts.passwordAgain}\r\n                                                        onBlur={(e) => { changeRegistPassword2(e) }}\r\n                                                        InputProps={{\r\n                                                            endAdornment: (\r\n                                                                <InputAdornment position=\"end\">\r\n                                                                    <IconButton\r\n                                                                        tabIndex=\"-1\"\r\n                                                                        edge=\"end\"\r\n                                                                        aria-label=\"toggle password visibility\"\r\n                                                                        onClick={() => { showPassword ? setShowPassword(false) : setShowPassword(true) }}\r\n                                                                        onMouseDown={handleMouseDownPassword} >\r\n                                                                        {showPassword ? <VisibilityOff /> : <Visibility />}\r\n                                                                    </IconButton>\r\n                                                                </InputAdornment>\r\n                                                            ),\r\n                                                        }} />\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                            {isLoading\r\n                                                ? <LinearProgress />\r\n                                                : ''}\r\n\r\n                                        </DialogContent>\r\n                                        {!isLoading\r\n                                            ?\r\n                                            <DialogActions>\r\n                                                <Button onClick={() => { click('closeRegist') }}\r\n                                                    color=\"secondary\"\r\n                                                    disabled={isLoading}>\r\n                                                    {lang.currLang.buttons.cancel}\r\n                                                </Button>\r\n                                                <Button onClick={() => { click('signUp') }}\r\n                                                    color=\"primary\"\r\n                                                    disabled={isLoading}>\r\n                                                    {lang.currLang.buttons.signUp}\r\n                                                </Button>\r\n                                            </DialogActions>\r\n                                            : ''}\r\n                                    </Dialog>\r\n                                    <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                        <Button variant=\"contained\" color=\"primary\" className={classes.menuButton} onClick={() => { click('openLogin') }}>\r\n                                            {lang.currLang.buttons.signIn}\r\n                                        </Button>\r\n                                    </Grid>\r\n                                    <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                        <Button variant=\"contained\" color=\"primary\" className={classes.menuButton} onClick={() => { click('openRegist') }}>\r\n                                            {lang.currLang.buttons.signUp}\r\n                                        </Button>\r\n                                    </Grid>\r\n                                    <Grid item xs={2} className={classes.menuDivButton} align=\"center\" />\r\n                                    <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                        <Button variant=\"contained\"\r\n                                            color=\"primary\"\r\n                                            className={classes.menuButton}\r\n                                            onClick={() => (click('openAboutPage'))} >\r\n                                            {lang.currLang.buttons.about}\r\n                                        </Button>\r\n                                    </Grid>\r\n                                </Grid>\r\n                                <Grid item xs={3} />\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item xs={1} className={classes.mainGridFooterItem} >\r\n                            <Grid className={classes.menuButtonContainerFooterLanguageButtons}\r\n                                container\r\n                                direction=\"row\"\r\n                                justify=\"center\"\r\n                                alignItems=\"center\" >\r\n                                <Grid item>\r\n                                    <Button onClick={() => { changeLanguage('Ru') }}>\r\n                                        RU\r\n                                    </Button>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Button onClick={() => { changeLanguage('En') }}>\r\n                                        EN\r\n                                    </Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </div >\r\n\r\n                <div className={classes.aboutPage}\r\n                    style={page.aboutPage === true\r\n                        ? { transform: 'translateY(-100%)' }\r\n                        : { transform: 'translateY(0%)' }\r\n                    }\r\n                >\r\n                    <Grid className={classes.aboutGridContainer}\r\n                        container\r\n                        direction=\"column\"\r\n                        justify=\"center\"\r\n                        alignItems=\"stretch\"\r\n                        spacing={5} >\r\n                        <Grid item\r\n                            className={classes.aboutGridItem}\r\n                            align='center'>\r\n                            <Paper className={classes.aboutPaper}>\r\n                                <Typography>\r\n                                    {lang.currLang.texts.about}\r\n                                </Typography>\r\n                            </Paper>\r\n                        </Grid>\r\n                        <Grid item\r\n                            className={classes.aboutGridItem}\r\n                            align='center'>\r\n                            <Button variant=\"contained\"\r\n                                color=\"primary\"\r\n                                className={classes.menuButton}\r\n                                onClick={() => (click('closeAboutPage'))} >\r\n                                {lang.currLang.buttons.close}\r\n                            </Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                </div>\r\n            </div >\r\n\r\n            <Snackbar\r\n                open={openSnackbar}\r\n                onClose={handleCloseSnackbar}\r\n                autoHideDuration={3000}>\r\n                <MySnackbarContentWrapper\r\n                    className={classes.margin}\r\n                    onClose={handleCloseSnackbar}\r\n                    variant='error'\r\n                    message={snackbarMessage}\r\n                />\r\n            </Snackbar>\r\n\r\n        </MuiThemeProvider>\r\n    )\r\n}\r\n\r\nSign.propTypes = {\r\n    setCurrLang: PropTypes.func.isRequired,\r\n    setUserState: PropTypes.func.isRequired,\r\n    lang: PropTypes.object.isRequired,\r\n    auth: PropTypes.object.isRequired,\r\n    errors: PropTypes.object.isRequired,\r\n}\r\n\r\nMySnackbarContentWrapper.propTypes = {\r\n    className: PropTypes.string,\r\n    message: PropTypes.string,\r\n    onClose: PropTypes.func,\r\n    variant: PropTypes.oneOf(['error', 'info', 'success', 'warning']).isRequired,\r\n};\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        store,\r\n        lang: store.lang,\r\n        auth: store.auth,\r\n        errors: store.errors,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setCurrLang: currLangState => dispatch(setCurrLang(currLangState)),\r\n        setUserState: State => dispatch(setUserState(State)),\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Sign);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { Router, Route, Switch } from \"react-router-dom\";\r\nimport './App.css';\r\n\r\nimport history from '../history';\r\nimport { store } from \"../store\";\r\nimport { CheckTimeOut } from '../utils/CheckLoginTimeOut';\r\nimport setAuthToken from \"../utils/setAuthToken\";\r\nimport { SET_CURRENT_USER, SET_THEME_MODE } from \"../actions/types\"\r\nimport { setTheme } from '../actions/Actions';\r\nimport PrivateRoute from \"../components/PrivateRoute\";\r\n\r\nimport AddDream from './AddDream';\r\nimport ViewDreams from './ViewDreams';\r\nimport AddCDream from './AddCDream';\r\nimport MainPage from \"./MainPage\";\r\nimport Sign from './Sign';\r\n\r\nimport { useStyles, params, randomBetween } from '../styles/Styles';\r\n\r\nlet check = CheckTimeOut();\r\nif (!check) {\r\n    localStorage.removeItem(\"jwtToken\");\r\n    setAuthToken(false);\r\n    store.dispatch({\r\n        type: SET_CURRENT_USER,\r\n        payload: null\r\n    });\r\n    history.push(\"/\");\r\n}\r\nelse {\r\n    history.push(\"/luciddreams\");\r\n}\r\n\r\nlet stars = [];\r\nlet clouds = [];\r\n\r\nif (new Date().getHours() >= 16) {\r\n    store.dispatch({\r\n        type: SET_THEME_MODE,\r\n        palette: {\r\n            type: \"dark\",\r\n            primary: { main: \"#f9a825\" },\r\n            secondary: { main: \"#f50057\" },\r\n            error: { main: \"#cc0000\" },\r\n        }\r\n    });\r\n}\r\nelse {\r\n    store.dispatch({\r\n        type: SET_THEME_MODE,\r\n        palette: {\r\n            type: \"light\",\r\n            primary: { main: \"#3f51b5\" },\r\n            secondary: { main: \"#f50057\" },\r\n            error: { main: \"#cc0000\" },\r\n        }\r\n    });\r\n}\r\n\r\nfunction App(props) {\r\n    const classes = useStyles();\r\n\r\n    stars = [];\r\n    clouds = [];\r\n\r\n    for (let i = 0; i < params.amountStars; i++) {\r\n        let size = Math.round(Math.random() * 10) === 0\r\n            ? params.size.giant\r\n            : randomBetween(params.size.min, params.size.max);\r\n        stars.push(\r\n            <div\r\n                className={classes.AppStar}\r\n                key={i + 'AppStar'}\r\n                style={{\r\n                    left: randomBetween(0, 100) + \"%\",\r\n                    top: randomBetween(0, 100) + \"%\",\r\n                    width: size + \"px\",\r\n                    height: size + \"px\",\r\n                    boxShadow: \"0 0 \" + size + \"px \" + size / 2 + \"px #043668\",\r\n                    animationDuration: randomBetween(params.duration.min, params.duration.max) + \"s\",\r\n                }}\r\n            />\r\n        );\r\n    }\r\n\r\n    for (let i = 0; i < params.amountClouds; i++) {\r\n        let left = Math.round(Math.random() * 50 + 90);\r\n        let top = Math.round(Math.random() * 100 / 100 * 90);\r\n        let scale = Math.random() * 1.5 - 0.5;\r\n        let opacity = Math.random() * 90 / 100;\r\n        let speed = Math.random() * 30 + 15;\r\n        clouds.push(\r\n            <div className={classes.AppCloud}\r\n                key={i + 'AppCloud'}\r\n                style={{\r\n                    left: left + '%',\r\n                    top: top + '%',\r\n                    width: '400px',\r\n                    height: '100px',\r\n                    transform: 'scale(' + scale + ')',\r\n                    opacity: opacity,\r\n                    animationDuration: speed + 's',\r\n                }}\r\n            />\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Router history={history}>\r\n\r\n            <div className={classes.AppDivDark}>\r\n                <div className={classes.AppDivLight}\r\n                    style={props.type === \"light\"\r\n                        ? { opacity: 1, }\r\n                        : { opacity: 0, }}\r\n                />\r\n                {props.type === \"light\"\r\n                    ?\r\n                    <div className={classes.AppCloudsDiv}\r\n                        style={props.type === \"light\"\r\n                            ? { opacity: 1, }\r\n                            : { opacity: 0, }}\r\n                    >\r\n                        {clouds}\r\n                    </div>\r\n                    :\r\n                    <div className={classes.AppStarsDiv}\r\n                        style={props.type === \"light\"\r\n                            ? { opacity: 0, }\r\n                            : { opacity: 1, }}\r\n                    >\r\n                        {stars}\r\n                    </div>\r\n                }\r\n            </div>\r\n\r\n            <Route exact path=\"/\" component={Sign} />\r\n            <Switch>\r\n                <PrivateRoute exact path=\"/luciddreams\" component={MainPage} />\r\n                <PrivateRoute exact path=\"/addcdream\" component={AddCDream} />\r\n                <PrivateRoute exact path=\"/adddream\" component={AddDream} />\r\n                <PrivateRoute exact path=\"/dreams\" component={ViewDreams} />\r\n            </Switch>\r\n        </Router>\r\n    );\r\n};\r\n\r\nApp.propTypes = {\r\n    type: PropTypes.string.isRequired,\r\n    setTheme: PropTypes.func.isRequired,\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        type: store.themeMode.palette.type,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setTheme: palette => dispatch(setTheme(palette)),\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(App);","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from \"./store\";\r\n\r\nReactDOM.render(\r\n    <div id='global'\r\n        style={{\r\n            overflow: 'auto',\r\n            height: '100%',\r\n            position: 'relative',\r\n        }}\r\n    >\r\n\r\n        <Provider store={store}>\r\n            <App />\r\n        </Provider>\r\n    </div>\r\n    , document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n\r\n"],"sourceRoot":""}