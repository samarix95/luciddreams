{"version":3,"sources":["img/map.png","img/sun.png","img/moon.png","img/astronaut.png","img/cloud.svg","history.js","actions/types.js","dictionary/en.js","reducers/currLang.js","reducers/cloud.js","reducers/star.js","reducers/themeMode.js","reducers/authReducer.js","reducers/errorReducer.js","reducers/snackbarReducer.js","reducers/index.js","store.js","utils/setAuthToken.js","utils/CheckLoginTimeOut.js","actions/Actions.js","components/PrivateRoute.js","components/Config.js","styles/Styles.js","components/muiltiple/MapCell.jsx","components/DreamMap.jsx","functions.js","components/AddDream.jsx","components/AddCDream.jsx","components/AddTechnics.jsx","components/muiltiple/DreamCard.jsx","components/ViewDreams.jsx","dictionary/ru.js","components/MainPage.jsx","components/Sign.js","components/muiltiple/TechnicCard.jsx","components/Technics.jsx","Routes.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","createBrowserHistory","GET_ERRORS","SET_CURRENT_USER","SET_CLOUD","CLEAR_CLOUD","SET_STAR","CLEAR_STAR","SET_LANG","SET_THEME_MODE","SET_SNACKBAR_MODE","words","current","buttons","signIn","signUp","dreamJoirnal","addDream","addCDream","techniques","adventures","close","about","cancel","add","Edit","Delete","Save","texts","or","nickname","password","passwordAgain","sucessRegistration","hello","changleLanguage","success","title","description","content","tags","dreams","technics","rating","Dream","Cdream","NoDreams","pickDate","pickTime","TapToShow","Public","Publish","Unpublish","PublicAlert","PublicText","PublicDescription","UnpublicAlert","UnpublicText","UnpublicDescription","DeleteAlert","DeleteText","errors","emailLenght","nicknameLenght","passwordLenght","password2Lenght","passwordsCompare","UserNotExist","EmailIsNotValid","IncorrectPassword","EmailIsBusy","PasswordLenght5Symbols","NotLogin","EmptyTitle","EmptyDescription","EmptyDream","NoChanges","CantDeletePost","initialState","currLang","EnDict","clouds","stars","palette","type","primary","main","secondary","error","isempty","require","isAuthenticated","user","loading","snackbar","open","variant","message","rootReducer","combineReducers","lang","state","action","currLangState","cloudState","starState","themeMode","auth","payload","middleware","thunk","store","createStore","applyMiddleware","setAuthToken","token","axios","defaults","headers","common","CheckTimeOut","localStorage","jwtToken","decoded","jwt_decode","dispatch","currentTime","Date","now","exp","setCurrLang","setSnackbar","connect","Component","component","rest","render","props","to","instance","create","baseURL","timeout","params","amountStars","amountClouds","size","min","max","giant","duration","variantIcon","CheckCircleIcon","warning","WarningIcon","ErrorIcon","info","InfoIcon","randomBetween","a","b","Math","random","useStyles","makeStyles","theme","SwipeableViews","position","height","media","iconCenter","display","margin","dreamCardDiv","marginTop","marginBottom","width","borderRadius","divDreamsNotFoundImg","background","divDreamsNotFound","left","transform","textAlign","contentPaper","backgroundColor","text","padding","pickerGridContainer","div85width","top","ratingGridContainer","pickers","avatarRoot","verySmallAvatar","spacing","smallAvatar","smallChip","centerCircularProgress","mainGridDreamsBodyItemContainer","paddingTop","boxSizing","maxHeight","overflow","mainGridDreamsBodyItemContainerPaper","opacity","mainGridDreamsBodyItem","mainGridDreamsContainer","card","maxWidth","expand","marginLeft","transition","transitions","shortest","expandOpen","textField","root","flexGrow","window","innerHeight","mainPage","aboutPage","AppDivDark","zIndex","AppDivLight","AppStarsDiv","AppCloudsDiv","AppStar","filter","animation","AppCloud","backgroundRepeat","backgroundImage","CloudSvg","image","SkyDiv","MoonSrc","backgroundSize","MoonImg","SunSrc","SunImg","AstronautButton","AstronautDiv","AstronautImg","MapButton","MapDiv","MapImg","mainGridContainer","mainGridHeadItem","mainGridBodyItem","menuButtonContainerItem","menuButtonContainer","menuButtonGrid","menuDivButton","menuButton","minWidth","actionButton","poppupButton","mainGridFooterItem","menuButtonContainerFooterLanguageButtons","aboutGridContainer","fullMinWidth","inputDiv","inputScrollableDiv","chips","flexWrap","noWrap","chip","aboutGridItem","mainPaperGridBodyItem","paper","minMargin","VKLoginDiv","VKLoginButton","boxShadow","classes","i","j","cellHeight","cellWidth","id","color","locations","React","useState","anchorEl","setAnchorEl","tagId","setTagId","disabledSave","handleClose","Boolean","popoverId","undefined","style","length","className","onClick","event","currentTarget","find","loc","img_url","Skeleton","Popover","onClose","anchorOrigin","vertical","horizontal","transformOrigin","Grid","container","direction","justify","alignItems","item","xs","Typography","name_rus","name_eng","FormControl","formControl","Select","value","onChange","target","MenuProps","PaperProps","map","key","MenuItem","Avatar","src","align","Button","disabled","newCell","oldLoc","newLoc","console","log","JSONtable","0","1","2","3","history","muiTheme","createMuiTheme","cellSize","setCellSize","setLocations","useEffect","get","then","res","data","catch","err","CssBaseline","zeroMinWidth","Container","table","Object","keys","forEach","row","rows","col","push","createTable","Slider","newValue","compare","obj1","obj2","every","hasOwnProperty","defaultTags","assign","overrides","MUIRichTextEditor","border","toolbar","justifyContent","minHeight","borderBottom","placeHolder","editor","editorContainer","isEditMode","setIsEditMode","isLoading","setIsLoading","titleText","setTitleText","selectedDate","setSelectedDate","contentText","setContentText","prevContentText","setPrevContentText","selectedLocations","setselectedLocations","handleDateChange","date","location","defaultData","post_title","dream_date","post_content","Number","Paper","TextField","required","label","e","utils","DateFnsUtils","locale","ruLocale","format","KeyboardButtonProps","ampm","currCont","getCurrentContent","convert","convertToRaw","JSON","stringify","inlineToolbar","controls","customControls","name","icon","inlineStyle","Autocomplete","multiple","options","getOptionLabel","option","Chip","avatar","defaultValue","handleChangeLocations","filterSelectedOptions","renderInput","fullWidth","LinearProgress","havErr","errorMessage","parse","blocks","hasChanges","tagChanges","postData","post_id","getTime","dreamDate","toLocaleString","timeZone","deleteTags","item1","some","item2","addTags","remove","post","create_user","post_type","savepost","defaultTechnics","selectedTechnics","setselectedTechnics","realisticsValue","setRealisticsValue","setTechnics","tech","handleChangeTechnics","Rating","techChanges","deleteTech","addTech","setValue","titleRu","titleEn","descriptionRu","descriptionEn","technicsData","setTechnicsData","fileldsErr","setFileldsErr","changeData","field","newTechnicsData","newFileldsErr","Tabs","centered","indicatorColor","textColor","Tab","animateHeight","axis","index","onChangeIndex","role","multiline","isError","save","is_public","expanded","setExpanded","openAlert","setOpenAlert","publicChecked","setPublicChecked","header","body","commit","alertTexts","setAlertTexts","dateOfDream","getDate","getMonth","getFullYear","getHours","getMinutes","slice","srcContent","toString","jsonPparse","convertfromraw","convertFromRaw","text_content","EditorState","createWithContent","getPlainText","closeMenu","clickMenu","newAlertTexts","checked","pathname","loadPosts","newPublic","Dialog","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","DialogActions","autoFocus","Menu","keepMounted","ListItemIcon","FormControlLabel","control","Checkbox","fontSize","Card","raised","CardHeader","paddingBottom","Tooltip","disableFocusListener","disableTouchListener","subheader","IconButton","aria-label","CardActions","disableSpacing","clsx","aria-expanded","Collapse","in","unmountOnExit","CardContent","technic","tag","readOnly","setDreams","useCallback","CircularProgress","disableShrink","TransitionDown","Slide","setCurrLangAction","setTheme","prevLanguage","setPrevLanguage","openLangSnakbar","setOpenLangSnakbar","langSnakbarMessage","setLangSnakbarMessage","setTransition","changeLanguage","language","RuDict","handleCloseLangSnakbar","times_mode","Snackbar","TransitionComponent","SnackbarContent","newLang","newUserData","ButtonBase","focusRipple","alert","newPaletteType","primaryColor","secondaryColor","Transition","forwardRef","ref","setUserState","State","email","loginData","setLoginData","password2","registData","setRegistData","emailErr","emailErrText","nicknameErr","nicknameErrText","passwordErr","passwordErrText","password2Err","password2ErrText","regFieldErrors","setRegFieldErrors","showPassword","setShowPassword","openLogin","setOpenLogin","openRegist","setOpenRegist","page","setPage","handleMouseDownPassword","preventDefault","singUp","isErr","newRegFieldErrors","newRegistData","click","response","newPages","setItem","passwordincorrect","onBlur","newLoginData","changeAuthLogin","changeAuthPassword","InputProps","endAdornment","InputAdornment","tabIndex","edge","onMouseDown","button","path","mdiVk","helperText","changeRegistLogin","changeRegistNickname","changeRegistPassword","changeRegistPassword2","aboutPaper","actions","loadTechnics","CardActionArea","CardMedia","gutterBottom","roles","useStyles1","green","dark","amber","iconVariant","marginRight","MySnackbarContentWrapper","Icon","openSnackbar","setOpenSnackbar","openSnackbarVariant","setOpenSnackbarVariant","snackbarMessage","setSnackbarMessage","handleCloseSnackbar","reason","autoHideDuration","exact","Sign","DreamMap","MainPage","ViewDreams","AddDream","AddCDream","Technics","AddTechnics","check","removeItem","round","animationDuration","scale","speed","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.04a64ca8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/map.71ce46a8.png\";","module.exports = __webpack_public_path__ + \"static/media/sun.4f817e2f.png\";","module.exports = __webpack_public_path__ + \"static/media/moon.ca0fb531.png\";","module.exports = __webpack_public_path__ + \"static/media/astronaut.7219d35a.png\";","module.exports = __webpack_public_path__ + \"static/media/cloud.7fb181bd.svg\";","import { createBrowserHistory } from \"history\";\r\n\r\nexport default createBrowserHistory();","export const GET_ERRORS = \"GET_ERRORS\";\r\nexport const USER_LOADING = \"USER_LOADING\";\r\nexport const SET_CURRENT_USER = \"SET_CURRENT_USER\";\r\n\r\nexport const SET_CLOUD = 'SET_CLOUD';\r\nexport const CLEAR_CLOUD = 'CLEAR_CLOUD';\r\n\r\nexport const SET_STAR = 'SET_STAR';\r\nexport const CLEAR_STAR = 'CLEAR_STAR';\r\n\r\nexport const SET_LANG = 'SET_LANG';\r\nexport const SET_THEME_MODE = 'SET_THEME_MODE';\r\n\r\nexport const SET_SNACKBAR_MODE = 'SET_SNACKBAR_MODE';","const words = {\r\n    current: 'En',\r\n    buttons : {\r\n        signIn: 'Sign in',\r\n        signUp: 'Sign up',\r\n        dreamJoirnal: 'Dream joirnal',\r\n        addDream: 'Add dream',\r\n        addCDream: 'Add C-dream',\r\n        techniques: 'Techniques',\r\n        adventures: 'Adventures',\r\n        close: 'Back',\r\n        about: 'About us',\r\n        cancel: 'Cancel',\r\n        add: 'Add',\r\n        Edit: 'Edit',\r\n        Delete: 'Delete',\r\n        Save: 'Save',\r\n    },\r\n    texts: {\r\n        about: 'About us About us About us About us About us About us About us About us About us About us ',\r\n        or: 'OR',\r\n        nickname: 'Nickname',\r\n        password: 'Password',\r\n        passwordAgain: 'Password again',\r\n        cancel: 'Cancel',\r\n        sucessRegistration: 'You are sign up successful',\r\n        hello: 'Hello, ',\r\n        changleLanguage: 'Save change language to ',\r\n        success: 'Success',\r\n        title: 'Title',\r\n        description: 'Description',\r\n        content: \"What's a dream\",\r\n        tags: 'Locations',\r\n        dreams: 'Dreams',\r\n        technics: 'Technics',\r\n        rating: 'Realistics',\r\n        Dream: 'Regular dream',\r\n        Cdream: 'C-dream',\r\n        NoDreams: \"You don't have dreams\",\r\n        pickDate: \"Date\",\r\n        pickTime: \"Time\",\r\n        TapToShow: \"Tap on text to show highlights\",\r\n        Public: \"Public\",\r\n        Publish: \"Unpublish\",\r\n        Unpublish: \"Publish\",\r\n        PublicAlert: \"Are you sure you want to public the dream?\",\r\n        PublicText: \"After public your friends can read this dream.\",\r\n        PublicDescription: \"Your friends can read this dream\",\r\n        UnpublicAlert: \"Are you sure you want to unpublic the dream?\",\r\n        UnpublicText: \"After unpublic your friends can't read this dream.\",\r\n        UnpublicDescription: \"Your friends can't read this dream\",\r\n        DeleteAlert: \"Are you sure you want to remove?\",\r\n        DeleteText: \"You can't restore data.\",\r\n    },\r\n    errors: {\r\n        emailLenght: 'Email must not be empty',\r\n        nicknameLenght: 'Nickname must not be empty',\r\n        passwordLenght: 'Password must not be empty',\r\n        password2Lenght: 'Password must not be empty',\r\n        passwordsCompare: 'Passwords not equal',\r\n        UserNotExist: 'Invalid email or password',\r\n        EmailIsNotValid: 'Invalid email',\r\n        IncorrectPassword: 'Invalid email or password',\r\n        EmailIsBusy: 'Email is busy',\r\n        PasswordLenght5Symbols: 'Minimum password length: 5 symbols',\r\n        NotLogin: 'You not loggin in',\r\n        EmptyTitle: 'Title must not be empty',\r\n        EmptyDescription: 'Description must not be empty',\r\n        EmptyDream: 'Dream must not be empty',\r\n        NoChanges: 'No changes',\r\n        CantDeletePost: 'Error deleting dream',\r\n    },\r\n};\r\n\r\nexport default words;","import { SET_LANG } from '../actions/types';\r\nimport EnDict from '../dictionary/en';\r\n\r\nconst initialState = {\r\n    currLang: EnDict,\r\n}\r\n\r\nexport function currLangReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case SET_LANG:\r\n            return { ...state, currLang: action.currLangState }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}","import { SET_CLOUD, CLEAR_CLOUD } from '../actions/types';\r\n\r\nconst initialState = {\r\n\tclouds: [],\r\n}\r\n\r\nexport function cloudsReducer(state = initialState, action) {\r\n\tswitch (action.type) {\r\n\t\tcase SET_CLOUD:\r\n\t\t\treturn {\r\n\t\t\t\t...state, clouds: [...state.clouds, action.cloudState]\r\n\t\t\t}\r\n\t\tcase CLEAR_CLOUD:\r\n\t\t\treturn {\r\n\t\t\t\t...state, clouds: []\r\n\t\t\t}\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n}","import { SET_STAR, CLEAR_STAR } from '../actions/types';\r\n\r\nconst initialState = {\r\n\tstars: [],\r\n}\r\n\r\nexport function starsReducer(state = initialState, action) {\r\n\tswitch (action.type) {\r\n\t\tcase SET_STAR:\r\n\t\t\treturn {\r\n\t\t\t\t...state, stars: [...state.stars, action.starState]\r\n\t\t\t}\r\n\t\tcase CLEAR_STAR:\r\n\t\t\treturn {\r\n\t\t\t\t...state, stars: []\r\n\t\t\t}\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n}","import { SET_THEME_MODE } from '../actions/types';\r\n\r\nconst initialState = {\r\n    palette: {\r\n        type: \"dark\",\r\n        primary: { main: \"#f9a825\" },\r\n        secondary: { main: \"#f50057\" },\r\n        error: { main: \"#cc0000\" },\r\n    },\r\n}\r\n\r\nexport function themeReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case SET_THEME_MODE:\r\n            return { ...state, palette: action.palette }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}","import { SET_CURRENT_USER, USER_LOADING } from \"../actions/types\";\r\n\r\nconst isempty = require(\"is-empty\");\r\n\r\nconst initialState = {\r\n    isAuthenticated: false,\r\n    user: {},\r\n    loading: false\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case SET_CURRENT_USER:\r\n            return {\r\n                ...state,\r\n                isAuthenticated: !isempty(action.payload),\r\n                user: action.payload\r\n            };\r\n        case USER_LOADING:\r\n            return {\r\n                ...state,\r\n                loading: true\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}","import { GET_ERRORS } from \"../actions/types\";\r\nconst initialState = {};\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case GET_ERRORS:\r\n            return action.payload;\r\n        default:\r\n            return state;\r\n    }\r\n}","import { SET_SNACKBAR_MODE } from '../actions/types';\r\n\r\nconst initialState = {\r\n    snackbar: {\r\n        open: false,\r\n        variant: '',\r\n        message: '',\r\n    },\r\n}\r\n\r\nexport function snackbarReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case SET_SNACKBAR_MODE:\r\n            return { ...state, snackbar: action.snackbar }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}","import { combineReducers } from 'redux';\r\nimport { currLangReducer } from './currLang';\r\nimport { cloudsReducer } from './cloud';\r\nimport { starsReducer } from './star';\r\nimport { themeReducer } from './themeMode';\r\nimport authReducer from './authReducer';\r\nimport errorReducer from './errorReducer';\r\nimport { snackbarReducer } from './snackbarReducer';\r\n\r\nexport const rootReducer = combineReducers({\r\n    lang: currLangReducer,\r\n    clouds: cloudsReducer,\r\n    stars: starsReducer,\r\n    themeMode: themeReducer,\r\n    auth: authReducer,\r\n    errors: errorReducer,\r\n    snackbar: snackbarReducer,\r\n});","import { createStore, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { rootReducer } from './reducers';\r\n\r\nconst middleware = [thunk];\r\n\r\nexport const store = createStore(\r\n    rootReducer,\r\n    {},\r\n    applyMiddleware(...middleware)\r\n);","import axios from \"axios\";\r\n\r\nconst setAuthToken = token => {\r\n    if (token) {\r\n        // Apply authorization token to every request if logged in\r\n        axios.defaults.headers.common[\"Authorization\"] = token;\r\n    }\r\n    else {\r\n        // Delete auth header\r\n        delete axios.defaults.headers.common[\"Authorization\"];\r\n    }\r\n};\r\n\r\nexport default setAuthToken;","import jwt_decode from \"jwt-decode\";\r\n\r\nimport { store } from \"../store\";\r\nimport setAuthToken from \"../utils/setAuthToken\";\r\nimport { SET_CURRENT_USER } from \"../actions/types\"\r\n\r\nexport function CheckTimeOut() {\r\n    if (localStorage.jwtToken) {\r\n        const token = localStorage.jwtToken;\r\n        setAuthToken(token);\r\n        const decoded = jwt_decode(token);\r\n        store.dispatch({\r\n            type: SET_CURRENT_USER,\r\n            payload: decoded\r\n        });\r\n\r\n        const currentTime = Date.now() / 1000; // to get in milliseconds\r\n        if (decoded.exp < currentTime) {\r\n            return false;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }\r\n}","import { SET_LANG } from '../actions/types';\r\n\r\nexport function setCloud(state) {\r\n\treturn {\r\n\t\ttype: state.type,\r\n\t\tcloudState: state.cloudState,\r\n\t}\r\n}\r\nexport function setStar(state) {\r\n\treturn {\r\n\t\ttype: state.type,\r\n\t\tstarState: state.starState,\r\n\t}\r\n}\r\nexport function setCurrLang(state) {\r\n\treturn {\r\n\t\ttype: SET_LANG,\r\n\t\tcurrLangState: state,\r\n\t}\r\n}\r\nexport function setTheme(state) {\r\n\treturn {\r\n\t\ttype: state.type,\r\n\t\tpalette: state.palette,\r\n\t}\r\n}\r\nexport function setUserState(state) {\r\n\treturn {\r\n\t\ttype: state.type,\r\n\t\tpayload: state.payload,\r\n\t}\r\n}\r\nexport function setSnackbar(state) {\r\n\treturn {\r\n\t\ttype: state.type,\r\n\t\tsnackbar: state.snackbar,\r\n\t}\r\n}","import React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst PrivateRoute = ({ component: Component, auth, ...rest }) => (\r\n    <Route\r\n        {...rest}\r\n        render={props =>\r\n            auth.isAuthenticated === true\r\n                ? <Component {...props} />\r\n                : <Redirect to=\"/\" />\r\n        }\r\n    />\r\n);\r\n\r\nPrivateRoute.propTypes = {\r\n    auth: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    auth: state.auth\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps\r\n)(PrivateRoute);","import axios from \"axios\";\r\n\r\n\r\nexport const instance = axios.create({\r\n    baseURL: 'https://ldserver.herokuapp.com',\r\n    timeout: 10000,\r\n    headers: { \"Access-Control-Allow-Origin\": \"*\" }\r\n});","import { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\nimport WarningIcon from '@material-ui/icons/Warning';\r\nimport ErrorIcon from '@material-ui/icons/Error';\r\nimport InfoIcon from '@material-ui/icons/Info';\r\n\r\nimport MapImg from '../img/map.png';\r\nimport SunImg from '../img/sun.png';\r\nimport MoonImg from '../img/moon.png';\r\nimport AstronautImg from '../img/astronaut.png';\r\nimport CloudSvg from '../img/cloud.svg';\r\n\r\nexport const params = {\r\n    amountStars: 25,\r\n    amountClouds: 5,\r\n    size: {\r\n        min: 1,\r\n        max: 5,\r\n        giant: 9\r\n    },\r\n    duration: {\r\n        min: 5,\r\n        max: 25,\r\n    }\r\n}\r\n\r\nexport const variantIcon = {\r\n    success: CheckCircleIcon,\r\n    warning: WarningIcon,\r\n    error: ErrorIcon,\r\n    info: InfoIcon,\r\n};\r\n\r\nexport function randomBetween(a, b) {\r\n    return (a + (Math.random() * (b - a)));\r\n}\r\n\r\nexport const useStyles = makeStyles(theme => ({\r\n    SwipeableViews: {\r\n        position: 'relative',\r\n        height: '90%',\r\n        '& .react-swipeable-view-container': {\r\n            height: '100% !Important',\r\n        },\r\n    },\r\n    media: {\r\n        height: 140,\r\n    },\r\n    iconCenter: {\r\n        display: \"block\",\r\n        margin: \"auto\"\r\n    },\r\n    dreamCardDiv: {\r\n        marginTop: '15px',\r\n        marginBottom: '15px',\r\n        width: '100%',\r\n        height: 'auto',\r\n        borderRadius: '4px',\r\n    },\r\n    divDreamsNotFoundImg: {\r\n        background: \"url('https://static.thenounproject.com/png/603669-200.png') no-repeat center\",\r\n    },\r\n    divDreamsNotFound: {\r\n        position: \"relative\",\r\n        left: \"50%\",\r\n        transform: \"translateX(-50%)\",\r\n        width: 200,\r\n        height: 100,\r\n        textAlign: \"center\",\r\n    },\r\n    contentPaper: {\r\n        backgroundColor: theme.palette.text.main,\r\n        padding: 10,\r\n    },\r\n    pickerGridContainer: {\r\n        position: \"relative\",\r\n        width: \"85%\",\r\n        left: \"50%\",\r\n        transform: \"translateX(-50%)\",\r\n        marginBottom: \"5px\",\r\n    },\r\n    div85width: {\r\n        position: \"relative\",\r\n        width: \"85%\",\r\n        top: \"65%\",\r\n        left: \"50%\",\r\n        transform: \"translate(-50%, -50%)\",\r\n    },\r\n    ratingGridContainer: {\r\n        position: \"relative\",\r\n        width: \"100%\",\r\n        top: \"65%\",\r\n        left: \"50%\",\r\n        transform: \"translate(-50%, -50%)\",\r\n    },\r\n    pickers: {\r\n        position: \"relative\",\r\n        width: \"90%\",\r\n        left: \"50%\",\r\n        transform: \"translateX(-50%)\",\r\n    },\r\n    avatarRoot: {\r\n        textAlign: 'center',\r\n        width: '100%',\r\n    },\r\n    verySmallAvatar: {\r\n        margin: theme.spacing(1),\r\n        width: theme.spacing(3),\r\n        height: theme.spacing(3),\r\n        display: 'inline-flex !Important',\r\n    },\r\n    smallAvatar: {\r\n        margin: theme.spacing(0.5),\r\n        width: theme.spacing(5),\r\n        height: theme.spacing(5),\r\n        display: 'inline-flex !Important',\r\n    },\r\n    smallChip: {\r\n        margin: theme.spacing(0.5),\r\n    },\r\n    centerCircularProgress: {\r\n        position: 'relative',\r\n        top: '50%',\r\n        left: '50%',\r\n    },\r\n    mainGridDreamsBodyItemContainer: {\r\n        paddingTop: '16px',\r\n        position: 'absolute',\r\n        boxSizing: 'border-box',\r\n        maxHeight: '90%',\r\n        overflow: 'auto',\r\n        borderRadius: '4px',\r\n    },\r\n    mainGridDreamsBodyItemContainerPaper: {\r\n        height: '100%',\r\n        opacity: 0.9,\r\n    },\r\n    mainGridDreamsBodyItem: {\r\n        overflow: 'hidden',\r\n    },\r\n    mainGridDreamsContainer: {\r\n        height: '100%',\r\n        position: 'relative',\r\n        width: '90%',\r\n        left: '50%',\r\n        transform: 'translateX(-50%)',\r\n    },\r\n    card: {\r\n        maxWidth: '100%',\r\n        height: '100%',\r\n    },\r\n    expand: {\r\n        transform: \"rotate(0deg)\",\r\n        marginLeft: \"auto\",\r\n        transition: theme.transitions.create(\"transform\", {\r\n            duration: theme.transitions.duration.shortest\r\n        })\r\n    },\r\n    expandOpen: {\r\n        transform: \"rotate(180deg)\"\r\n    },\r\n    textField: {\r\n        width: '100%',\r\n    },\r\n    margin: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    root: {\r\n        flexGrow: 1,\r\n        position: 'relative',\r\n        width: '100%',\r\n        height: window.innerHeight - 1,\r\n        overflow: 'hidden',\r\n    },\r\n    mainPage: {\r\n        top: 0,\r\n        left: 0,\r\n        position: 'absolute',\r\n        transition: 'all 0.3s linear',\r\n        width: '100%',\r\n        height: '100%',\r\n    },\r\n    aboutPage: {\r\n        position: 'absolute',\r\n        transition: 'all 0.3s linear',\r\n        top: '100%',\r\n        width: '100%',\r\n        height: '100%',\r\n    },\r\n    AppDivDark: {\r\n        position: 'fixed',\r\n        background: 'radial-gradient(ellipse at center, rgba(8, 25, 42, 1) 20%, rgba(1, 4, 6, 1) 100%)',\r\n        opacity: 1,\r\n        margin: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        zIndex: -3,\r\n    },\r\n    AppDivLight: {\r\n        position: 'absolute',\r\n        background: 'radial-gradient(ellipse at center, rgba(207, 225, 237, 1) 20%, rgba(127, 170, 202, 1) 100%)',\r\n        transition: 'opacity 0.5s linear',\r\n        margin: 0,\r\n        opacity: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        zIndex: -3,\r\n    },\r\n    AppStarsDiv: {\r\n        transition: 'opacity 0.5s linear',\r\n        opacity: 0,\r\n        position: 'absolute',\r\n        width: '100%',\r\n        height: '100%',\r\n        overflow: 'hidden',\r\n        zIndex: -2,\r\n    },\r\n    AppCloudsDiv: {\r\n        transition: 'opacity 0.5s linear',\r\n        opacity: 0,\r\n        position: 'absolute',\r\n        width: '100%',\r\n        height: '100%',\r\n        overflow: 'hidden',\r\n        zIndex: -2,\r\n    },\r\n    AppStar: {\r\n        borderRadius: '100%',\r\n        position: 'absolute',\r\n        background: 'radial-gradient(ellipse at center, rgba(177, 198, 219, 1) 2%, rgba(5, 63, 118, 1) 100%)',\r\n        filter: 'blur(1px)',\r\n        animation: '$shine infinite alternate',\r\n        zIndex: -1,\r\n    },\r\n    AppCloud: {\r\n        position: 'absolute',\r\n        backgroundRepeat: 'no-repeat',\r\n        backgroundImage: 'url(' + CloudSvg + ')',\r\n        animation: '$moveclouds infinite linear',\r\n        zIndex: -1,\r\n    },\r\n    image: {\r\n        position: 'relative',\r\n        left: '50%',\r\n        top: '25%',\r\n        transform: 'translate(-50%, -25%)',\r\n        width: '35vw !important',\r\n        height: '35vw',\r\n        borderRadius: '50%',\r\n    },\r\n    SkyDiv: {\r\n        position: 'absolute',\r\n        borderRadius: '50%',\r\n        top: 0,\r\n        left: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        overflow: 'hidden',\r\n    },\r\n    MoonSrc: {\r\n        backgroundSize: 'cover',\r\n        background: 'url(' + MoonImg + ')',\r\n        backgroundRepeat: 'no-repeat',\r\n        position: 'absolute',\r\n        top: 0,\r\n        left: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        transition: 'all 0.3s linear',\r\n    },\r\n    SunSrc: {\r\n        backgroundSize: 'cover',\r\n        background: 'url(' + SunImg + ')',\r\n        backgroundRepeat: 'no-repeat',\r\n        position: 'absolute',\r\n        top: 0,\r\n        left: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        transition: 'all 0.3s linear',\r\n    },\r\n    AstronautButton: {\r\n        position: 'relative',\r\n        left: '50%',\r\n        top: '50%',\r\n        transform: 'translate(-50%, -50%)',\r\n        width: '25vw !important',\r\n        height: '25vw',\r\n        borderRadius: '50%',\r\n    },\r\n    AstronautDiv: {\r\n        position: 'absolute',\r\n        borderRadius: '50%',\r\n        top: 0,\r\n        left: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        overflow: 'hidden',\r\n        animation: '$swinging 30s infinite linear',\r\n    },\r\n    AstronautImg: {\r\n        backgroundSize: 'cover',\r\n        background: 'url(' + AstronautImg + ')',\r\n        backgroundRepeat: 'no-repeat',\r\n        position: 'absolute',\r\n        top: 0,\r\n        left: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        transition: 'filter 0.5s linear',\r\n    },\r\n    MapButton: {\r\n        position: 'relative',\r\n        left: '50%',\r\n        top: '50%',\r\n        transform: 'translate(-50%, -50%)',\r\n        width: '25vw !important',\r\n        height: '25vw',\r\n        borderRadius: '10%',\r\n    },\r\n    MapDiv: {\r\n        position: 'absolute',\r\n        top: 0,\r\n        left: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        overflow: 'hidden',\r\n        animation: '$swinging 30s infinite linear',\r\n    },\r\n    MapImg: {\r\n        backgroundSize: 'cover',\r\n        background: 'url(' + MapImg + ')',\r\n        backgroundRepeat: 'no-repeat',\r\n        position: 'absolute',\r\n        top: 0,\r\n        left: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        transition: 'filter 0.5s linear',\r\n    },\r\n    mainGridContainer: {\r\n        height: '100%',\r\n    },\r\n    mainGridHeadItem: {\r\n        maxWidth: '100% !Important',\r\n    },\r\n    mainGridBodyItem: {\r\n        maxWidth: '100% !Important',\r\n        position: 'relative',\r\n    },\r\n    menuButtonContainerItem: {\r\n        maxWidth: '100% !Important',\r\n    },\r\n    menuButtonContainer: {\r\n        height: '100% !Important',\r\n    },\r\n    menuButtonGrid: {\r\n    },\r\n    menuDivButton: {\r\n        maxWidth: '100% !Important',\r\n        padding: '10px',\r\n    },\r\n    menuButton: {\r\n        minWidth: '55vw',\r\n        maxWidth: '55vw',\r\n    },\r\n    actionButton: {\r\n        minWidth: '40vw',\r\n        maxWidth: '40vw',\r\n    },\r\n    poppupButton: {\r\n        minWidth: '90%',\r\n        maxWidth: '90%',\r\n    },\r\n    mainGridFooterItem: {\r\n        maxWidth: '100% !Important',\r\n    },\r\n    menuButtonContainerFooterLanguageButtons: {\r\n    },\r\n    aboutGridContainer: {\r\n        width: '100%',\r\n        height: '100%',\r\n        margin: 0,\r\n    },\r\n    fullMinWidth: {\r\n        minWidth: '100% !Important',\r\n        position: 'relative'\r\n    },\r\n    inputDiv: {\r\n        minWidth: '85% !Important',\r\n        maxWidth: '85% !Important',\r\n        position: 'absolute',\r\n        top: '50%',\r\n        left: '50%',\r\n        transform: 'translate(-50%, -50%)',\r\n        opacity: 1,\r\n    },\r\n    inputScrollableDiv: {\r\n        minWidth: '85% !Important',\r\n        maxWidth: '85% !Important',\r\n        height: '100%',\r\n        position: 'absolute',\r\n        top: '50%',\r\n        left: '50%',\r\n        transform: 'translate(-50%, -50%)',\r\n        opacity: 1,\r\n    },\r\n    chips: {\r\n        display: \"flex\",\r\n        flexWrap: \"wrap\",\r\n    },\r\n    noWrap: {\r\n        flexWrap: 'nowrap',\r\n    },\r\n    chip: {\r\n        margin: 1\r\n    },\r\n    aboutGridItem: {\r\n        width: '100%',\r\n    },\r\n    mainPaperGridBodyItem: {\r\n        maxWidth: '100% !Important',\r\n    },\r\n    paper: {\r\n        height: '90%',\r\n        margin: theme.spacing(3, 2),\r\n        opacity: 0.9,\r\n    },\r\n    minMargin: {\r\n        margin: theme.spacing(0.5),\r\n    },\r\n    VKLoginDiv: {\r\n        position: 'absolute',\r\n        width: '15vw',\r\n        height: '15vw',\r\n    },\r\n    VKLoginButton: {\r\n        background: 'url(https://dressirovka70.ru/wp-content/uploads/2019/10/1200px-VK.com-logo.svg1_-1024x1024.png)',\r\n        boxShadow: '0px 3px 1px -2px rgba(0,0,0,0.2), 0px 2px 2px 0px rgba(0,0,0,0.14), 0px 1px 5px 0px rgba(0,0,0,0.12)',\r\n        backgroundSize: 'cover',\r\n        borderRadius: '25%',\r\n        width: '100%',\r\n        height: '100%',\r\n    },\r\n    \"@keyframes shine\": {\r\n        \"0%\": {\r\n            transform: 'scale(1)',\r\n            opacity: '1',\r\n        },\r\n        \"20%\": {\r\n            transform: 'scale(.9)',\r\n            opacity: '.8',\r\n        },\r\n        \"40%\": {\r\n            transform: 'scale(1)',\r\n            opacity: '.9',\r\n        },\r\n        \"60%\": {\r\n            transform: 'scale(.2)',\r\n            opacity: '.1',\r\n        },\r\n        \"80%\": {\r\n            transform: 'scale(.5)',\r\n            opacity: '.5',\r\n        },\r\n        \"100%\": {\r\n            transform: 'scale(.9)',\r\n            opacity: '.9',\r\n        },\r\n    },\r\n    \"@keyframes moveclouds\": {\r\n        '100%': {\r\n            left: '-100%',\r\n        },\r\n    },\r\n    \"@keyframes swinging\": {\r\n        '0%': {\r\n            transform: 'rotate(0)',\r\n        },\r\n        '10%': {\r\n            transform: 'rotate(12deg)',\r\n        },\r\n        '20%': {\r\n            transform: 'rotate(-10deg)',\r\n        },\r\n        '30%': {\r\n            transform: 'rotate(9deg)',\r\n        },\r\n        '40%': {\r\n            transform: 'rotate(-8deg)',\r\n        },\r\n        '50%': {\r\n            transform: 'rotate(7deg)',\r\n        },\r\n        '60%': {\r\n            transform: 'rotate(-6deg)',\r\n        },\r\n        '70%': {\r\n            transform: 'rotate(5deg)',\r\n        },\r\n        '80%': {\r\n            transform: 'rotate(-4deg)',\r\n        },\r\n        '90%': {\r\n            transform: 'rotate(3deg)',\r\n        },\r\n        '100%': {\r\n            transform: 'rotate(0)',\r\n        },\r\n    }\r\n}));","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Popover from \"@material-ui/core/Popover\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nimport Skeleton from '@material-ui/lab/Skeleton';\r\n\r\nimport { useStyles } from '../../styles/Styles';\r\n//import { SET_SNACKBAR_MODE } from \"../../actions/types\";\r\nimport { setSnackbar } from '../../actions/Actions';\r\n\r\nfunction MapCell(props) {\r\n    const classes = useStyles();\r\n    const { i, j, cellHeight, cellWidth, id, color, locations, palette, lang } = props;\r\n    const [anchorEl, setAnchorEl] = React.useState(null);\r\n    const [tagId, setTagId] = React.useState(id);\r\n\r\n    const disabledSave = tagId === id ? true : false;\r\n\r\n    const handleClick = event => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setTagId(id);\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    const changeTagId = event => {\r\n        setTagId(event.target.value);\r\n    };\r\n\r\n    const saveCellLoc = () => {\r\n        let newCell = {\r\n            \"i\": i,\r\n            \"j\": j,\r\n        };\r\n        newCell.oldLoc = id;\r\n        newCell.newLoc = tagId;\r\n        console.log(newCell);\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    const open = Boolean(anchorEl);\r\n    const popoverId = open ? \"simple-popover\" : undefined;\r\n\r\n    return (\r\n        <td\r\n            style={{\r\n                height: cellHeight + 'px',\r\n                minWidth: cellWidth + 'px',\r\n                maxWidth: cellWidth + 'px',\r\n                borderRadius: '40%',\r\n                overflow: 'hidden',\r\n                //border: '1px black solid',\r\n                transition: \"all 0.1s\",\r\n            }}\r\n        >\r\n            {locations.length\r\n                ? <div className={classes.aboutGridContainer}\r\n                    onClick={handleClick}\r\n                    style={{\r\n                        backgroundImage: 'url(' + locations.find(loc => loc.id === tagId).img_url + ')',\r\n                        backgroundSize: 'contain',\r\n                        backgroundColor: color,\r\n\r\n                    }}\r\n                />\r\n                : <Skeleton variant=\"circle\" width={cellHeight} height={cellWidth} />\r\n\r\n            }\r\n\r\n            <Popover\r\n                id={popoverId}\r\n                open={open}\r\n                anchorEl={anchorEl}\r\n                onClose={handleClose}\r\n                anchorOrigin={{\r\n                    vertical: \"center\",\r\n                    horizontal: \"center\"\r\n                }}\r\n                transformOrigin={{\r\n                    vertical: \"center\",\r\n                    horizontal: \"center\"\r\n                }}\r\n            >\r\n                <Grid className={classes.mainGridContainer}\r\n                    container\r\n                    direction=\"column\"\r\n                    justify=\"center\"\r\n                    alignItems=\"stretch\"\r\n                >\r\n                    <Grid item\r\n                        xs={11}\r\n                        className={classes.mainGridBodyItem}\r\n                        style={{\r\n                            padding: '16px'\r\n                        }}\r\n                    >\r\n                        {locations.length\r\n                            ? <Grid className={classes.mainGridContainer}\r\n                                container\r\n                                direction=\"column\"\r\n                                justify=\"center\"\r\n                                alignItems=\"stretch\"\r\n                            >\r\n                                <Grid item\r\n                                    style={{\r\n                                        textAlign: 'center'\r\n                                    }}\r\n                                >\r\n                                    <Typography component='div' variant='h6'>\r\n                                        {lang.currLang.current === \"Ru\"\r\n                                            ? locations.find(loc => loc.id === tagId).name_rus\r\n                                            : locations.find(loc => loc.id === tagId).name_eng\r\n                                        }\r\n                                    </Typography>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Grid\r\n                                        container\r\n                                        direction=\"row\"\r\n                                        justify=\"space-around\"\r\n                                        alignItems=\"center\"\r\n                                    >\r\n                                        <Grid item>\r\n                                            <FormControl className={classes.formControl}>\r\n                                                <Select value={tagId}\r\n                                                    onChange={changeTagId}\r\n                                                    MenuProps={{\r\n                                                        PaperProps: {\r\n                                                            style: {\r\n                                                                maxHeight: 48 * 4.5 + 8,\r\n                                                                width: 'auto',\r\n                                                            },\r\n                                                        },\r\n                                                    }}\r\n                                                >\r\n                                                    {locations.map((item, key) => (\r\n                                                        <MenuItem key={key} value={item.id}>\r\n                                                            <Avatar className={classes.smallAvatar}\r\n                                                                src={item.img_url}\r\n                                                                style={palette.type === 'dark'\r\n                                                                    ? {\r\n                                                                        filter: 'invert(1)',\r\n                                                                    }\r\n                                                                    : {}}\r\n                                                            />\r\n                                                        </MenuItem>\r\n                                                    ))}\r\n                                                </Select>\r\n                                            </FormControl>\r\n                                        </Grid>\r\n                                        <Grid item>\r\n                                            <Typography component='div' variant='body2'>\r\n                                                {lang.currLang.texts.dreams}:\r\n                                            </Typography>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                            : ''\r\n                        }\r\n                    </Grid>\r\n                    <Grid item xs={1} className={classes.mainGridBodyItem}>\r\n                        <Grid className={classes.menuDivButton}\r\n                            container\r\n                            direction=\"row\"\r\n                            justify=\"space-around\"\r\n                            alignItems=\"stretch\"\r\n                        >\r\n                            <Grid item xs={6} align=\"center\">\r\n                                <Button className={classes.poppupButton}\r\n                                    variant=\"contained\"\r\n                                    color=\"secondary\"\r\n                                    onClick={handleClose}\r\n                                >\r\n                                    {lang.currLang.texts.cancel}\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid item xs={6} align=\"center\">\r\n                                <Button className={classes.poppupButton}\r\n                                    disabled={disabledSave}\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    onClick={saveCellLoc}\r\n                                >\r\n                                    {lang.currLang.buttons.Save}\r\n                                </Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Popover>\r\n        </td >\r\n    )\r\n}\r\n\r\nMapCell.propTypes = {\r\n    setSnackbar: PropTypes.func.isRequired,\r\n    lang: PropTypes.object.isRequired,\r\n    palette: PropTypes.object.isRequired,\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        lang: store.lang,\r\n        palette: store.themeMode.palette,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setSnackbar: snackbar => dispatch(setSnackbar(snackbar)),\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(MapCell);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Container from '@material-ui/core/Container';\r\nimport Button from '@material-ui/core/Button';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport { instance } from './Config';\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\nimport MapCell from './muiltiple/MapCell';\r\nimport { useStyles } from '../styles/Styles';\r\n\r\nconst JSONtable = {\r\n    0: {\r\n        0: {\r\n            id: 5,\r\n            color: \"#666699\",\r\n        },\r\n        1: {\r\n            id: 3,\r\n            color: \"#cc9900\",\r\n        },\r\n        2: {\r\n            id: 4,\r\n            color: \"#669900\",\r\n        }\r\n    },\r\n    1: {\r\n        0: {\r\n            id: 5,\r\n            color: \"#666699\",\r\n        },\r\n        1: {\r\n            id: 6,\r\n            color: \"#3399ff\",\r\n        },\r\n        2: {\r\n            id: 5,\r\n            color: \"#666699\",\r\n        }\r\n    },\r\n    2: {\r\n        0: {\r\n            id: 5,\r\n            color: \"#666699\",\r\n        },\r\n        1: {\r\n            id: 5,\r\n            color: \"#666699\",\r\n        },\r\n        2: {\r\n            id: 5,\r\n            color: \"#666699\",\r\n        }\r\n    },\r\n    3: {\r\n        0: {\r\n            id: 5,\r\n            color: \"#666699\",\r\n        },\r\n        1: {\r\n            id: 5,\r\n            color: \"#666699\",\r\n        },\r\n        2: {\r\n            id: 5,\r\n            color: \"#666699\",\r\n        }\r\n    },\r\n};\r\n\r\nfunction DreamMap(props) {\r\n    const { lang, themeMode, history } = props;\r\n    const classes = useStyles();\r\n    const muiTheme = createMuiTheme(themeMode);\r\n    const [cellSize, setCellSize] = React.useState(50);\r\n    const [locations, setLocations] = React.useState({});\r\n    \r\n    const changeCellSize = (event, newValue) => {\r\n        setCellSize(newValue);\r\n    };\r\n\r\n    const createTable = () => {\r\n        let table = [];\r\n        let i = 0;\r\n        let j = 0;\r\n\r\n        Object.keys(JSONtable).forEach(row => {\r\n            let rows = [];\r\n            Object.keys(JSONtable[row]).forEach(col => {\r\n                rows.push(\r\n                    <MapCell key={'cell' + i + j}\r\n                        i={i}\r\n                        j={j}\r\n                        cellHeight={cellSize * 0.6}\r\n                        cellWidth={cellSize * 0.6}\r\n                        id={JSONtable[row][col].id}\r\n                        color={JSONtable[row][col].color}\r\n                        locations={locations}\r\n                    />\r\n                );\r\n                i++;\r\n            })\r\n            table.push(\r\n                <tr key={'row' + j} >\r\n                    {rows}\r\n                </tr>\r\n            );\r\n            j++;\r\n            i = 0;\r\n        });\r\n\r\n        return table;\r\n    }\r\n\r\n    const loadTags = () => {\r\n        instance.get(\"/gettags\")\r\n            .then(res => {\r\n                setLocations(res.data);\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            });\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        loadTags();\r\n    }, []);\r\n\r\n    return (\r\n        <MuiThemeProvider theme={muiTheme}>\r\n            <CssBaseline />\r\n            <div className={classes.root}>\r\n                <Grid className={classes.mainGridContainer}\r\n                    container\r\n                    direction=\"column\"\r\n                    justify=\"center\"\r\n                    alignItems=\"stretch\" >\r\n                    <Grid item xs={10} zeroMinWidth className={classes.mainGridDreamsBodyItem}>\r\n                        <Container\r\n                            style={{\r\n                                paddingTop: '16px',\r\n                                height: '83%',\r\n                                width: '100%',\r\n                                position: 'absolute',\r\n                            }}\r\n                        >\r\n                            <div\r\n                                style={{\r\n                                    position: 'relative',\r\n                                    height: '100%',\r\n                                    width: '100%',\r\n                                    overflow: 'auto',\r\n                                    borderRadius: '4px',\r\n                                }}\r\n                            >\r\n                                <table\r\n                                    style={{\r\n                                        margin: '0 auto',\r\n                                        backgroundColor: 'rgb(196, 188, 78, 0.6)',\r\n                                        borderRadius: '4px',\r\n                                    }}\r\n                                >\r\n                                    <tbody>\r\n                                        {createTable()}\r\n                                    </tbody>\r\n                                </table>\r\n                            </div>\r\n                        </Container>\r\n                    </Grid>\r\n                    <Grid item xs={1} zeroMinWidth className={classes.mainGridBodyItem}>\r\n                        <div\r\n                            style={{\r\n                                position: 'absolute',\r\n                                left: '50%',\r\n                                top: '50%',\r\n                                transform: 'translate(-50%, -50%)',\r\n                                width: '60%',\r\n                            }}\r\n                        >\r\n                            <Slider\r\n                                min={6}\r\n                                value={cellSize}\r\n                                onChange={changeCellSize}\r\n                            />\r\n                        </div>\r\n                    </Grid>\r\n                    <Grid item xs={1} zeroMinWidth className={classes.mainGridBodyItem}>\r\n                        <Grid\r\n                            container\r\n                            direction=\"row\"\r\n                            justify=\"space-evenly\"\r\n                            alignItems=\"center\"\r\n                        >\r\n                            <Grid item xs={6} align=\"center\">\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    color=\"secondary\"\r\n                                    className={classes.actionButton}\r\n                                    onClick={() => { history.push(\"/luciddreams\") }}\r\n                                >\r\n                                    {lang.currLang.buttons.close}\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid item xs={6} />\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </MuiThemeProvider >\r\n    )\r\n}\r\n\r\nDreamMap.propTypes = {\r\n    themeMode: PropTypes.object.isRequired,\r\n    lang: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        themeMode: store.themeMode,\r\n        lang: store.lang,\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(DreamMap);","export function compare(obj1, obj2) {\r\n    if (!Object.keys(obj2).every(key => obj1.hasOwnProperty(key))) {\r\n        return false;\r\n    }\r\n    return Object.keys(obj1).every(function (key) {\r\n        if (typeof obj1[key] == \"object\") {\r\n            return compare(obj1[key], obj2[key]);\r\n        }\r\n        else {\r\n            return obj1[key] === obj2[key];\r\n        }\r\n    });\r\n}","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport ruLocale from \"date-fns/locale/ru\";\r\nimport enLocale from \"date-fns/locale/ru\";\r\n\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Button from '@material-ui/core/Button';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\n\r\nimport MUIRichTextEditor from 'mui-rte';\r\nimport { convertToRaw } from 'draft-js';\r\n\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\n\r\nimport { MuiPickersUtilsProvider, KeyboardTimePicker, KeyboardDatePicker } from '@material-ui/pickers';\r\n\r\nimport FormatColorFillIcon from '@material-ui/icons/FormatColorFill';\r\n\r\nimport { useStyles } from '../styles/Styles';\r\nimport { setSnackbar } from '../actions/Actions';\r\nimport { SET_SNACKBAR_MODE } from \"../actions/types\";\r\n\r\nimport { instance } from './Config';\r\n\r\nimport { compare } from '../functions';\r\n\r\nlet defaultTags = [];\r\n\r\nfunction AddDream(props) {\r\n    const classes = useStyles();\r\n    const { lang, themeMode, history, auth, setSnackbar } = props;\r\n    const muiTheme = createMuiTheme(themeMode);\r\n    Object.assign(muiTheme, {\r\n        overrides: {\r\n            MUIRichTextEditor: {\r\n                root: {\r\n                    border: \"1px solid gray\",\r\n                    borderRadius: '4px',\r\n                    height: '100%',\r\n                    //Весь компонент\r\n                },\r\n                container: {\r\n                    height: '100%',\r\n                    margin: '0 !Important',\r\n                    //Без шапки\r\n                },\r\n                toolbar: {\r\n                    //textAlign: 'center',\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    justifyContent: 'center',\r\n                    height: '20%',\r\n                    minHeight: '48px',\r\n                    margin: '0 !Important',\r\n                    borderBottom: \"1px solid gray\",\r\n                    borderRadius: '4px',\r\n                },\r\n                placeHolder: {\r\n                    height: '72%',\r\n                },\r\n                editor: {\r\n                    height: '72%',\r\n                    width: '100%',\r\n                    position: 'relative',\r\n                    overflow: 'hidden',\r\n                    //Эдитор\r\n                },\r\n                editorContainer: {\r\n                    margin: '0 !Important',\r\n                    padding: \"0px 14px\",\r\n                    borderRadius: '4px',\r\n                    position: 'relative',\r\n                    boxSizing: 'border-box',\r\n                    maxHeight: '100%',\r\n                    overflow: 'auto',\r\n                    //Редактор\r\n                },\r\n            }\r\n        }\r\n    })\r\n    const [isEditMode, setIsEditMode] = React.useState(false);\r\n    const [isLoading, setIsLoading] = React.useState(false);\r\n    const [titleText, setTitleText] = React.useState('');\r\n    const [selectedDate, setSelectedDate] = React.useState(new Date());\r\n    const [contentText, setContentText] = React.useState();\r\n    const [prevContentText, setPrevContentText] = React.useState();\r\n    const [selectedLocations, setselectedLocations] = React.useState([]);\r\n    const [locations, setLocations] = React.useState({});\r\n\r\n    const handleChangeLocations = (event, value) => {\r\n        setselectedLocations(value);\r\n    };\r\n\r\n    const changeTitle = (event) => {\r\n        setTitleText(event.target.value);\r\n    };\r\n\r\n    const handleDateChange = date => {\r\n        setSelectedDate(date);\r\n    };\r\n\r\n    const changeContent = (state) => {\r\n        const currCont = state.getCurrentContent();\r\n        const convert = convertToRaw(currCont);\r\n        const content = JSON.stringify(convert);\r\n        if (prevContentText !== content) {\r\n            setPrevContentText(content);\r\n        }\r\n    };\r\n\r\n    const savepost = () => {\r\n        setIsLoading(true);\r\n        let havErr = false;\r\n        let errorMessage = '';\r\n        if (typeof (titleText) !== 'undefined') {\r\n            if (titleText.length === 0) {\r\n                errorMessage = lang.currLang.errors.EmptyTitle;\r\n                havErr = true;\r\n            }\r\n        }\r\n        else {\r\n            errorMessage = lang.currLang.errors.EmptyTitle;\r\n            havErr = true;\r\n        }\r\n\r\n        if (typeof (prevContentText) !== 'undefined') {\r\n            if (JSON.parse(prevContentText).blocks[0].text.length === 0) {\r\n                errorMessage = lang.currLang.errors.EmptyDream;\r\n                havErr = true;\r\n            }\r\n        }\r\n        else {\r\n            errorMessage = lang.currLang.errors.EmptyDream;\r\n            havErr = true;\r\n        }\r\n\r\n        if (havErr) {\r\n            setSnackbar({\r\n                type: SET_SNACKBAR_MODE,\r\n                snackbar: {\r\n                    open: true,\r\n                    variant: 'error',\r\n                    message: errorMessage,\r\n                },\r\n            });\r\n            setIsLoading(false);\r\n        }\r\n        else {\r\n            if (isEditMode) {\r\n                let hasChanges = false;\r\n                let tagChanges = false;\r\n                let postData = {\r\n                    post_id: props.location.defaultData.post_id,\r\n                };\r\n\r\n                if (props.location.defaultData.post_title !== titleText) {\r\n                    postData.title = titleText;\r\n                    hasChanges = true;\r\n                }\r\n\r\n                if (props.location.defaultData.dream_date.getTime() !== selectedDate.getTime()) {\r\n                    postData.dreamDate = selectedDate.toLocaleString(\"ru-RU\", { timeZone: 'Europe/London' });\r\n                    hasChanges = true;\r\n                }\r\n\r\n                if (props.location.defaultData.post_content !== prevContentText) {\r\n                    postData.content = prevContentText;\r\n                    hasChanges = true;\r\n                }\r\n\r\n                if (defaultTags.length === selectedLocations.length) {\r\n                    if (!compare(defaultTags, selectedLocations)) {\r\n                        hasChanges = true;\r\n                        tagChanges = true;\r\n                    }\r\n                }\r\n                else {\r\n                    hasChanges = true;\r\n                    tagChanges = true;\r\n                }\r\n\r\n                if (hasChanges) {\r\n                    if (tagChanges) {\r\n                        let deleteTags = defaultTags.filter(item1 =>\r\n                            !selectedLocations.some(item2 => (\r\n                                item2.id === item1.id)\r\n                            )\r\n                        );\r\n                        let addTags = selectedLocations.filter(item1 =>\r\n                            !defaultTags.some(item2 => (\r\n                                item2.id === item1.id)\r\n                            )\r\n                        );\r\n                        if (addTags.length > 0) {\r\n                            let add = {};\r\n                            addTags.map((item, key) => (\r\n                                add[key] = item\r\n                            ));\r\n                            postData.tags = { ...postData.tags, add: add };\r\n                        }\r\n                        if (deleteTags.length > 0) {\r\n                            let remove = {};\r\n                            deleteTags.map((item, key) => (\r\n                                remove[key] = item\r\n                            ));\r\n                            postData.tags = { ...postData.tags, remove: remove };\r\n                        }\r\n                    }\r\n                    instance\r\n                        .post('/actions/users/updatepost', postData)\r\n                        .then(res => {\r\n                            setIsLoading(false);\r\n                            setSnackbar({\r\n                                type: SET_SNACKBAR_MODE,\r\n                                snackbar: {\r\n                                    open: true,\r\n                                    variant: 'success',\r\n                                    message: lang.currLang.texts.success,\r\n                                },\r\n                            });\r\n                            history.push(\"/dreams\")\r\n                        })\r\n                        .catch(err => {\r\n                            console.log(err);\r\n                            setIsLoading(false);\r\n                        });\r\n                }\r\n                else {\r\n                    setSnackbar({\r\n                        type: SET_SNACKBAR_MODE,\r\n                        snackbar: {\r\n                            open: true,\r\n                            variant: 'error',\r\n                            message: lang.currLang.errors.NoChanges,\r\n                        },\r\n                    });\r\n                    setIsLoading(false);\r\n                }\r\n            }\r\n            else {\r\n                let postData = {\r\n                    title: titleText,\r\n                    dreamDate: selectedDate.toLocaleString(\"ru-RU\", { timeZone: 'Europe/London' }),\r\n                    content: prevContentText,\r\n                    create_user: auth.user.id,\r\n                    post_type: 0,\r\n                    nickname: auth.user.nickname,\r\n                    tags: selectedLocations,\r\n                }\r\n                instance\r\n                    .post('/actions/users/createpost', postData)\r\n                    .then(res => {\r\n                        setIsLoading(false);\r\n                        setSnackbar({\r\n                            type: SET_SNACKBAR_MODE,\r\n                            snackbar: {\r\n                                open: true,\r\n                                variant: 'success',\r\n                                message: lang.currLang.texts.success,\r\n                            },\r\n                        });\r\n                        history.push(\"/luciddreams\")\r\n                    })\r\n                    .catch(err => {\r\n                        setIsLoading(false);\r\n                    });\r\n            }\r\n        }\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        defaultTags = [];\r\n        instance.get(\"/gettags\")\r\n            .then(res => {\r\n                setLocations(res.data);\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            });\r\n\r\n        if (typeof (props.location.defaultData) !== 'undefined') {\r\n            setIsEditMode(true);\r\n            const { post_title, dream_date, post_content, tags } = props.location.defaultData;\r\n            setTitleText(post_title);\r\n            setSelectedDate(dream_date);\r\n            setContentText(post_content);\r\n            setPrevContentText(post_content);\r\n            if (typeof tags[0][0] === 'string') {\r\n                tags.forEach(item => {\r\n                    let location = {};\r\n                    location.id = Number(item[0]);\r\n                    location.name_rus = item[1];\r\n                    location.name_eng = item[2];\r\n                    location.img_url = item[3];\r\n                    defaultTags.push(location);\r\n                });\r\n                setselectedLocations(defaultTags);\r\n            }\r\n        }\r\n    }, [props.location.defaultData, lang.currLang]);\r\n\r\n    return (\r\n        <MuiThemeProvider theme={muiTheme}>\r\n            <CssBaseline />\r\n            <div className={classes.root} >\r\n                <Grid className={classes.mainGridContainer}\r\n                    container\r\n                    direction=\"column\"\r\n                    justify=\"center\"\r\n                    alignItems=\"stretch\" >\r\n                    <Grid item xs={11} className={classes.mainGridBodyItem}>\r\n                        <Paper className={classes.paper}>\r\n                            <Grid container\r\n                                className={classes.mainGridContainer}\r\n                                direction=\"column\"\r\n                                justify=\"center\"\r\n                                alignItems=\"center\"\r\n                            >\r\n                                <Grid item xs={2} className={classes.fullMinWidth} >\r\n                                    <TextField className={classes.inputDiv}\r\n                                        required\r\n                                        id=\"outlined-required\"\r\n                                        value={titleText}\r\n                                        label={lang.currLang.texts.title}\r\n                                        variant=\"outlined\"\r\n                                        onChange={(e) => { changeTitle(e) }}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={2} className={classes.fullMinWidth} >\r\n                                    <MuiPickersUtilsProvider utils={DateFnsUtils}\r\n                                        locale={lang.currLang.current === \"Ru\"\r\n                                            ? ruLocale\r\n                                            : enLocale}\r\n                                    >\r\n                                        <Grid className={classes.pickerGridContainer}\r\n                                            container\r\n                                            direction=\"row\"\r\n                                            justify=\"center\"\r\n                                            alignItems=\"stretch\" >\r\n                                            <Grid item xs={7} >\r\n                                                <KeyboardDatePicker className={classes.pickers}\r\n                                                    id=\"date-picker-dialog\"\r\n                                                    label={lang.currLang.texts.pickDate}\r\n                                                    format=\"dd.MM.yyyy\"\r\n                                                    value={selectedDate}\r\n                                                    onChange={handleDateChange}\r\n                                                    KeyboardButtonProps={{\r\n                                                        'aria-label': 'change date',\r\n                                                    }}\r\n                                                />\r\n                                            </Grid>\r\n                                            <Grid item xs={5} >\r\n                                                <KeyboardTimePicker className={classes.pickers}\r\n                                                    id=\"time-picker\"\r\n                                                    label={lang.currLang.texts.pickTime}\r\n                                                    value={selectedDate}\r\n                                                    onChange={handleDateChange}\r\n                                                    ampm={false}\r\n                                                    KeyboardButtonProps={{\r\n                                                        'aria-label': 'change time',\r\n                                                    }}\r\n                                                />\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </MuiPickersUtilsProvider>\r\n                                </Grid>\r\n                                <Grid item xs={5} className={classes.fullMinWidth} >\r\n\r\n                                    <div className={classes.inputScrollableDiv}>\r\n\r\n                                        <MUIRichTextEditor\r\n                                            value={contentText}\r\n                                            onChange={changeContent}\r\n                                            label={lang.currLang.texts.content}\r\n                                            inlineToolbar={false}\r\n                                            controls={[\r\n                                                \"bold\",\r\n                                                \"italic\",\r\n                                                \"underline\",\r\n                                                \"strikethrough\",\r\n                                                \"colorfill\",\r\n                                            ]}\r\n                                            customControls={[\r\n                                                {\r\n                                                    name: \"colorfill\",\r\n                                                    icon: <FormatColorFillIcon />,\r\n                                                    type: \"inline\",\r\n                                                    inlineStyle: {\r\n                                                        backgroundColor: \"yellow\",\r\n                                                        color: \"black\"\r\n                                                    }\r\n                                                }\r\n                                            ]}\r\n                                        />\r\n\r\n                                    </div>\r\n\r\n                                </Grid>\r\n                                <Grid item xs={3} className={classes.fullMinWidth} >\r\n                                    {locations.length\r\n                                        ? <Autocomplete\r\n                                            multiple\r\n                                            className={classes.inputDiv}\r\n                                            id=\"tags-outlined\"\r\n                                            size=\"small\"\r\n                                            options={locations}\r\n                                            getOptionLabel={option => (\r\n                                                <Chip\r\n                                                    size=\"small\"\r\n                                                    className={classes.chip}\r\n                                                    avatar={\r\n                                                        <Avatar src={option.img_url} />\r\n                                                    }\r\n                                                    label={\r\n                                                        lang.currLang.current === \"Ru\"\r\n                                                            ? option.name_rus\r\n                                                            : option.name_eng\r\n                                                    }\r\n                                                />\r\n                                            )}\r\n                                            defaultValue={\r\n                                                defaultTags.map(item => {\r\n                                                    return locations[item.id - 1];\r\n                                                })}\r\n                                            onChange={(event, value) => handleChangeLocations(event, value)}\r\n                                            filterSelectedOptions\r\n                                            renderInput={params => (\r\n                                                <TextField\r\n                                                    {...params}\r\n                                                    label={lang.currLang.texts.tags}\r\n                                                    fullWidth\r\n                                                />\r\n                                            )}\r\n                                        />\r\n                                        : <div className={classes.inputDiv}>\r\n                                            <LinearProgress />\r\n                                        </div>\r\n                                    }\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Paper>\r\n                    </Grid>\r\n                    <Grid item xs={1} className={classes.mainGridBodyItem} >\r\n                        {isLoading\r\n                            ? <LinearProgress />\r\n                            : <Grid\r\n                                container\r\n                                direction=\"row\"\r\n                                justify=\"space-evenly\"\r\n                                alignItems=\"center\"\r\n                            >\r\n                                <Grid item>\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        color=\"secondary\"\r\n                                        className={classes.actionButton}\r\n                                        onClick={() => {\r\n                                            isEditMode\r\n                                                ? history.push(\"/dreams\")\r\n                                                : history.push(\"/luciddreams\")\r\n                                        }}\r\n                                    >\r\n                                        {lang.currLang.buttons.close}\r\n                                    </Button>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        color=\"primary\"\r\n                                        className={classes.actionButton}\r\n                                        onClick={() => savepost()}\r\n                                    >\r\n                                        {isEditMode\r\n                                            ? lang.currLang.buttons.Save\r\n                                            : lang.currLang.buttons.add\r\n                                        }\r\n                                    </Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                        }\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </MuiThemeProvider >\r\n    );\r\n};\r\n\r\nAddDream.propTypes = {\r\n    setSnackbar: PropTypes.func.isRequired,\r\n    themeMode: PropTypes.object.isRequired,\r\n    lang: PropTypes.object.isRequired,\r\n    auth: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        themeMode: store.themeMode,\r\n        lang: store.lang,\r\n        auth: store.auth,\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setSnackbar: snackbar => dispatch(setSnackbar(snackbar)),\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(AddDream);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport ruLocale from \"date-fns/locale/ru\";\r\nimport enLocale from \"date-fns/locale/ru\";\r\n\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Button from '@material-ui/core/Button';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\n\r\nimport MUIRichTextEditor from 'mui-rte';\r\nimport { convertToRaw } from 'draft-js';\r\n\r\nimport Rating from \"@material-ui/lab/Rating\";\r\n\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\n\r\nimport { MuiPickersUtilsProvider, KeyboardTimePicker, KeyboardDatePicker } from '@material-ui/pickers';\r\n\r\nimport FormatColorFillIcon from '@material-ui/icons/FormatColorFill';\r\n\r\nimport { useStyles } from '../styles/Styles';\r\nimport { SET_SNACKBAR_MODE } from \"../actions/types\";\r\nimport { setSnackbar } from '../actions/Actions';\r\n\r\nimport { instance } from './Config';\r\n\r\nimport { compare } from '../functions';\r\n\r\nlet defaultTechnics = [];\r\nlet defaultTags = [];\r\n\r\nfunction AddCDream(props) {\r\n    const classes = useStyles();\r\n    const { lang, themeMode, history, auth, setSnackbar } = props;\r\n    const muiTheme = createMuiTheme(themeMode);\r\n    Object.assign(muiTheme, {\r\n        overrides: {\r\n            MUIRichTextEditor: {\r\n                root: {\r\n                    border: \"1px solid gray\",\r\n                    borderRadius: '4px',\r\n                    height: '100%',\r\n                    //Весь компонент\r\n                },\r\n                container: {\r\n                    height: '100%',\r\n                    margin: '0 !Important',\r\n                    //Без шапки\r\n                },\r\n                toolbar: {\r\n                    //textAlign: 'center',\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    justifyContent: 'center',\r\n                    height: '20%',\r\n                    minHeight: '48px',\r\n                    margin: '0 !Important',\r\n                    borderBottom: \"1px solid gray\",\r\n                    borderRadius: '4px',\r\n                },\r\n                placeHolder: {\r\n                    height: '72%',\r\n                },\r\n                editor: {\r\n                    height: '72%',\r\n                    width: '100%',\r\n                    position: 'relative',\r\n                    overflow: 'hidden',\r\n                    //Эдитор\r\n                },\r\n                editorContainer: {\r\n                    margin: '0 !Important',\r\n                    padding: \"0px 14px\",\r\n                    borderRadius: '4px',\r\n                    position: 'relative',\r\n                    boxSizing: 'border-box',\r\n                    maxHeight: '100%',\r\n                    overflow: 'auto',\r\n                    //Редактор\r\n                },\r\n            }\r\n        }\r\n    })\r\n    const [isEditMode, setIsEditMode] = React.useState(false);\r\n    const [isLoading, setIsLoading] = React.useState(false);\r\n    const [titleText, setTitleText] = React.useState('');\r\n    const [selectedDate, setSelectedDate] = React.useState(new Date());\r\n    const [contentText, setContentText] = React.useState();\r\n    const [prevContentText, setPrevContentText] = React.useState();\r\n    const [selectedLocations, setselectedLocations] = React.useState([]);\r\n    const [selectedTechnics, setselectedTechnics] = React.useState([]);\r\n    const [realisticsValue, setRealisticsValue] = React.useState(1);\r\n    const [locations, setLocations] = React.useState({});\r\n    const [technics, setTechnics] = React.useState({});\r\n\r\n    const handleChangeRealistics = (event, newValue) => {\r\n        setRealisticsValue(newValue);\r\n    };\r\n\r\n    const handleChangeLocations = (event, value) => {\r\n        setselectedLocations(value);\r\n    };\r\n\r\n    const handleChangeTechnics = (event, value) => {\r\n        setselectedTechnics(value);\r\n    };\r\n\r\n    const blurTitle = (event) => {\r\n        setTitleText(event.target.value);\r\n    };\r\n\r\n    const handleDateChange = date => {\r\n        setSelectedDate(date);\r\n    };\r\n\r\n    const changeContent = (state) => {\r\n        const currCont = state.getCurrentContent();\r\n        const convert = convertToRaw(currCont);\r\n        const content = JSON.stringify(convert);\r\n        if (prevContentText !== content) {\r\n            setPrevContentText(content);\r\n        }\r\n    };\r\n\r\n    const savepost = () => {\r\n        setIsLoading(true);\r\n        let havErr = false;\r\n        let errorMessage = '';\r\n        if (typeof (titleText) !== 'undefined') {\r\n            if (titleText.length === 0) {\r\n                errorMessage = lang.currLang.errors.EmptyTitle;\r\n                havErr = true;\r\n            }\r\n        }\r\n        else {\r\n            errorMessage = lang.currLang.errors.EmptyTitle;\r\n            havErr = true;\r\n        }\r\n        if (typeof (prevContentText) !== 'undefined') {\r\n            if (JSON.parse(prevContentText).blocks[0].text.length === 0) {\r\n                errorMessage = lang.currLang.errors.EmptyDream;\r\n                havErr = true;\r\n            }\r\n        }\r\n        else {\r\n            errorMessage = lang.currLang.errors.EmptyDream;\r\n            havErr = true;\r\n        }\r\n        if (havErr) {\r\n            setSnackbar({\r\n                type: SET_SNACKBAR_MODE,\r\n                snackbar: {\r\n                    open: true,\r\n                    variant: 'error',\r\n                    message: errorMessage,\r\n                },\r\n            });\r\n            setIsLoading(false);\r\n        }\r\n        else {\r\n            if (isEditMode) {\r\n                let hasChanges = false;\r\n                let tagChanges = false;\r\n                let techChanges = false;\r\n                let postData = {\r\n                    post_id: props.location.defaultData.post_id,\r\n                };\r\n\r\n                if (props.location.defaultData.post_title !== titleText) {\r\n                    postData.title = titleText;\r\n                    hasChanges = true;\r\n                }\r\n\r\n                if (props.location.defaultData.dream_date.getTime() !== selectedDate.getTime()) {\r\n                    postData.dreamDate = selectedDate.toLocaleString(\"ru-RU\", { timeZone: 'Europe/London' });\r\n                    hasChanges = true;\r\n                }\r\n\r\n                if (props.location.defaultData.post_content !== prevContentText) {\r\n                    postData.content = prevContentText;\r\n                    hasChanges = true;\r\n                }\r\n\r\n                if (props.location.defaultData.rating !== realisticsValue) {\r\n                    postData.rating = realisticsValue;\r\n                    hasChanges = true;\r\n                }\r\n\r\n                if (defaultTechnics.length === selectedTechnics.length) {\r\n                    if (!compare(defaultTechnics, selectedTechnics)) {\r\n                        hasChanges = true;\r\n                        techChanges = true;\r\n                    }\r\n                }\r\n                else {\r\n                    hasChanges = true;\r\n                    techChanges = true;\r\n                }\r\n\r\n                if (defaultTags.length === selectedLocations.length) {\r\n                    if (!compare(defaultTags, selectedLocations)) {\r\n                        hasChanges = true;\r\n                        tagChanges = true;\r\n                    }\r\n                }\r\n                else {\r\n                    hasChanges = true;\r\n                    tagChanges = true;\r\n                }\r\n\r\n                if (hasChanges) {\r\n                    if (tagChanges) {\r\n                        let deleteTags = defaultTags.filter(item1 =>\r\n                            !selectedLocations.some(item2 => (\r\n                                item2.id === item1.id)\r\n                            )\r\n                        );\r\n                        let addTags = selectedLocations.filter(item1 =>\r\n                            !defaultTags.some(item2 => (\r\n                                item2.id === item1.id)\r\n                            )\r\n                        );\r\n                        if (addTags.length > 0) {\r\n                            let add = {};\r\n                            addTags.map((item, key) => (\r\n                                add[key] = item\r\n                            ));\r\n                            postData.tags = { ...postData.tags, add: add };\r\n                        }\r\n                        if (deleteTags.length > 0) {\r\n                            let remove = {};\r\n                            deleteTags.map((item, key) => (\r\n                                remove[key] = item\r\n                            ));\r\n                            postData.tags = { ...postData.tags, remove: remove };\r\n                        }\r\n                    }\r\n                    if (techChanges) {\r\n                        let deleteTech = defaultTechnics.filter(item1 =>\r\n                            !selectedTechnics.some(item2 => (\r\n                                item2.id === item1.id)\r\n                            )\r\n                        );\r\n                        let addTech = selectedTechnics.filter(item1 =>\r\n                            !defaultTechnics.some(item2 => (\r\n                                item2.id === item1.id)\r\n                            )\r\n                        );\r\n                        if (addTech.length > 0) {\r\n                            let add = {};\r\n                            addTech.map((item, key) => (\r\n                                add[key] = item\r\n                            ));\r\n                            postData.technics = { ...postData.technics, add: add };\r\n                        }\r\n                        if (deleteTech.length > 0) {\r\n                            let remove = {};\r\n                            deleteTech.map((item, key) => (\r\n                                remove[key] = item\r\n                            ));\r\n                            postData.technics = { ...postData.technics, remove: remove };\r\n                        }\r\n                    }\r\n                    instance\r\n                        .post('/actions/users/updatepost', postData)\r\n                        .then(res => {\r\n                            setIsLoading(false);\r\n                            setSnackbar({\r\n                                type: SET_SNACKBAR_MODE,\r\n                                snackbar: {\r\n                                    open: true,\r\n                                    variant: 'success',\r\n                                    message: lang.currLang.texts.success,\r\n                                },\r\n                            });\r\n                            history.push(\"/dreams\")\r\n                        })\r\n                        .catch(err => {\r\n                            console.log(err);\r\n                            setIsLoading(false);\r\n                        });\r\n                }\r\n                else {\r\n                    setSnackbar({\r\n                        type: SET_SNACKBAR_MODE,\r\n                        snackbar: {\r\n                            open: true,\r\n                            variant: 'error',\r\n                            message: lang.currLang.errors.NoChanges,\r\n                        },\r\n                    });\r\n                    setIsLoading(false);\r\n                }\r\n            }\r\n            else {\r\n                let postData = {\r\n                    title: titleText,\r\n                    dreamDate: selectedDate.toLocaleString(\"ru-RU\", { timeZone: 'Europe/London' }),\r\n                    content: prevContentText,\r\n                    create_user: auth.user.id,\r\n                    rating: realisticsValue,\r\n                    post_type: 1,\r\n                    nickname: auth.user.nickname,\r\n                    tags: selectedLocations,\r\n                    technics: selectedTechnics\r\n                }\r\n\r\n                instance\r\n                    .post('/actions/users/createpost', postData)\r\n                    .then(res => {\r\n                        setIsLoading(false);\r\n                        setSnackbar({\r\n                            type: SET_SNACKBAR_MODE,\r\n                            snackbar: {\r\n                                open: true,\r\n                                variant: 'success',\r\n                                message: lang.currLang.texts.success,\r\n                            },\r\n                        });\r\n                        history.push(\"/luciddreams\")\r\n                    })\r\n                    .catch(err => {\r\n                        setIsLoading(false);\r\n                    });\r\n            }\r\n        }\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        defaultTechnics = [];\r\n        defaultTags = [];\r\n        instance.get(\"/gettags\")\r\n            .then(res => {\r\n                setLocations(res.data);\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            });\r\n        instance.get(\"/gettechnics\")\r\n            .then(res => {\r\n                setTechnics(res.data);\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            });\r\n\r\n        if (typeof (props.location.defaultData) !== 'undefined') {\r\n            setIsEditMode(true);\r\n            defaultTechnics = [];\r\n            defaultTags = [];\r\n            const { post_title, dream_date, post_content, technics, tags, rating } = props.location.defaultData;\r\n            setTitleText(post_title);\r\n            setSelectedDate(dream_date);\r\n            setContentText(post_content);\r\n            setPrevContentText(post_content);\r\n\r\n            if (typeof tags[0][0] === 'string') {\r\n                tags.forEach(item => {\r\n                    let location = {};\r\n                    location.id = Number(item[0]);\r\n                    location.name_rus = item[1];\r\n                    location.name_eng = item[2];\r\n                    location.img_url = item[3];\r\n                    defaultTags.push(location);\r\n                });\r\n                setselectedLocations(defaultTags);\r\n            }\r\n\r\n            if (typeof technics[0][0] === 'string') {\r\n                technics.forEach(item => {\r\n                    let tech = {};\r\n                    tech.id = Number(item[0]);\r\n                    tech.name_rus = item[1];\r\n                    tech.name_eng = item[2];\r\n                    defaultTechnics.push(tech);\r\n                });\r\n                setselectedTechnics(defaultTechnics);\r\n            }\r\n\r\n            setRealisticsValue(rating);\r\n        }\r\n    }, [props.location.defaultData, lang.currLang]);\r\n\r\n    return (\r\n        <MuiThemeProvider theme={muiTheme}>\r\n            <CssBaseline />\r\n            <div className={classes.root} >\r\n                <Grid className={classes.mainGridContainer}\r\n                    container\r\n                    direction=\"column\"\r\n                    justify=\"center\"\r\n                    alignItems=\"stretch\" >\r\n                    <Grid item xs={11} className={classes.mainGridBodyItem}>\r\n                        <Paper className={classes.paper}>\r\n                            <Grid className={`${classes.mainGridContainer} ${classes.noWrap}`}\r\n                                container\r\n                                direction=\"column\"\r\n                                justify=\"center\"\r\n                                alignItems=\"center\"\r\n                            >\r\n                                <Grid item xs={2} className={classes.fullMinWidth} >\r\n                                    <TextField className={classes.inputDiv}\r\n                                        required\r\n                                        id=\"outlined-required\"\r\n                                        value={titleText}\r\n                                        label={lang.currLang.texts.title}\r\n                                        variant=\"outlined\"\r\n                                        onChange={(e) => { blurTitle(e) }}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={1} className={classes.fullMinWidth} >\r\n                                    <MuiPickersUtilsProvider utils={DateFnsUtils}\r\n                                        locale={lang.currLang.current === \"Ru\"\r\n                                            ? ruLocale\r\n                                            : enLocale}\r\n                                    >\r\n                                        <Grid className={classes.pickerGridContainer}\r\n                                            container\r\n                                            direction=\"row\"\r\n                                            justify=\"center\"\r\n                                            alignItems=\"stretch\" >\r\n                                            <Grid item xs={7} >\r\n                                                <KeyboardDatePicker className={classes.pickers}\r\n                                                    id=\"date-picker-dialog\"\r\n                                                    label={lang.currLang.texts.pickDate}\r\n                                                    format=\"dd.MM.yyyy\"\r\n                                                    value={selectedDate}\r\n                                                    onChange={handleDateChange}\r\n                                                    KeyboardButtonProps={{\r\n                                                        'aria-label': 'change date',\r\n                                                    }}\r\n                                                />\r\n                                            </Grid>\r\n                                            <Grid item xs={5} >\r\n                                                <KeyboardTimePicker className={classes.pickers}\r\n                                                    id=\"time-picker\"\r\n                                                    label={lang.currLang.texts.pickTime}\r\n                                                    value={selectedDate}\r\n                                                    onChange={handleDateChange}\r\n                                                    ampm={false}\r\n                                                    KeyboardButtonProps={{\r\n                                                        'aria-label': 'change time',\r\n                                                    }}\r\n                                                />\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </MuiPickersUtilsProvider>\r\n                                </Grid>\r\n                                <Grid item xs={4} className={classes.fullMinWidth} >\r\n                                    <div className={classes.inputScrollableDiv}>\r\n                                        <MUIRichTextEditor\r\n                                            value={contentText}\r\n                                            onChange={changeContent}\r\n                                            label={lang.currLang.texts.content}\r\n                                            inlineToolbar={false}\r\n                                            controls={[\r\n                                                \"bold\",\r\n                                                \"italic\",\r\n                                                \"underline\",\r\n                                                \"strikethrough\",\r\n                                                \"colorfill\",\r\n                                            ]}\r\n                                            customControls={[\r\n                                                {\r\n                                                    name: \"colorfill\",\r\n                                                    icon: <FormatColorFillIcon />,\r\n                                                    type: \"inline\",\r\n                                                    inlineStyle: {\r\n                                                        backgroundColor: \"yellow\",\r\n                                                        color: \"black\"\r\n                                                    }\r\n                                                }\r\n                                            ]}\r\n                                        />\r\n                                    </div>\r\n                                </Grid>\r\n                                <Grid item xs={2} className={classes.fullMinWidth} >\r\n                                    {technics.length\r\n                                        ? <Autocomplete\r\n                                            multiple\r\n                                            className={classes.inputDiv}\r\n                                            id=\"technics-outlined\"\r\n                                            size=\"small\"\r\n                                            options={technics}\r\n                                            getOptionLabel={option => (\r\n                                                <Chip\r\n                                                    size=\"small\"\r\n                                                    className={classes.chip}\r\n                                                    label={\r\n                                                        lang.currLang.current === \"Ru\"\r\n                                                            ? option.name_rus\r\n                                                            : option.name_eng\r\n                                                    }\r\n                                                />\r\n                                            )}\r\n                                            defaultValue={\r\n                                                defaultTechnics.map(item => {\r\n                                                    return technics[item.id - 1];\r\n                                                })}\r\n                                            onChange={(event, value) => handleChangeTechnics(event, value)}\r\n                                            filterSelectedOptions\r\n                                            renderInput={params => (\r\n                                                <TextField\r\n                                                    {...params}\r\n                                                    label={lang.currLang.texts.technics}\r\n                                                    fullWidth\r\n                                                />\r\n                                            )}\r\n                                        />\r\n                                        : <div className={classes.inputDiv}>\r\n                                            <LinearProgress />\r\n                                        </div>\r\n                                    }\r\n                                </Grid>\r\n                                <Grid item xs={2} className={classes.fullMinWidth} >\r\n                                    {locations.length\r\n                                        ? <Autocomplete\r\n                                            multiple\r\n                                            className={classes.inputDiv}\r\n                                            id=\"tags-outlined\"\r\n                                            size=\"small\"\r\n                                            options={locations}\r\n                                            getOptionLabel={option => (\r\n                                                <Chip\r\n                                                    size=\"small\"\r\n                                                    className={classes.chip}\r\n                                                    avatar={\r\n                                                        <Avatar src={option.img_url} />\r\n                                                    }\r\n                                                    label={\r\n                                                        lang.currLang.current === \"Ru\"\r\n                                                            ? option.name_rus\r\n                                                            : option.name_eng\r\n                                                    }\r\n                                                />\r\n                                            )}\r\n                                            defaultValue={\r\n                                                defaultTags.map(item => {\r\n                                                    return locations[item.id - 1];\r\n                                                })}\r\n                                            onChange={(event, value) => handleChangeLocations(event, value)}\r\n                                            filterSelectedOptions\r\n                                            renderInput={params => (\r\n                                                <TextField\r\n                                                    {...params}\r\n                                                    label={lang.currLang.texts.tags}\r\n                                                    fullWidth\r\n                                                />\r\n                                            )}\r\n                                        />\r\n                                        : <div className={classes.inputDiv}>\r\n                                            <LinearProgress />\r\n                                        </div>\r\n                                    }\r\n                                </Grid>\r\n                                <Grid item xs={1} className={classes.fullMinWidth} >\r\n                                    <div className={classes.div85width}>\r\n                                        <Grid className={classes.ratingGridContainer}\r\n                                            container\r\n                                            direction=\"row\"\r\n                                            justify=\"center\"\r\n                                            alignItems=\"stretch\" >\r\n                                            <Grid item xs={6}>\r\n                                                <Typography component=\"legend\">\r\n                                                    {lang.currLang.texts.rating} :\r\n                                                </Typography>\r\n                                            </Grid>\r\n                                            <Grid item xs={6}>\r\n                                                <Rating name=\"simple-controlled\"\r\n                                                    value={realisticsValue}\r\n                                                    onChange={handleChangeRealistics}\r\n                                                />\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </div>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Paper>\r\n                    </Grid>\r\n                    <Grid item xs={1} className={classes.mainGridBodyItem} >\r\n                        {isLoading\r\n                            ? <LinearProgress />\r\n                            : <Grid\r\n                                container\r\n                                direction=\"row\"\r\n                                justify=\"space-evenly\"\r\n                                alignItems=\"center\"\r\n                            >\r\n                                <Grid item>\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        color=\"secondary\"\r\n                                        className={classes.actionButton}\r\n                                        onClick={() => {\r\n                                            isEditMode\r\n                                                ? history.push(\"/dreams\")\r\n                                                : history.push(\"/luciddreams\")\r\n                                        }}\r\n                                    >\r\n                                        {lang.currLang.buttons.close}\r\n                                    </Button>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        color=\"primary\"\r\n                                        className={classes.actionButton}\r\n                                        onClick={() => savepost()}\r\n                                    >\r\n                                        {isEditMode\r\n                                            ? lang.currLang.buttons.Save\r\n                                            : lang.currLang.buttons.add\r\n                                        }\r\n                                    </Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                        }\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </MuiThemeProvider >\r\n    );\r\n};\r\n\r\nAddCDream.propTypes = {\r\n    setSnackbar: PropTypes.func.isRequired,\r\n    themeMode: PropTypes.object.isRequired,\r\n    lang: PropTypes.object.isRequired,\r\n    auth: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        themeMode: store.themeMode,\r\n        lang: store.lang,\r\n        auth: store.auth,\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setSnackbar: snackbar => dispatch(setSnackbar(snackbar)),\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(AddCDream);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport SwipeableViews from \"react-swipeable-views\";\r\n\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from '@material-ui/core/Button';\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Tab from \"@material-ui/core/Tab\";\r\n\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\n\r\nimport { useStyles } from '../styles/Styles';\r\nimport { setSnackbar } from '../actions/Actions';\r\nimport { SET_SNACKBAR_MODE } from \"../actions/types\";\r\n\r\nfunction AddTechnics(props) {\r\n    const classes = useStyles();\r\n    const { lang, themeMode, history, setSnackbar } = props;\r\n    const muiTheme = createMuiTheme(themeMode);\r\n    const [isEditMode, setIsEditMode] = React.useState(false);\r\n    const [value, setValue] = React.useState(0);\r\n    const [technicsData, setTechnicsData] = React.useState({\r\n        titleRu: '',\r\n        titleEn: '',\r\n        descriptionRu: '',\r\n        descriptionEn: '',\r\n    });\r\n    const [fileldsErr, setFileldsErr] = React.useState({\r\n        titleRu: false,\r\n        titleEn: false,\r\n        descriptionRu: false,\r\n        descriptionEn: false,\r\n    });\r\n\r\n    const changeData = (event, field) => {\r\n        let newTechnicsData = technicsData;\r\n        let newFileldsErr = fileldsErr;\r\n        switch (field) {\r\n            case 'title-ru':\r\n                newTechnicsData = { ...newTechnicsData, titleRu: event.target.value };\r\n                if (newFileldsErr.titleRu) {\r\n                    newFileldsErr = { ...newFileldsErr, titleRu: false };\r\n                    setFileldsErr(newFileldsErr);\r\n                }\r\n                break;\r\n            case 'title-en':\r\n                newTechnicsData = { ...newTechnicsData, titleEn: event.target.value };\r\n                if (newFileldsErr.titleEn) {\r\n                    newFileldsErr = { ...newFileldsErr, titleEn: false };\r\n                    setFileldsErr(newFileldsErr);\r\n                }\r\n                break;\r\n            case 'description-ru':\r\n                newTechnicsData = { ...newTechnicsData, descriptionRu: event.target.value };\r\n                if (newFileldsErr.descriptionRu) {\r\n                    newFileldsErr = { ...newFileldsErr, descriptionRu: false };\r\n                    setFileldsErr(newFileldsErr);\r\n                }\r\n                break;\r\n            case 'description-en':\r\n                newTechnicsData = { ...newTechnicsData, descriptionEn: event.target.value };\r\n                if (newFileldsErr.descriptionEn) {\r\n                    newFileldsErr = { ...newFileldsErr, descriptionEn: false };\r\n                    setFileldsErr(newFileldsErr);\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        setTechnicsData(newTechnicsData);\r\n    };\r\n\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue);\r\n    };\r\n\r\n    const handleChangeIndex = index => {\r\n        setValue(index);\r\n    };\r\n\r\n    const save = () => {\r\n        let isError = false;\r\n        let errorMessage = '';\r\n        let newFileldsErr = fileldsErr;\r\n        if (technicsData.titleRu.length === 0) {\r\n            isError = true;\r\n            errorMessage = lang.currLang.errors.EmptyTitle;\r\n            newFileldsErr = { ...newFileldsErr, titleRu: true };\r\n            setValue(0);\r\n        }\r\n        if (technicsData.titleEn.length === 0 && !isError) {\r\n            isError = true;\r\n            errorMessage = lang.currLang.errors.EmptyTitle;\r\n            newFileldsErr = { ...newFileldsErr, titleEn: true };\r\n            setValue(1);\r\n        }\r\n        if (technicsData.descriptionRu.length === 0 && !isError) {\r\n            isError = true;\r\n            errorMessage = lang.currLang.errors.EmptyDescription;\r\n            newFileldsErr = { ...newFileldsErr, descriptionRu: true };\r\n            setValue(0);\r\n        }\r\n        if (technicsData.descriptionEn.length === 0 && !isError) {\r\n            isError = true;\r\n            errorMessage = lang.currLang.errors.EmptyDescription;\r\n            newFileldsErr = { ...newFileldsErr, descriptionEn: true };\r\n            setValue(1);\r\n        }\r\n\r\n        if (isError) {\r\n            setFileldsErr(newFileldsErr);\r\n            setSnackbar({\r\n                type: SET_SNACKBAR_MODE,\r\n                snackbar: {\r\n                    open: true,\r\n                    variant: 'error',\r\n                    message: errorMessage,\r\n                },\r\n            });\r\n        }\r\n        else {\r\n            console.log(technicsData);\r\n        }\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        if (typeof (props.location.defaultData) !== 'undefined') {\r\n            setIsEditMode(true);\r\n            const { name_rus, name_eng } = props.location.defaultData.item;\r\n            let newTechnicsData = {};\r\n            newTechnicsData = { ...newTechnicsData, titleRu: name_rus };\r\n            newTechnicsData = { ...newTechnicsData, titleEn: name_eng };\r\n            setTechnicsData(newTechnicsData);\r\n        }\r\n    }, [props.location.defaultData]);\r\n\r\n    return (\r\n        <MuiThemeProvider theme={muiTheme}>\r\n            <CssBaseline />\r\n            <div className={classes.root} >\r\n                <Grid className={classes.mainGridContainer}\r\n                    container\r\n                    direction=\"column\"\r\n                    justify=\"center\"\r\n                    alignItems=\"stretch\" >\r\n                    <Grid item xs={11} className={classes.mainGridBodyItem}>\r\n                        <Paper className={classes.paper}>\r\n                            <Paper style={{\r\n                                position: 'relative',\r\n                                height: '10%',\r\n                            }}>\r\n                                <Tabs\r\n                                    centered\r\n                                    value={value}\r\n                                    onChange={handleChange}\r\n                                    indicatorColor=\"primary\"\r\n                                    textColor=\"primary\"\r\n                                >\r\n                                    <Tab label=\"RU\" />\r\n                                    <Tab label=\"EN\" />\r\n                                </Tabs>\r\n                            </Paper>\r\n                            <SwipeableViews className={classes.SwipeableViews}\r\n                                animateHeight\r\n                                axis={muiTheme.direction === \"rtl\" ? \"x-reverse\" : \"x\"}\r\n                                index={value}\r\n                                onChangeIndex={handleChangeIndex}\r\n                            >\r\n                                <Grid container\r\n                                    className={classes.mainGridContainer}\r\n                                    direction=\"column\"\r\n                                    justify=\"center\"\r\n                                    alignItems=\"center\"\r\n                                    role=\"tabpanel\"\r\n                                >\r\n                                    <Grid item xs={2} className={classes.fullMinWidth} >\r\n                                        <TextField className={classes.inputDiv}\r\n                                            error={fileldsErr.titleRu}\r\n                                            required\r\n                                            id=\"title-ru\"\r\n                                            value={technicsData.titleRu}\r\n                                            label={lang.currLang.texts.title}\r\n                                            variant=\"outlined\"\r\n                                            onChange={(e) => { changeData(e, 'title-ru') }}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item xs={10} className={classes.fullMinWidth} >\r\n                                        <TextField className={classes.inputDiv}\r\n                                            error={fileldsErr.descriptionRu}\r\n                                            required\r\n                                            id=\"description-ru\"\r\n                                            multiline\r\n                                            rows=\"5\"\r\n                                            value={technicsData.descriptionRu}\r\n                                            label={lang.currLang.texts.description}\r\n                                            variant=\"outlined\"\r\n                                            onChange={(e) => { changeData(e, 'description-ru') }}\r\n                                        />\r\n                                    </Grid>\r\n                                </Grid>\r\n                                <Grid container\r\n                                    className={classes.mainGridContainer}\r\n                                    direction=\"column\"\r\n                                    justify=\"center\"\r\n                                    alignItems=\"center\"\r\n                                    role=\"tabpanel\"\r\n                                >\r\n                                    <Grid item xs={2} className={classes.fullMinWidth} >\r\n                                        <TextField className={classes.inputDiv}\r\n                                            error={fileldsErr.titleEn}\r\n                                            required\r\n                                            id=\"title-en\"\r\n                                            value={technicsData.titleEn}\r\n                                            label={lang.currLang.texts.title}\r\n                                            variant=\"outlined\"\r\n                                            onChange={(e) => { changeData(e, 'title-en') }}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item xs={10} className={classes.fullMinWidth} >\r\n                                        <TextField className={classes.inputDiv}\r\n                                            error={fileldsErr.descriptionEn}\r\n                                            required\r\n                                            id=\"description-en\"\r\n                                            multiline\r\n                                            rows=\"5\"\r\n                                            value={technicsData.descriptionEn}\r\n                                            label={lang.currLang.texts.description}\r\n                                            variant=\"outlined\"\r\n                                            onChange={(e) => { changeData(e, 'description-en') }}\r\n                                        />\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </SwipeableViews>\r\n                        </Paper>\r\n                    </Grid>\r\n                    <Grid item xs={1} zeroMinWidth className={classes.mainGridBodyItem}>\r\n                        <Grid container\r\n                            direction=\"row\"\r\n                            justify=\"space-evenly\"\r\n                            alignItems=\"center\"\r\n                        >\r\n                            <Grid item>\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    color=\"secondary\"\r\n                                    className={classes.actionButton}\r\n                                    onClick={() => { history.push(\"/technics\") }}\r\n                                >\r\n                                    {lang.currLang.buttons.close}\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    className={classes.actionButton}\r\n                                    onClick={() => save()}\r\n                                >\r\n                                    {isEditMode\r\n                                        ? lang.currLang.buttons.Save\r\n                                        : lang.currLang.buttons.add\r\n                                    }\r\n                                </Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </MuiThemeProvider>\r\n    )\r\n}\r\n\r\nAddTechnics.propTypes = {\r\n    setSnackbar: PropTypes.func.isRequired,\r\n    themeMode: PropTypes.object.isRequired,\r\n    lang: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        themeMode: store.themeMode,\r\n        lang: store.lang,\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setSnackbar: snackbar => dispatch(setSnackbar(snackbar)),\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(AddTechnics);","import React from 'react';\r\nimport clsx from \"clsx\";\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport MUIRichTextEditor from 'mui-rte';\r\nimport { EditorState, convertFromRaw } from 'draft-js';\r\n\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport CardHeader from \"@material-ui/core/CardHeader\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Collapse from \"@material-ui/core/Collapse\";\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Button from '@material-ui/core/Button';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Card from \"@material-ui/core/Card\";\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport Menu from '@material-ui/core/Menu';\r\n\r\nimport Rating from \"@material-ui/lab/Rating\";\r\n\r\nimport FormatColorFillIcon from '@material-ui/icons/FormatColorFill';\r\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport Visibility from '@material-ui/icons/Visibility';\r\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\n\r\nimport { useStyles } from '../../styles/Styles';\r\n\r\nimport { instance } from '../Config';\r\n\r\nimport { SET_SNACKBAR_MODE } from \"../../actions/types\";\r\nimport { setSnackbar } from '../../actions/Actions';\r\n\r\nfunction DreamCard(props) {\r\n    const classes = useStyles();\r\n    const { post_id, post_title, post_content, post_type, tags, technics, rating, dream_date, is_public } = props.item;\r\n    const { lang, palette, history, setSnackbar } = props;\r\n    const [expanded, setExpanded] = React.useState(false);\r\n    const [anchorEl, setAnchorEl] = React.useState(null);\r\n    const [openAlert, setOpenAlert] = React.useState(false);\r\n    const [publicChecked, setPublicChecked] = React.useState(false);\r\n    const [alertTexts, setAlertTexts] = React.useState({\r\n        header: '',\r\n        body: '',\r\n        commit: '',\r\n        action: '',\r\n    });\r\n\r\n    const dateOfDream = new Date(dream_date).getDate() + '.' + (new Date(dream_date).getMonth() + 1) + '.' + new Date(dream_date).getFullYear() + ' ' + new Date(dream_date).getHours() + ':' + (\"0\" + new Date(dream_date).getMinutes()).slice(-2);\r\n    const srcContent = post_content.toString();\r\n    const jsonPparse = JSON.parse(srcContent);\r\n    const convertfromraw = convertFromRaw(jsonPparse);\r\n    const text_content = EditorState.createWithContent(convertfromraw).getCurrentContent().getPlainText('');\r\n\r\n    React.useEffect(() => {\r\n        is_public === 1\r\n            ? setPublicChecked(true)\r\n            : setPublicChecked(false);\r\n    }, [is_public]);\r\n\r\n    const openMenu = event => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const closeMenu = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    const clickMenu = (action, event) => {\r\n        let newAlertTexts = alertTexts;\r\n        switch (action) {\r\n            case 'public':\r\n                if (event.target.checked) {\r\n                    newAlertTexts = { ...newAlertTexts, header: lang.currLang.texts.PublicAlert };\r\n                    newAlertTexts = { ...newAlertTexts, body: lang.currLang.texts.PublicText };\r\n                    newAlertTexts = { ...newAlertTexts, commit: lang.currLang.texts.Publish };\r\n                    newAlertTexts = { ...newAlertTexts, action: 'publicOk' };\r\n                    setAlertTexts(newAlertTexts);\r\n                }\r\n                else {\r\n                    newAlertTexts = { ...newAlertTexts, header: lang.currLang.texts.UnpublicAlert };\r\n                    newAlertTexts = { ...newAlertTexts, body: lang.currLang.texts.UnpublicText };\r\n                    newAlertTexts = { ...newAlertTexts, commit: lang.currLang.texts.Unpublish };\r\n                    newAlertTexts = { ...newAlertTexts, action: 'publicOk' };\r\n                    setAlertTexts(newAlertTexts);\r\n                }\r\n                setOpenAlert(true);\r\n                closeMenu();\r\n                break;\r\n\r\n            case 'edit':\r\n                closeMenu();\r\n                if (post_type === 0) {\r\n                    history.push({\r\n                        pathname: \"/addregulardream\",\r\n                        defaultData: {\r\n                            post_id: post_id,\r\n                            post_title: post_title,\r\n                            dream_date: new Date(dream_date),\r\n                            post_content: post_content,\r\n                            tags: tags,\r\n                        }\r\n                    });\r\n                }\r\n                else if (post_type === 1) {\r\n                    history.push({\r\n                        pathname: \"/addcdream\",\r\n                        defaultData: {\r\n                            post_id: post_id,\r\n                            post_title: post_title,\r\n                            dream_date: new Date(dream_date),\r\n                            post_content: post_content,\r\n                            tags: tags,\r\n                            technics: technics,\r\n                            rating: rating,\r\n                        }\r\n                    });\r\n                }\r\n                break;\r\n\r\n            case 'delete':\r\n                newAlertTexts = { ...newAlertTexts, header: lang.currLang.texts.DeleteAlert };\r\n                newAlertTexts = { ...newAlertTexts, body: lang.currLang.texts.DeleteText };\r\n                newAlertTexts = { ...newAlertTexts, commit: lang.currLang.buttons.Delete };\r\n                newAlertTexts = { ...newAlertTexts, action: 'deleteOk' };\r\n                setAlertTexts(newAlertTexts);\r\n                closeMenu();\r\n                setOpenAlert(true);\r\n                break;\r\n\r\n            case 'closeAlert':\r\n                setOpenAlert(false);\r\n                break;\r\n\r\n            case 'deleteOk':\r\n                const postData = {\r\n                    post_id: post_id\r\n                };\r\n                instance\r\n                    .post('/actions/users/deletepost', postData)\r\n                    .then(res => {\r\n                        closeMenu();\r\n                        setSnackbar({\r\n                            type: SET_SNACKBAR_MODE,\r\n                            snackbar: {\r\n                                open: true,\r\n                                variant: 'success',\r\n                                message: lang.currLang.texts.success,\r\n                            },\r\n                        });\r\n                        setOpenAlert(false);\r\n                        props.loadPosts();\r\n                    })\r\n                    .catch(err => {\r\n                        setSnackbar({\r\n                            type: SET_SNACKBAR_MODE,\r\n                            snackbar: {\r\n                                open: true,\r\n                                variant: 'error',\r\n                                message: lang.currLang.texts.CantDeletePost,\r\n                            },\r\n                        });\r\n                        closeMenu();\r\n                        setOpenAlert(false);\r\n                    });\r\n                break;\r\n\r\n            case 'publicOk':\r\n                closeMenu();\r\n                setOpenAlert(false);\r\n                if (publicChecked) {\r\n                    const postData = {\r\n                        post_id: post_id,\r\n                        newPublic: 0\r\n                    };\r\n                    instance\r\n                        .post('/actions/users/updatepost', postData)\r\n                        .then(res => {\r\n                            setPublicChecked(false);\r\n                            setSnackbar({\r\n                                type: SET_SNACKBAR_MODE,\r\n                                snackbar: {\r\n                                    open: true,\r\n                                    variant: 'success',\r\n                                    message: lang.currLang.texts.success,\r\n                                },\r\n                            });\r\n                        })\r\n                        .catch(err => {\r\n                            setPublicChecked(true);\r\n                        });\r\n                }\r\n                else {\r\n                    const postData = {\r\n                        post_id: post_id,\r\n                        newPublic: 1,\r\n                    };\r\n                    instance\r\n                        .post('/actions/users/updatepost', postData)\r\n                        .then(res => {\r\n                            setPublicChecked(true);\r\n                            setSnackbar({\r\n                                type: SET_SNACKBAR_MODE,\r\n                                snackbar: {\r\n                                    open: true,\r\n                                    variant: 'success',\r\n                                    message: lang.currLang.texts.success,\r\n                                },\r\n                            });\r\n                        })\r\n                        .catch(err => {\r\n                            setPublicChecked(false);\r\n                        });\r\n                }\r\n                break;\r\n\r\n            default:\r\n                console.log('Command not found');\r\n                break;\r\n        }\r\n    };\r\n\r\n    const handleExpandClick = () => {\r\n        setExpanded(!expanded);\r\n    };\r\n\r\n    return (\r\n        <Grid item xs={12} className={classes.dreamCardDiv}>\r\n            <Dialog open={openAlert}\r\n                onClose={() => clickMenu('closeAlert')}\r\n                aria-labelledby=\"alert-dialog-title\"\r\n                aria-describedby=\"alert-dialog-description\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-title\" >\r\n                    {alertTexts.header}\r\n                </DialogTitle>\r\n                <DialogContent >\r\n                    <DialogContentText id=\"alert-dialog-description\" >\r\n                        {alertTexts.body}\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => clickMenu('closeAlert')}\r\n                        color=\"secondary\">\r\n                        {lang.currLang.buttons.cancel}\r\n                    </Button>\r\n                    <Button onClick={() => clickMenu(alertTexts.action)}\r\n                        color=\"primary\" autoFocus>\r\n                        {alertTexts.commit}\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n            <Menu id=\"simple-menu\"\r\n                anchorEl={anchorEl}\r\n                keepMounted\r\n                open={Boolean(anchorEl)}\r\n                onClose={closeMenu}>\r\n\r\n                <MenuItem >\r\n                    <ListItemIcon>\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Checkbox\r\n                                    onChange={(e) => clickMenu('public', e)}\r\n                                    checked={publicChecked}\r\n                                    value=\"checkedB\"\r\n                                    color=\"primary\"\r\n                                />\r\n                            }\r\n                        />\r\n                    </ListItemIcon>\r\n                    {lang.currLang.texts.Public}\r\n                </MenuItem>\r\n\r\n                <MenuItem onClick={() => clickMenu('edit')}>\r\n                    <ListItemIcon>\r\n                        <EditIcon fontSize=\"small\" />\r\n                    </ListItemIcon>\r\n                    {lang.currLang.buttons.Edit}\r\n                </MenuItem>\r\n\r\n                <MenuItem onClick={() => clickMenu('delete')}>\r\n                    <ListItemIcon>\r\n                        <EditIcon fontSize=\"small\" />\r\n                    </ListItemIcon>\r\n                    {lang.currLang.buttons.Delete}\r\n                </MenuItem>\r\n\r\n            </Menu>\r\n            <Card raised={true}\r\n                className={classes.card}>\r\n                <CardHeader\r\n                    style={{\r\n                        paddingBottom: '0px',\r\n                    }}\r\n                    title={\r\n                        <Grid container\r\n                            direction=\"row\"\r\n                            justify=\"flex-start\"\r\n                            alignItems=\"center\"\r\n                        >\r\n                            <Grid item xs={10} >\r\n                                <Typography variant='subtitle1'>\r\n                                    {post_title} (\r\n                                    {post_type === 0\r\n                                        ? lang.currLang.texts.Dream\r\n                                        : lang.currLang.texts.Cdream})\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid item xs={2} >\r\n                                <Tooltip\r\n                                    disableFocusListener\r\n                                    disableTouchListener\r\n                                    title={publicChecked\r\n                                        ? lang.currLang.texts.PublicDescription\r\n                                        : lang.currLang.texts.UnpublicDescription\r\n                                    }\r\n                                >\r\n                                    {publicChecked\r\n                                        ? <Visibility className={classes.iconCenter} />\r\n                                        : <VisibilityOff className={classes.iconCenter} />\r\n                                    }\r\n                                </Tooltip>\r\n                            </Grid>\r\n                        </Grid>\r\n                    }\r\n                    subheader={dateOfDream}\r\n                    action={\r\n                        <IconButton\r\n                            aria-label=\"settings\"\r\n                            onClick={(e) => openMenu(e)}\r\n                        >\r\n                            <MoreVertIcon />\r\n                        </IconButton>\r\n                    }\r\n                />\r\n                <CardActions disableSpacing={true}>\r\n                    <Typography\r\n                        noWrap={expanded\r\n                            ? false\r\n                            : true\r\n                        }\r\n                        variant='body2'\r\n                        style={{\r\n                            padding: '12px',\r\n                        }}\r\n                    >\r\n                        {expanded\r\n                            ? lang.currLang.texts.TapToShow\r\n                            : text_content\r\n                        }\r\n                    </Typography>\r\n\r\n                    <IconButton\r\n                        className={clsx(classes.expand, {\r\n                            [classes.expandOpen]: expanded\r\n                        })}\r\n                        onClick={handleExpandClick}\r\n                        aria-expanded={expanded}\r\n                        aria-label=\"show more\"\r\n                    >\r\n                        <ExpandMoreIcon />\r\n                    </IconButton>\r\n                </CardActions>\r\n                <Collapse in={expanded}\r\n                    timeout=\"auto\"\r\n                    unmountOnExit >\r\n                    <CardContent>\r\n                        <div className={classes.avatarRoot}>\r\n                            {technics.map((technic, key) =>\r\n                                technic[0]\r\n                                    ? <Chip className={classes.smallChip}\r\n                                        key={key}\r\n                                        label={lang.currLang.current === \"Ru\"\r\n                                            ? technic[1]\r\n                                            : technic[2]}\r\n                                    />\r\n                                    : ''\r\n                            )}\r\n                        </div>\r\n                        <div className={classes.avatarRoot}>\r\n                            {tags.map((tag, key) =>\r\n                                tag[0]\r\n                                    ? <Tooltip key={key}\r\n                                        disableFocusListener\r\n                                        disableTouchListener\r\n                                        title={\r\n                                            lang.currLang.current === \"Ru\"\r\n                                                ? tag[1]\r\n                                                : tag[2]\r\n                                        }\r\n                                    >\r\n                                        <Avatar className={classes.smallAvatar}\r\n                                            src={tag[3]}\r\n                                            style={palette.type === 'dark'\r\n                                                ? {\r\n                                                    filter: 'invert(1)',\r\n                                                }\r\n                                                : {}}\r\n                                        />\r\n                                    </Tooltip>\r\n                                    : ''\r\n                            )}\r\n                        </div>\r\n                        <Paper className={classes.contentPaper}>\r\n                            <MUIRichTextEditor\r\n                                controls={[\r\n                                    \"bold\",\r\n                                    \"italic\",\r\n                                    \"underline\",\r\n                                    \"strikethrough\",\r\n                                    \"colorfill\",\r\n                                ]}\r\n                                customControls={[\r\n                                    {\r\n                                        name: \"colorfill\",\r\n                                        icon: <FormatColorFillIcon />,\r\n                                        type: \"inline\",\r\n                                        inlineStyle: {\r\n                                            backgroundColor: \"yellow\",\r\n                                            color: \"black\"\r\n                                        }\r\n                                    }\r\n                                ]}\r\n                                readOnly={true}\r\n                                toolbar={false}\r\n                                value={post_content}\r\n                            />\r\n                        </Paper>\r\n                        {post_type === 0\r\n                            ? ''\r\n                            :\r\n                            <Grid container\r\n                                style={{\r\n                                    paddingTop: '10px',\r\n                                }}\r\n                                direction=\"row\"\r\n                                justify=\"center\"\r\n                                alignItems=\"stretch\" >\r\n                                <Grid item xs={6}>\r\n                                    <Typography component=\"legend\" variant='body2'>\r\n                                        {lang.currLang.texts.rating}:\r\n                                    </Typography>\r\n                                </Grid>\r\n                                <Grid item xs={6}>\r\n                                    <Rating name=\"simple-controlled\"\r\n                                        value={rating}\r\n                                        readOnly\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n                        }\r\n                    </CardContent>\r\n                </Collapse>\r\n            </Card>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nDreamCard.propTypes = {\r\n    setSnackbar: PropTypes.func.isRequired,\r\n    lang: PropTypes.object.isRequired,\r\n    palette: PropTypes.object.isRequired,\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        lang: store.lang,\r\n        palette: store.themeMode.palette,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setSnackbar: snackbar => dispatch(setSnackbar(snackbar)),\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(DreamCard);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Button from '@material-ui/core/Button';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\n\r\nimport DreamCard from './muiltiple/DreamCard';\r\nimport { useStyles } from '../styles/Styles';\r\nimport { instance } from './Config';\r\n\r\nfunction ViewDreams(props) {\r\n    const { lang, themeMode, history, auth } = props;\r\n    const muiTheme = createMuiTheme(themeMode);\r\n    const classes = useStyles();\r\n    const [isLoading, setIsLoading] = React.useState(true);\r\n    const [dreams, setDreams] = React.useState([]);\r\n\r\n    const loadPosts = React.useCallback(() => {\r\n        setIsLoading(true);\r\n        instance.post(\"/actions/users/getuserposts\", { id: auth.user.id })\r\n            .then(res => {\r\n                setDreams(res.data);\r\n                setIsLoading(false);\r\n            })\r\n            .catch(err => {\r\n                setIsLoading(false);\r\n            });\r\n    }, [auth.user.id]);\r\n\r\n    React.useEffect(() => {\r\n        loadPosts();\r\n    }, [loadPosts]);\r\n\r\n    return (\r\n        <MuiThemeProvider theme={muiTheme}>\r\n            <CssBaseline />\r\n            <div className={classes.root}>\r\n                <Grid className={classes.mainGridContainer}\r\n                    container\r\n                    direction=\"column\"\r\n                    justify=\"center\"\r\n                    alignItems=\"stretch\" >\r\n                    <Grid item xs={11} zeroMinWidth className={classes.mainGridDreamsBodyItem}>\r\n                        {isLoading\r\n                            ? <div className={classes.centerCircularProgress}>\r\n                                <CircularProgress disableShrink />\r\n                            </div>\r\n                            : <Container className={classes.mainGridDreamsBodyItemContainer}>\r\n                                <Paper className={classes.mainGridDreamsBodyItemContainerPaper}>\r\n                                    {dreams.length !== 0\r\n                                        ? <Grid className={classes.mainGridDreamsContainer}\r\n                                            container\r\n                                            direction=\"column\"\r\n                                            justify=\"center\"\r\n                                            alignItems=\"stretch\"\r\n                                        >\r\n                                            {dreams.map((item, key) => (\r\n                                                <DreamCard\r\n                                                    item={item}\r\n                                                    key={key}\r\n                                                    history={history}\r\n                                                    loadPosts={loadPosts}\r\n                                                />\r\n                                            ))}\r\n                                        </Grid>\r\n                                        :\r\n                                        <div>\r\n                                            <div className={classes.divDreamsNotFound} />\r\n                                            <div className={`${classes.divDreamsNotFound} ${classes.divDreamsNotFoundImg}`} />\r\n                                            <div className={classes.divDreamsNotFound}>\r\n                                                <Typography>\r\n                                                    {lang.currLang.texts.NoDreams}\r\n                                                </Typography>\r\n                                            </div>\r\n                                        </div>\r\n                                    }\r\n                                </Paper>\r\n                            </Container>\r\n                        }\r\n                    </Grid>\r\n                    <Grid item xs={1} zeroMinWidth className={classes.mainGridBodyItem}>\r\n                        <Grid\r\n                            container\r\n                            direction=\"row\"\r\n                            justify=\"space-evenly\"\r\n                            alignItems=\"center\"\r\n                            spacing={1}\r\n                        >\r\n                            <Grid item xs={6} align=\"center\">\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    color=\"secondary\"\r\n                                    className={classes.actionButton}\r\n                                    onClick={() => { history.push(\"/luciddreams\") }}\r\n                                >\r\n                                    {lang.currLang.buttons.close}\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid item xs={6} />\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </MuiThemeProvider >\r\n    );\r\n}\r\n\r\nViewDreams.propTypes = {\r\n    themeMode: PropTypes.object.isRequired,\r\n    lang: PropTypes.object.isRequired,\r\n    auth: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        themeMode: store.themeMode,\r\n        lang: store.lang,\r\n        auth: store.auth,\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(ViewDreams);","const words = {\r\n    current: 'Ru',\r\n    buttons: {\r\n        signIn: 'Вход',\r\n        signUp: 'Регистрация',\r\n        dreamJoirnal: 'Дневник снов',\r\n        addDream: 'Добавить сон',\r\n        addCDream: 'Добавить осозн. сон',\r\n        techniques: 'Техники',\r\n        adventures: 'Приключения',\r\n        close: 'Назад',\r\n        about: 'О нас',\r\n        cancel: 'Отмена',\r\n        add: 'Добавить',\r\n        Edit: 'Изменить',\r\n        Delete: 'Удалить',\r\n        Save: 'Сохранить',\r\n    },\r\n    texts: {\r\n        about: 'О нас О нас О нас О нас О нас О нас О нас О нас О нас О нас О нас О нас',\r\n        or: 'ИЛИ',\r\n        nickname: 'Отображаемое имя',\r\n        password: 'Пароль',\r\n        passwordAgain: 'Поторите пароль',\r\n        cancel: 'Отмена',\r\n        sucessRegistration: 'Вы успешно зарегистрировались',\r\n        hello: 'Привет, ',\r\n        changleLanguage: 'Сохранить изменение языка на ',\r\n        success: 'Успешно',\r\n        title: 'Заголовок',\r\n        description: 'Описание',\r\n        content: 'Что снилось',\r\n        tags: 'Места',\r\n        dreams: 'Снов',\r\n        technics: 'Техники',\r\n        rating: 'Реалистичность',\r\n        Dream: 'Обычный сон',\r\n        Cdream: 'ОC',\r\n        NoDreams: \"У вас нет снов\",\r\n        pickDate: \"Дата\",\r\n        pickTime: \"Время\",\r\n        TapToShow: \"Нажмите на текст, чтобы отобразить подсвечивание\",\r\n        Public: \"Опубликовано\",\r\n        Publish: \"Опубликовать\",\r\n        Unpublish: \"Скрыть\",\r\n        PublicAlert: \"Вы точно хотите опубликовать сон?\",\r\n        PublicText: \"После публикации ваши друзья смогут прочитать этот сон.\",\r\n        PublicDescription: \"Ваши друзья могут прочитать этот сон\",\r\n        UnpublicAlert: \"Вы точно хотите скрыть сон?\",\r\n        UnpublicText: \"После скрытия ваши друзья не смогут прочитать этот сон.\",\r\n        UnpublicDescription: \"Ваши друзья не могут прочитать этот сон\",\r\n        DeleteAlert: \"Вы точно хотите удалить?\",\r\n        DeleteText: \"После удаления запись не получится восстановить.\",\r\n    },\r\n    errors: {\r\n        emailLenght: 'Введите email',\r\n        nicknameLenght: 'Введите отображаемое имя',\r\n        passwordLenght: 'Введите пароль',\r\n        password2Lenght: 'Введите пароль',\r\n        passwordsCompare: 'Пароли не совпадают',\r\n        UserNotExist: 'Неверный email или пароль',\r\n        EmailIsNotValid: 'Введен некорректный email',\r\n        IncorrectPassword: 'Неверный email или пароль',\r\n        EmailIsBusy: 'Email занят',\r\n        PasswordLenght5Symbols: 'Длина пароля - больше 5 символов',\r\n        NotLogin: 'Вы не авторизированы',\r\n        EmptyTitle: 'Пустой заголовок',\r\n        EmptyDescription: 'Пустое описание',\r\n        EmptyDream: 'Пустое поле сна',\r\n        NoChanges: 'Нет изменений',\r\n        CantDeletePost: 'Ошибка удаления сна',\r\n    },\r\n};\r\n\r\nexport default words;","import React from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport SnackbarContent from \"@material-ui/core/SnackbarContent\";\r\nimport ButtonBase from '@material-ui/core/ButtonBase';\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport Button from '@material-ui/core/Button';\r\nimport Slide from \"@material-ui/core/Slide\";\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport { SET_THEME_MODE, SET_SNACKBAR_MODE } from \"../actions/types\";\r\n\r\nimport { setCurrLang, setTheme, setSnackbar } from '../actions/Actions';\r\nimport { useStyles } from '../styles/Styles';\r\nimport { instance } from './Config';\r\nimport { CheckTimeOut } from '../utils/CheckLoginTimeOut';\r\n\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\n\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\n\r\nimport RuDict from '../dictionary/ru';\r\nimport EnDict from '../dictionary/en';\r\n\r\nfunction TransitionDown(props) {\r\n    return <Slide {...props} direction=\"down\" />;\r\n}\r\n\r\nfunction MainPage(props) {\r\n    const classes = useStyles();\r\n    const { lang, themeMode, auth, history, setCurrLangAction, setTheme, setSnackbar } = props;\r\n    const muiTheme = createMuiTheme(themeMode);\r\n    const [prevLanguage, setPrevLanguage] = React.useState(undefined);\r\n    const [openLangSnakbar, setOpenLangSnakbar] = React.useState(false);\r\n    const [langSnakbarMessage, setLangSnakbarMessage] = React.useState('');\r\n    const [transition, setTransition] = React.useState(undefined);\r\n\r\n    const switchMode = () => {\r\n        let newPaletteType = themeMode.palette.type === \"light\" ? \"dark\" : \"light\";\r\n        let primaryColor = themeMode.palette.type === \"light\" ? \"#f9a825\" : \"#3f51b5\";\r\n        let secondaryColor = themeMode.palette.type === \"light\" ? \"#f50057\" : \"#f50057\";\r\n        setTheme({\r\n            type: SET_THEME_MODE,\r\n            palette: {\r\n                type: newPaletteType,\r\n                primary: { main: primaryColor },\r\n                secondary: { main: secondaryColor },\r\n            }\r\n        });\r\n    };\r\n\r\n    const onAstronautClick = () => {\r\n        alert('Тут должны перейти на страницу космонафта');\r\n    };\r\n\r\n    const onMapClick = () => {\r\n        let check = CheckTimeOut();\r\n        if (check) history.push(\"/dreammap\");\r\n        else history.push(\"/\");\r\n    };\r\n\r\n    const changeLanguage = (language) => {\r\n        if (language !== lang.currLang.current) {\r\n            if (language === 'Ru') {\r\n                setPrevLanguage(lang.currLang.current);\r\n                setCurrLangAction(RuDict);\r\n                setLangSnakbarMessage(language);\r\n                setTransition(() => TransitionDown);\r\n                setOpenLangSnakbar(true);\r\n            }\r\n            if (lang.currLang.current !== 'En') {\r\n                setPrevLanguage(lang.currLang.current);\r\n                setCurrLangAction(EnDict);\r\n                setLangSnakbarMessage(language);\r\n                setTransition(() => TransitionDown);\r\n                setOpenLangSnakbar(true);\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleCloseLangSnakbar = () => {\r\n        switch (prevLanguage) {\r\n            case 'En':\r\n                setCurrLangAction(EnDict);\r\n                break;\r\n            case 'Ru':\r\n                setCurrLangAction(RuDict);\r\n                break;\r\n            default:\r\n                setCurrLangAction(EnDict);\r\n                break;\r\n        }\r\n        setOpenLangSnakbar(false);\r\n    };\r\n\r\n    const handleSaveLangSnakbar = () => {\r\n        let newLang;\r\n        switch (lang.currLang.current) {\r\n            case 'En':\r\n                newLang = 0;\r\n                break;\r\n            case 'Ru':\r\n                newLang = 1;\r\n                break;\r\n            default:\r\n                newLang = 0;\r\n                break;\r\n        }\r\n        let userid = auth.user.id;\r\n        let usernickname = auth.user.nickname;\r\n        let newUserData = {\r\n            language: newLang,\r\n            id: userid,\r\n            nickname: usernickname,\r\n        };\r\n        //Проверка на таймаут\r\n        let check = CheckTimeOut();\r\n        if (check) {\r\n            instance\r\n                .post('/actions/users/updateuserdata', newUserData)\r\n                .then(res => {\r\n                    setSnackbar({\r\n                        type: SET_SNACKBAR_MODE,\r\n                        snackbar: {\r\n                            open: true,\r\n                            variant: 'success',\r\n                            message: lang.currLang.texts.success,\r\n                        },\r\n                    });\r\n                    setOpenLangSnakbar(false);\r\n                })\r\n                .catch(err => {\r\n                    handleCloseLangSnakbar();\r\n                });\r\n\r\n        }\r\n        else {\r\n            setSnackbar({\r\n                type: SET_SNACKBAR_MODE,\r\n                snackbar: {\r\n                    open: true,\r\n                    variant: 'error',\r\n                    message: lang.currLang.errors.NotLogin,\r\n                },\r\n            });\r\n            handleCloseLangSnakbar();\r\n        }\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        let id = {\r\n            id: auth.user.id,\r\n        };\r\n        instance\r\n            .post('/actions/users/getuserdata', id)\r\n            .then(res => {\r\n                res.data.language === 0 ? setCurrLangAction(EnDict) : setCurrLangAction(RuDict);\r\n            })\r\n            .catch(err => {\r\n                auth.user.language === 0 ? setCurrLangAction(EnDict) : setCurrLangAction(RuDict);\r\n            });\r\n        // if (auth.user.times_mode === 0) {\r\n        //     setTheme({\r\n        //         type: SET_THEME_MODE,\r\n        //         palette: {\r\n        //             type: \"dark\",\r\n        //             primary: { main: \"#f9a825\" },\r\n        //             secondary: { main: \"#f50057\" },\r\n        //         }\r\n        //     });\r\n        // }\r\n        // else {\r\n        //     setTheme({\r\n        //         type: SET_THEME_MODE,\r\n        //         palette: {\r\n        //             type: \"light\",\r\n        //             primary: { main: \"#3f51b5\" },\r\n        //             secondary: { main: \"#f50057\" },\r\n        //         }\r\n        //     });\r\n        // }\r\n    }, [classes, setTheme, setCurrLangAction, auth.user.language, auth.user.times_mode, auth.user.id]);\r\n\r\n    return (\r\n        <MuiThemeProvider theme={muiTheme}>\r\n            <CssBaseline />\r\n\r\n            <Snackbar\r\n                anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }}\r\n                key={\"top, center\"}\r\n                open={openLangSnakbar}\r\n                TransitionComponent={transition}\r\n            >\r\n                <SnackbarContent\r\n                    aria-describedby=\"lang-snackbar\"\r\n                    message={\r\n                        <Typography className={classes.mainGridContainer}\r\n                            align='center'\r\n                            id=\"lang-snackbar\"\r\n                            variant='body2'>\r\n                            {lang.currLang.texts.changleLanguage + langSnakbarMessage + ' ?'}\r\n                        </Typography>\r\n                    }\r\n                    action={[\r\n                        <div key={\"lang-snackbar-buttons\"}>\r\n                            <IconButton\r\n                                key=\"save\"\r\n                                aria-label=\"save\"\r\n                                color=\"inherit\"\r\n                                onClick={handleSaveLangSnakbar}\r\n                            >\r\n                                <SaveIcon />\r\n                            </IconButton>\r\n                            <IconButton\r\n                                key=\"close\"\r\n                                aria-label=\"close\"\r\n                                color=\"inherit\"\r\n                                onClick={handleCloseLangSnakbar}\r\n                            >\r\n                                <CloseIcon />\r\n                            </IconButton>\r\n                        </div>\r\n                    ]}\r\n                />\r\n            </Snackbar>\r\n\r\n            <div className={classes.root}>\r\n                <div className={classes.mainPage}>\r\n                    <Grid className={classes.mainGridContainer}\r\n                        container\r\n                        direction=\"column\"\r\n                        justify=\"center\"\r\n                        alignItems=\"stretch\"\r\n                    >\r\n                        <Grid item xs={4} className={classes.mainGridHeadItem} >\r\n                            <Grid container className={classes.mainGridContainer}\r\n                                direction=\"row\"\r\n                                justify=\"space-around\"\r\n                                alignItems=\"stretch\"\r\n                            >\r\n                                <Grid item xs={4} >\r\n                                    <ButtonBase className={classes.AstronautButton}\r\n                                        type='button'\r\n                                        focusRipple\r\n                                        onClick={onAstronautClick}>\r\n                                        <div className={classes.AstronautDiv}>\r\n                                            <div className={classes.AstronautImg} style={themeMode.palette.type === \"light\" ? { filter: 'invert(0)', } : { filter: 'invert(1)', }} />\r\n                                        </div>\r\n                                    </ButtonBase>\r\n                                </Grid>\r\n                                <Grid item xs={4} >\r\n                                    <ButtonBase className={classes.image}\r\n                                        type='button'\r\n                                        focusRipple\r\n                                        onClick={switchMode}>\r\n                                        <div className={classes.SkyDiv}>\r\n                                            <div className={classes.SunSrc} style={themeMode.palette.type === \"dark\" ? { transform: 'translateY(36vw)' } : { transform: 'translateY(0)' }} />\r\n                                            <div className={classes.MoonSrc} style={themeMode.palette.type === \"dark\" ? { transform: 'translateY(0)' } : { transform: 'translateY(-36vw)' }} />\r\n                                        </div>\r\n                                    </ButtonBase>\r\n                                </Grid>\r\n                                <Grid item xs={4} >\r\n                                    <ButtonBase className={classes.MapButton}\r\n                                        type='button'\r\n                                        focusRipple\r\n                                        onClick={onMapClick}>\r\n                                        <div className={classes.MapDiv}>\r\n                                            <div className={classes.MapImg} style={themeMode.palette.type === \"light\" ? { filter: 'invert(0)', } : { filter: 'invert(1)', }} />\r\n                                        </div>\r\n                                    </ButtonBase>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item xs={1} className={classes.mainGridHeadItem} >\r\n                            <Grid className={classes.mainGridContainer}\r\n                                container\r\n                                direction=\"column\"\r\n                                justify=\"center\"\r\n                                alignItems=\"stretch\" >\r\n                                <Grid item xs={12} className={classes.menuButtonContainerItem} >\r\n                                    <Typography className={classes.mainGridContainer}\r\n                                        align='center'\r\n                                        variant='h6'>\r\n                                        {lang.currLang.texts.hello + auth.user.nickname}\r\n                                    </Typography>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item xs={6} className={classes.mainGridBodyItem} >\r\n                            <Grid className={classes.mainGridContainer}\r\n                                container\r\n                                direction=\"column\"\r\n                                justify=\"center\"\r\n                                alignItems=\"stretch\"\r\n                            >\r\n                                <Grid className={classes.menuButtonContainer}\r\n                                    container\r\n                                    direction=\"column\"\r\n                                    justify=\"center\"\r\n                                    alignItems=\"stretch\"\r\n                                >\r\n                                    <Grid item xs={12} className={classes.menuButtonContainerItem} >\r\n                                        <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                            <Button\r\n                                                variant=\"contained\"\r\n                                                color=\"primary\"\r\n                                                className={classes.menuButton}\r\n                                                onClick={() => {\r\n                                                    let check = CheckTimeOut();\r\n                                                    if (check) history.push(\"/dreams\");\r\n                                                    else history.push(\"/\");\r\n                                                }}\r\n                                            >\r\n                                                {lang.currLang.buttons.dreamJoirnal}\r\n                                            </Button>\r\n                                        </Grid>\r\n                                        <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                            <Button\r\n                                                variant=\"contained\"\r\n                                                color=\"primary\"\r\n                                                className={classes.menuButton}\r\n                                                onClick={() => {\r\n                                                    let check = CheckTimeOut();\r\n                                                    if (check) history.push(\"/addregulardream\");\r\n                                                    else history.push(\"/\");\r\n                                                }}\r\n                                            >\r\n                                                {lang.currLang.buttons.addDream}\r\n                                            </Button>\r\n                                        </Grid>\r\n                                        <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                            <Button\r\n                                                variant=\"contained\"\r\n                                                color=\"primary\"\r\n                                                className={classes.menuButton}\r\n                                                onClick={() => {\r\n                                                    let check = CheckTimeOut();\r\n                                                    if (check) history.push(\"/addcdream\");\r\n                                                    else history.push(\"/\");\r\n                                                }}\r\n                                            >\r\n                                                {lang.currLang.buttons.addCDream}\r\n                                            </Button>\r\n                                        </Grid>\r\n                                        <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                            <Button\r\n                                                variant=\"contained\"\r\n                                                color=\"primary\"\r\n                                                className={classes.menuButton}\r\n                                                onClick={() => {\r\n                                                    let check = CheckTimeOut();\r\n                                                    if (check) history.push(\"/technics\");\r\n                                                    else history.push(\"/\");\r\n                                                }}\r\n                                            >\r\n                                                {lang.currLang.buttons.techniques}\r\n                                            </Button>\r\n                                        </Grid>\r\n                                        <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                            <Button variant=\"contained\" color=\"primary\" className={classes.menuButton}>\r\n                                                {lang.currLang.buttons.adventures}\r\n                                            </Button>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item xs={1} className={classes.mainGridFooterItem} >\r\n                            <Grid className={classes.menuButtonContainerFooterLanguageButtons}\r\n                                container\r\n                                direction=\"row\"\r\n                                justify=\"center\"\r\n                                alignItems=\"center\" >\r\n                                <Grid item>\r\n                                    <Button onClick={() => { changeLanguage('Ru') }}>\r\n                                        RU\r\n                                    </Button>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Button onClick={() => { changeLanguage('En') }}>\r\n                                        EN\r\n                                    </Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </div>\r\n            </div>\r\n        </MuiThemeProvider>\r\n    );\r\n};\r\n\r\nMainPage.propTypes = {\r\n    setCurrLangAction: PropTypes.func.isRequired,\r\n    setTheme: PropTypes.func.isRequired,\r\n    setSnackbar: PropTypes.func.isRequired,\r\n    lang: PropTypes.object.isRequired,\r\n    themeMode: PropTypes.object.isRequired,\r\n    auth: PropTypes.object.isRequired,\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        lang: store.lang,\r\n        themeMode: store.themeMode,\r\n        auth: store.auth,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setCurrLangAction: currLangState => dispatch(setCurrLang(currLangState)),\r\n        setTheme: palette => dispatch(setTheme(palette)),\r\n        setSnackbar: snackbar => dispatch(setSnackbar(snackbar)),\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(MainPage);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport jwt_decode from \"jwt-decode\";\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { GET_ERRORS, SET_CURRENT_USER, SET_SNACKBAR_MODE } from \"../actions/types\";\r\nimport { setCurrLang, setUserState, setSnackbar } from '../actions/Actions';\r\nimport { useStyles } from '../styles/Styles';\r\nimport setAuthToken from \"../utils/setAuthToken\";\r\nimport { instance } from './Config';\r\n\r\nimport RuDict from '../dictionary/ru';\r\nimport EnDict from '../dictionary/en';\r\n\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\r\nimport Visibility from '@material-ui/icons/Visibility';\r\n\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\n\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\n\r\nimport { mdiVk } from '@mdi/js';\r\nimport Icon from '@mdi/react';\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nfunction Sign(props) {\r\n    const classes = useStyles();\r\n    const { history, themeMode, lang, setUserState, setSnackbar, setCurrLang } = props;\r\n    const muiTheme = createMuiTheme(themeMode);\r\n    const [loginData, setLoginData] = React.useState({\r\n        email: '',\r\n        password: '',\r\n    });\r\n    const [registData, setRegistData] = React.useState({\r\n        email: '',\r\n        nickname: '',\r\n        password: '',\r\n        password2: '',\r\n    });\r\n    const [regFieldErrors, setRegFieldErrors] = React.useState({\r\n        emailErr: false,\r\n        emailErrText: '',\r\n        nicknameErr: false,\r\n        nicknameErrText: '',\r\n        passwordErr: false,\r\n        passwordErrText: '',\r\n        password2Err: false,\r\n        password2ErrText: '',\r\n    });\r\n    const [isLoading, setIsLoading] = React.useState(false);\r\n    const [showPassword, setShowPassword] = React.useState(false);\r\n    const [openLogin, setOpenLogin] = React.useState(false);\r\n    const [openRegist, setOpenRegist] = React.useState(false);\r\n    const [page, setPage] = React.useState({\r\n        mainPage: true,\r\n        aboutPage: false,\r\n    });\r\n\r\n    const handleMouseDownPassword = event => {\r\n        event.preventDefault();\r\n    };\r\n    const changeAuthLogin = (e) => {\r\n        let newLoginData = loginData;\r\n        newLoginData = { ...newLoginData, email: e.target.value };\r\n        setLoginData(newLoginData);\r\n    };\r\n    const changeAuthPassword = (e) => {\r\n        let newLoginData = loginData;\r\n        newLoginData = { ...newLoginData, password: e.target.value };\r\n        setLoginData(newLoginData);\r\n    };\r\n    const changeRegistLogin = (e) => {\r\n        let newRegFieldErrors = regFieldErrors;\r\n        newRegFieldErrors = { ...newRegFieldErrors, emailErr: false };\r\n        newRegFieldErrors = { ...newRegFieldErrors, emailErrText: '' };\r\n        setRegFieldErrors(newRegFieldErrors);\r\n\r\n        let newRegistData = registData;\r\n        newRegistData = { ...newRegistData, email: e.target.value };\r\n        setRegistData(newRegistData);\r\n    };\r\n    const changeRegistNickname = (e) => {\r\n        let newRegFieldErrors = regFieldErrors;\r\n        newRegFieldErrors = { ...newRegFieldErrors, nicknameErr: false };\r\n        newRegFieldErrors = { ...newRegFieldErrors, nicknameErrText: '' };\r\n        setRegFieldErrors(newRegFieldErrors);\r\n\r\n        let newRegistData = registData;\r\n        newRegistData = { ...newRegistData, nickname: e.target.value };\r\n        setRegistData(newRegistData);\r\n    };\r\n    const changeRegistPassword = (e) => {\r\n        let newRegFieldErrors = regFieldErrors;\r\n        newRegFieldErrors = { ...newRegFieldErrors, passwordErr: false };\r\n        newRegFieldErrors = { ...newRegFieldErrors, passwordErrText: '' };\r\n        newRegFieldErrors = { ...newRegFieldErrors, password2Err: false };\r\n        newRegFieldErrors = { ...newRegFieldErrors, password2ErrText: '' };\r\n        setRegFieldErrors(newRegFieldErrors);\r\n\r\n        let newRegistData = registData;\r\n        newRegistData = { ...newRegistData, password: e.target.value };\r\n        setRegistData(newRegistData);\r\n    };\r\n    const changeRegistPassword2 = (e) => {\r\n        let newRegFieldErrors = regFieldErrors;\r\n        newRegFieldErrors = { ...newRegFieldErrors, passwordErr: false };\r\n        newRegFieldErrors = { ...newRegFieldErrors, passwordErrText: '' };\r\n        newRegFieldErrors = { ...newRegFieldErrors, password2Err: false };\r\n        newRegFieldErrors = { ...newRegFieldErrors, password2ErrText: '' };\r\n        setRegFieldErrors(newRegFieldErrors);\r\n        let newRegistData = registData;\r\n        newRegistData = { ...newRegistData, password2: e.target.value };\r\n        setRegistData(newRegistData);\r\n    };\r\n    const singIn = () => {\r\n        instance\r\n            .post(\"/actions/users/login\", loginData)\r\n            .then(res => {\r\n                const { token } = res.data;\r\n                localStorage.setItem(\"jwtToken\", token);\r\n                setAuthToken(token);\r\n                const decoded = jwt_decode(token);\r\n                setUserState({\r\n                    type: SET_CURRENT_USER,\r\n                    payload: decoded\r\n                });\r\n                setIsLoading(false);\r\n                history.push(\"/luciddreams\");\r\n            })\r\n            .catch(err => {\r\n                //console.log(err);\r\n                let errorMessage = '';\r\n                if (err.response.data.email === 'UserNotExist') {\r\n                    errorMessage = lang.currLang.errors.UserNotExist;\r\n                }\r\n                if (err.response.data.email === 'EmailIsNotValid') {\r\n                    errorMessage = lang.currLang.errors.EmailIsNotValid;\r\n                }\r\n                if (err.response.data.passwordincorrect === 'IncorrectPassword') {\r\n                    errorMessage = lang.currLang.errors.IncorrectPassword;\r\n                }\r\n                setSnackbar({\r\n                    type: SET_SNACKBAR_MODE,\r\n                    snackbar: {\r\n                        open: true,\r\n                        variant: 'error',\r\n                        message: errorMessage,\r\n                    },\r\n                });\r\n                setIsLoading(false);\r\n            });\r\n    };\r\n    const singUp = () => {\r\n        let isErr = false;\r\n        let newRegFieldErrors = regFieldErrors;\r\n        if (registData.email.length === 0) {\r\n            newRegFieldErrors = { ...newRegFieldErrors, emailErr: true };\r\n            newRegFieldErrors = { ...newRegFieldErrors, emailErrText: lang.currLang.errors.emailLenght };\r\n            isErr = true;\r\n        }\r\n        if (registData.nickname.length === 0) {\r\n            newRegFieldErrors = { ...newRegFieldErrors, nicknameErr: true };\r\n            newRegFieldErrors = { ...newRegFieldErrors, nicknameErrText: lang.currLang.errors.nicknameLenght };\r\n            isErr = true;\r\n        }\r\n        if (registData.password.length === 0) {\r\n            newRegFieldErrors = { ...newRegFieldErrors, passwordErr: true };\r\n            newRegFieldErrors = { ...newRegFieldErrors, passwordErrText: lang.currLang.errors.passwordLenght };\r\n            isErr = true;\r\n        }\r\n        if (registData.password2.length === 0) {\r\n            newRegFieldErrors = { ...newRegFieldErrors, password2Err: true };\r\n            newRegFieldErrors = { ...newRegFieldErrors, password2ErrText: lang.currLang.errors.password2Lenght };\r\n            isErr = true;\r\n        }\r\n        if (registData.password !== registData.password2) {\r\n            newRegFieldErrors = { ...newRegFieldErrors, passwordErr: true };\r\n            newRegFieldErrors = { ...newRegFieldErrors, passwordErrText: lang.currLang.errors.passwordsCompare };\r\n            newRegFieldErrors = { ...newRegFieldErrors, password2Err: true };\r\n            newRegFieldErrors = { ...newRegFieldErrors, password2ErrText: lang.currLang.errors.passwordsCompare };\r\n            isErr = true;\r\n        }\r\n        if (isErr) {\r\n            setRegFieldErrors(newRegFieldErrors);\r\n            setIsLoading(false);\r\n        }\r\n        else {\r\n            instance\r\n                .post('/actions/users/register', registData)\r\n                .then(res => {\r\n                    setSnackbar({\r\n                        type: SET_SNACKBAR_MODE,\r\n                        snackbar: {\r\n                            open: true,\r\n                            variant: 'success',\r\n                            message: lang.currLang.texts.sucessRegistration,\r\n                        },\r\n                    });\r\n                    let newRegistData = registData;\r\n                    newRegistData = { ...newRegistData, email: '' };\r\n                    newRegistData = { ...newRegistData, nickname: '' };\r\n                    newRegistData = { ...newRegistData, password: '' };\r\n                    newRegistData = { ...newRegistData, password2: '' };\r\n                    setRegistData(newRegistData);\r\n                    click('closeRegist');\r\n                    click('openLogin');\r\n                    setIsLoading(false);\r\n                })\r\n                .catch(err => {\r\n                    let errorMessage = '';\r\n                    setUserState({\r\n                        type: GET_ERRORS,\r\n                        payload: err.response.data\r\n                    });\r\n                    if (err.response.data.email === 'EmailIsBusy') {\r\n                        errorMessage = lang.currLang.errors.EmailIsBusy;\r\n                    }\r\n                    if (err.response.data.password === 'PasswordLenght5Symbols') {\r\n                        errorMessage = lang.currLang.errors.PasswordLenght5Symbols;\r\n                    }\r\n                    setSnackbar({\r\n                        type: SET_SNACKBAR_MODE,\r\n                        snackbar: {\r\n                            open: true,\r\n                            variant: 'error',\r\n                            message: errorMessage,\r\n                        },\r\n                    });\r\n                    setIsLoading(false);\r\n                });\r\n        }\r\n    };\r\n    const click = (action) => {\r\n        let newPages = page;\r\n        switch (action) {\r\n            case 'useVk':\r\n                // window.VK.Auth.login(checkLoginState, 4194304);\r\n                // let loadItems = async () => {\r\n                //     const response = await fetch('http://10.203.117.137:3001/auth/vk', {\r\n                //         method: 'GET',\r\n                //         credentials: 'include',\r\n                //     });\r\n                //     const body = await response.json();\r\n\r\n                //     console.log(response);\r\n                // }\r\n                break;\r\n            case 'openLogin':\r\n                setOpenLogin(true);\r\n                break;\r\n            case 'openRegist':\r\n                setOpenRegist(true);\r\n                break;\r\n            case 'closeLogin':\r\n                setOpenLogin(false);\r\n                setShowPassword(false);\r\n                break;\r\n            case 'closeRegist':\r\n                setOpenRegist(false);\r\n                setShowPassword(false);\r\n                break;\r\n            case 'signIn':\r\n                setIsLoading(true);\r\n                singIn();\r\n                break;\r\n            case 'signUp':\r\n                setIsLoading(true);\r\n                singUp();\r\n                break;\r\n            case 'openAboutPage':\r\n                newPages = { ...newPages, aboutPage: true };\r\n                newPages = { ...newPages, mainPage: false };\r\n                setPage(newPages);\r\n                break;\r\n            case 'closeAboutPage':\r\n                newPages = { ...newPages, aboutPage: false };\r\n                newPages = { ...newPages, mainPage: true };\r\n                setPage(newPages);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    };\r\n    const changeLanguage = (language) => {\r\n        if (language === 'Ru') {\r\n            setCurrLang(RuDict);\r\n        }\r\n        else {\r\n            setCurrLang(EnDict);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <MuiThemeProvider theme={muiTheme}>\r\n            <CssBaseline />\r\n\r\n            <div className={classes.root} id='rootDiv'>\r\n\r\n                <div className={classes.mainPage}\r\n                    style={\r\n                        page.mainPage === true\r\n                            ? { transform: 'translateY(0%)' }\r\n                            : { transform: 'translateY(-100%)' }\r\n                    } >\r\n                    <Grid className={classes.mainGridContainer}\r\n                        container\r\n                        direction=\"column\"\r\n                        justify=\"center\"\r\n                        alignItems=\"stretch\"\r\n                    >\r\n                        <Grid item xs={11} className={classes.mainGridBodyItem} >\r\n                            <Grid className={classes.menuButtonContainer}\r\n                                container\r\n                                direction=\"column\"\r\n                                justify=\"center\"\r\n                                alignItems=\"stretch\" >\r\n                                <Grid item xs={3} />\r\n                                <Grid item xs={6} className={classes.menuButtonContainerItem}>\r\n                                    <Dialog\r\n                                        open={openLogin}\r\n                                        TransitionComponent={Transition}\r\n                                        keepMounted\r\n                                        aria-labelledby=\"alert-dialog-slide-title\"\r\n                                        aria-describedby=\"alert-dialog-slide-description\"\r\n                                    >\r\n                                        <DialogTitle id=\"alert-dialog-slide-title\">\r\n                                            {lang.currLang.buttons.signIn}\r\n                                        </DialogTitle>\r\n                                        <DialogContent>\r\n                                            <Grid item xs={12} className={classes.menuButtonContainerItem}>\r\n                                                <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                                    <TextField\r\n                                                        className={classes.textField}\r\n                                                        id=\"email-field\"\r\n                                                        type=\"email\"\r\n                                                        label=\"Email\"\r\n                                                        onBlur={(e) => { changeAuthLogin(e) }} />\r\n                                                </Grid>\r\n                                                <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                                    <TextField\r\n                                                        id=\"password-field\"\r\n                                                        className={classes.textField}\r\n                                                        type={showPassword ? 'text' : 'password'}\r\n                                                        label={lang.currLang.texts.password}\r\n                                                        onBlur={(e) => { changeAuthPassword(e) }}\r\n                                                        InputProps={{\r\n                                                            endAdornment: (\r\n                                                                <InputAdornment position=\"end\">\r\n                                                                    <IconButton\r\n                                                                        tabIndex=\"-1\"\r\n                                                                        edge=\"end\"\r\n                                                                        aria-label=\"toggle password visibility\"\r\n                                                                        onClick={() => { showPassword ? setShowPassword(false) : setShowPassword(true) }}\r\n                                                                        onMouseDown={handleMouseDownPassword} >\r\n                                                                        {showPassword ? <VisibilityOff /> : <Visibility />}\r\n                                                                    </IconButton>\r\n                                                                </InputAdornment>\r\n                                                            ),\r\n                                                        }} />\r\n                                                </Grid>\r\n                                                <Grid item xs={2} className={classes.menuDivButton}\r\n                                                    align=\"center\"\r\n                                                >\r\n                                                    <Typography>\r\n                                                        {lang.currLang.texts.or}\r\n                                                    </Typography>\r\n                                                </Grid>\r\n                                                <Grid item xs={2} className={classes.menuDivButton}\r\n                                                    align=\"center\"\r\n                                                >\r\n                                                    <IconButton className={classes.button}\r\n                                                        onClick={() => { click('useVk') }}\r\n                                                        disabled={isLoading}>\r\n                                                        <Icon path={mdiVk} size={2} color={themeMode.palette.type === 'light' ? 'rgba(0, 0, 0, 0.54)' : 'rgba(255, 255, 255, 1)'} />\r\n                                                    </IconButton>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                            {isLoading\r\n                                                ? <LinearProgress /> :\r\n                                                ''}\r\n                                        </DialogContent>\r\n                                        {!isLoading\r\n                                            ?\r\n                                            <DialogActions>\r\n                                                <Button onClick={() => { click('closeLogin') }}\r\n                                                    color=\"secondary\"\r\n                                                    disabled={isLoading}>\r\n                                                    {lang.currLang.buttons.cancel}\r\n                                                </Button>\r\n                                                <Button onClick={() => { click('signIn') }}\r\n                                                    color=\"primary\"\r\n                                                    disabled={isLoading}>\r\n                                                    {lang.currLang.buttons.signIn}\r\n                                                </Button>\r\n                                            </DialogActions>\r\n                                            : ''}\r\n                                    </Dialog>\r\n                                    <Dialog\r\n                                        open={openRegist}\r\n                                        TransitionComponent={Transition}\r\n                                        keepMounted\r\n                                        aria-labelledby=\"alert-dialog-slide-title\"\r\n                                        aria-describedby=\"alert-dialog-slide-description\"\r\n                                    >\r\n                                        <DialogTitle id=\"alert-dialog-slide-title\">\r\n                                            {lang.currLang.buttons.signUp}\r\n                                        </DialogTitle>\r\n                                        <DialogContent>\r\n                                            <Grid item xs={12} className={classes.menuButtonContainerItem}>\r\n                                                <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                                    <TextField\r\n                                                        error={regFieldErrors.emailErr}\r\n                                                        helperText={regFieldErrors.emailErrText}\r\n                                                        className={classes.textField}\r\n                                                        id=\"reg-email-field\"\r\n                                                        type=\"email\"\r\n                                                        label=\"Email\"\r\n                                                        onBlur={(e) => { changeRegistLogin(e) }} />\r\n                                                </Grid>\r\n                                                <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                                    <TextField\r\n                                                        error={regFieldErrors.nicknameErr}\r\n                                                        helperText={regFieldErrors.nicknameErrText}\r\n                                                        className={classes.textField}\r\n                                                        id=\"reg-nickname-field\"\r\n                                                        type=\"text\"\r\n                                                        label={lang.currLang.texts.nickname}\r\n                                                        onBlur={(e) => { changeRegistNickname(e) }} />\r\n                                                </Grid>\r\n                                                <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                                    <TextField\r\n                                                        error={regFieldErrors.passwordErr}\r\n                                                        helperText={regFieldErrors.passwordErrText}\r\n                                                        id=\"reg-password-field\"\r\n                                                        className={classes.textField}\r\n                                                        type={showPassword ? 'text' : 'password'}\r\n                                                        label={lang.currLang.texts.password}\r\n                                                        onBlur={(e) => { changeRegistPassword(e) }}\r\n                                                        InputProps={{\r\n                                                            endAdornment: (\r\n                                                                <InputAdornment position=\"end\">\r\n                                                                    <IconButton\r\n                                                                        tabIndex=\"-1\"\r\n                                                                        edge=\"end\"\r\n                                                                        aria-label=\"toggle password visibility\"\r\n                                                                        onClick={() => { showPassword ? setShowPassword(false) : setShowPassword(true) }}\r\n                                                                        onMouseDown={handleMouseDownPassword} >\r\n                                                                        {showPassword ? <VisibilityOff /> : <Visibility />}\r\n                                                                    </IconButton>\r\n                                                                </InputAdornment>\r\n                                                            ),\r\n                                                        }} />\r\n                                                </Grid>\r\n                                                <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                                    <TextField\r\n                                                        error={regFieldErrors.password2Err}\r\n                                                        helperText={regFieldErrors.password2ErrText}\r\n                                                        id=\"reg-password2-field\"\r\n                                                        className={classes.textField}\r\n                                                        type={showPassword ? 'text' : 'password'}\r\n                                                        label={lang.currLang.texts.passwordAgain}\r\n                                                        onBlur={(e) => { changeRegistPassword2(e) }}\r\n                                                        InputProps={{\r\n                                                            endAdornment: (\r\n                                                                <InputAdornment position=\"end\">\r\n                                                                    <IconButton\r\n                                                                        tabIndex=\"-1\"\r\n                                                                        edge=\"end\"\r\n                                                                        aria-label=\"toggle password visibility\"\r\n                                                                        onClick={() => { showPassword ? setShowPassword(false) : setShowPassword(true) }}\r\n                                                                        onMouseDown={handleMouseDownPassword} >\r\n                                                                        {showPassword ? <VisibilityOff /> : <Visibility />}\r\n                                                                    </IconButton>\r\n                                                                </InputAdornment>\r\n                                                            ),\r\n                                                        }} />\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                            {isLoading\r\n                                                ? <LinearProgress />\r\n                                                : ''}\r\n\r\n                                        </DialogContent>\r\n                                        {!isLoading\r\n                                            ?\r\n                                            <DialogActions>\r\n                                                <Button onClick={() => { click('closeRegist') }}\r\n                                                    color=\"secondary\"\r\n                                                    disabled={isLoading}>\r\n                                                    {lang.currLang.buttons.cancel}\r\n                                                </Button>\r\n                                                <Button onClick={() => { click('signUp') }}\r\n                                                    color=\"primary\"\r\n                                                    disabled={isLoading}>\r\n                                                    {lang.currLang.buttons.signUp}\r\n                                                </Button>\r\n                                            </DialogActions>\r\n                                            : ''}\r\n                                    </Dialog>\r\n                                    <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                        <Button variant=\"contained\" color=\"primary\" className={classes.menuButton} onClick={() => { click('openLogin') }}>\r\n                                            {lang.currLang.buttons.signIn}\r\n                                        </Button>\r\n                                    </Grid>\r\n                                    <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                        <Button variant=\"contained\" color=\"primary\" className={classes.menuButton} onClick={() => { click('openRegist') }}>\r\n                                            {lang.currLang.buttons.signUp}\r\n                                        </Button>\r\n                                    </Grid>\r\n                                    <Grid item xs={2} className={classes.menuDivButton} align=\"center\" />\r\n                                    <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                        <Button variant=\"contained\"\r\n                                            color=\"primary\"\r\n                                            className={classes.menuButton}\r\n                                            onClick={() => (click('openAboutPage'))} >\r\n                                            {lang.currLang.buttons.about}\r\n                                        </Button>\r\n                                    </Grid>\r\n                                </Grid>\r\n                                <Grid item xs={3} />\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item xs={1} className={classes.mainGridFooterItem} >\r\n                            <Grid className={classes.menuButtonContainerFooterLanguageButtons}\r\n                                container\r\n                                direction=\"row\"\r\n                                justify=\"center\"\r\n                                alignItems=\"center\" >\r\n                                <Grid item>\r\n                                    <Button onClick={() => { changeLanguage('Ru') }}>\r\n                                        RU\r\n                                    </Button>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Button onClick={() => { changeLanguage('En') }}>\r\n                                        EN\r\n                                    </Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </div >\r\n\r\n                <div className={classes.aboutPage}\r\n                    style={page.aboutPage === true\r\n                        ? { transform: 'translateY(-100%)' }\r\n                        : { transform: 'translateY(0%)' }\r\n                    }\r\n                >\r\n                    <Grid className={classes.aboutGridContainer}\r\n                        container\r\n                        direction=\"column\"\r\n                        justify=\"center\"\r\n                        alignItems=\"stretch\"\r\n                        spacing={5} >\r\n                        <Grid item\r\n                            className={classes.aboutGridItem}\r\n                            align='center'>\r\n                            <Paper className={classes.aboutPaper}>\r\n                                <Typography>\r\n                                    {lang.currLang.texts.about}\r\n                                </Typography>\r\n                            </Paper>\r\n                        </Grid>\r\n                        <Grid item\r\n                            className={classes.aboutGridItem}\r\n                            align='center'>\r\n                            <Button variant=\"contained\"\r\n                                color=\"primary\"\r\n                                className={classes.menuButton}\r\n                                onClick={() => (click('closeAboutPage'))} >\r\n                                {lang.currLang.buttons.close}\r\n                            </Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                </div>\r\n            </div >\r\n        </MuiThemeProvider>\r\n    )\r\n}\r\n\r\nSign.propTypes = {\r\n    setCurrLang: PropTypes.func.isRequired,\r\n    setUserState: PropTypes.func.isRequired,\r\n    setSnackbar: PropTypes.func.isRequired,\r\n    themeMode: PropTypes.object.isRequired,\r\n    lang: PropTypes.object.isRequired,\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        themeMode: store.themeMode,\r\n        lang: store.lang,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setCurrLang: currLangState => dispatch(setCurrLang(currLangState)),\r\n        setUserState: State => dispatch(setUserState(State)),\r\n        setSnackbar: snackbar => dispatch(setSnackbar(snackbar)),\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Sign);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Card from '@material-ui/core/Card';\r\n\r\nimport { useStyles } from '../../styles/Styles';\r\nimport { setSnackbar } from '../../actions/Actions';\r\n\r\nfunction TechnicCard(props) {\r\n    const { item, lang, auth, history } = props;\r\n    const classes = useStyles();\r\n    const [openAlert, setOpenAlert] = React.useState(false);\r\n    const [alertTexts, setAlertTexts] = React.useState({\r\n        header: '',\r\n        body: '',\r\n        commit: '',\r\n        action: '',\r\n    });\r\n    const actions = (action) => {\r\n        switch (action) {\r\n            case 'edit':\r\n                history.push({\r\n                    pathname: \"/addtechnics\",\r\n                    defaultData: {\r\n                        item: item,\r\n                    }\r\n                });\r\n                break;\r\n            case 'delete':\r\n                let newAlertTexts = alertTexts;\r\n                newAlertTexts = { ...newAlertTexts, header: lang.currLang.texts.DeleteAlert };\r\n                newAlertTexts = { ...newAlertTexts, body: lang.currLang.texts.DeleteText };\r\n                newAlertTexts = { ...newAlertTexts, commit: lang.currLang.buttons.Delete };\r\n                newAlertTexts = { ...newAlertTexts, action: 'deleteOk' };\r\n                setAlertTexts(newAlertTexts);\r\n                setOpenAlert(true);\r\n                break;\r\n            case 'deleteOk':\r\n                setOpenAlert(false);\r\n                props.loadTechnics();\r\n                break;\r\n            case 'closeAlert':\r\n                setOpenAlert(false);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Grid item xs={12} className={classes.dreamCardDiv} >\r\n            <Dialog open={openAlert}\r\n                onClose={() => actions('closeAlert')}\r\n                aria-labelledby=\"alert-dialog-title\"\r\n                aria-describedby=\"alert-dialog-description\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-title\" >\r\n                    {alertTexts.header}\r\n                </DialogTitle>\r\n                <DialogContent >\r\n                    <DialogContentText id=\"alert-dialog-description\" >\r\n                        {alertTexts.body}\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => actions('closeAlert')}\r\n                        color=\"secondary\">\r\n                        {lang.currLang.buttons.cancel}\r\n                    </Button>\r\n                    <Button onClick={() => actions(alertTexts.action)}\r\n                        color=\"primary\" autoFocus>\r\n                        {alertTexts.commit}\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n            <Card raised={true} className={classes.card}>\r\n                <CardActionArea>\r\n                    <CardMedia className={classes.media}\r\n                        image=\"https://4.bp.blogspot.com/-imM00o7SslA/V8NXohT8AmI/AAAAAAAAFOM/F7h1SZjMaCU4mJ6PlwUlx7tpePjVJWlcACLcB/s1600/Cockpit%2B2.png\"\r\n                    />\r\n                    <CardContent>\r\n                        <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                            {lang.currLang.current === \"Ru\"\r\n                                ? item.name_rus\r\n                                : item.name_eng\r\n                            }\r\n                        </Typography>\r\n                        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                            Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging\r\n                            across all continents except Antarctica\r\n                        </Typography>\r\n                    </CardContent>\r\n                </CardActionArea>\r\n                {auth.user.roles < 2 //0 - admin; 1 - moderator\r\n                    ? <CardActions>\r\n                        <Button size=\"small\" color=\"secondary\" onClick={() => { actions('delete') }}>\r\n                            {lang.currLang.buttons.Delete}\r\n                        </Button>\r\n                        <Button size=\"small\" color=\"primary\" onClick={() => { actions('edit') }}>\r\n                            {lang.currLang.buttons.Edit}\r\n                        </Button>\r\n                    </CardActions>\r\n                    : ''\r\n                }\r\n            </Card>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nTechnicCard.propTypes = {\r\n    setSnackbar: PropTypes.func.isRequired,\r\n    lang: PropTypes.object.isRequired,\r\n    palette: PropTypes.object.isRequired,\r\n    auth: PropTypes.object.isRequired,\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        lang: store.lang,\r\n        palette: store.themeMode.palette,\r\n        auth: store.auth,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setSnackbar: snackbar => dispatch(setSnackbar(snackbar)),\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(TechnicCard);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Container from '@material-ui/core/Container';\r\nimport Button from '@material-ui/core/Button';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\n\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\n\r\nimport { CheckTimeOut } from '../utils/CheckLoginTimeOut';\r\nimport TechnicCard from './muiltiple/TechnicCard';\r\nimport { useStyles } from '../styles/Styles';\r\nimport { instance } from './Config';\r\n\r\nfunction Technics(props) {\r\n    const { lang, themeMode, history, auth } = props;\r\n    const muiTheme = createMuiTheme(themeMode);\r\n    const classes = useStyles();\r\n\r\n    const [isLoading, setIsLoading] = React.useState(true);\r\n    const [technics, setTechnics] = React.useState([]);\r\n\r\n    const loadTechnics = React.useCallback(() => {\r\n        setIsLoading(true);\r\n        instance.get(\"/gettechnics\")\r\n            .then(res => {\r\n                setTechnics(res.data);\r\n                setIsLoading(false);\r\n            })\r\n            .catch(err => {\r\n                setIsLoading(false);\r\n            });\r\n    }, []);\r\n\r\n    React.useEffect(() => {\r\n        loadTechnics();\r\n    }, [loadTechnics]);\r\n\r\n    return (\r\n        <MuiThemeProvider theme={muiTheme}>\r\n            <CssBaseline />\r\n            <div className={classes.root}>\r\n                <Grid className={classes.mainGridContainer}\r\n                    container\r\n                    direction=\"column\"\r\n                    justify=\"center\"\r\n                    alignItems=\"stretch\"\r\n                >\r\n                    <Grid item xs={11} zeroMinWidth className={classes.mainGridDreamsBodyItem}>\r\n                        {isLoading\r\n                            ? <div className={classes.centerCircularProgress}>\r\n                                <CircularProgress disableShrink />\r\n                            </div>\r\n                            : <Container className={classes.mainGridDreamsBodyItemContainer}>\r\n                                <Paper className={classes.mainGridDreamsBodyItemContainerPaper}>\r\n                                    <Grid className={classes.mainGridDreamsContainer}\r\n                                        container\r\n                                        direction=\"column\"\r\n                                        justify=\"center\"\r\n                                        alignItems=\"stretch\"\r\n                                    >\r\n                                        {technics.map((item, key) => (\r\n                                            <TechnicCard key={key}\r\n                                                item={item}\r\n                                                loadTechnics={loadTechnics}\r\n                                                history={history}\r\n                                            />\r\n                                        ))}\r\n                                    </Grid>\r\n                                </Paper>\r\n                            </Container>\r\n                        }\r\n                    </Grid>\r\n                    <Grid item xs={1} zeroMinWidth className={classes.mainGridBodyItem}>\r\n                        <Grid container\r\n                            direction=\"row\"\r\n                            justify=\"space-evenly\"\r\n                            alignItems=\"center\"\r\n                        >\r\n                            <Grid item>\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    color=\"secondary\"\r\n                                    className={classes.actionButton}\r\n                                    onClick={() => { history.push(\"/luciddreams\") }}\r\n                                >\r\n                                    {lang.currLang.buttons.close}\r\n                                </Button>\r\n                            </Grid>\r\n                            {auth.user.roles < 2 //0 - admin; 1 - moderator\r\n                                ? <Grid item>\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        color=\"primary\"\r\n                                        className={classes.actionButton}\r\n                                        onClick={() => {\r\n                                            let check = CheckTimeOut();\r\n                                            if (check) history.push(\"/addtechnics\");\r\n                                            else history.push(\"/\");\r\n                                        }}\r\n                                    >\r\n                                        {lang.currLang.buttons.add}\r\n                                    </Button>\r\n                                </Grid>\r\n                                : <Grid item xs={6} />\r\n                            }\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </MuiThemeProvider >\r\n    );\r\n}\r\n\r\nTechnics.propTypes = {\r\n    themeMode: PropTypes.object.isRequired,\r\n    lang: PropTypes.object.isRequired,\r\n    auth: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        themeMode: store.themeMode,\r\n        lang: store.lang,\r\n        auth: store.auth,\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Technics);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport { Route, Switch } from \"react-router-dom\";\r\n\r\nimport { SET_SNACKBAR_MODE } from \"./actions/types\";\r\nimport { setSnackbar } from './actions/Actions';\r\n\r\nimport PrivateRoute from \"./components/PrivateRoute\";\r\n\r\nimport DreamMap from './components/DreamMap';\r\nimport AddDream from './components/AddDream';\r\nimport AddCDream from './components/AddCDream';\r\nimport AddTechnics from './components/AddTechnics';\r\nimport ViewDreams from './components/ViewDreams';\r\nimport MainPage from \"./components/MainPage\";\r\nimport Sign from './components/Sign';\r\nimport Technics from './components/Technics';\r\n\r\nimport { useStyles, variantIcon } from './styles/Styles';\r\n\r\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { amber, green } from '@material-ui/core/colors';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nconst useStyles1 = makeStyles(theme => ({\r\n    success: {\r\n        backgroundColor: green[600],\r\n    },\r\n    error: {\r\n        backgroundColor: theme.palette.error.dark,\r\n    },\r\n    info: {\r\n        backgroundColor: theme.palette.primary.main,\r\n    },\r\n    warning: {\r\n        backgroundColor: amber[700],\r\n    },\r\n    icon: {\r\n        fontSize: 20,\r\n    },\r\n    iconVariant: {\r\n        opacity: 0.9,\r\n        marginRight: theme.spacing(1),\r\n    },\r\n    message: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n    },\r\n}));\r\n\r\nfunction MySnackbarContentWrapper(props) {\r\n    const classes = useStyles1();\r\n    const { className, message, onClose, variant } = props;\r\n    const Icon = variantIcon[variant];\r\n    return (\r\n        <SnackbarContent\r\n            className={clsx(classes[variant], className)}\r\n            aria-describedby=\"client-snackbar\"\r\n            message={\r\n                <span id=\"client-snackbar\" className={classes.message}>\r\n                    <Icon className={clsx(classes.icon, classes.iconVariant)} />\r\n                    <Typography className={classes.mainGridContainer}\r\n                        align='center'\r\n                        variant='body2'>\r\n                        {message}\r\n                    </Typography>\r\n                </span>\r\n            }\r\n            action={[\r\n                <IconButton key=\"close\"\r\n                    aria-label=\"close\"\r\n                    color=\"inherit\"\r\n                    onClick={onClose}\r\n                >\r\n                    <CloseIcon className={classes.icon} />\r\n                </IconButton>,\r\n            ]}\r\n        />\r\n    );\r\n}\r\n\r\nfunction Routes(props) {\r\n    const classes = useStyles();\r\n    const { open, variant, message } = props;\r\n    const [openSnackbar, setOpenSnackbar] = React.useState(false);\r\n    const [openSnackbarVariant, setOpenSnackbarVariant] = React.useState('');\r\n    const [snackbarMessage, setSnackbarMessage] = React.useState('');\r\n\r\n    const handleCloseSnackbar = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setOpenSnackbar(false);\r\n        props.setSnackbar({\r\n            type: SET_SNACKBAR_MODE,\r\n            snackbar: {\r\n                open: false,\r\n                variant: openSnackbarVariant,\r\n                message: snackbarMessage,\r\n            },\r\n        });\r\n    };\r\n    React.useEffect(() => {\r\n        setOpenSnackbarVariant(variant);\r\n        setSnackbarMessage(message);\r\n        setOpenSnackbar(open);\r\n    }, [open, variant, message]);\r\n\r\n    return (\r\n        <div>\r\n            <Snackbar\r\n                open={openSnackbar}\r\n                onClose={handleCloseSnackbar}\r\n                autoHideDuration={3000}>\r\n                <MySnackbarContentWrapper\r\n                    className={classes.margin}\r\n                    onClose={handleCloseSnackbar}\r\n                    variant={openSnackbarVariant}\r\n                    message={snackbarMessage}\r\n                />\r\n            </Snackbar>\r\n            <Route exact path=\"/\" component={Sign} />\r\n            <Switch>\r\n                <PrivateRoute exact path=\"/dreammap\" component={DreamMap} />\r\n                <PrivateRoute exact path=\"/luciddreams\" component={MainPage} />\r\n                <PrivateRoute exact path=\"/dreams\" component={ViewDreams} />\r\n                <PrivateRoute exact path=\"/addregulardream\" component={AddDream} />\r\n                <PrivateRoute exact path=\"/addcdream\" component={AddCDream} />\r\n                <PrivateRoute exact path=\"/technics\" component={Technics} />\r\n                <PrivateRoute exact path=\"/addtechnics\" component={AddTechnics} />\r\n            </Switch>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nRoutes.propTypes = {\r\n    open: PropTypes.bool.isRequired,\r\n    variant: PropTypes.string.isRequired,\r\n    message: PropTypes.string.isRequired,\r\n    setSnackbar: PropTypes.func.isRequired,\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        open: store.snackbar.snackbar.open,\r\n        variant: store.snackbar.snackbar.variant,\r\n        message: store.snackbar.snackbar.message,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setSnackbar: snackbar => dispatch(setSnackbar(snackbar)),\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Routes);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { Router } from \"react-router-dom\";\r\nimport './App.css';\r\n\r\nimport history from '../history';\r\nimport { store } from \"../store\";\r\nimport { CheckTimeOut } from '../utils/CheckLoginTimeOut';\r\nimport setAuthToken from \"../utils/setAuthToken\";\r\nimport { SET_CURRENT_USER, SET_THEME_MODE } from \"../actions/types\";\r\n\r\nimport Routes from '../Routes';\r\n\r\nimport { useStyles, params, randomBetween } from '../styles/Styles';\r\n\r\nlet check = CheckTimeOut();\r\nlet stars = [];\r\nlet clouds = [];\r\n\r\nif (!check) {\r\n    localStorage.removeItem(\"jwtToken\");\r\n    setAuthToken(false);\r\n    store.dispatch({\r\n        type: SET_CURRENT_USER,\r\n        payload: null\r\n    });\r\n    history.push(\"/\");\r\n}\r\nelse {\r\n    history.push(\"/luciddreams\");\r\n}\r\n\r\nif (new Date().getHours() >= 16 || (new Date().getHours() >= 0 && new Date().getHours() < 6)) {\r\n    store.dispatch({\r\n        type: SET_THEME_MODE,\r\n        palette: {\r\n            type: \"dark\",\r\n            primary: { main: \"#f9a825\" },\r\n            secondary: { main: \"#f50057\" },\r\n            error: { main: \"#cc0000\" },\r\n        }\r\n    });\r\n}\r\nelse {\r\n    store.dispatch({\r\n        type: SET_THEME_MODE,\r\n        palette: {\r\n            type: \"light\",\r\n            primary: { main: \"#3f51b5\" },\r\n            secondary: { main: \"#f50057\" },\r\n            error: { main: \"#cc0000\" },\r\n        }\r\n    });\r\n}\r\n\r\nfunction App(props) {\r\n    const { type } = props;\r\n    const classes = useStyles();\r\n    stars = [];\r\n    clouds = [];\r\n    for (let i = 0; i < params.amountStars; i++) {\r\n        let size = Math.round(Math.random() * 10) === 0\r\n            ? params.size.giant\r\n            : randomBetween(params.size.min, params.size.max);\r\n        stars.push(\r\n            <div\r\n                className={classes.AppStar}\r\n                key={i + 'AppStar'}\r\n                style={{\r\n                    left: randomBetween(0, 100) + \"%\",\r\n                    top: randomBetween(0, 100) + \"%\",\r\n                    width: size + \"px\",\r\n                    height: size + \"px\",\r\n                    boxShadow: \"0 0 \" + size + \"px \" + size / 2 + \"px #043668\",\r\n                    animationDuration: randomBetween(params.duration.min, params.duration.max) + \"s\",\r\n                }}\r\n            />\r\n        );\r\n    }\r\n\r\n    for (let i = 0; i < params.amountClouds; i++) {\r\n        let left = Math.round(Math.random() * 50 + 90);\r\n        let top = Math.round(Math.random() * 100 / 100 * 90);\r\n        let scale = Math.random() * 1.5 - 0.5;\r\n        let opacity = Math.random() * 90 / 100;\r\n        let speed = Math.random() * 30 + 15;\r\n        clouds.push(\r\n            <div className={classes.AppCloud}\r\n                key={i + 'AppCloud'}\r\n                style={{\r\n                    left: left + '%',\r\n                    top: top + '%',\r\n                    width: '400px',\r\n                    height: '100px',\r\n                    transform: 'scale(' + scale + ')',\r\n                    opacity: opacity,\r\n                    animationDuration: speed + 's',\r\n                }}\r\n            />\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Router history={history}>\r\n            <div className={classes.AppDivDark}>\r\n                <div className={classes.AppDivLight}\r\n                    style={type === \"light\"\r\n                        ? { opacity: 1, }\r\n                        : { opacity: 0, }}\r\n                />\r\n                {type === \"light\"\r\n                    ?\r\n                    <div className={classes.AppCloudsDiv}\r\n                        style={type === \"light\"\r\n                            ? { opacity: 1, }\r\n                            : { opacity: 0, }}\r\n                    >\r\n                        {clouds}\r\n                    </div>\r\n                    :\r\n                    <div className={classes.AppStarsDiv}\r\n                        style={type === \"light\"\r\n                            ? { opacity: 0, }\r\n                            : { opacity: 1, }}\r\n                    >\r\n                        {stars}\r\n                    </div>\r\n                }\r\n            </div>\r\n            <Routes />\r\n        </Router>\r\n    );\r\n};\r\n\r\nApp.propTypes = {\r\n    type: PropTypes.string.isRequired,\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        type: store.themeMode.palette.type,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from \"./store\";\r\n\r\nReactDOM.render(\r\n    <div id='global' >\r\n        <Provider store={store}>\r\n            <App />\r\n        </Provider>\r\n    </div>\r\n    , document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n\r\n"],"sourceRoot":""}