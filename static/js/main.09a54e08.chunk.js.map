{"version":3,"sources":["img/map.png","img/sun.png","img/moon.png","img/astronaut.png","img/cloud.svg","history.js","actions/types.js","dictionary/en.js","reducers/currLang.js","reducers/cloud.js","reducers/star.js","reducers/themeMode.js","reducers/authReducer.js","reducers/errorReducer.js","reducers/snackbarReducer.js","reducers/index.js","store.js","utils/setAuthToken.js","utils/CheckLoginTimeOut.js","actions/Actions.js","components/PrivateRoute.js","styles/Styles.js","components/Config.js","functions.js","components/AddDream.jsx","components/AddCDream.jsx","components/muiltiple/DreamCard.jsx","components/ViewDreams.jsx","dictionary/ru.js","components/MainPage.jsx","components/Sign.js","components/Technics.jsx","Routes.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","createBrowserHistory","GET_ERRORS","SET_CURRENT_USER","SET_CLOUD","CLEAR_CLOUD","SET_STAR","CLEAR_STAR","SET_LANG","SET_THEME_MODE","SET_SNACKBAR_MODE","words","current","buttons","signIn","signUp","dreamJoirnal","addDream","addCDream","techniques","adventures","close","about","cancel","add","Edit","Delete","Save","texts","or","nickname","password","passwordAgain","sucessRegistration","hello","changleLanguage","success","title","content","tags","technics","rating","Dream","Cdream","NoDreams","pickDate","pickTime","TapToShow","Public","Publish","Unpublish","PublicAlert","PublicText","PublicDescription","UnpublicAlert","UnpublicText","UnpublicDescription","DeleteAlert","DeleteText","errors","emailLenght","nicknameLenght","passwordLenght","password2Lenght","passwordsCompare","UserNotExist","EmailIsNotValid","IncorrectPassword","EmailIsBusy","PasswordLenght5Symbols","NotLogin","EmptyTitle","EmptyDream","NoChanges","CantDeletePost","initialState","currLang","EnDict","clouds","stars","palette","type","primary","main","secondary","error","isempty","require","isAuthenticated","user","loading","snackbar","open","variant","message","rootReducer","combineReducers","lang","state","action","currLangState","cloudState","starState","themeMode","auth","payload","middleware","thunk","store","createStore","applyMiddleware","setAuthToken","token","axios","defaults","headers","common","CheckTimeOut","localStorage","jwtToken","decoded","jwt_decode","dispatch","currentTime","Date","now","exp","setCurrLang","setSnackbar","connect","Component","component","rest","render","props","to","params","amountStars","amountClouds","size","min","max","giant","duration","variantIcon","CheckCircleIcon","warning","WarningIcon","ErrorIcon","info","InfoIcon","randomBetween","a","b","Math","random","useStyles","makeStyles","theme","contentPaper","backgroundColor","text","padding","pickerGridContainer","position","width","left","transform","marginBottom","div85width","top","ratingGridContainer","pickers","avatarRoot","textAlign","verySmallAvatar","margin","spacing","height","display","smallAvatar","smallChip","centerCircularProgress","mainGridDreamsBodyItemContainer","paddingTop","boxSizing","maxHeight","overflow","borderRadius","mainGridDreamsBodyItemContainerPaper","opacity","mainGridDreamsBodyItem","mainGridDreamsContainer","card","maxWidth","expand","marginLeft","transition","transitions","create","shortest","expandOpen","textField","root","flexGrow","window","innerHeight","mainPage","aboutPage","AppDivDark","background","zIndex","AppDivLight","AppStarsDiv","AppCloudsDiv","AppStar","filter","animation","AppCloud","backgroundRepeat","backgroundImage","CloudSvg","image","SkyDiv","MoonSrc","backgroundSize","MoonImg","SunSrc","SunImg","AstronautButton","AstronautDiv","AstronautImg","MapButton","MapDiv","MapImg","mainGridContainer","mainGridHeadItem","mainGridBodyItem","menuButtonContainerItem","menuButtonContainer","menuButtonGrid","menuDivButton","menuButton","minWidth","actionButton","mainGridFooterItem","menuButtonContainerFooterLanguageButtons","aboutGridContainer","fullMinWidth","inputDiv","inputScrollableDiv","chips","flexWrap","chip","aboutGridItem","mainPaperGridBodyItem","paper","minMargin","VKLoginDiv","VKLoginButton","boxShadow","instance","baseURL","timeout","compare","obj1","obj2","Object","keys","every","key","hasOwnProperty","defaultTags","classes","history","muiTheme","createMuiTheme","assign","overrides","MUIRichTextEditor","border","container","toolbar","alignItems","justifyContent","minHeight","borderBottom","placeHolder","editor","editorContainer","React","useState","isEditMode","setIsEditMode","isLoading","setIsLoading","titleText","setTitleText","selectedDate","setSelectedDate","contentText","setContentText","prevContentText","setPrevContentText","selectedLocations","setselectedLocations","locations","setLocations","handleDateChange","date","useEffect","get","then","res","data","catch","err","console","log","location","defaultData","post_title","dream_date","post_content","forEach","item","id","Number","name_rus","name_eng","img_url","push","CssBaseline","className","Grid","direction","justify","xs","Paper","TextField","required","value","label","onChange","e","target","utils","DateFnsUtils","locale","ruLocale","format","KeyboardButtonProps","ampm","currCont","getCurrentContent","convert","convertToRaw","JSON","stringify","inlineToolbar","controls","customControls","name","icon","inlineStyle","color","length","Autocomplete","multiple","options","getOptionLabel","option","Chip","avatar","Avatar","src","defaultValue","map","event","handleChangeLocations","filterSelectedOptions","renderInput","fullWidth","LinearProgress","Button","onClick","havErr","errorMessage","parse","blocks","hasChanges","tagChanges","postData","post_id","getTime","dreamDate","toLocaleString","timeZone","deleteTags","item1","some","item2","addTags","remove","post","create_user","post_type","savepost","defaultTechnics","selectedTechnics","setselectedTechnics","realisticsValue","setRealisticsValue","setTechnics","tech","style","handleChangeTechnics","Typography","Rating","newValue","techChanges","deleteTech","addTech","is_public","expanded","setExpanded","anchorEl","setAnchorEl","openAlert","setOpenAlert","publicChecked","setPublicChecked","header","body","commit","alertTexts","setAlertTexts","dateOfDream","getDate","getMonth","getFullYear","getHours","getMinutes","slice","srcContent","toString","jsonPparse","convertfromraw","convertFromRaw","text_content","EditorState","createWithContent","getPlainText","closeMenu","clickMenu","newAlertTexts","checked","pathname","loadPosts","newPublic","marginTop","Dialog","onClose","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","DialogActions","autoFocus","Menu","keepMounted","Boolean","MenuItem","ListItemIcon","FormControlLabel","control","Checkbox","fontSize","Card","raised","CardHeader","Tooltip","disableFocusListener","disableTouchListener","subheader","IconButton","aria-label","currentTarget","CardContent","technic","tag","alt","CardActions","disableSpacing","noWrap","clsx","aria-expanded","Collapse","in","unmountOnExit","readOnly","dreams","setDreams","useCallback","zeroMinWidth","CircularProgress","disableShrink","Container","align","TransitionDown","Slide","setCurrLangAction","setTheme","undefined","prevLanguage","setPrevLanguage","openLangSnakbar","setOpenLangSnakbar","langSnakbarMessage","setLangSnakbarMessage","setTransition","changeLanguage","language","RuDict","handleCloseLangSnakbar","times_mode","Snackbar","anchorOrigin","vertical","horizontal","TransitionComponent","SnackbarContent","newLang","newUserData","ButtonBase","focusRipple","alert","newPaletteType","primaryColor","secondaryColor","Transition","forwardRef","ref","setUserState","State","email","loginData","setLoginData","password2","registData","setRegistData","emailErr","emailErrText","nicknameErr","nicknameErrText","passwordErr","passwordErrText","password2Err","password2ErrText","regFieldErrors","setRegFieldErrors","showPassword","setShowPassword","openLogin","setOpenLogin","openRegist","setOpenRegist","page","setPage","handleMouseDownPassword","preventDefault","singUp","isErr","newRegFieldErrors","newRegistData","click","response","newPages","setItem","passwordincorrect","onBlur","newLoginData","changeAuthLogin","changeAuthPassword","InputProps","endAdornment","InputAdornment","tabIndex","edge","onMouseDown","button","disabled","path","mdiVk","helperText","changeRegistLogin","changeRegistNickname","changeRegistPassword","changeRegistPassword2","aboutPaper","loadTechnics","List","ListItem","ListItemText","roles","useStyles1","green","dark","amber","iconVariant","marginRight","MySnackbarContentWrapper","Icon","openSnackbar","setOpenSnackbar","openSnackbarVariant","setOpenSnackbarVariant","snackbarMessage","setSnackbarMessage","handleCloseSnackbar","reason","autoHideDuration","exact","Sign","MainPage","ViewDreams","AddDream","AddCDream","Technics","check","removeItem","i","round","animationDuration","scale","speed","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.09a54e08.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/map.71ce46a8.png\";","module.exports = __webpack_public_path__ + \"static/media/sun.4f817e2f.png\";","module.exports = __webpack_public_path__ + \"static/media/moon.ca0fb531.png\";","module.exports = __webpack_public_path__ + \"static/media/astronaut.7219d35a.png\";","module.exports = __webpack_public_path__ + \"static/media/cloud.7fb181bd.svg\";","import { createBrowserHistory } from \"history\";\r\n\r\nexport default createBrowserHistory();","export const GET_ERRORS = \"GET_ERRORS\";\r\nexport const USER_LOADING = \"USER_LOADING\";\r\nexport const SET_CURRENT_USER = \"SET_CURRENT_USER\";\r\n\r\nexport const SET_CLOUD = 'SET_CLOUD';\r\nexport const CLEAR_CLOUD = 'CLEAR_CLOUD';\r\n\r\nexport const SET_STAR = 'SET_STAR';\r\nexport const CLEAR_STAR = 'CLEAR_STAR';\r\n\r\nexport const SET_LANG = 'SET_LANG';\r\nexport const SET_THEME_MODE = 'SET_THEME_MODE';\r\n\r\nexport const SET_SNACKBAR_MODE = 'SET_SNACKBAR_MODE';","const words = {\r\n    current: 'En',\r\n    buttons : {\r\n        signIn: 'Sign in',\r\n        signUp: 'Sign up',\r\n        dreamJoirnal: 'Dream joirnal',\r\n        addDream: 'Add dream',\r\n        addCDream: 'Add C-dream',\r\n        techniques: 'Techniques',\r\n        adventures: 'Adventures',\r\n        close: 'Back',\r\n        about: 'About us',\r\n        cancel: 'Cancel',\r\n        add: 'Add',\r\n        Edit: 'Edit',\r\n        Delete: 'Delete',\r\n        Save: 'Save',\r\n    },\r\n    texts: {\r\n        about: 'About us About us About us About us About us About us About us About us About us About us ',\r\n        or: 'OR',\r\n        nickname: 'Nickname',\r\n        password: 'Password',\r\n        passwordAgain: 'Password again',\r\n        cancel: 'Cancel',\r\n        sucessRegistration: 'You are sign up successful',\r\n        hello: 'Hello, ',\r\n        changleLanguage: 'Save change language to ',\r\n        success: 'Success',\r\n        title: 'Title',\r\n        content: \"What's a dream\",\r\n        tags: 'Locations',\r\n        technics: 'Technics',\r\n        rating: 'Realistics',\r\n        Dream: 'Regular dream',\r\n        Cdream: 'C-dream',\r\n        NoDreams: \"You don't have dreams\",\r\n        pickDate: \"Date\",\r\n        pickTime: \"Time\",\r\n        TapToShow: \"Tap on text to show highlights\",\r\n        Public: \"Public\",\r\n        Publish: \"Unpublish\",\r\n        Unpublish: \"Publish\",\r\n        PublicAlert: \"Are you sure you want to public the dream?\",\r\n        PublicText: \"After public your friends can read this dream.\",\r\n        PublicDescription: \"Your friends can read this dream\",\r\n        UnpublicAlert: \"Are you sure you want to unpublic the dream?\",\r\n        UnpublicText: \"After unpublic your friends can't read this dream.\",\r\n        UnpublicDescription: \"Your friends can't read this dream\",\r\n        DeleteAlert: \"Are you sure you want to remove the dream?\",\r\n        DeleteText: \"You can't restore dream. Never.\",\r\n    },\r\n    errors: {\r\n        emailLenght: 'Email must not be empty',\r\n        nicknameLenght: 'Nickname must not be empty',\r\n        passwordLenght: 'Password must not be empty',\r\n        password2Lenght: 'Password must not be empty',\r\n        passwordsCompare: 'Passwords not equal',\r\n        UserNotExist: 'Invalid email or password',\r\n        EmailIsNotValid: 'Invalid email',\r\n        IncorrectPassword: 'Invalid email or password',\r\n        EmailIsBusy: 'Email is busy',\r\n        PasswordLenght5Symbols: 'Minimum password length: 5 symbols',\r\n        NotLogin: 'You not loggin in',\r\n        EmptyTitle: 'Title must not be empty',\r\n        EmptyDream: 'Dream must not be empty',\r\n        NoChanges: 'No changes',\r\n        CantDeletePost: 'Error deleting dream',\r\n    },\r\n};\r\n\r\nexport default words;","import { SET_LANG } from '../actions/types';\r\nimport EnDict from '../dictionary/en';\r\n\r\nconst initialState = {\r\n    currLang: EnDict,\r\n}\r\n\r\nexport function currLangReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case SET_LANG:\r\n            return { ...state, currLang: action.currLangState }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}","import { SET_CLOUD, CLEAR_CLOUD } from '../actions/types';\r\n\r\nconst initialState = {\r\n\tclouds: [],\r\n}\r\n\r\nexport function cloudsReducer(state = initialState, action) {\r\n\tswitch (action.type) {\r\n\t\tcase SET_CLOUD:\r\n\t\t\treturn {\r\n\t\t\t\t...state, clouds: [...state.clouds, action.cloudState]\r\n\t\t\t}\r\n\t\tcase CLEAR_CLOUD:\r\n\t\t\treturn {\r\n\t\t\t\t...state, clouds: []\r\n\t\t\t}\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n}","import { SET_STAR, CLEAR_STAR } from '../actions/types';\r\n\r\nconst initialState = {\r\n\tstars: [],\r\n}\r\n\r\nexport function starsReducer(state = initialState, action) {\r\n\tswitch (action.type) {\r\n\t\tcase SET_STAR:\r\n\t\t\treturn {\r\n\t\t\t\t...state, stars: [...state.stars, action.starState]\r\n\t\t\t}\r\n\t\tcase CLEAR_STAR:\r\n\t\t\treturn {\r\n\t\t\t\t...state, stars: []\r\n\t\t\t}\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n}","import { SET_THEME_MODE } from '../actions/types';\r\n\r\nconst initialState = {\r\n    palette: {\r\n        type: \"dark\",\r\n        primary: { main: \"#f9a825\" },\r\n        secondary: { main: \"#f50057\" },\r\n        error: { main: \"#cc0000\" },\r\n    },\r\n}\r\n\r\nexport function themeReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case SET_THEME_MODE:\r\n            return { ...state, palette: action.palette }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}","import { SET_CURRENT_USER, USER_LOADING } from \"../actions/types\";\r\n\r\nconst isempty = require(\"is-empty\");\r\n\r\nconst initialState = {\r\n    isAuthenticated: false,\r\n    user: {},\r\n    loading: false\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case SET_CURRENT_USER:\r\n            return {\r\n                ...state,\r\n                isAuthenticated: !isempty(action.payload),\r\n                user: action.payload\r\n            };\r\n        case USER_LOADING:\r\n            return {\r\n                ...state,\r\n                loading: true\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}","import { GET_ERRORS } from \"../actions/types\";\r\nconst initialState = {};\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case GET_ERRORS:\r\n            return action.payload;\r\n        default:\r\n            return state;\r\n    }\r\n}","import { SET_SNACKBAR_MODE } from '../actions/types';\r\n\r\nconst initialState = {\r\n    snackbar: {\r\n        open: false,\r\n        variant: '',\r\n        message: '',\r\n    },\r\n}\r\n\r\nexport function snackbarReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case SET_SNACKBAR_MODE:\r\n            return { ...state, snackbar: action.snackbar }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}","import { combineReducers } from 'redux';\r\nimport { currLangReducer } from './currLang';\r\nimport { cloudsReducer } from './cloud';\r\nimport { starsReducer } from './star';\r\nimport { themeReducer } from './themeMode';\r\nimport authReducer from './authReducer';\r\nimport errorReducer from './errorReducer';\r\nimport { snackbarReducer } from './snackbarReducer';\r\n\r\nexport const rootReducer = combineReducers({\r\n    lang: currLangReducer,\r\n    clouds: cloudsReducer,\r\n    stars: starsReducer,\r\n    themeMode: themeReducer,\r\n    auth: authReducer,\r\n    errors: errorReducer,\r\n    snackbar: snackbarReducer,\r\n});","import { createStore, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { rootReducer } from './reducers';\r\n\r\nconst middleware = [thunk];\r\n\r\nexport const store = createStore(\r\n    rootReducer,\r\n    {},\r\n    applyMiddleware(...middleware)\r\n);","import axios from \"axios\";\r\n\r\nconst setAuthToken = token => {\r\n    if (token) {\r\n        // Apply authorization token to every request if logged in\r\n        axios.defaults.headers.common[\"Authorization\"] = token;\r\n    }\r\n    else {\r\n        // Delete auth header\r\n        delete axios.defaults.headers.common[\"Authorization\"];\r\n    }\r\n};\r\n\r\nexport default setAuthToken;","import jwt_decode from \"jwt-decode\";\r\n\r\nimport { store } from \"../store\";\r\nimport setAuthToken from \"../utils/setAuthToken\";\r\nimport { SET_CURRENT_USER } from \"../actions/types\"\r\n\r\nexport function CheckTimeOut() {\r\n    if (localStorage.jwtToken) {\r\n        const token = localStorage.jwtToken;\r\n        setAuthToken(token);\r\n        const decoded = jwt_decode(token);\r\n        store.dispatch({\r\n            type: SET_CURRENT_USER,\r\n            payload: decoded\r\n        });\r\n\r\n        const currentTime = Date.now() / 1000; // to get in milliseconds\r\n        if (decoded.exp < currentTime) {\r\n            return false;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }\r\n}","import { SET_LANG } from '../actions/types';\r\n\r\nexport function setCloud(state) {\r\n\treturn {\r\n\t\ttype: state.type,\r\n\t\tcloudState: state.cloudState,\r\n\t}\r\n}\r\nexport function setStar(state) {\r\n\treturn {\r\n\t\ttype: state.type,\r\n\t\tstarState: state.starState,\r\n\t}\r\n}\r\nexport function setCurrLang(state) {\r\n\treturn {\r\n\t\ttype: SET_LANG,\r\n\t\tcurrLangState: state,\r\n\t}\r\n}\r\nexport function setTheme(state) {\r\n\treturn {\r\n\t\ttype: state.type,\r\n\t\tpalette: state.palette,\r\n\t}\r\n}\r\nexport function setUserState(state) {\r\n\treturn {\r\n\t\ttype: state.type,\r\n\t\tpayload: state.payload,\r\n\t}\r\n}\r\nexport function setSnackbar(state) {\r\n\treturn {\r\n\t\ttype: state.type,\r\n\t\tsnackbar: state.snackbar,\r\n\t}\r\n}","import React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst PrivateRoute = ({ component: Component, auth, ...rest }) => (\r\n    <Route\r\n        {...rest}\r\n        render={props =>\r\n            auth.isAuthenticated === true\r\n                ? <Component {...props} />\r\n                : <Redirect to=\"/\" />\r\n        }\r\n    />\r\n);\r\n\r\nPrivateRoute.propTypes = {\r\n    auth: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    auth: state.auth\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps\r\n)(PrivateRoute);","import { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\nimport WarningIcon from '@material-ui/icons/Warning';\r\nimport ErrorIcon from '@material-ui/icons/Error';\r\nimport InfoIcon from '@material-ui/icons/Info';\r\n\r\nimport MapImg from '../img/map.png';\r\nimport SunImg from '../img/sun.png';\r\nimport MoonImg from '../img/moon.png';\r\nimport AstronautImg from '../img/astronaut.png';\r\nimport CloudSvg from '../img/cloud.svg';\r\n\r\nexport const params = {\r\n    amountStars: 25,\r\n    amountClouds: 5,\r\n    size: {\r\n        min: 1,\r\n        max: 5,\r\n        giant: 9\r\n    },\r\n    duration: {\r\n        min: 5,\r\n        max: 25,\r\n    }\r\n}\r\n\r\nexport const variantIcon = {\r\n    success: CheckCircleIcon,\r\n    warning: WarningIcon,\r\n    error: ErrorIcon,\r\n    info: InfoIcon,\r\n};\r\n\r\nexport function randomBetween(a, b) {\r\n    return (a + (Math.random() * (b - a)));\r\n}\r\n\r\nexport const useStyles = makeStyles(theme => ({\r\n    contentPaper: {\r\n        backgroundColor: theme.palette.text.main,\r\n        padding: 10,\r\n    },\r\n    pickerGridContainer: {\r\n        position: \"relative\",\r\n        width: \"85%\",\r\n        left: \"50%\",\r\n        transform: \"translateX(-50%)\",\r\n        marginBottom: \"5px\",\r\n    },\r\n    div85width: {\r\n        position: \"relative\",\r\n        width: \"85%\",\r\n        top: \"65%\",\r\n        left: \"50%\",\r\n        transform: \"translate(-50%, -50%)\",\r\n    },\r\n    ratingGridContainer: {\r\n        position: \"relative\",\r\n        width: \"100%\",\r\n        top: \"65%\",\r\n        left: \"50%\",\r\n        transform: \"translate(-50%, -50%)\",\r\n    },\r\n    pickers: {\r\n        position: \"relative\",\r\n        width: \"90%\",\r\n        left: \"50%\",\r\n        transform: \"translateX(-50%)\",\r\n    },\r\n    avatarRoot: {\r\n        // display: \"flex\",\r\n        // flexWrap: \"wrap\",\r\n        // overflow: 'auto',\r\n        textAlign: 'center',\r\n        width: '100%',\r\n    },\r\n    verySmallAvatar: {\r\n        margin: theme.spacing(1),\r\n        width: theme.spacing(3),\r\n        height: theme.spacing(3),\r\n        display: 'inline-block',\r\n    },\r\n    smallAvatar: {\r\n        margin: theme.spacing(0.5),\r\n        width: theme.spacing(5),\r\n        height: theme.spacing(5),\r\n        display: 'inline-block',\r\n    },\r\n    smallChip: {\r\n        margin: theme.spacing(0.5),\r\n    },\r\n    centerCircularProgress: {\r\n        position: 'relative',\r\n        top: '50%',\r\n        left: '50%',\r\n    },\r\n    mainGridDreamsBodyItemContainer: {\r\n        paddingTop: '16px',\r\n        position: 'absolute',\r\n        boxSizing: 'border-box',\r\n        maxHeight: '90%',\r\n        overflow: 'auto',\r\n        borderRadius: '4px',\r\n    },\r\n    mainGridDreamsBodyItemContainerPaper: {\r\n        height: '100%',\r\n        opacity: 0.9,\r\n    },\r\n    mainGridDreamsBodyItem: {\r\n        overflow: 'hidden',\r\n    },\r\n    mainGridDreamsContainer: {\r\n        height: '100%',\r\n        position: 'relative',\r\n        width: '90%',\r\n        left: '50%',\r\n        transform: 'translateX(-50%)',\r\n    },\r\n    card: {\r\n        maxWidth: '100%',\r\n        height: '100%',\r\n    },\r\n    expand: {\r\n        transform: \"rotate(0deg)\",\r\n        marginLeft: \"auto\",\r\n        transition: theme.transitions.create(\"transform\", {\r\n            duration: theme.transitions.duration.shortest\r\n        })\r\n    },\r\n    expandOpen: {\r\n        transform: \"rotate(180deg)\"\r\n    },\r\n    textField: {\r\n        width: '100%',\r\n    },\r\n    margin: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    root: {\r\n        flexGrow: 1,\r\n        position: 'relative',\r\n        width: '100%',\r\n        height: window.innerHeight - 1,\r\n        overflow: 'hidden',\r\n    },\r\n    mainPage: {\r\n        top: 0,\r\n        left: 0,\r\n        position: 'absolute',\r\n        transition: 'all 0.3s linear',\r\n        width: '100%',\r\n        height: '100%',\r\n    },\r\n    aboutPage: {\r\n        position: 'absolute',\r\n        transition: 'all 0.3s linear',\r\n        top: '100%',\r\n        width: '100%',\r\n        height: '100%',\r\n    },\r\n    AppDivDark: {\r\n        position: 'fixed',\r\n        background: 'radial-gradient(ellipse at center, rgba(8, 25, 42, 1) 20%, rgba(1, 4, 6, 1) 100%)',\r\n        opacity: 1,\r\n        margin: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        zIndex: -3,\r\n    },\r\n    AppDivLight: {\r\n        position: 'absolute',\r\n        background: 'radial-gradient(ellipse at center, rgba(207, 225, 237, 1) 20%, rgba(127, 170, 202, 1) 100%)',\r\n        transition: 'opacity 0.5s linear',\r\n        margin: 0,\r\n        opacity: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        zIndex: -3,\r\n    },\r\n    AppStarsDiv: {\r\n        transition: 'opacity 0.5s linear',\r\n        opacity: 0,\r\n        position: 'absolute',\r\n        width: '100%',\r\n        height: '100%',\r\n        overflow: 'hidden',\r\n        zIndex: -2,\r\n    },\r\n    AppCloudsDiv: {\r\n        transition: 'opacity 0.5s linear',\r\n        opacity: 0,\r\n        position: 'absolute',\r\n        width: '100%',\r\n        height: '100%',\r\n        overflow: 'hidden',\r\n        zIndex: -2,\r\n    },\r\n    AppStar: {\r\n        borderRadius: '100%',\r\n        position: 'absolute',\r\n        background: 'radial-gradient(ellipse at center, rgba(177, 198, 219, 1) 2%, rgba(5, 63, 118, 1) 100%)',\r\n        filter: 'blur(1px)',\r\n        animation: '$shine infinite alternate',\r\n        zIndex: -1,\r\n    },\r\n    AppCloud: {\r\n        position: 'absolute',\r\n        backgroundRepeat: 'no-repeat',\r\n        //backgroundImage: 'url(https://www.turbotobias.dk/wp-content/uploads/2019/03/White-cloud-type3.svg)',\r\n        backgroundImage: 'url(' + CloudSvg + ')',\r\n        animation: '$moveclouds infinite linear',\r\n        zIndex: -1,\r\n    },\r\n    image: {\r\n        position: 'relative',\r\n        left: '50%',\r\n        top: '25%',\r\n        transform: 'translate(-50%, -25%)',\r\n        width: '35vw !important',\r\n        height: '35vw',\r\n        borderRadius: '50%',\r\n    },\r\n    SkyDiv: {\r\n        position: 'absolute',\r\n        borderRadius: '50%',\r\n        top: 0,\r\n        left: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        overflow: 'hidden',\r\n    },\r\n    MoonSrc: {\r\n        backgroundSize: 'cover',\r\n        background: 'url(' + MoonImg + ')',\r\n        backgroundRepeat: 'no-repeat',\r\n        position: 'absolute',\r\n        top: 0,\r\n        left: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        transition: 'all 0.3s linear',\r\n    },\r\n    SunSrc: {\r\n        backgroundSize: 'cover',\r\n        background: 'url(' + SunImg + ')',\r\n        backgroundRepeat: 'no-repeat',\r\n        position: 'absolute',\r\n        top: 0,\r\n        left: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        transition: 'all 0.3s linear',\r\n    },\r\n    AstronautButton: {\r\n        position: 'relative',\r\n        left: '50%',\r\n        top: '50%',\r\n        transform: 'translate(-50%, -50%)',\r\n        width: '25vw !important',\r\n        height: '25vw',\r\n        borderRadius: '50%',\r\n    },\r\n    AstronautDiv: {\r\n        position: 'absolute',\r\n        borderRadius: '50%',\r\n        top: 0,\r\n        left: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        overflow: 'hidden',\r\n        animation: '$swinging 30s infinite linear',\r\n    },\r\n    AstronautImg: {\r\n        backgroundSize: 'cover',\r\n        background: 'url(' + AstronautImg + ')',\r\n        backgroundRepeat: 'no-repeat',\r\n        position: 'absolute',\r\n        top: 0,\r\n        left: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        transition: 'filter 0.5s linear',\r\n    },\r\n    MapButton: {\r\n        position: 'relative',\r\n        left: '50%',\r\n        top: '50%',\r\n        transform: 'translate(-50%, -50%)',\r\n        width: '25vw !important',\r\n        height: '25vw',\r\n        borderRadius: '10%',\r\n    },\r\n    MapDiv: {\r\n        position: 'absolute',\r\n        top: 0,\r\n        left: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        overflow: 'hidden',\r\n        animation: '$swinging 30s infinite linear',\r\n    },\r\n    MapImg: {\r\n        backgroundSize: 'cover',\r\n        background: 'url(' + MapImg + ')',\r\n        backgroundRepeat: 'no-repeat',\r\n        position: 'absolute',\r\n        top: 0,\r\n        left: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        transition: 'filter 0.5s linear',\r\n    },\r\n    mainGridContainer: {\r\n        height: '100%',\r\n    },\r\n    mainGridHeadItem: {\r\n        maxWidth: '100% !Important',\r\n    },\r\n    mainGridBodyItem: {\r\n        maxWidth: '100% !Important',\r\n    },\r\n    menuButtonContainerItem: {\r\n        maxWidth: '100% !Important',\r\n    },\r\n    menuButtonContainer: {\r\n        height: '100% !Important',\r\n    },\r\n    menuButtonGrid: {\r\n    },\r\n    menuDivButton: {\r\n        maxWidth: '100% !Important',\r\n        padding: '10px',\r\n    },\r\n    menuButton: {\r\n        minWidth: '55vw',\r\n        maxWidth: '55vw',\r\n    },\r\n    actionButton: {\r\n        minWidth: '40vw',\r\n        maxWidth: '40vw',\r\n    },\r\n    mainGridFooterItem: {\r\n        maxWidth: '100% !Important',\r\n    },\r\n    menuButtonContainerFooterLanguageButtons: {\r\n    },\r\n    aboutGridContainer: {\r\n        width: '100%',\r\n        height: '100%',\r\n        margin: 0,\r\n    },\r\n    fullMinWidth: {\r\n        minWidth: '100% !Important',\r\n        position: 'relative'\r\n    },\r\n    inputDiv: {\r\n        minWidth: '85% !Important',\r\n        maxWidth: '85% !Important',\r\n        position: 'absolute',\r\n        top: '50%',\r\n        left: '50%',\r\n        transform: 'translate(-50%, -50%)',\r\n        opacity: 1,\r\n    },\r\n    inputScrollableDiv: {\r\n        minWidth: '85% !Important',\r\n        maxWidth: '85% !Important',\r\n        height: '100%',\r\n        position: 'absolute',\r\n        top: '50%',\r\n        left: '50%',\r\n        transform: 'translate(-50%, -50%)',\r\n        opacity: 1,\r\n        //overflowY: 'auto',\r\n    },\r\n    chips: {\r\n        display: \"flex\",\r\n        flexWrap: \"wrap\"\r\n    },\r\n    chip: {\r\n        margin: 1\r\n    },\r\n    aboutGridItem: {\r\n        width: '100%',\r\n    },\r\n    mainPaperGridBodyItem: {\r\n        maxWidth: '100% !Important',\r\n    },\r\n    paper: {\r\n        height: '90%',\r\n        margin: theme.spacing(3, 2),\r\n        opacity: 0.9,\r\n    },\r\n    minMargin: {\r\n        margin: theme.spacing(0.5),\r\n    },\r\n    VKLoginDiv: {\r\n        position: 'absolute',\r\n        width: '15vw',\r\n        height: '15vw',\r\n    },\r\n    VKLoginButton: {\r\n        background: 'url(https://dressirovka70.ru/wp-content/uploads/2019/10/1200px-VK.com-logo.svg1_-1024x1024.png)',\r\n        boxShadow: '0px 3px 1px -2px rgba(0,0,0,0.2), 0px 2px 2px 0px rgba(0,0,0,0.14), 0px 1px 5px 0px rgba(0,0,0,0.12)',\r\n        backgroundSize: 'cover',\r\n        borderRadius: '25%',\r\n        width: '100%',\r\n        height: '100%',\r\n    },\r\n    \"@keyframes shine\": {\r\n        \"0%\": {\r\n            transform: 'scale(1)',\r\n            opacity: '1',\r\n        },\r\n        \"20%\": {\r\n            transform: 'scale(.9)',\r\n            opacity: '.8',\r\n        },\r\n        \"40%\": {\r\n            transform: 'scale(1)',\r\n            opacity: '.9',\r\n        },\r\n        \"60%\": {\r\n            transform: 'scale(.2)',\r\n            opacity: '.1',\r\n        },\r\n        \"80%\": {\r\n            transform: 'scale(.5)',\r\n            opacity: '.5',\r\n        },\r\n        \"100%\": {\r\n            transform: 'scale(.9)',\r\n            opacity: '.9',\r\n        },\r\n    },\r\n    \"@keyframes moveclouds\": {\r\n        '100%': {\r\n            left: '-100%',\r\n        },\r\n    },\r\n    \"@keyframes swinging\": {\r\n        '0%': {\r\n            transform: 'rotate(0)',\r\n        },\r\n        '10%': {\r\n            transform: 'rotate(12deg)',\r\n        },\r\n        '20%': {\r\n            transform: 'rotate(-10deg)',\r\n        },\r\n        '30%': {\r\n            transform: 'rotate(9deg)',\r\n        },\r\n        '40%': {\r\n            transform: 'rotate(-8deg)',\r\n        },\r\n        '50%': {\r\n            transform: 'rotate(7deg)',\r\n        },\r\n        '60%': {\r\n            transform: 'rotate(-6deg)',\r\n        },\r\n        '70%': {\r\n            transform: 'rotate(5deg)',\r\n        },\r\n        '80%': {\r\n            transform: 'rotate(-4deg)',\r\n        },\r\n        '90%': {\r\n            transform: 'rotate(3deg)',\r\n        },\r\n        '100%': {\r\n            transform: 'rotate(0)',\r\n        },\r\n    }\r\n}));","import axios from \"axios\";\r\n\r\n\r\nexport const instance = axios.create({\r\n    baseURL: 'https://ldserver.herokuapp.com',\r\n    timeout: 10000,\r\n    headers: { \"Access-Control-Allow-Origin\": \"*\" }\r\n});","export function compare(obj1, obj2) {\r\n    if (!Object.keys(obj2).every(key => obj1.hasOwnProperty(key))) {\r\n        return false;\r\n    }\r\n    return Object.keys(obj1).every(function (key) {\r\n        if (typeof obj1[key] == \"object\") {\r\n            return compare(obj1[key], obj2[key]);\r\n        }\r\n        else {\r\n            return obj1[key] === obj2[key];\r\n        }\r\n    });\r\n}","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport ruLocale from \"date-fns/locale/ru\";\r\nimport enLocale from \"date-fns/locale/ru\";\r\n\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Button from '@material-ui/core/Button';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\n\r\nimport MUIRichTextEditor from 'mui-rte';\r\nimport { convertToRaw } from 'draft-js';\r\n\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\n\r\nimport { MuiPickersUtilsProvider, KeyboardTimePicker, KeyboardDatePicker } from '@material-ui/pickers';\r\n\r\nimport FormatColorFillIcon from '@material-ui/icons/FormatColorFill';\r\n\r\nimport { useStyles } from '../styles/Styles';\r\nimport { setSnackbar } from '../actions/Actions';\r\nimport { SET_SNACKBAR_MODE } from \"../actions/types\";\r\n\r\nimport { instance } from './Config';\r\n\r\nimport { compare } from '../functions';\r\n\r\nlet defaultTags = [];\r\n\r\nfunction AddDream(props) {\r\n    const classes = useStyles();\r\n    const { lang, themeMode, history, auth, setSnackbar } = props;\r\n    const muiTheme = createMuiTheme(themeMode);\r\n    Object.assign(muiTheme, {\r\n        overrides: {\r\n            MUIRichTextEditor: {\r\n                root: {\r\n                    border: \"1px solid gray\",\r\n                    borderRadius: '4px',\r\n                    height: '100%',\r\n                    //Весь компонент\r\n                },\r\n                container: {\r\n                    height: '100%',\r\n                    margin: '0 !Important',\r\n                    //Без шапки\r\n                },\r\n                toolbar: {\r\n                    //textAlign: 'center',\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    justifyContent: 'center',\r\n                    height: '20%',\r\n                    minHeight: '48px',\r\n                    margin: '0 !Important',\r\n                    borderBottom: \"1px solid gray\",\r\n                    borderRadius: '4px',\r\n                },\r\n                placeHolder: {\r\n                    height: '72%',\r\n                },\r\n                editor: {\r\n                    height: '72%',\r\n                    width: '100%',\r\n                    position: 'relative',\r\n                    overflow: 'hidden',\r\n                    //Эдитор\r\n                },\r\n                editorContainer: {\r\n                    margin: '0 !Important',\r\n                    padding: \"0px 14px\",\r\n                    borderRadius: '4px',\r\n                    position: 'relative',\r\n                    boxSizing: 'border-box',\r\n                    maxHeight: '100%',\r\n                    overflow: 'auto',\r\n                    //Редактор\r\n                },\r\n            }\r\n        }\r\n    })\r\n    const [isEditMode, setIsEditMode] = React.useState(false);\r\n    const [isLoading, setIsLoading] = React.useState(false);\r\n    const [titleText, setTitleText] = React.useState('');\r\n    const [selectedDate, setSelectedDate] = React.useState(new Date());\r\n    const [contentText, setContentText] = React.useState();\r\n    const [prevContentText, setPrevContentText] = React.useState();\r\n    const [selectedLocations, setselectedLocations] = React.useState([]);\r\n    const [locations, setLocations] = React.useState({});\r\n\r\n    const handleChangeLocations = (event, value) => {\r\n        setselectedLocations(value);\r\n    };\r\n\r\n    const changeTitle = (event) => {\r\n        setTitleText(event.target.value);\r\n    };\r\n\r\n    const handleDateChange = date => {\r\n        setSelectedDate(date);\r\n    };\r\n\r\n    const changeContent = (state) => {\r\n        const currCont = state.getCurrentContent();\r\n        const convert = convertToRaw(currCont);\r\n        const content = JSON.stringify(convert);\r\n        if (prevContentText !== content) {\r\n            setPrevContentText(content);\r\n        }\r\n    };\r\n\r\n    const savepost = () => {\r\n        setIsLoading(true);\r\n        let havErr = false;\r\n        let errorMessage = '';\r\n        if (typeof (titleText) !== 'undefined') {\r\n            if (titleText.length === 0) {\r\n                errorMessage = lang.currLang.errors.EmptyTitle;\r\n                havErr = true;\r\n            }\r\n        }\r\n        else {\r\n            errorMessage = lang.currLang.errors.EmptyTitle;\r\n            havErr = true;\r\n        }\r\n\r\n        if (typeof (prevContentText) !== 'undefined') {\r\n            if (JSON.parse(prevContentText).blocks[0].text.length === 0) {\r\n                errorMessage = lang.currLang.errors.EmptyDream;\r\n                havErr = true;\r\n            }\r\n        }\r\n        else {\r\n            errorMessage = lang.currLang.errors.EmptyDream;\r\n            havErr = true;\r\n        }\r\n\r\n        if (havErr) {\r\n            setSnackbar({\r\n                type: SET_SNACKBAR_MODE,\r\n                snackbar: {\r\n                    open: true,\r\n                    variant: 'error',\r\n                    message: errorMessage,\r\n                },\r\n            });\r\n            setIsLoading(false);\r\n        }\r\n        else {\r\n            if (isEditMode) {\r\n                let hasChanges = false;\r\n                let tagChanges = false;\r\n                let postData = {\r\n                    post_id: props.location.defaultData.post_id,\r\n                };\r\n\r\n                if (props.location.defaultData.post_title !== titleText) {\r\n                    postData.title = titleText;\r\n                    hasChanges = true;\r\n                }\r\n\r\n                if (props.location.defaultData.dream_date.getTime() !== selectedDate.getTime()) {\r\n                    postData.dreamDate = selectedDate.toLocaleString(\"ru-RU\", { timeZone: 'Europe/London' });\r\n                    hasChanges = true;\r\n                }\r\n\r\n                if (props.location.defaultData.post_content !== prevContentText) {\r\n                    postData.content = prevContentText;\r\n                    hasChanges = true;\r\n                }\r\n\r\n                if (defaultTags.length === selectedLocations.length) {\r\n                    if (!compare(defaultTags, selectedLocations)) {\r\n                        hasChanges = true;\r\n                        tagChanges = true;\r\n                    }\r\n                }\r\n                else {\r\n                    hasChanges = true;\r\n                    tagChanges = true;\r\n                }\r\n\r\n                if (hasChanges) {\r\n                    if (tagChanges) {\r\n                        let deleteTags = defaultTags.filter(item1 =>\r\n                            !selectedLocations.some(item2 => (\r\n                                item2.id === item1.id)\r\n                            )\r\n                        );\r\n                        let addTags = selectedLocations.filter(item1 =>\r\n                            !defaultTags.some(item2 => (\r\n                                item2.id === item1.id)\r\n                            )\r\n                        );\r\n                        if (addTags.length > 0) {\r\n                            let add = {};\r\n                            addTags.map((item, key) => (\r\n                                add[key] = item\r\n                            ));\r\n                            postData.tags = { ...postData.tags, add: add };\r\n                        }\r\n                        if (deleteTags.length > 0) {\r\n                            let remove = {};\r\n                            deleteTags.map((item, key) => (\r\n                                remove[key] = item\r\n                            ));\r\n                            postData.tags = { ...postData.tags, remove: remove };\r\n                        }\r\n                    }\r\n                    instance\r\n                        .post('/actions/users/updatepost', postData)\r\n                        .then(res => {\r\n                            setIsLoading(false);\r\n                            setSnackbar({\r\n                                type: SET_SNACKBAR_MODE,\r\n                                snackbar: {\r\n                                    open: true,\r\n                                    variant: 'success',\r\n                                    message: lang.currLang.texts.success,\r\n                                },\r\n                            });\r\n                            history.push(\"/dreams\")\r\n                        })\r\n                        .catch(err => {\r\n                            console.log(err);\r\n                            setIsLoading(false);\r\n                        });\r\n                }\r\n                else {\r\n                    setSnackbar({\r\n                        type: SET_SNACKBAR_MODE,\r\n                        snackbar: {\r\n                            open: true,\r\n                            variant: 'error',\r\n                            message: lang.currLang.errors.NoChanges,\r\n                        },\r\n                    });\r\n                    setIsLoading(false);\r\n                }\r\n            }\r\n            else {\r\n                let postData = {\r\n                    title: titleText,\r\n                    dreamDate: selectedDate.toLocaleString(\"ru-RU\", { timeZone: 'Europe/London' }),\r\n                    content: prevContentText,\r\n                    create_user: auth.user.id,\r\n                    post_type: 0,\r\n                    nickname: auth.user.nickname,\r\n                    tags: selectedLocations,\r\n                }\r\n                instance\r\n                    .post('/actions/users/createpost', postData)\r\n                    .then(res => {\r\n                        setIsLoading(false);\r\n                        setSnackbar({\r\n                            type: SET_SNACKBAR_MODE,\r\n                            snackbar: {\r\n                                open: true,\r\n                                variant: 'success',\r\n                                message: lang.currLang.texts.success,\r\n                            },\r\n                        });\r\n                        history.push(\"/luciddreams\")\r\n                    })\r\n                    .catch(err => {\r\n                        setIsLoading(false);\r\n                    });\r\n            }\r\n        }\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        defaultTags = [];\r\n        instance.get(\"/gettags\")\r\n            .then(res => {\r\n                setLocations(res.data);\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            });\r\n\r\n        if (typeof (props.location.defaultData) !== 'undefined') {\r\n            setIsEditMode(true);\r\n            const { post_title, dream_date, post_content, tags } = props.location.defaultData;\r\n            setTitleText(post_title);\r\n            setSelectedDate(dream_date);\r\n            setContentText(post_content);\r\n            setPrevContentText(post_content);\r\n            if (typeof tags[0][0] === 'string') {\r\n                tags.forEach(item => {\r\n                    let location = {};\r\n                    location.id = Number(item[0]);\r\n                    location.name_rus = item[1];\r\n                    location.name_eng = item[2];\r\n                    location.img_url = item[3];\r\n                    defaultTags.push(location);\r\n                });\r\n                setselectedLocations(defaultTags);\r\n            }\r\n        }\r\n    }, [props.location.defaultData, lang.currLang]);\r\n\r\n    return (\r\n        <MuiThemeProvider theme={muiTheme}>\r\n            <CssBaseline />\r\n            <div className={classes.root} >\r\n                <Grid className={classes.mainGridContainer}\r\n                    container\r\n                    direction=\"column\"\r\n                    justify=\"center\"\r\n                    alignItems=\"stretch\" >\r\n                    <Grid item xs={11} className={classes.mainGridBodyItem}>\r\n                        <Paper className={classes.paper}>\r\n                            <Grid container\r\n                                className={classes.mainGridContainer}\r\n                                direction=\"column\"\r\n                                justify=\"center\"\r\n                                alignItems=\"center\"\r\n                            >\r\n                                <Grid item xs={2} className={classes.fullMinWidth} >\r\n                                    <TextField className={classes.inputDiv}\r\n                                        required\r\n                                        id=\"outlined-required\"\r\n                                        value={titleText}\r\n                                        label={lang.currLang.texts.title}\r\n                                        variant=\"outlined\"\r\n                                        onChange={(e) => { changeTitle(e) }}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={2} className={classes.fullMinWidth} >\r\n                                    <MuiPickersUtilsProvider utils={DateFnsUtils}\r\n                                        locale={lang.currLang.current === \"Ru\"\r\n                                            ? ruLocale\r\n                                            : enLocale}\r\n                                    >\r\n                                        <Grid className={classes.pickerGridContainer}\r\n                                            container\r\n                                            direction=\"row\"\r\n                                            justify=\"center\"\r\n                                            alignItems=\"stretch\" >\r\n                                            <Grid item xs={7} >\r\n                                                <KeyboardDatePicker className={classes.pickers}\r\n                                                    id=\"date-picker-dialog\"\r\n                                                    label={lang.currLang.texts.pickDate}\r\n                                                    format=\"dd.MM.yyyy\"\r\n                                                    value={selectedDate}\r\n                                                    onChange={handleDateChange}\r\n                                                    KeyboardButtonProps={{\r\n                                                        'aria-label': 'change date',\r\n                                                    }}\r\n                                                />\r\n                                            </Grid>\r\n                                            <Grid item xs={5} >\r\n                                                <KeyboardTimePicker className={classes.pickers}\r\n                                                    id=\"time-picker\"\r\n                                                    label={lang.currLang.texts.pickTime}\r\n                                                    value={selectedDate}\r\n                                                    onChange={handleDateChange}\r\n                                                    ampm={false}\r\n                                                    KeyboardButtonProps={{\r\n                                                        'aria-label': 'change time',\r\n                                                    }}\r\n                                                />\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </MuiPickersUtilsProvider>\r\n                                </Grid>\r\n                                <Grid item xs={5} className={classes.fullMinWidth} >\r\n\r\n                                    <div className={classes.inputScrollableDiv}>\r\n\r\n                                        <MUIRichTextEditor\r\n                                            value={contentText}\r\n                                            onChange={changeContent}\r\n                                            label={lang.currLang.texts.content}\r\n                                            inlineToolbar={false}\r\n                                            controls={[\r\n                                                \"bold\",\r\n                                                \"italic\",\r\n                                                \"underline\",\r\n                                                \"strikethrough\",\r\n                                                \"colorfill\",\r\n                                            ]}\r\n                                            customControls={[\r\n                                                {\r\n                                                    name: \"colorfill\",\r\n                                                    icon: <FormatColorFillIcon />,\r\n                                                    type: \"inline\",\r\n                                                    inlineStyle: {\r\n                                                        backgroundColor: \"yellow\",\r\n                                                        color: \"black\"\r\n                                                    }\r\n                                                }\r\n                                            ]}\r\n                                        />\r\n\r\n                                    </div>\r\n\r\n                                </Grid>\r\n                                <Grid item xs={3} className={classes.fullMinWidth} >\r\n                                    {locations.length\r\n                                        ? <Autocomplete\r\n                                            multiple\r\n                                            className={classes.inputDiv}\r\n                                            id=\"tags-outlined\"\r\n                                            size=\"small\"\r\n                                            options={locations}\r\n                                            getOptionLabel={option => (\r\n                                                <Chip\r\n                                                    size=\"small\"\r\n                                                    className={classes.chip}\r\n                                                    avatar={\r\n                                                        <Avatar src={option.img_url} />\r\n                                                    }\r\n                                                    label={\r\n                                                        lang.currLang.current === \"Ru\"\r\n                                                            ? option.name_rus\r\n                                                            : option.name_eng\r\n                                                    }\r\n                                                />\r\n                                            )}\r\n                                            defaultValue={\r\n                                                defaultTags.map(item => {\r\n                                                    return locations[item.id - 1];\r\n                                                })}\r\n                                            onChange={(event, value) => handleChangeLocations(event, value)}\r\n                                            filterSelectedOptions\r\n                                            renderInput={params => (\r\n                                                <TextField\r\n                                                    {...params}\r\n                                                    label={lang.currLang.texts.tags}\r\n                                                    fullWidth\r\n                                                />\r\n                                            )}\r\n                                        />\r\n                                        : <div className={classes.inputDiv}>\r\n                                            <LinearProgress />\r\n                                        </div>\r\n                                    }\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Paper>\r\n                    </Grid>\r\n                    <Grid item xs={1} className={classes.mainGridBodyItem} >\r\n\r\n                        {isLoading\r\n                            ? <LinearProgress />\r\n                            : <Grid\r\n                                container\r\n                                direction=\"row\"\r\n                                justify=\"space-evenly\"\r\n                                alignItems=\"center\"\r\n                            >\r\n\r\n                                <Grid item>\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        color=\"secondary\"\r\n                                        className={classes.actionButton}\r\n                                        onClick={() => {\r\n                                            isEditMode\r\n                                                ? history.push(\"/dreams\")\r\n                                                : history.push(\"/luciddreams\")\r\n                                        }}\r\n                                    >\r\n                                        {lang.currLang.buttons.close}\r\n                                    </Button>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        color=\"primary\"\r\n                                        className={classes.actionButton}\r\n                                        onClick={() => savepost()}\r\n                                    >\r\n                                        {isEditMode\r\n                                            ? lang.currLang.buttons.Save\r\n                                            : lang.currLang.buttons.add\r\n                                        }\r\n                                    </Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                        }\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </MuiThemeProvider >\r\n    );\r\n};\r\n\r\nAddDream.propTypes = {\r\n    setSnackbar: PropTypes.func.isRequired,\r\n    themeMode: PropTypes.object.isRequired,\r\n    lang: PropTypes.object.isRequired,\r\n    auth: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        themeMode: store.themeMode,\r\n        lang: store.lang,\r\n        auth: store.auth,\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setSnackbar: snackbar => dispatch(setSnackbar(snackbar)),\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(AddDream);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport ruLocale from \"date-fns/locale/ru\";\r\nimport enLocale from \"date-fns/locale/ru\";\r\n\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Button from '@material-ui/core/Button';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\n\r\nimport MUIRichTextEditor from 'mui-rte';\r\nimport { convertToRaw } from 'draft-js';\r\n\r\nimport Rating from \"@material-ui/lab/Rating\";\r\n\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\n\r\nimport { MuiPickersUtilsProvider, KeyboardTimePicker, KeyboardDatePicker } from '@material-ui/pickers';\r\n\r\nimport FormatColorFillIcon from '@material-ui/icons/FormatColorFill';\r\n\r\nimport { useStyles } from '../styles/Styles';\r\nimport { SET_SNACKBAR_MODE } from \"../actions/types\";\r\nimport { setSnackbar } from '../actions/Actions';\r\n\r\nimport { instance } from './Config';\r\n\r\nimport { compare } from '../functions';\r\n\r\nlet defaultTechnics = [];\r\nlet defaultTags = [];\r\n\r\nfunction AddCDream(props) {\r\n    const classes = useStyles();\r\n    const { lang, themeMode, history, auth, setSnackbar } = props;\r\n    const muiTheme = createMuiTheme(themeMode);\r\n    Object.assign(muiTheme, {\r\n        overrides: {\r\n            MUIRichTextEditor: {\r\n                root: {\r\n                    border: \"1px solid gray\",\r\n                    borderRadius: '4px',\r\n                    height: '100%',\r\n                    //Весь компонент\r\n                },\r\n                container: {\r\n                    height: '100%',\r\n                    margin: '0 !Important',\r\n                    //Без шапки\r\n                },\r\n                toolbar: {\r\n                    //textAlign: 'center',\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    justifyContent: 'center',\r\n                    height: '20%',\r\n                    minHeight: '48px',\r\n                    margin: '0 !Important',\r\n                    borderBottom: \"1px solid gray\",\r\n                    borderRadius: '4px',\r\n                },\r\n                placeHolder: {\r\n                    height: '72%',\r\n                },\r\n                editor: {\r\n                    height: '72%',\r\n                    width: '100%',\r\n                    position: 'relative',\r\n                    overflow: 'hidden',\r\n                    //Эдитор\r\n                },\r\n                editorContainer: {\r\n                    margin: '0 !Important',\r\n                    padding: \"0px 14px\",\r\n                    borderRadius: '4px',\r\n                    position: 'relative',\r\n                    boxSizing: 'border-box',\r\n                    maxHeight: '100%',\r\n                    overflow: 'auto',\r\n                    //Редактор\r\n                },\r\n            }\r\n        }\r\n    })\r\n    const [isEditMode, setIsEditMode] = React.useState(false);\r\n    const [isLoading, setIsLoading] = React.useState(false);\r\n    const [titleText, setTitleText] = React.useState('');\r\n    const [selectedDate, setSelectedDate] = React.useState(new Date());\r\n    const [contentText, setContentText] = React.useState();\r\n    const [prevContentText, setPrevContentText] = React.useState();\r\n    const [selectedLocations, setselectedLocations] = React.useState([]);\r\n    const [selectedTechnics, setselectedTechnics] = React.useState([]);\r\n    const [realisticsValue, setRealisticsValue] = React.useState(1);\r\n    const [locations, setLocations] = React.useState({});\r\n    const [technics, setTechnics] = React.useState({});\r\n\r\n    const handleChangeRealistics = (event, newValue) => {\r\n        setRealisticsValue(newValue);\r\n    };\r\n\r\n    const handleChangeLocations = (event, value) => {\r\n        setselectedLocations(value);\r\n    };\r\n\r\n    const handleChangeTechnics = (event, value) => {\r\n        setselectedTechnics(value);\r\n    };\r\n\r\n    const blurTitle = (event) => {\r\n        setTitleText(event.target.value);\r\n    };\r\n\r\n    const handleDateChange = date => {\r\n        setSelectedDate(date);\r\n    };\r\n\r\n    const changeContent = (state) => {\r\n        const currCont = state.getCurrentContent();\r\n        const convert = convertToRaw(currCont);\r\n        const content = JSON.stringify(convert);\r\n        if (prevContentText !== content) {\r\n            setPrevContentText(content);\r\n        }\r\n    };\r\n\r\n    const savepost = () => {\r\n        setIsLoading(true);\r\n        let havErr = false;\r\n        let errorMessage = '';\r\n        if (typeof (titleText) !== 'undefined') {\r\n            if (titleText.length === 0) {\r\n                errorMessage = lang.currLang.errors.EmptyTitle;\r\n                havErr = true;\r\n            }\r\n        }\r\n        else {\r\n            errorMessage = lang.currLang.errors.EmptyTitle;\r\n            havErr = true;\r\n        }\r\n        if (typeof (prevContentText) !== 'undefined') {\r\n            if (JSON.parse(prevContentText).blocks[0].text.length === 0) {\r\n                errorMessage = lang.currLang.errors.EmptyDream;\r\n                havErr = true;\r\n            }\r\n        }\r\n        else {\r\n            errorMessage = lang.currLang.errors.EmptyDream;\r\n            havErr = true;\r\n        }\r\n        if (havErr) {\r\n            setSnackbar({\r\n                type: SET_SNACKBAR_MODE,\r\n                snackbar: {\r\n                    open: true,\r\n                    variant: 'error',\r\n                    message: errorMessage,\r\n                },\r\n            });\r\n            setIsLoading(false);\r\n        }\r\n        else {\r\n            if (isEditMode) {\r\n                let hasChanges = false;\r\n                let tagChanges = false;\r\n                let techChanges = false;\r\n                let postData = {\r\n                    post_id: props.location.defaultData.post_id,\r\n                };\r\n\r\n                if (props.location.defaultData.post_title !== titleText) {\r\n                    postData.title = titleText;\r\n                    hasChanges = true;\r\n                }\r\n\r\n                if (props.location.defaultData.dream_date.getTime() !== selectedDate.getTime()) {\r\n                    postData.dreamDate = selectedDate.toLocaleString(\"ru-RU\", { timeZone: 'Europe/London' });\r\n                    hasChanges = true;\r\n                }\r\n\r\n                if (props.location.defaultData.post_content !== prevContentText) {\r\n                    postData.content = prevContentText;\r\n                    hasChanges = true;\r\n                }\r\n\r\n                if (props.location.defaultData.rating !== realisticsValue) {\r\n                    postData.rating = realisticsValue;\r\n                    hasChanges = true;\r\n                }\r\n\r\n                if (defaultTechnics.length === selectedTechnics.length) {\r\n                    if (!compare(defaultTechnics, selectedTechnics)) {\r\n                        hasChanges = true;\r\n                        techChanges = true;\r\n                    }\r\n                }\r\n                else {\r\n                    hasChanges = true;\r\n                    techChanges = true;\r\n                }\r\n\r\n                if (defaultTags.length === selectedLocations.length) {\r\n                    if (!compare(defaultTags, selectedLocations)) {\r\n                        hasChanges = true;\r\n                        tagChanges = true;\r\n                    }\r\n                }\r\n                else {\r\n                    hasChanges = true;\r\n                    tagChanges = true;\r\n                }\r\n\r\n                if (hasChanges) {\r\n                    if (tagChanges) {\r\n                        let deleteTags = defaultTags.filter(item1 =>\r\n                            !selectedLocations.some(item2 => (\r\n                                item2.id === item1.id)\r\n                            )\r\n                        );\r\n                        let addTags = selectedLocations.filter(item1 =>\r\n                            !defaultTags.some(item2 => (\r\n                                item2.id === item1.id)\r\n                            )\r\n                        );\r\n                        if (addTags.length > 0) {\r\n                            let add = {};\r\n                            addTags.map((item, key) => (\r\n                                add[key] = item\r\n                            ));\r\n                            postData.tags = { ...postData.tags, add: add };\r\n                        }\r\n                        if (deleteTags.length > 0) {\r\n                            let remove = {};\r\n                            deleteTags.map((item, key) => (\r\n                                remove[key] = item\r\n                            ));\r\n                            postData.tags = { ...postData.tags, remove: remove };\r\n                        }\r\n                    }\r\n                    if (techChanges) {\r\n                        let deleteTech = defaultTechnics.filter(item1 =>\r\n                            !selectedTechnics.some(item2 => (\r\n                                item2.id === item1.id)\r\n                            )\r\n                        );\r\n                        let addTech = selectedTechnics.filter(item1 =>\r\n                            !defaultTechnics.some(item2 => (\r\n                                item2.id === item1.id)\r\n                            )\r\n                        );\r\n                        if (addTech.length > 0) {\r\n                            let add = {};\r\n                            addTech.map((item, key) => (\r\n                                add[key] = item\r\n                            ));\r\n                            postData.technics = { ...postData.technics, add: add };\r\n                        }\r\n                        if (deleteTech.length > 0) {\r\n                            let remove = {};\r\n                            deleteTech.map((item, key) => (\r\n                                remove[key] = item\r\n                            ));\r\n                            postData.technics = { ...postData.technics, remove: remove };\r\n                        }\r\n                    }\r\n                    instance\r\n                        .post('/actions/users/updatepost', postData)\r\n                        .then(res => {\r\n                            setIsLoading(false);\r\n                            setSnackbar({\r\n                                type: SET_SNACKBAR_MODE,\r\n                                snackbar: {\r\n                                    open: true,\r\n                                    variant: 'success',\r\n                                    message: lang.currLang.texts.success,\r\n                                },\r\n                            });\r\n                            history.push(\"/dreams\")\r\n                        })\r\n                        .catch(err => {\r\n                            console.log(err);\r\n                            setIsLoading(false);\r\n                        });\r\n                }\r\n                else {\r\n                    setSnackbar({\r\n                        type: SET_SNACKBAR_MODE,\r\n                        snackbar: {\r\n                            open: true,\r\n                            variant: 'error',\r\n                            message: lang.currLang.errors.NoChanges,\r\n                        },\r\n                    });\r\n                    setIsLoading(false);\r\n                }\r\n            }\r\n            else {\r\n                let postData = {\r\n                    title: titleText,\r\n                    dreamDate: selectedDate.toLocaleString(\"ru-RU\", { timeZone: 'Europe/London' }),\r\n                    content: prevContentText,\r\n                    create_user: auth.user.id,\r\n                    rating: realisticsValue,\r\n                    post_type: 1,\r\n                    nickname: auth.user.nickname,\r\n                    tags: selectedLocations,\r\n                    technics: selectedTechnics\r\n                }\r\n\r\n                instance\r\n                    .post('/actions/users/createpost', postData)\r\n                    .then(res => {\r\n                        setIsLoading(false);\r\n                        setSnackbar({\r\n                            type: SET_SNACKBAR_MODE,\r\n                            snackbar: {\r\n                                open: true,\r\n                                variant: 'success',\r\n                                message: lang.currLang.texts.success,\r\n                            },\r\n                        });\r\n                        history.push(\"/luciddreams\")\r\n                    })\r\n                    .catch(err => {\r\n                        setIsLoading(false);\r\n                    });\r\n            }\r\n        }\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        defaultTechnics = [];\r\n        defaultTags = [];\r\n        instance.get(\"/gettags\")\r\n            .then(res => {\r\n                setLocations(res.data);\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            });\r\n        instance.get(\"/gettechnics\")\r\n            .then(res => {\r\n                setTechnics(res.data);\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            });\r\n\r\n        if (typeof (props.location.defaultData) !== 'undefined') {\r\n            setIsEditMode(true);\r\n            defaultTechnics = [];\r\n            defaultTags = [];\r\n            const { post_title, dream_date, post_content, technics, tags, rating } = props.location.defaultData;\r\n            setTitleText(post_title);\r\n            setSelectedDate(dream_date);\r\n            setContentText(post_content);\r\n            setPrevContentText(post_content);\r\n\r\n            if (typeof tags[0][0] === 'string') {\r\n                tags.forEach(item => {\r\n                    let location = {};\r\n                    location.id = Number(item[0]);\r\n                    location.name_rus = item[1];\r\n                    location.name_eng = item[2];\r\n                    location.img_url = item[3];\r\n                    defaultTags.push(location);\r\n                });\r\n                setselectedLocations(defaultTags);\r\n            }\r\n\r\n            if (typeof technics[0][0] === 'string') {\r\n                technics.forEach(item => {\r\n                    let tech = {};\r\n                    tech.id = Number(item[0]);\r\n                    tech.name_rus = item[1];\r\n                    tech.name_eng = item[2];\r\n                    defaultTechnics.push(tech);\r\n                });\r\n                setselectedTechnics(defaultTechnics);\r\n            }\r\n\r\n            setRealisticsValue(rating);\r\n        }\r\n    }, [props.location.defaultData, lang.currLang]);\r\n\r\n    return (\r\n        <MuiThemeProvider theme={muiTheme}>\r\n            <CssBaseline />\r\n            <div className={classes.root} >\r\n                <Grid className={classes.mainGridContainer}\r\n                    container\r\n                    direction=\"column\"\r\n                    justify=\"center\"\r\n                    alignItems=\"stretch\" >\r\n                    <Grid item xs={11} className={classes.mainGridBodyItem}>\r\n                        <Paper className={classes.paper}>\r\n                            <Grid className={classes.mainGridContainer}\r\n                                style={{ flexWrap: 'nowrap' }}\r\n                                container\r\n                                direction=\"column\"\r\n                                justify=\"center\"\r\n                                alignItems=\"center\"\r\n                            >\r\n                                <Grid item xs={2} className={classes.fullMinWidth} >\r\n                                    <TextField className={classes.inputDiv}\r\n                                        required\r\n                                        id=\"outlined-required\"\r\n                                        value={titleText}\r\n                                        label={lang.currLang.texts.title}\r\n                                        variant=\"outlined\"\r\n                                        onChange={(e) => { blurTitle(e) }}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={1} className={classes.fullMinWidth} >\r\n                                    <MuiPickersUtilsProvider utils={DateFnsUtils}\r\n                                        locale={lang.currLang.current === \"Ru\"\r\n                                            ? ruLocale\r\n                                            : enLocale}\r\n                                    >\r\n                                        <Grid className={classes.pickerGridContainer}\r\n                                            container\r\n                                            direction=\"row\"\r\n                                            justify=\"center\"\r\n                                            alignItems=\"stretch\" >\r\n                                            <Grid item xs={7} >\r\n                                                <KeyboardDatePicker className={classes.pickers}\r\n                                                    id=\"date-picker-dialog\"\r\n                                                    label={lang.currLang.texts.pickDate}\r\n                                                    format=\"dd.MM.yyyy\"\r\n                                                    value={selectedDate}\r\n                                                    onChange={handleDateChange}\r\n                                                    KeyboardButtonProps={{\r\n                                                        'aria-label': 'change date',\r\n                                                    }}\r\n                                                />\r\n                                            </Grid>\r\n                                            <Grid item xs={5} >\r\n                                                <KeyboardTimePicker className={classes.pickers}\r\n                                                    id=\"time-picker\"\r\n                                                    label={lang.currLang.texts.pickTime}\r\n                                                    value={selectedDate}\r\n                                                    onChange={handleDateChange}\r\n                                                    ampm={false}\r\n                                                    KeyboardButtonProps={{\r\n                                                        'aria-label': 'change time',\r\n                                                    }}\r\n                                                />\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </MuiPickersUtilsProvider>\r\n                                </Grid>\r\n                                <Grid item xs={4} className={classes.fullMinWidth} >\r\n                                    <div className={classes.inputScrollableDiv}>\r\n                                        <MUIRichTextEditor\r\n                                            value={contentText}\r\n                                            onChange={changeContent}\r\n                                            label={lang.currLang.texts.content}\r\n                                            inlineToolbar={false}\r\n                                            controls={[\r\n                                                \"bold\",\r\n                                                \"italic\",\r\n                                                \"underline\",\r\n                                                \"strikethrough\",\r\n                                                \"colorfill\",\r\n                                            ]}\r\n                                            customControls={[\r\n                                                {\r\n                                                    name: \"colorfill\",\r\n                                                    icon: <FormatColorFillIcon />,\r\n                                                    type: \"inline\",\r\n                                                    inlineStyle: {\r\n                                                        backgroundColor: \"yellow\",\r\n                                                        color: \"black\"\r\n                                                    }\r\n                                                }\r\n                                            ]}\r\n                                        />\r\n                                    </div>\r\n                                </Grid>\r\n                                <Grid item xs={2} className={classes.fullMinWidth} >\r\n                                    {technics.length\r\n                                        ? <Autocomplete\r\n                                            multiple\r\n                                            className={classes.inputDiv}\r\n                                            id=\"technics-outlined\"\r\n                                            size=\"small\"\r\n                                            options={technics}\r\n                                            getOptionLabel={option => (\r\n                                                <Chip\r\n                                                    size=\"small\"\r\n                                                    className={classes.chip}\r\n                                                    label={\r\n                                                        lang.currLang.current === \"Ru\"\r\n                                                            ? option.name_rus\r\n                                                            : option.name_eng\r\n                                                    }\r\n                                                />\r\n                                            )}\r\n                                            defaultValue={\r\n                                                defaultTechnics.map(item => {\r\n                                                    return technics[item.id - 1];\r\n                                                })}\r\n                                            onChange={(event, value) => handleChangeTechnics(event, value)}\r\n                                            filterSelectedOptions\r\n                                            renderInput={params => (\r\n                                                <TextField\r\n                                                    {...params}\r\n                                                    label={lang.currLang.texts.technics}\r\n                                                    fullWidth\r\n                                                />\r\n                                            )}\r\n                                        />\r\n                                        : <div className={classes.inputDiv}>\r\n                                            <LinearProgress />\r\n                                        </div>\r\n                                    }\r\n                                </Grid>\r\n                                <Grid item xs={2} className={classes.fullMinWidth} >\r\n                                    {locations.length\r\n                                        ? <Autocomplete\r\n                                            multiple\r\n                                            className={classes.inputDiv}\r\n                                            id=\"tags-outlined\"\r\n                                            size=\"small\"\r\n                                            options={locations}\r\n                                            getOptionLabel={option => (\r\n                                                <Chip\r\n                                                    size=\"small\"\r\n                                                    className={classes.chip}\r\n                                                    avatar={\r\n                                                        <Avatar src={option.img_url} />\r\n                                                    }\r\n                                                    label={\r\n                                                        lang.currLang.current === \"Ru\"\r\n                                                            ? option.name_rus\r\n                                                            : option.name_eng\r\n                                                    }\r\n                                                />\r\n                                            )}\r\n                                            defaultValue={\r\n                                                defaultTags.map(item => {\r\n                                                    return locations[item.id - 1];\r\n                                                })}\r\n                                            onChange={(event, value) => handleChangeLocations(event, value)}\r\n                                            filterSelectedOptions\r\n                                            renderInput={params => (\r\n                                                <TextField\r\n                                                    {...params}\r\n                                                    label={lang.currLang.texts.tags}\r\n                                                    fullWidth\r\n                                                />\r\n                                            )}\r\n                                        />\r\n                                        : <div className={classes.inputDiv}>\r\n                                            <LinearProgress />\r\n                                        </div>\r\n                                    }\r\n                                </Grid>\r\n                                <Grid item xs={1} className={classes.fullMinWidth} >\r\n                                    <div className={classes.div85width}>\r\n                                        <Grid className={classes.ratingGridContainer}\r\n                                            container\r\n                                            direction=\"row\"\r\n                                            justify=\"center\"\r\n                                            alignItems=\"stretch\" >\r\n                                            <Grid item xs={6}>\r\n                                                <Typography component=\"legend\">\r\n                                                    {lang.currLang.texts.rating} :\r\n                                                </Typography>\r\n                                            </Grid>\r\n                                            <Grid item xs={6}>\r\n                                                <Rating name=\"simple-controlled\"\r\n                                                    value={realisticsValue}\r\n                                                    onChange={handleChangeRealistics}\r\n                                                />\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </div>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Paper>\r\n                    </Grid>\r\n                    <Grid item xs={1} className={classes.mainGridBodyItem} >\r\n                        {isLoading\r\n                            ? <LinearProgress />\r\n                            : <Grid\r\n                                container\r\n                                direction=\"row\"\r\n                                justify=\"space-evenly\"\r\n                                alignItems=\"center\"\r\n                            >\r\n                                <Grid item>\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        color=\"secondary\"\r\n                                        className={classes.actionButton}\r\n                                        onClick={() => {\r\n                                            isEditMode\r\n                                                ? history.push(\"/dreams\")\r\n                                                : history.push(\"/luciddreams\")\r\n                                        }}\r\n                                    >\r\n                                        {lang.currLang.buttons.close}\r\n                                    </Button>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        color=\"primary\"\r\n                                        className={classes.actionButton}\r\n                                        onClick={() => savepost()}\r\n                                    >\r\n                                        {isEditMode\r\n                                            ? lang.currLang.buttons.Save\r\n                                            : lang.currLang.buttons.add\r\n                                        }\r\n                                    </Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                        }\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </MuiThemeProvider >\r\n    );\r\n};\r\n\r\nAddCDream.propTypes = {\r\n    setSnackbar: PropTypes.func.isRequired,\r\n    themeMode: PropTypes.object.isRequired,\r\n    lang: PropTypes.object.isRequired,\r\n    auth: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        themeMode: store.themeMode,\r\n        lang: store.lang,\r\n        auth: store.auth,\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setSnackbar: snackbar => dispatch(setSnackbar(snackbar)),\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(AddCDream);","import React from 'react';\r\nimport clsx from \"clsx\";\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport MUIRichTextEditor from 'mui-rte';\r\nimport { EditorState, convertFromRaw } from 'draft-js';\r\n\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport CardHeader from \"@material-ui/core/CardHeader\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Collapse from \"@material-ui/core/Collapse\";\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Button from '@material-ui/core/Button';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Card from \"@material-ui/core/Card\";\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport Menu from '@material-ui/core/Menu';\r\n\r\nimport Rating from \"@material-ui/lab/Rating\";\r\n\r\nimport FormatColorFillIcon from '@material-ui/icons/FormatColorFill';\r\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport Visibility from '@material-ui/icons/Visibility';\r\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\n\r\nimport { useStyles } from '../../styles/Styles';\r\n\r\nimport { instance } from '../Config';\r\n\r\nimport { SET_SNACKBAR_MODE } from \"../../actions/types\";\r\nimport { setSnackbar } from '../../actions/Actions';\r\n\r\nfunction DreamCard(props) {\r\n    const classes = useStyles();\r\n    const { post_id, post_title, post_content, post_type, tags, technics, rating, dream_date, is_public } = props.item;\r\n    const { lang, palette, history, setSnackbar } = props;\r\n    const [expanded, setExpanded] = React.useState(false);\r\n    const [anchorEl, setAnchorEl] = React.useState(null);\r\n    const [openAlert, setOpenAlert] = React.useState(false);\r\n    const [publicChecked, setPublicChecked] = React.useState(false);\r\n    const [alertTexts, setAlertTexts] = React.useState({\r\n        header: '',\r\n        body: '',\r\n        commit: '',\r\n        action: '',\r\n    });\r\n\r\n    const dateOfDream = new Date(dream_date).getDate() + '.' + (new Date(dream_date).getMonth() + 1) + '.' + new Date(dream_date).getFullYear() + ' ' + new Date(dream_date).getHours() + ':' + (\"0\" + new Date(dream_date).getMinutes()).slice(-2);\r\n    const srcContent = post_content.toString();\r\n    const jsonPparse = JSON.parse(srcContent);\r\n    const convertfromraw = convertFromRaw(jsonPparse);\r\n    const text_content = EditorState.createWithContent(convertfromraw).getCurrentContent().getPlainText('');\r\n\r\n    React.useEffect(() => {\r\n        is_public === 1\r\n            ? setPublicChecked(true)\r\n            : setPublicChecked(false);\r\n    }, [is_public]);\r\n\r\n    const openMenu = event => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const closeMenu = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    const clickMenu = (action, event) => {\r\n        let newAlertTexts = alertTexts;\r\n        switch (action) {\r\n            case 'public':\r\n                if (event.target.checked) {\r\n                    newAlertTexts = { ...newAlertTexts, header: lang.currLang.texts.PublicAlert };\r\n                    newAlertTexts = { ...newAlertTexts, body: lang.currLang.texts.PublicText };\r\n                    newAlertTexts = { ...newAlertTexts, commit: lang.currLang.texts.Publish };\r\n                    newAlertTexts = { ...newAlertTexts, action: 'publicOk' };\r\n                    setAlertTexts(newAlertTexts);\r\n                }\r\n                else {\r\n                    newAlertTexts = { ...newAlertTexts, header: lang.currLang.texts.UnpublicAlert };\r\n                    newAlertTexts = { ...newAlertTexts, body: lang.currLang.texts.UnpublicText };\r\n                    newAlertTexts = { ...newAlertTexts, commit: lang.currLang.texts.Unpublish };\r\n                    newAlertTexts = { ...newAlertTexts, action: 'publicOk' };\r\n                    setAlertTexts(newAlertTexts);\r\n                }\r\n                setOpenAlert(true);\r\n                closeMenu();\r\n                break;\r\n\r\n            case 'edit':\r\n                closeMenu();\r\n                if (post_type === 0) {\r\n                    history.push({\r\n                        pathname: \"/addregulardream\",\r\n                        defaultData: {\r\n                            post_id: post_id,\r\n                            post_title: post_title,\r\n                            dream_date: new Date(dream_date),\r\n                            post_content: post_content,\r\n                            tags: tags,\r\n                        }\r\n                    });\r\n                }\r\n                else if (post_type === 1) {\r\n                    history.push({\r\n                        pathname: \"/addcdream\",\r\n                        defaultData: {\r\n                            post_id: post_id,\r\n                            post_title: post_title,\r\n                            dream_date: new Date(dream_date),\r\n                            post_content: post_content,\r\n                            tags: tags,\r\n                            technics: technics,\r\n                            rating: rating,\r\n                        }\r\n                    });\r\n                }\r\n                break;\r\n\r\n            case 'delete':\r\n                newAlertTexts = { ...newAlertTexts, header: lang.currLang.texts.DeleteAlert };\r\n                newAlertTexts = { ...newAlertTexts, body: lang.currLang.texts.DeleteText };\r\n                newAlertTexts = { ...newAlertTexts, commit: lang.currLang.buttons.Delete };\r\n                newAlertTexts = { ...newAlertTexts, action: 'deleteOk' };\r\n                setAlertTexts(newAlertTexts);\r\n                closeMenu();\r\n                setOpenAlert(true);\r\n                break;\r\n\r\n            case 'closeAlert':\r\n                setOpenAlert(false);\r\n                break;\r\n\r\n            case 'deleteOk':\r\n                const postData = {\r\n                    post_id: post_id\r\n                };\r\n                instance\r\n                    .post('/actions/users/deletepost', postData)\r\n                    .then(res => {\r\n                        //TODO ADD LOADER\r\n                        closeMenu();\r\n                        setSnackbar({\r\n                            type: SET_SNACKBAR_MODE,\r\n                            snackbar: {\r\n                                open: true,\r\n                                variant: 'success',\r\n                                message: lang.currLang.texts.success,\r\n                            },\r\n                        });\r\n                        setOpenAlert(false);\r\n                        props.loadPosts();\r\n                    })\r\n                    .catch(err => {\r\n                        setSnackbar({\r\n                            type: SET_SNACKBAR_MODE,\r\n                            snackbar: {\r\n                                open: true,\r\n                                variant: 'error',\r\n                                message: lang.currLang.texts.CantDeletePost,\r\n                            },\r\n                        });\r\n                        closeMenu();\r\n                        setOpenAlert(false);\r\n                    });\r\n                break;\r\n\r\n            case 'publicOk':\r\n                closeMenu();\r\n                setOpenAlert(false);\r\n                if (publicChecked) {\r\n                    const postData = {\r\n                        post_id: post_id,\r\n                        newPublic: 0\r\n                    };\r\n                    instance\r\n                        .post('/actions/users/updatepost', postData)\r\n                        .then(res => {\r\n                            setPublicChecked(false);\r\n                            setSnackbar({\r\n                                type: SET_SNACKBAR_MODE,\r\n                                snackbar: {\r\n                                    open: true,\r\n                                    variant: 'success',\r\n                                    message: lang.currLang.texts.success,\r\n                                },\r\n                            });\r\n                        })\r\n                        .catch(err => {\r\n                            setPublicChecked(true);\r\n                        });\r\n                }\r\n                else {\r\n                    const postData = {\r\n                        post_id: post_id,\r\n                        newPublic: 1,\r\n                    };\r\n                    instance\r\n                        .post('/actions/users/updatepost', postData)\r\n                        .then(res => {\r\n                            setPublicChecked(true);\r\n                            setSnackbar({\r\n                                type: SET_SNACKBAR_MODE,\r\n                                snackbar: {\r\n                                    open: true,\r\n                                    variant: 'success',\r\n                                    message: lang.currLang.texts.success,\r\n                                },\r\n                            });\r\n                        })\r\n                        .catch(err => {\r\n                            setPublicChecked(false);\r\n                        });\r\n                }\r\n                break;\r\n\r\n            default:\r\n                console.log('Command not found');\r\n                break;\r\n        }\r\n    };\r\n\r\n    const handleExpandClick = () => {\r\n        setExpanded(!expanded);\r\n    };\r\n\r\n    return (\r\n        <Grid item xs={12}\r\n            style={{\r\n                marginTop: '15px',\r\n                marginBottom: '15px',\r\n                width: '100%',\r\n                height: 'auto',\r\n                borderRadius: '4px',\r\n            }}>\r\n\r\n            <Dialog\r\n                open={openAlert}\r\n                onClose={() => clickMenu('closeAlert')}\r\n                aria-labelledby=\"alert-dialog-title\"\r\n                aria-describedby=\"alert-dialog-description\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-title\" >\r\n                    {alertTexts.header}\r\n                </DialogTitle>\r\n                <DialogContent >\r\n                    <DialogContentText id=\"alert-dialog-description\" >\r\n                        {alertTexts.body}\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => clickMenu('closeAlert')}\r\n                        color=\"secondary\">\r\n                        {lang.currLang.buttons.cancel}\r\n                    </Button>\r\n                    <Button onClick={() => clickMenu(alertTexts.action)}\r\n                        color=\"primary\" autoFocus>\r\n                        {alertTexts.commit}\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Menu id=\"simple-menu\"\r\n                anchorEl={anchorEl}\r\n                keepMounted\r\n                open={Boolean(anchorEl)}\r\n                onClose={closeMenu}>\r\n\r\n                <MenuItem >\r\n                    <ListItemIcon>\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Checkbox\r\n                                    onChange={(e) => clickMenu('public', e)}\r\n                                    checked={publicChecked}\r\n                                    value=\"checkedB\"\r\n                                    color=\"primary\"\r\n                                />\r\n                            }\r\n                        />\r\n                    </ListItemIcon>\r\n                    {lang.currLang.texts.Public}\r\n                </MenuItem>\r\n\r\n                <MenuItem onClick={() => clickMenu('edit')}>\r\n                    <ListItemIcon>\r\n                        <EditIcon fontSize=\"small\" />\r\n                    </ListItemIcon>\r\n                    {lang.currLang.buttons.Edit}\r\n                </MenuItem>\r\n\r\n                <MenuItem onClick={() => clickMenu('delete')}>\r\n                    <ListItemIcon>\r\n                        <EditIcon fontSize=\"small\" />\r\n                    </ListItemIcon>\r\n                    {lang.currLang.buttons.Delete}\r\n                </MenuItem>\r\n\r\n            </Menu>\r\n\r\n            <Card raised={false}\r\n                className={classes.card}>\r\n                <CardHeader\r\n                    title={\r\n                        <Grid container\r\n                            direction=\"row\"\r\n                            justify=\"flex-start\"\r\n                            alignItems=\"center\"\r\n                        >\r\n                            <Grid item xs={10} >\r\n                                <Typography variant='h6'>\r\n                                    {post_title}\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid item xs={2} >\r\n                                <Tooltip\r\n                                    disableFocusListener\r\n                                    disableTouchListener\r\n                                    title={publicChecked\r\n                                        ? lang.currLang.texts.PublicDescription\r\n                                        : lang.currLang.texts.UnpublicDescription\r\n                                    }\r\n                                >\r\n                                    {publicChecked\r\n                                        ? <Visibility style={{\r\n                                            display: \"block\",\r\n                                            margin: \"auto\"\r\n                                        }} />\r\n                                        : <VisibilityOff style={{\r\n                                            display: \"block\",\r\n                                            margin: \"auto\"\r\n                                        }} />\r\n                                    }\r\n                                </Tooltip>\r\n                            </Grid>\r\n                        </Grid>\r\n                    }\r\n                    subheader={dateOfDream}\r\n                    action={\r\n                        <IconButton\r\n                            aria-label=\"settings\"\r\n                            onClick={(e) => openMenu(e)}\r\n                        >\r\n                            <MoreVertIcon />\r\n                        </IconButton>\r\n                    }\r\n                />\r\n                <CardContent>\r\n                    <div className={classes.avatarRoot}>\r\n                        <Chip variant=\"outlined\"\r\n                            label={\r\n                                post_type === 0\r\n                                    ? lang.currLang.texts.Dream\r\n                                    : lang.currLang.texts.Cdream\r\n                            }\r\n                        />\r\n                        {technics.map((technic, key) =>\r\n                            technic[0]\r\n                                ? <Chip className={classes.smallChip}\r\n                                    key={key}\r\n                                    label={lang.currLang.current === \"Ru\"\r\n                                        ? technic[1]\r\n                                        : technic[2]}\r\n                                />\r\n                                : ''\r\n                        )}\r\n                    </div>\r\n                    <div className={classes.avatarRoot}>\r\n                        {tags.map((tag, key) =>\r\n                            tag[0]\r\n                                ? <Tooltip key={key}\r\n                                    disableFocusListener\r\n                                    disableTouchListener\r\n                                    title={\r\n                                        lang.currLang.current === \"Ru\"\r\n                                            ? tag[1]\r\n                                            : tag[2]\r\n                                    }\r\n                                >\r\n                                    <Avatar className={classes.smallAvatar}\r\n                                        alt=\"Remy Sharp\"\r\n                                        src={tag[3]}\r\n                                        style={palette.type === 'dark'\r\n                                            ? {\r\n                                                filter: 'invert(1)',\r\n                                            }\r\n                                            : {\r\n\r\n                                            }}\r\n                                    />\r\n                                </Tooltip>\r\n                                : ''\r\n                        )}\r\n                    </div>\r\n                </CardContent>\r\n                <CardActions disableSpacing={true}>\r\n                    <Typography\r\n                        noWrap={expanded\r\n                            ? false\r\n                            : true\r\n                        }\r\n                        variant='body2'\r\n                        style={{ padding: '12px', }}\r\n                    >\r\n                        {expanded\r\n                            ? lang.currLang.texts.TapToShow\r\n                            : text_content\r\n                        }\r\n                    </Typography>\r\n\r\n                    <IconButton\r\n                        className={clsx(classes.expand, {\r\n                            [classes.expandOpen]: expanded\r\n                        })}\r\n                        onClick={handleExpandClick}\r\n                        aria-expanded={expanded}\r\n                        aria-label=\"show more\"\r\n                    >\r\n                        <ExpandMoreIcon />\r\n                    </IconButton>\r\n                </CardActions>\r\n                <Collapse in={expanded}\r\n                    timeout=\"auto\"\r\n                    unmountOnExit >\r\n                    <CardContent>\r\n                        <Paper className={classes.contentPaper}>\r\n                            <MUIRichTextEditor\r\n                                controls={[\r\n                                    \"bold\",\r\n                                    \"italic\",\r\n                                    \"underline\",\r\n                                    \"strikethrough\",\r\n                                    \"colorfill\",\r\n                                ]}\r\n                                customControls={[\r\n                                    {\r\n                                        name: \"colorfill\",\r\n                                        icon: <FormatColorFillIcon />,\r\n                                        type: \"inline\",\r\n                                        inlineStyle: {\r\n                                            backgroundColor: \"yellow\",\r\n                                            color: \"black\"\r\n                                        }\r\n                                    }\r\n                                ]}\r\n                                readOnly={true}\r\n                                toolbar={false}\r\n                                value={post_content}\r\n                            />\r\n                        </Paper>\r\n                        {post_type === 0\r\n                            ? ''\r\n                            :\r\n                            <Grid style={{ paddingTop: '10px', }}\r\n                                container\r\n                                direction=\"row\"\r\n                                justify=\"center\"\r\n                                alignItems=\"stretch\" >\r\n                                <Grid item xs={6}>\r\n                                    <Typography component=\"legend\" variant='body2'>\r\n                                        {lang.currLang.texts.rating}:\r\n                                    </Typography>\r\n                                </Grid>\r\n                                <Grid item xs={6}>\r\n                                    <Rating name=\"simple-controlled\"\r\n                                        value={rating}\r\n                                        readOnly\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n                        }\r\n                    </CardContent>\r\n                </Collapse>\r\n            </Card>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nDreamCard.propTypes = {\r\n    setSnackbar: PropTypes.func.isRequired,\r\n    lang: PropTypes.object.isRequired,\r\n    palette: PropTypes.object.isRequired,\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        lang: store.lang,\r\n        palette: store.themeMode.palette,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setSnackbar: snackbar => dispatch(setSnackbar(snackbar)),\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(DreamCard);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Button from '@material-ui/core/Button';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\n\r\nimport DreamCard from './muiltiple/DreamCard';\r\nimport { useStyles } from '../styles/Styles';\r\nimport { instance } from './Config';\r\n\r\nfunction ViewDreams(props) {\r\n    const { lang, themeMode, history, auth } = props;\r\n    const muiTheme = createMuiTheme(themeMode);\r\n    const classes = useStyles();\r\n    const [isLoading, setIsLoading] = React.useState(true);\r\n    const [dreams, setDreams] = React.useState([]);\r\n\r\n    const loadPosts = React.useCallback(() => {\r\n        setIsLoading(true);\r\n        instance.post(\"/actions/users/getuserposts\", { id: auth.user.id })\r\n            .then(res => {\r\n                setDreams(res.data);\r\n                setIsLoading(false);\r\n            })\r\n            .catch(err => {\r\n                setIsLoading(false);\r\n            });\r\n    }, [auth.user.id]);\r\n\r\n    React.useEffect(() => {\r\n        loadPosts();\r\n    }, [loadPosts]);\r\n\r\n    return (\r\n        <MuiThemeProvider theme={muiTheme}>\r\n            <CssBaseline />\r\n            <div className={classes.root}>\r\n                <Grid className={classes.mainGridContainer}\r\n                    container\r\n                    direction=\"column\"\r\n                    justify=\"center\"\r\n                    alignItems=\"stretch\" >\r\n                    <Grid item xs={11} zeroMinWidth className={classes.mainGridDreamsBodyItem}>\r\n                        {isLoading\r\n                            ? <div className={classes.centerCircularProgress}>\r\n                                <CircularProgress disableShrink />\r\n                            </div>\r\n                            : <Container className={classes.mainGridDreamsBodyItemContainer}>\r\n                                <Paper className={classes.mainGridDreamsBodyItemContainerPaper}>\r\n                                    {dreams.length !== 0\r\n                                        ? <Grid className={classes.mainGridDreamsContainer}\r\n                                            container\r\n                                            direction=\"column\"\r\n                                            justify=\"center\"\r\n                                            alignItems=\"stretch\"\r\n                                        >\r\n                                            {dreams.map((item, key) => (\r\n                                                <DreamCard\r\n                                                    item={item}\r\n                                                    key={key}\r\n                                                    history={history}\r\n                                                    loadPosts={loadPosts}\r\n                                                />\r\n                                            ))}\r\n                                        </Grid>\r\n                                        :\r\n                                        <div>\r\n                                            <div\r\n                                                style={{\r\n                                                    position: \"relative\",\r\n                                                    left: \"50%\",\r\n                                                    transform: \"translateX(-50%)\",\r\n                                                    width: 200,\r\n                                                    height: 100,\r\n                                                }}\r\n                                            >\r\n                                            </div>\r\n                                            <div\r\n                                                style={{\r\n                                                    position: \"relative\",\r\n                                                    left: \"50%\",\r\n                                                    transform: \"translateX(-50%)\",\r\n                                                    width: 200,\r\n                                                    height: 200,\r\n                                                    background: \"url('https://static.thenounproject.com/png/603669-200.png') no-repeat center\",\r\n                                                }}>\r\n                                            </div>\r\n                                            <div\r\n                                                style={{\r\n                                                    position: \"relative\",\r\n                                                    left: \"50%\",\r\n                                                    transform: \"translateX(-50%)\",\r\n                                                    width: 200,\r\n                                                    height: 100,\r\n                                                    textAlign: \"center\",\r\n                                                }}\r\n                                            >\r\n                                                <Typography>\r\n                                                    {lang.currLang.texts.NoDreams}\r\n                                                </Typography>\r\n                                            </div>\r\n                                        </div>\r\n                                    }\r\n                                </Paper>\r\n                            </Container>\r\n                        }\r\n                    </Grid>\r\n                    <Grid item xs={1} zeroMinWidth className={classes.mainGridBodyItem}>\r\n                        <Grid\r\n                            container\r\n                            direction=\"row\"\r\n                            justify=\"space-evenly\"\r\n                            alignItems=\"center\"\r\n                            spacing={1}\r\n                        >\r\n                            <Grid item xs={6} align=\"center\">\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    color=\"secondary\"\r\n                                    className={classes.actionButton}\r\n                                    onClick={() => { history.push(\"/luciddreams\") }}\r\n                                >\r\n                                    {lang.currLang.buttons.close}\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid item xs={6} />\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </MuiThemeProvider >\r\n    );\r\n}\r\n\r\nViewDreams.propTypes = {\r\n    themeMode: PropTypes.object.isRequired,\r\n    lang: PropTypes.object.isRequired,\r\n    auth: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        themeMode: store.themeMode,\r\n        lang: store.lang,\r\n        auth: store.auth,\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(ViewDreams);","const words = {\r\n    current: 'Ru',\r\n    buttons: {\r\n        signIn: 'Вход',\r\n        signUp: 'Регистрация',\r\n        dreamJoirnal: 'Дневник снов',\r\n        addDream: 'Добавить сон',\r\n        addCDream: 'Добавить осозн. сон',\r\n        techniques: 'Техники',\r\n        adventures: 'Приключения',\r\n        close: 'Назад',\r\n        about: 'О нас',\r\n        cancel: 'Отмена',\r\n        add: 'Добавить',\r\n        Edit: 'Изменить',\r\n        Delete: 'Удалить',\r\n        Save: 'Сохранить',\r\n    },\r\n    texts: {\r\n        about: 'О нас О нас О нас О нас О нас О нас О нас О нас О нас О нас О нас О нас',\r\n        or: 'ИЛИ',\r\n        nickname: 'Отображаемое имя',\r\n        password: 'Пароль',\r\n        passwordAgain: 'Поторите пароль',\r\n        cancel: 'Отмена',\r\n        sucessRegistration: 'Вы успешно зарегистрировались',\r\n        hello: 'Привет, ',\r\n        changleLanguage: 'Сохранить изменение языка на ',\r\n        success: 'Успешно',\r\n        title: 'Заголовок',\r\n        content: 'Что снилось',\r\n        tags: 'Места',\r\n        technics: 'Техники',\r\n        rating: 'Реалистичность',\r\n        Dream: 'Обычный сон',\r\n        Cdream: 'ОC',\r\n        NoDreams: \"У вас нет снов\",\r\n        pickDate: \"Дата\",\r\n        pickTime: \"Время\",\r\n        TapToShow: \"Нажмите на текст, чтобы отобразить подсвечивание\",\r\n        Public: \"Опубликовано\",\r\n        Publish: \"Опубликовать\",\r\n        Unpublish: \"Скрыть\",\r\n        PublicAlert: \"Вы точно хотите опубликовать сон?\",\r\n        PublicText: \"После публикации ваши друзья смогут прочитать этот сон.\",\r\n        PublicDescription: \"Ваши друзья могут прочитать этот сон\",\r\n        UnpublicAlert: \"Вы точно хотите скрыть сон?\",\r\n        UnpublicText: \"После скрытия ваши друзья не смогут прочитать этот сон.\",\r\n        UnpublicDescription: \"Ваши друзья не могут прочитать этот сон\",\r\n        DeleteAlert: \"Вы точно хотите удалить сон?\",\r\n        DeleteText: \"После удаления сон не получится восстановить. Никогда.\",\r\n    },\r\n    errors: {\r\n        emailLenght: 'Введите email',\r\n        nicknameLenght: 'Введите отображаемое имя',\r\n        passwordLenght: 'Введите пароль',\r\n        password2Lenght: 'Введите пароль',\r\n        passwordsCompare: 'Пароли не совпадают',\r\n        UserNotExist: 'Неверный email или пароль',\r\n        EmailIsNotValid: 'Введен некорректный email',\r\n        IncorrectPassword: 'Неверный email или пароль',\r\n        EmailIsBusy: 'Email занят',\r\n        PasswordLenght5Symbols: 'Длина пароля - больше 5 символов',\r\n        NotLogin: 'Вы не авторизированы',\r\n        EmptyTitle: 'Пустой заголовок',\r\n        EmptyDream: 'Пустое поле сна',\r\n        NoChanges: 'Нет изменений',\r\n        CantDeletePost: 'Ошибка удаления сна',\r\n    },\r\n};\r\n\r\nexport default words;","import React from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport SnackbarContent from \"@material-ui/core/SnackbarContent\";\r\nimport ButtonBase from '@material-ui/core/ButtonBase';\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport Button from '@material-ui/core/Button';\r\nimport Slide from \"@material-ui/core/Slide\";\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport { SET_THEME_MODE, SET_SNACKBAR_MODE } from \"../actions/types\";\r\n\r\nimport { setCurrLang, setTheme, setSnackbar } from '../actions/Actions';\r\nimport { useStyles } from '../styles/Styles';\r\nimport { instance } from './Config';\r\nimport { CheckTimeOut } from '../utils/CheckLoginTimeOut';\r\n\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\n\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\n\r\nimport RuDict from '../dictionary/ru';\r\nimport EnDict from '../dictionary/en';\r\n\r\nfunction TransitionDown(props) {\r\n    return <Slide {...props} direction=\"down\" />;\r\n}\r\n\r\nfunction MainPage(props) {\r\n    const classes = useStyles();\r\n    const { lang, themeMode, auth, history, setCurrLangAction, setTheme, setSnackbar } = props;\r\n    const muiTheme = createMuiTheme(themeMode);\r\n    const [prevLanguage, setPrevLanguage] = React.useState(undefined);\r\n    const [openLangSnakbar, setOpenLangSnakbar] = React.useState(false);\r\n    const [langSnakbarMessage, setLangSnakbarMessage] = React.useState('');\r\n    const [transition, setTransition] = React.useState(undefined);\r\n\r\n    const switchMode = () => {\r\n        let newPaletteType = themeMode.palette.type === \"light\" ? \"dark\" : \"light\";\r\n        let primaryColor = themeMode.palette.type === \"light\" ? \"#f9a825\" : \"#3f51b5\";\r\n        let secondaryColor = themeMode.palette.type === \"light\" ? \"#f50057\" : \"#f50057\";\r\n        setTheme({\r\n            type: SET_THEME_MODE,\r\n            palette: {\r\n                type: newPaletteType,\r\n                primary: { main: primaryColor },\r\n                secondary: { main: secondaryColor },\r\n            }\r\n        });\r\n    };\r\n\r\n    const onAstronautClick = () => {\r\n        alert('Тут должны перейти на страницу космонафта');\r\n    };\r\n\r\n    const onMapClick = () => {\r\n        alert('Тут должны перейти на страницу карты');\r\n    };\r\n\r\n    const changeLanguage = (language) => {\r\n        if (language !== lang.currLang.current) {\r\n            if (language === 'Ru') {\r\n                setPrevLanguage(lang.currLang.current);\r\n                setCurrLangAction(RuDict);\r\n                setLangSnakbarMessage(language);\r\n                setTransition(() => TransitionDown);\r\n                setOpenLangSnakbar(true);\r\n            }\r\n            if (lang.currLang.current !== 'En') {\r\n                setPrevLanguage(lang.currLang.current);\r\n                setCurrLangAction(EnDict);\r\n                setLangSnakbarMessage(language);\r\n                setTransition(() => TransitionDown);\r\n                setOpenLangSnakbar(true);\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleCloseLangSnakbar = () => {\r\n        switch (prevLanguage) {\r\n            case 'En':\r\n                setCurrLangAction(EnDict);\r\n                break;\r\n            case 'Ru':\r\n                setCurrLangAction(RuDict);\r\n                break;\r\n            default:\r\n                setCurrLangAction(EnDict);\r\n                break;\r\n        }\r\n        setOpenLangSnakbar(false);\r\n    };\r\n\r\n    const handleSaveLangSnakbar = () => {\r\n        let newLang;\r\n        switch (lang.currLang.current) {\r\n            case 'En':\r\n                newLang = 0;\r\n                break;\r\n            case 'Ru':\r\n                newLang = 1;\r\n                break;\r\n            default:\r\n                newLang = 0;\r\n                break;\r\n        }\r\n        let userid = auth.user.id;\r\n        let usernickname = auth.user.nickname;\r\n        let newUserData = {\r\n            language: newLang,\r\n            id: userid,\r\n            nickname: usernickname,\r\n        };\r\n        //Проверка на таймаут\r\n        let check = CheckTimeOut();\r\n        if (check) {\r\n            instance\r\n                .post('/actions/users/updateuserdata', newUserData)\r\n                .then(res => {\r\n                    setSnackbar({\r\n                        type: SET_SNACKBAR_MODE,\r\n                        snackbar: {\r\n                            open: true,\r\n                            variant: 'success',\r\n                            message: lang.currLang.texts.success,\r\n                        },\r\n                    });\r\n                    setOpenLangSnakbar(false);\r\n                })\r\n                .catch(err => {\r\n                    handleCloseLangSnakbar();\r\n                });\r\n\r\n        }\r\n        else {\r\n            setSnackbar({\r\n                type: SET_SNACKBAR_MODE,\r\n                snackbar: {\r\n                    open: true,\r\n                    variant: 'error',\r\n                    message: lang.currLang.errors.NotLogin,\r\n                },\r\n            });\r\n            handleCloseLangSnakbar();\r\n        }\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        let id = {\r\n            id: auth.user.id,\r\n        };\r\n        instance\r\n            .post('/actions/users/getuserdata', id)\r\n            .then(res => {\r\n                res.data.language === 0 ? setCurrLangAction(EnDict) : setCurrLangAction(RuDict);\r\n            })\r\n            .catch(err => {\r\n                auth.user.language === 0 ? setCurrLangAction(EnDict) : setCurrLangAction(RuDict);\r\n            });\r\n        // if (auth.user.times_mode === 0) {\r\n        //     setTheme({\r\n        //         type: SET_THEME_MODE,\r\n        //         palette: {\r\n        //             type: \"dark\",\r\n        //             primary: { main: \"#f9a825\" },\r\n        //             secondary: { main: \"#f50057\" },\r\n        //         }\r\n        //     });\r\n        // }\r\n        // else {\r\n        //     setTheme({\r\n        //         type: SET_THEME_MODE,\r\n        //         palette: {\r\n        //             type: \"light\",\r\n        //             primary: { main: \"#3f51b5\" },\r\n        //             secondary: { main: \"#f50057\" },\r\n        //         }\r\n        //     });\r\n        // }\r\n    }, [classes, setTheme, setCurrLangAction, auth.user.language, auth.user.times_mode, auth.user.id]);\r\n\r\n    return (\r\n        <MuiThemeProvider theme={muiTheme}>\r\n            <CssBaseline />\r\n\r\n            <Snackbar\r\n                anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }}\r\n                key={\"top, center\"}\r\n                open={openLangSnakbar}\r\n                TransitionComponent={transition}\r\n            >\r\n                <SnackbarContent\r\n                    aria-describedby=\"lang-snackbar\"\r\n                    message={\r\n                        <Typography className={classes.mainGridContainer}\r\n                            align='center'\r\n                            id=\"lang-snackbar\"\r\n                            variant='body2'>\r\n                            {lang.currLang.texts.changleLanguage + langSnakbarMessage + ' ?'}\r\n                        </Typography>\r\n                    }\r\n                    action={[\r\n                        <div key={\"lang-snackbar-buttons\"}>\r\n                            <IconButton\r\n                                key=\"save\"\r\n                                aria-label=\"save\"\r\n                                color=\"inherit\"\r\n                                onClick={handleSaveLangSnakbar}\r\n                            >\r\n                                <SaveIcon />\r\n                            </IconButton>\r\n                            <IconButton\r\n                                key=\"close\"\r\n                                aria-label=\"close\"\r\n                                color=\"inherit\"\r\n                                onClick={handleCloseLangSnakbar}\r\n                            >\r\n                                <CloseIcon />\r\n                            </IconButton>\r\n                        </div>\r\n                    ]}\r\n                />\r\n            </Snackbar>\r\n\r\n            <div className={classes.root}>\r\n                <div className={classes.mainPage}>\r\n                    <Grid className={classes.mainGridContainer}\r\n                        container\r\n                        direction=\"column\"\r\n                        justify=\"center\"\r\n                        alignItems=\"stretch\"\r\n                    >\r\n                        <Grid item xs={4} className={classes.mainGridHeadItem} >\r\n                            <Grid container className={classes.mainGridContainer}\r\n                                direction=\"row\"\r\n                                justify=\"space-around\"\r\n                                alignItems=\"stretch\"\r\n                            >\r\n                                <Grid item xs={4} >\r\n                                    <ButtonBase className={classes.AstronautButton}\r\n                                        type='button'\r\n                                        focusRipple\r\n                                        onClick={onAstronautClick}>\r\n                                        <div className={classes.AstronautDiv}>\r\n                                            <div className={classes.AstronautImg} style={themeMode.palette.type === \"light\" ? { filter: 'invert(0)', } : { filter: 'invert(1)', }} />\r\n                                        </div>\r\n                                    </ButtonBase>\r\n                                </Grid>\r\n                                <Grid item xs={4} >\r\n                                    <ButtonBase className={classes.image}\r\n                                        type='button'\r\n                                        focusRipple\r\n                                        onClick={switchMode}>\r\n                                        <div className={classes.SkyDiv}>\r\n                                            <div className={classes.SunSrc} style={themeMode.palette.type === \"dark\" ? { transform: 'translateY(36vw)' } : { transform: 'translateY(0)' }} />\r\n                                            <div className={classes.MoonSrc} style={themeMode.palette.type === \"dark\" ? { transform: 'translateY(0)' } : { transform: 'translateY(-36vw)' }} />\r\n                                        </div>\r\n                                    </ButtonBase>\r\n                                </Grid>\r\n                                <Grid item xs={4} >\r\n                                    <ButtonBase className={classes.MapButton}\r\n                                        type='button'\r\n                                        focusRipple\r\n                                        onClick={onMapClick}>\r\n                                        <div className={classes.MapDiv}>\r\n                                            <div className={classes.MapImg} style={themeMode.palette.type === \"light\" ? { filter: 'invert(0)', } : { filter: 'invert(1)', }} />\r\n                                        </div>\r\n                                    </ButtonBase>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item xs={1} className={classes.mainGridHeadItem} >\r\n                            <Grid className={classes.mainGridContainer}\r\n                                container\r\n                                direction=\"column\"\r\n                                justify=\"center\"\r\n                                alignItems=\"stretch\" >\r\n                                <Grid item xs={12} className={classes.menuButtonContainerItem} >\r\n                                    <Typography className={classes.mainGridContainer}\r\n                                        align='center'\r\n                                        variant='h6'>\r\n                                        {lang.currLang.texts.hello + auth.user.nickname}\r\n                                    </Typography>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item xs={6} className={classes.mainGridBodyItem} >\r\n                            <Grid className={classes.mainGridContainer}\r\n                                container\r\n                                direction=\"column\"\r\n                                justify=\"center\"\r\n                                alignItems=\"stretch\"\r\n                            >\r\n                                <Grid className={classes.menuButtonContainer}\r\n                                    container\r\n                                    direction=\"column\"\r\n                                    justify=\"center\"\r\n                                    alignItems=\"stretch\"\r\n                                >\r\n                                    <Grid item xs={12} className={classes.menuButtonContainerItem} >\r\n                                        <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                            <Button\r\n                                                variant=\"contained\"\r\n                                                color=\"primary\"\r\n                                                className={classes.menuButton}\r\n                                                onClick={() => {\r\n                                                    let check = CheckTimeOut();\r\n                                                    if (check) history.push(\"/dreams\");\r\n                                                    else history.push(\"/\");\r\n                                                }}\r\n                                            >\r\n                                                {lang.currLang.buttons.dreamJoirnal}\r\n                                            </Button>\r\n                                        </Grid>\r\n                                        <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                            <Button\r\n                                                variant=\"contained\"\r\n                                                color=\"primary\"\r\n                                                className={classes.menuButton}\r\n                                                onClick={() => {\r\n                                                    let check = CheckTimeOut();\r\n                                                    if (check) history.push(\"/addregulardream\");\r\n                                                    else history.push(\"/\");\r\n                                                }}\r\n                                            >\r\n                                                {lang.currLang.buttons.addDream}\r\n                                            </Button>\r\n                                        </Grid>\r\n                                        <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                            <Button\r\n                                                variant=\"contained\"\r\n                                                color=\"primary\"\r\n                                                className={classes.menuButton}\r\n                                                onClick={() => {\r\n                                                    let check = CheckTimeOut();\r\n                                                    if (check) history.push(\"/addcdream\");\r\n                                                    else history.push(\"/\");\r\n                                                }}\r\n                                            >\r\n                                                {lang.currLang.buttons.addCDream}\r\n                                            </Button>\r\n                                        </Grid>\r\n                                        <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                            <Button\r\n                                                variant=\"contained\"\r\n                                                color=\"primary\"\r\n                                                className={classes.menuButton}\r\n                                                onClick={() => {\r\n                                                    let check = CheckTimeOut();\r\n                                                    if (check) history.push(\"/technics\");\r\n                                                    else history.push(\"/\");\r\n                                                }}\r\n                                            >\r\n                                                {lang.currLang.buttons.techniques}\r\n                                            </Button>\r\n                                        </Grid>\r\n                                        <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                            <Button variant=\"contained\" color=\"primary\" className={classes.menuButton}>\r\n                                                {lang.currLang.buttons.adventures}\r\n                                            </Button>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item xs={1} className={classes.mainGridFooterItem} >\r\n                            <Grid className={classes.menuButtonContainerFooterLanguageButtons}\r\n                                container\r\n                                direction=\"row\"\r\n                                justify=\"center\"\r\n                                alignItems=\"center\" >\r\n                                <Grid item>\r\n                                    <Button onClick={() => { changeLanguage('Ru') }}>\r\n                                        RU\r\n                                    </Button>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Button onClick={() => { changeLanguage('En') }}>\r\n                                        EN\r\n                                    </Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </div>\r\n            </div>\r\n        </MuiThemeProvider>\r\n    );\r\n};\r\n\r\nMainPage.propTypes = {\r\n    setCurrLangAction: PropTypes.func.isRequired,\r\n    setTheme: PropTypes.func.isRequired,\r\n    setSnackbar: PropTypes.func.isRequired,\r\n    lang: PropTypes.object.isRequired,\r\n    themeMode: PropTypes.object.isRequired,\r\n    auth: PropTypes.object.isRequired,\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        lang: store.lang,\r\n        themeMode: store.themeMode,\r\n        auth: store.auth,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setCurrLangAction: currLangState => dispatch(setCurrLang(currLangState)),\r\n        setTheme: palette => dispatch(setTheme(palette)),\r\n        setSnackbar: snackbar => dispatch(setSnackbar(snackbar)),\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(MainPage);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport jwt_decode from \"jwt-decode\";\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { GET_ERRORS, SET_CURRENT_USER, SET_SNACKBAR_MODE } from \"../actions/types\";\r\nimport { setCurrLang, setUserState, setSnackbar } from '../actions/Actions';\r\nimport { useStyles } from '../styles/Styles';\r\nimport setAuthToken from \"../utils/setAuthToken\";\r\nimport { instance } from './Config';\r\n\r\nimport RuDict from '../dictionary/ru';\r\nimport EnDict from '../dictionary/en';\r\n\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\r\nimport Visibility from '@material-ui/icons/Visibility';\r\n\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\n\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\n\r\nimport { mdiVk } from '@mdi/js';\r\nimport Icon from '@mdi/react';\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nfunction Sign(props) {\r\n    const classes = useStyles();\r\n    const { history, themeMode, lang, setUserState, setSnackbar, setCurrLang } = props;\r\n    const muiTheme = createMuiTheme(themeMode);\r\n    const [loginData, setLoginData] = React.useState({\r\n        email: '',\r\n        password: '',\r\n    });\r\n    const [registData, setRegistData] = React.useState({\r\n        email: '',\r\n        nickname: '',\r\n        password: '',\r\n        password2: '',\r\n    });\r\n    const [regFieldErrors, setRegFieldErrors] = React.useState({\r\n        emailErr: false,\r\n        emailErrText: '',\r\n        nicknameErr: false,\r\n        nicknameErrText: '',\r\n        passwordErr: false,\r\n        passwordErrText: '',\r\n        password2Err: false,\r\n        password2ErrText: '',\r\n    });\r\n    const [isLoading, setIsLoading] = React.useState(false);\r\n    const [showPassword, setShowPassword] = React.useState(false);\r\n    const [openLogin, setOpenLogin] = React.useState(false);\r\n    const [openRegist, setOpenRegist] = React.useState(false);\r\n    const [page, setPage] = React.useState({\r\n        mainPage: true,\r\n        aboutPage: false,\r\n    });\r\n\r\n    const handleMouseDownPassword = event => {\r\n        event.preventDefault();\r\n    };\r\n    const changeAuthLogin = (e) => {\r\n        let newLoginData = loginData;\r\n        newLoginData = { ...newLoginData, email: e.target.value };\r\n        setLoginData(newLoginData);\r\n    };\r\n    const changeAuthPassword = (e) => {\r\n        let newLoginData = loginData;\r\n        newLoginData = { ...newLoginData, password: e.target.value };\r\n        setLoginData(newLoginData);\r\n    };\r\n    const changeRegistLogin = (e) => {\r\n        let newRegFieldErrors = regFieldErrors;\r\n        newRegFieldErrors = { ...newRegFieldErrors, emailErr: false };\r\n        newRegFieldErrors = { ...newRegFieldErrors, emailErrText: '' };\r\n        setRegFieldErrors(newRegFieldErrors);\r\n\r\n        let newRegistData = registData;\r\n        newRegistData = { ...newRegistData, email: e.target.value };\r\n        setRegistData(newRegistData);\r\n    };\r\n    const changeRegistNickname = (e) => {\r\n        let newRegFieldErrors = regFieldErrors;\r\n        newRegFieldErrors = { ...newRegFieldErrors, nicknameErr: false };\r\n        newRegFieldErrors = { ...newRegFieldErrors, nicknameErrText: '' };\r\n        setRegFieldErrors(newRegFieldErrors);\r\n\r\n        let newRegistData = registData;\r\n        newRegistData = { ...newRegistData, nickname: e.target.value };\r\n        setRegistData(newRegistData);\r\n    };\r\n    const changeRegistPassword = (e) => {\r\n        let newRegFieldErrors = regFieldErrors;\r\n        newRegFieldErrors = { ...newRegFieldErrors, passwordErr: false };\r\n        newRegFieldErrors = { ...newRegFieldErrors, passwordErrText: '' };\r\n        newRegFieldErrors = { ...newRegFieldErrors, password2Err: false };\r\n        newRegFieldErrors = { ...newRegFieldErrors, password2ErrText: '' };\r\n        setRegFieldErrors(newRegFieldErrors);\r\n\r\n        let newRegistData = registData;\r\n        newRegistData = { ...newRegistData, password: e.target.value };\r\n        setRegistData(newRegistData);\r\n    };\r\n    const changeRegistPassword2 = (e) => {\r\n        let newRegFieldErrors = regFieldErrors;\r\n        newRegFieldErrors = { ...newRegFieldErrors, passwordErr: false };\r\n        newRegFieldErrors = { ...newRegFieldErrors, passwordErrText: '' };\r\n        newRegFieldErrors = { ...newRegFieldErrors, password2Err: false };\r\n        newRegFieldErrors = { ...newRegFieldErrors, password2ErrText: '' };\r\n        setRegFieldErrors(newRegFieldErrors);\r\n        let newRegistData = registData;\r\n        newRegistData = { ...newRegistData, password2: e.target.value };\r\n        setRegistData(newRegistData);\r\n    };\r\n    const singIn = () => {\r\n        instance\r\n            .post(\"/actions/users/login\", loginData)\r\n            .then(res => {\r\n                const { token } = res.data;\r\n                localStorage.setItem(\"jwtToken\", token);\r\n                setAuthToken(token);\r\n                const decoded = jwt_decode(token);\r\n                setUserState({\r\n                    type: SET_CURRENT_USER,\r\n                    payload: decoded\r\n                });\r\n                setIsLoading(false);\r\n                history.push(\"/luciddreams\");\r\n            })\r\n            .catch(err => {\r\n                //console.log(err);\r\n                let errorMessage = '';\r\n                if (err.response.data.email === 'UserNotExist') {\r\n                    errorMessage = lang.currLang.errors.UserNotExist;\r\n                }\r\n                if (err.response.data.email === 'EmailIsNotValid') {\r\n                    errorMessage = lang.currLang.errors.EmailIsNotValid;\r\n                }\r\n                if (err.response.data.passwordincorrect === 'IncorrectPassword') {\r\n                    errorMessage = lang.currLang.errors.IncorrectPassword;\r\n                }\r\n                setSnackbar({\r\n                    type: SET_SNACKBAR_MODE,\r\n                    snackbar: {\r\n                        open: true,\r\n                        variant: 'error',\r\n                        message: errorMessage,\r\n                    },\r\n                });\r\n                setIsLoading(false);\r\n            });\r\n    };\r\n    const singUp = () => {\r\n        let isErr = false;\r\n        let newRegFieldErrors = regFieldErrors;\r\n        if (registData.email.length === 0) {\r\n            newRegFieldErrors = { ...newRegFieldErrors, emailErr: true };\r\n            newRegFieldErrors = { ...newRegFieldErrors, emailErrText: lang.currLang.errors.emailLenght };\r\n            isErr = true;\r\n        }\r\n        if (registData.nickname.length === 0) {\r\n            newRegFieldErrors = { ...newRegFieldErrors, nicknameErr: true };\r\n            newRegFieldErrors = { ...newRegFieldErrors, nicknameErrText: lang.currLang.errors.nicknameLenght };\r\n            isErr = true;\r\n        }\r\n        if (registData.password.length === 0) {\r\n            newRegFieldErrors = { ...newRegFieldErrors, passwordErr: true };\r\n            newRegFieldErrors = { ...newRegFieldErrors, passwordErrText: lang.currLang.errors.passwordLenght };\r\n            isErr = true;\r\n        }\r\n        if (registData.password2.length === 0) {\r\n            newRegFieldErrors = { ...newRegFieldErrors, password2Err: true };\r\n            newRegFieldErrors = { ...newRegFieldErrors, password2ErrText: lang.currLang.errors.password2Lenght };\r\n            isErr = true;\r\n        }\r\n        if (registData.password !== registData.password2) {\r\n            newRegFieldErrors = { ...newRegFieldErrors, passwordErr: true };\r\n            newRegFieldErrors = { ...newRegFieldErrors, passwordErrText: lang.currLang.errors.passwordsCompare };\r\n            newRegFieldErrors = { ...newRegFieldErrors, password2Err: true };\r\n            newRegFieldErrors = { ...newRegFieldErrors, password2ErrText: lang.currLang.errors.passwordsCompare };\r\n            isErr = true;\r\n        }\r\n        if (isErr) {\r\n            setRegFieldErrors(newRegFieldErrors);\r\n            setIsLoading(false);\r\n        }\r\n        else {\r\n            instance\r\n                .post('/actions/users/register', registData)\r\n                .then(res => {\r\n                    setSnackbar({\r\n                        type: SET_SNACKBAR_MODE,\r\n                        snackbar: {\r\n                            open: true,\r\n                            variant: 'success',\r\n                            message: lang.currLang.texts.sucessRegistration,\r\n                        },\r\n                    });\r\n                    let newRegistData = registData;\r\n                    newRegistData = { ...newRegistData, email: '' };\r\n                    newRegistData = { ...newRegistData, nickname: '' };\r\n                    newRegistData = { ...newRegistData, password: '' };\r\n                    newRegistData = { ...newRegistData, password2: '' };\r\n                    setRegistData(newRegistData);\r\n                    click('closeRegist');\r\n                    click('openLogin');\r\n                    setIsLoading(false);\r\n                })\r\n                .catch(err => {\r\n                    let errorMessage = '';\r\n                    setUserState({\r\n                        type: GET_ERRORS,\r\n                        payload: err.response.data\r\n                    });\r\n                    if (err.response.data.email === 'EmailIsBusy') {\r\n                        errorMessage = lang.currLang.errors.EmailIsBusy;\r\n                    }\r\n                    if (err.response.data.password === 'PasswordLenght5Symbols') {\r\n                        errorMessage = lang.currLang.errors.PasswordLenght5Symbols;\r\n                    }\r\n                    setSnackbar({\r\n                        type: SET_SNACKBAR_MODE,\r\n                        snackbar: {\r\n                            open: true,\r\n                            variant: 'error',\r\n                            message: errorMessage,\r\n                        },\r\n                    });\r\n                    setIsLoading(false);\r\n                });\r\n        }\r\n    };\r\n    const click = (action) => {\r\n        let newPages = page;\r\n        switch (action) {\r\n            case 'useVk':\r\n                // window.VK.Auth.login(checkLoginState, 4194304);\r\n                // let loadItems = async () => {\r\n                //     const response = await fetch('http://10.203.117.137:3001/auth/vk', {\r\n                //         method: 'GET',\r\n                //         credentials: 'include',\r\n                //     });\r\n                //     const body = await response.json();\r\n\r\n                //     console.log(response);\r\n                // }\r\n                break;\r\n            case 'openLogin':\r\n                setOpenLogin(true);\r\n                break;\r\n            case 'openRegist':\r\n                setOpenRegist(true);\r\n                break;\r\n            case 'closeLogin':\r\n                setOpenLogin(false);\r\n                setShowPassword(false);\r\n                break;\r\n            case 'closeRegist':\r\n                setOpenRegist(false);\r\n                setShowPassword(false);\r\n                break;\r\n            case 'signIn':\r\n                setIsLoading(true);\r\n                singIn();\r\n                break;\r\n            case 'signUp':\r\n                setIsLoading(true);\r\n                singUp();\r\n                break;\r\n            case 'openAboutPage':\r\n                newPages = { ...newPages, aboutPage: true };\r\n                newPages = { ...newPages, mainPage: false };\r\n                setPage(newPages);\r\n                break;\r\n            case 'closeAboutPage':\r\n                newPages = { ...newPages, aboutPage: false };\r\n                newPages = { ...newPages, mainPage: true };\r\n                setPage(newPages);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    };\r\n    const changeLanguage = (language) => {\r\n        if (language === 'Ru') {\r\n            setCurrLang(RuDict);\r\n        }\r\n        else {\r\n            setCurrLang(EnDict);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <MuiThemeProvider theme={muiTheme}>\r\n            <CssBaseline />\r\n\r\n            <div className={classes.root} id='rootDiv'>\r\n\r\n                <div className={classes.mainPage}\r\n                    style={\r\n                        page.mainPage === true\r\n                            ? { transform: 'translateY(0%)' }\r\n                            : { transform: 'translateY(-100%)' }\r\n                    } >\r\n                    <Grid className={classes.mainGridContainer}\r\n                        container\r\n                        direction=\"column\"\r\n                        justify=\"center\"\r\n                        alignItems=\"stretch\"\r\n                    >\r\n                        <Grid item xs={11} className={classes.mainGridBodyItem} >\r\n                            <Grid className={classes.menuButtonContainer}\r\n                                container\r\n                                direction=\"column\"\r\n                                justify=\"center\"\r\n                                alignItems=\"stretch\" >\r\n                                <Grid item xs={3} />\r\n                                <Grid item xs={6} className={classes.menuButtonContainerItem}>\r\n                                    <Dialog\r\n                                        open={openLogin}\r\n                                        TransitionComponent={Transition}\r\n                                        keepMounted\r\n                                        aria-labelledby=\"alert-dialog-slide-title\"\r\n                                        aria-describedby=\"alert-dialog-slide-description\"\r\n                                    >\r\n                                        <DialogTitle id=\"alert-dialog-slide-title\">\r\n                                            {lang.currLang.buttons.signIn}\r\n                                        </DialogTitle>\r\n                                        <DialogContent>\r\n                                            <Grid item xs={12} className={classes.menuButtonContainerItem}>\r\n                                                <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                                    <TextField\r\n                                                        className={classes.textField}\r\n                                                        id=\"email-field\"\r\n                                                        type=\"email\"\r\n                                                        label=\"Email\"\r\n                                                        onBlur={(e) => { changeAuthLogin(e) }} />\r\n                                                </Grid>\r\n                                                <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                                    <TextField\r\n                                                        id=\"password-field\"\r\n                                                        className={classes.textField}\r\n                                                        type={showPassword ? 'text' : 'password'}\r\n                                                        label={lang.currLang.texts.password}\r\n                                                        onBlur={(e) => { changeAuthPassword(e) }}\r\n                                                        InputProps={{\r\n                                                            endAdornment: (\r\n                                                                <InputAdornment position=\"end\">\r\n                                                                    <IconButton\r\n                                                                        tabIndex=\"-1\"\r\n                                                                        edge=\"end\"\r\n                                                                        aria-label=\"toggle password visibility\"\r\n                                                                        onClick={() => { showPassword ? setShowPassword(false) : setShowPassword(true) }}\r\n                                                                        onMouseDown={handleMouseDownPassword} >\r\n                                                                        {showPassword ? <VisibilityOff /> : <Visibility />}\r\n                                                                    </IconButton>\r\n                                                                </InputAdornment>\r\n                                                            ),\r\n                                                        }} />\r\n                                                </Grid>\r\n                                                <Grid item xs={2} className={classes.menuDivButton}\r\n                                                    align=\"center\"\r\n                                                >\r\n                                                    <Typography>\r\n                                                        {lang.currLang.texts.or}\r\n                                                    </Typography>\r\n                                                </Grid>\r\n                                                <Grid item xs={2} className={classes.menuDivButton}\r\n                                                    align=\"center\"\r\n                                                >\r\n                                                    <IconButton className={classes.button}\r\n                                                        onClick={() => { click('useVk') }}\r\n                                                        disabled={isLoading}>\r\n                                                        <Icon path={mdiVk} size={2} color={themeMode.palette.type === 'light' ? 'rgba(0, 0, 0, 0.54)' : 'rgba(255, 255, 255, 1)'} />\r\n                                                    </IconButton>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                            {isLoading\r\n                                                ? <LinearProgress /> :\r\n                                                ''}\r\n                                        </DialogContent>\r\n                                        {!isLoading\r\n                                            ?\r\n                                            <DialogActions>\r\n                                                <Button onClick={() => { click('closeLogin') }}\r\n                                                    color=\"secondary\"\r\n                                                    disabled={isLoading}>\r\n                                                    {lang.currLang.buttons.cancel}\r\n                                                </Button>\r\n                                                <Button onClick={() => { click('signIn') }}\r\n                                                    color=\"primary\"\r\n                                                    disabled={isLoading}>\r\n                                                    {lang.currLang.buttons.signIn}\r\n                                                </Button>\r\n                                            </DialogActions>\r\n                                            : ''}\r\n                                    </Dialog>\r\n                                    <Dialog\r\n                                        open={openRegist}\r\n                                        TransitionComponent={Transition}\r\n                                        keepMounted\r\n                                        aria-labelledby=\"alert-dialog-slide-title\"\r\n                                        aria-describedby=\"alert-dialog-slide-description\"\r\n                                    >\r\n                                        <DialogTitle id=\"alert-dialog-slide-title\">\r\n                                            {lang.currLang.buttons.signUp}\r\n                                        </DialogTitle>\r\n                                        <DialogContent>\r\n                                            <Grid item xs={12} className={classes.menuButtonContainerItem}>\r\n                                                <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                                    <TextField\r\n                                                        error={regFieldErrors.emailErr}\r\n                                                        helperText={regFieldErrors.emailErrText}\r\n                                                        className={classes.textField}\r\n                                                        id=\"reg-email-field\"\r\n                                                        type=\"email\"\r\n                                                        label=\"Email\"\r\n                                                        onBlur={(e) => { changeRegistLogin(e) }} />\r\n                                                </Grid>\r\n                                                <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                                    <TextField\r\n                                                        error={regFieldErrors.nicknameErr}\r\n                                                        helperText={regFieldErrors.nicknameErrText}\r\n                                                        className={classes.textField}\r\n                                                        id=\"reg-nickname-field\"\r\n                                                        type=\"text\"\r\n                                                        label={lang.currLang.texts.nickname}\r\n                                                        onBlur={(e) => { changeRegistNickname(e) }} />\r\n                                                </Grid>\r\n                                                <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                                    <TextField\r\n                                                        error={regFieldErrors.passwordErr}\r\n                                                        helperText={regFieldErrors.passwordErrText}\r\n                                                        id=\"reg-password-field\"\r\n                                                        className={classes.textField}\r\n                                                        type={showPassword ? 'text' : 'password'}\r\n                                                        label={lang.currLang.texts.password}\r\n                                                        onBlur={(e) => { changeRegistPassword(e) }}\r\n                                                        InputProps={{\r\n                                                            endAdornment: (\r\n                                                                <InputAdornment position=\"end\">\r\n                                                                    <IconButton\r\n                                                                        tabIndex=\"-1\"\r\n                                                                        edge=\"end\"\r\n                                                                        aria-label=\"toggle password visibility\"\r\n                                                                        onClick={() => { showPassword ? setShowPassword(false) : setShowPassword(true) }}\r\n                                                                        onMouseDown={handleMouseDownPassword} >\r\n                                                                        {showPassword ? <VisibilityOff /> : <Visibility />}\r\n                                                                    </IconButton>\r\n                                                                </InputAdornment>\r\n                                                            ),\r\n                                                        }} />\r\n                                                </Grid>\r\n                                                <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                                    <TextField\r\n                                                        error={regFieldErrors.password2Err}\r\n                                                        helperText={regFieldErrors.password2ErrText}\r\n                                                        id=\"reg-password2-field\"\r\n                                                        className={classes.textField}\r\n                                                        type={showPassword ? 'text' : 'password'}\r\n                                                        label={lang.currLang.texts.passwordAgain}\r\n                                                        onBlur={(e) => { changeRegistPassword2(e) }}\r\n                                                        InputProps={{\r\n                                                            endAdornment: (\r\n                                                                <InputAdornment position=\"end\">\r\n                                                                    <IconButton\r\n                                                                        tabIndex=\"-1\"\r\n                                                                        edge=\"end\"\r\n                                                                        aria-label=\"toggle password visibility\"\r\n                                                                        onClick={() => { showPassword ? setShowPassword(false) : setShowPassword(true) }}\r\n                                                                        onMouseDown={handleMouseDownPassword} >\r\n                                                                        {showPassword ? <VisibilityOff /> : <Visibility />}\r\n                                                                    </IconButton>\r\n                                                                </InputAdornment>\r\n                                                            ),\r\n                                                        }} />\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                            {isLoading\r\n                                                ? <LinearProgress />\r\n                                                : ''}\r\n\r\n                                        </DialogContent>\r\n                                        {!isLoading\r\n                                            ?\r\n                                            <DialogActions>\r\n                                                <Button onClick={() => { click('closeRegist') }}\r\n                                                    color=\"secondary\"\r\n                                                    disabled={isLoading}>\r\n                                                    {lang.currLang.buttons.cancel}\r\n                                                </Button>\r\n                                                <Button onClick={() => { click('signUp') }}\r\n                                                    color=\"primary\"\r\n                                                    disabled={isLoading}>\r\n                                                    {lang.currLang.buttons.signUp}\r\n                                                </Button>\r\n                                            </DialogActions>\r\n                                            : ''}\r\n                                    </Dialog>\r\n                                    <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                        <Button variant=\"contained\" color=\"primary\" className={classes.menuButton} onClick={() => { click('openLogin') }}>\r\n                                            {lang.currLang.buttons.signIn}\r\n                                        </Button>\r\n                                    </Grid>\r\n                                    <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                        <Button variant=\"contained\" color=\"primary\" className={classes.menuButton} onClick={() => { click('openRegist') }}>\r\n                                            {lang.currLang.buttons.signUp}\r\n                                        </Button>\r\n                                    </Grid>\r\n                                    <Grid item xs={2} className={classes.menuDivButton} align=\"center\" />\r\n                                    <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                        <Button variant=\"contained\"\r\n                                            color=\"primary\"\r\n                                            className={classes.menuButton}\r\n                                            onClick={() => (click('openAboutPage'))} >\r\n                                            {lang.currLang.buttons.about}\r\n                                        </Button>\r\n                                    </Grid>\r\n                                </Grid>\r\n                                <Grid item xs={3} />\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item xs={1} className={classes.mainGridFooterItem} >\r\n                            <Grid className={classes.menuButtonContainerFooterLanguageButtons}\r\n                                container\r\n                                direction=\"row\"\r\n                                justify=\"center\"\r\n                                alignItems=\"center\" >\r\n                                <Grid item>\r\n                                    <Button onClick={() => { changeLanguage('Ru') }}>\r\n                                        RU\r\n                                    </Button>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Button onClick={() => { changeLanguage('En') }}>\r\n                                        EN\r\n                                    </Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </div >\r\n\r\n                <div className={classes.aboutPage}\r\n                    style={page.aboutPage === true\r\n                        ? { transform: 'translateY(-100%)' }\r\n                        : { transform: 'translateY(0%)' }\r\n                    }\r\n                >\r\n                    <Grid className={classes.aboutGridContainer}\r\n                        container\r\n                        direction=\"column\"\r\n                        justify=\"center\"\r\n                        alignItems=\"stretch\"\r\n                        spacing={5} >\r\n                        <Grid item\r\n                            className={classes.aboutGridItem}\r\n                            align='center'>\r\n                            <Paper className={classes.aboutPaper}>\r\n                                <Typography>\r\n                                    {lang.currLang.texts.about}\r\n                                </Typography>\r\n                            </Paper>\r\n                        </Grid>\r\n                        <Grid item\r\n                            className={classes.aboutGridItem}\r\n                            align='center'>\r\n                            <Button variant=\"contained\"\r\n                                color=\"primary\"\r\n                                className={classes.menuButton}\r\n                                onClick={() => (click('closeAboutPage'))} >\r\n                                {lang.currLang.buttons.close}\r\n                            </Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                </div>\r\n            </div >\r\n        </MuiThemeProvider>\r\n    )\r\n}\r\n\r\nSign.propTypes = {\r\n    setCurrLang: PropTypes.func.isRequired,\r\n    setUserState: PropTypes.func.isRequired,\r\n    setSnackbar: PropTypes.func.isRequired,\r\n    themeMode: PropTypes.object.isRequired,\r\n    lang: PropTypes.object.isRequired,\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        themeMode: store.themeMode,\r\n        lang: store.lang,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setCurrLang: currLangState => dispatch(setCurrLang(currLangState)),\r\n        setUserState: State => dispatch(setUserState(State)),\r\n        setSnackbar: snackbar => dispatch(setSnackbar(snackbar)),\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Sign);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Container from '@material-ui/core/Container';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport Button from '@material-ui/core/Button';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport List from '@material-ui/core/List';\r\n\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\n\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\n\r\nimport { useStyles } from '../styles/Styles';\r\nimport { instance } from './Config';\r\n\r\nfunction Technics(props) {\r\n    const { lang, themeMode, history, auth } = props;\r\n    const muiTheme = createMuiTheme(themeMode);\r\n    const classes = useStyles();\r\n\r\n    const [isLoading, setIsLoading] = React.useState(true);\r\n    const [technics, setTechnics] = React.useState([]);\r\n\r\n    const loadTechnics = React.useCallback(() => {\r\n        setIsLoading(true);\r\n        instance.get(\"/gettechnics\")\r\n            .then(res => {\r\n                setTechnics(res.data);\r\n                setIsLoading(false);\r\n            })\r\n            .catch(err => {\r\n                setIsLoading(false);\r\n            });\r\n    }, []);\r\n\r\n    React.useEffect(() => {\r\n        loadTechnics();\r\n    }, [loadTechnics]);\r\n\r\n    return (\r\n        <MuiThemeProvider theme={muiTheme}>\r\n            <CssBaseline />\r\n            <div className={classes.root}>\r\n                <Grid className={classes.mainGridContainer}\r\n                    container\r\n                    direction=\"column\"\r\n                    justify=\"center\"\r\n                    alignItems=\"stretch\"\r\n                >\r\n                    <Grid item xs={11} zeroMinWidth className={classes.mainGridDreamsBodyItem}>\r\n                        {isLoading\r\n                            ? <div className={classes.centerCircularProgress}>\r\n                                <CircularProgress disableShrink />\r\n                            </div>\r\n                            : <Container className={classes.mainGridDreamsBodyItemContainer}>\r\n                                <Paper className={classes.mainGridDreamsBodyItemContainerPaper}>\r\n                                    <List component=\"nav\">\r\n                                        {technics.map((item, key) => (\r\n                                            <ListItem key={key}\r\n                                                button\r\n                                                onClick={() => { alert(item.id) }}\r\n                                            >\r\n                                                <ListItemText primary={\r\n                                                    lang.currLang.current === \"Ru\"\r\n                                                        ? item.name_rus\r\n                                                        : item.name_eng\r\n                                                } />\r\n                                            </ListItem>\r\n                                        ))}\r\n                                    </List>\r\n                                </Paper>\r\n                            </Container>\r\n                        }\r\n                    </Grid>\r\n                    <Grid item xs={1} zeroMinWidth className={classes.mainGridBodyItem}>\r\n                        <Grid container\r\n                            direction=\"row\"\r\n                            justify=\"space-evenly\"\r\n                            alignItems=\"center\"\r\n                            spacing={1}\r\n                        >\r\n                            <Grid item xs={6} align=\"center\">\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    color=\"secondary\"\r\n                                    className={classes.actionButton}\r\n                                    onClick={() => { history.push(\"/luciddreams\") }}\r\n                                >\r\n                                    {lang.currLang.buttons.close}\r\n                                </Button>\r\n                            </Grid>\r\n                            {auth.user.roles < 2 //0 - admin; 1 - moderator\r\n                                ? <Grid item xs={6}>\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        color=\"primary\"\r\n                                        className={classes.actionButton}\r\n                                        onClick={() => {\r\n                                            alert('У тебя есть права, ты можешь добавлять')\r\n                                            //history.push(\"/luciddreams\")\r\n                                        }}\r\n                                    >\r\n                                        {lang.currLang.buttons.add}\r\n                                    </Button>\r\n                                </Grid>\r\n                                : <Grid item xs={6} />\r\n                            }\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </MuiThemeProvider >\r\n    );\r\n}\r\n\r\nTechnics.propTypes = {\r\n    themeMode: PropTypes.object.isRequired,\r\n    lang: PropTypes.object.isRequired,\r\n    auth: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        themeMode: store.themeMode,\r\n        lang: store.lang,\r\n        auth: store.auth,\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Technics);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport { Route, Switch } from \"react-router-dom\";\r\n\r\nimport { SET_SNACKBAR_MODE } from \"./actions/types\";\r\nimport { setSnackbar } from './actions/Actions';\r\n\r\nimport PrivateRoute from \"./components/PrivateRoute\";\r\n\r\nimport AddDream from './components/AddDream';\r\nimport AddCDream from './components/AddCDream';\r\nimport ViewDreams from './components/ViewDreams';\r\nimport MainPage from \"./components/MainPage\";\r\nimport Sign from './components/Sign';\r\nimport Technics from './components/Technics';\r\n\r\nimport { useStyles, variantIcon } from './styles/Styles';\r\n\r\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { amber, green } from '@material-ui/core/colors';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nconst useStyles1 = makeStyles(theme => ({\r\n    success: {\r\n        backgroundColor: green[600],\r\n    },\r\n    error: {\r\n        backgroundColor: theme.palette.error.dark,\r\n    },\r\n    info: {\r\n        backgroundColor: theme.palette.primary.main,\r\n    },\r\n    warning: {\r\n        backgroundColor: amber[700],\r\n    },\r\n    icon: {\r\n        fontSize: 20,\r\n    },\r\n    iconVariant: {\r\n        opacity: 0.9,\r\n        marginRight: theme.spacing(1),\r\n    },\r\n    message: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n    },\r\n}));\r\n\r\nfunction MySnackbarContentWrapper(props) {\r\n    const classes = useStyles1();\r\n    const { className, message, onClose, variant } = props;\r\n    const Icon = variantIcon[variant];\r\n    return (\r\n        <SnackbarContent\r\n            className={clsx(classes[variant], className)}\r\n            aria-describedby=\"client-snackbar\"\r\n            message={\r\n                <span id=\"client-snackbar\" className={classes.message}>\r\n                    <Icon className={clsx(classes.icon, classes.iconVariant)} />\r\n                    <Typography className={classes.mainGridContainer}\r\n                        align='center'\r\n                        variant='body2'>\r\n                        {message}\r\n                    </Typography>\r\n                </span>\r\n            }\r\n            action={[\r\n                <IconButton key=\"close\"\r\n                    aria-label=\"close\"\r\n                    color=\"inherit\"\r\n                    onClick={onClose}\r\n                >\r\n                    <CloseIcon className={classes.icon} />\r\n                </IconButton>,\r\n            ]}\r\n        />\r\n    );\r\n}\r\n\r\nfunction Routes(props) {\r\n    const classes = useStyles();\r\n    const { open, variant, message } = props;\r\n    const [openSnackbar, setOpenSnackbar] = React.useState(false);\r\n    const [openSnackbarVariant, setOpenSnackbarVariant] = React.useState('');\r\n    const [snackbarMessage, setSnackbarMessage] = React.useState('');\r\n\r\n    const handleCloseSnackbar = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setOpenSnackbar(false);\r\n        props.setSnackbar({\r\n            type: SET_SNACKBAR_MODE,\r\n            snackbar: {\r\n                open: false,\r\n                variant: openSnackbarVariant,\r\n                message: snackbarMessage,\r\n            },\r\n        });\r\n    };\r\n    React.useEffect(() => {\r\n        setOpenSnackbarVariant(variant);\r\n        setSnackbarMessage(message);\r\n        setOpenSnackbar(open);\r\n    }, [open, variant, message]);\r\n\r\n    return (\r\n        <div>\r\n            <Snackbar\r\n                open={openSnackbar}\r\n                onClose={handleCloseSnackbar}\r\n                autoHideDuration={3000}>\r\n                <MySnackbarContentWrapper\r\n                    className={classes.margin}\r\n                    onClose={handleCloseSnackbar}\r\n                    variant={openSnackbarVariant}\r\n                    message={snackbarMessage}\r\n                />\r\n            </Snackbar>\r\n            <Route exact path=\"/\" component={Sign} />\r\n            <Switch>\r\n                <PrivateRoute exact path=\"/luciddreams\" component={MainPage} />\r\n                <PrivateRoute exact path=\"/dreams\" component={ViewDreams} />\r\n                <PrivateRoute exact path=\"/addregulardream\" component={AddDream} />\r\n                <PrivateRoute exact path=\"/addcdream\" component={AddCDream} />\r\n                <PrivateRoute exact path=\"/technics\" component={Technics} />\r\n            </Switch>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nRoutes.propTypes = {\r\n    open: PropTypes.bool.isRequired,\r\n    variant: PropTypes.string.isRequired,\r\n    message: PropTypes.string.isRequired,\r\n    setSnackbar: PropTypes.func.isRequired,\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        open: store.snackbar.snackbar.open,\r\n        variant: store.snackbar.snackbar.variant,\r\n        message: store.snackbar.snackbar.message,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setSnackbar: snackbar => dispatch(setSnackbar(snackbar)),\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Routes);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { Router } from \"react-router-dom\";\r\nimport './App.css';\r\n\r\nimport history from '../history';\r\nimport { store } from \"../store\";\r\nimport { CheckTimeOut } from '../utils/CheckLoginTimeOut';\r\nimport setAuthToken from \"../utils/setAuthToken\";\r\nimport { SET_CURRENT_USER, SET_THEME_MODE } from \"../actions/types\";\r\n\r\nimport Routes from '../Routes';\r\n\r\nimport { useStyles, params, randomBetween } from '../styles/Styles';\r\n\r\nlet check = CheckTimeOut();\r\nlet stars = [];\r\nlet clouds = [];\r\n\r\nif (!check) {\r\n    localStorage.removeItem(\"jwtToken\");\r\n    setAuthToken(false);\r\n    store.dispatch({\r\n        type: SET_CURRENT_USER,\r\n        payload: null\r\n    });\r\n    history.push(\"/\");\r\n}\r\nelse {\r\n    history.push(\"/luciddreams\");\r\n}\r\n\r\nif (new Date().getHours() >= 16 || (new Date().getHours() >= 0 && new Date().getHours() < 6)) {\r\n    store.dispatch({\r\n        type: SET_THEME_MODE,\r\n        palette: {\r\n            type: \"dark\",\r\n            primary: { main: \"#f9a825\" },\r\n            secondary: { main: \"#f50057\" },\r\n            error: { main: \"#cc0000\" },\r\n        }\r\n    });\r\n}\r\nelse {\r\n    store.dispatch({\r\n        type: SET_THEME_MODE,\r\n        palette: {\r\n            type: \"light\",\r\n            primary: { main: \"#3f51b5\" },\r\n            secondary: { main: \"#f50057\" },\r\n            error: { main: \"#cc0000\" },\r\n        }\r\n    });\r\n}\r\n\r\nfunction App(props) {\r\n    const { type } = props;\r\n    const classes = useStyles();\r\n    stars = [];\r\n    clouds = [];\r\n    for (let i = 0; i < params.amountStars; i++) {\r\n        let size = Math.round(Math.random() * 10) === 0\r\n            ? params.size.giant\r\n            : randomBetween(params.size.min, params.size.max);\r\n        stars.push(\r\n            <div\r\n                className={classes.AppStar}\r\n                key={i + 'AppStar'}\r\n                style={{\r\n                    left: randomBetween(0, 100) + \"%\",\r\n                    top: randomBetween(0, 100) + \"%\",\r\n                    width: size + \"px\",\r\n                    height: size + \"px\",\r\n                    boxShadow: \"0 0 \" + size + \"px \" + size / 2 + \"px #043668\",\r\n                    animationDuration: randomBetween(params.duration.min, params.duration.max) + \"s\",\r\n                }}\r\n            />\r\n        );\r\n    }\r\n\r\n    for (let i = 0; i < params.amountClouds; i++) {\r\n        let left = Math.round(Math.random() * 50 + 90);\r\n        let top = Math.round(Math.random() * 100 / 100 * 90);\r\n        let scale = Math.random() * 1.5 - 0.5;\r\n        let opacity = Math.random() * 90 / 100;\r\n        let speed = Math.random() * 30 + 15;\r\n        clouds.push(\r\n            <div className={classes.AppCloud}\r\n                key={i + 'AppCloud'}\r\n                style={{\r\n                    left: left + '%',\r\n                    top: top + '%',\r\n                    width: '400px',\r\n                    height: '100px',\r\n                    transform: 'scale(' + scale + ')',\r\n                    opacity: opacity,\r\n                    animationDuration: speed + 's',\r\n                }}\r\n            />\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Router history={history}>\r\n            <div className={classes.AppDivDark}>\r\n                <div className={classes.AppDivLight}\r\n                    style={type === \"light\"\r\n                        ? { opacity: 1, }\r\n                        : { opacity: 0, }}\r\n                />\r\n                {type === \"light\"\r\n                    ?\r\n                    <div className={classes.AppCloudsDiv}\r\n                        style={type === \"light\"\r\n                            ? { opacity: 1, }\r\n                            : { opacity: 0, }}\r\n                    >\r\n                        {clouds}\r\n                    </div>\r\n                    :\r\n                    <div className={classes.AppStarsDiv}\r\n                        style={type === \"light\"\r\n                            ? { opacity: 0, }\r\n                            : { opacity: 1, }}\r\n                    >\r\n                        {stars}\r\n                    </div>\r\n                }\r\n            </div>\r\n            <Routes />\r\n        </Router>\r\n    );\r\n};\r\n\r\nApp.propTypes = {\r\n    type: PropTypes.string.isRequired,\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        type: store.themeMode.palette.type,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(App);","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from \"./store\";\r\n\r\nReactDOM.render(\r\n    <div id='global'\r\n        style={{\r\n            overflow: 'auto',\r\n            height: '100%',\r\n            position: 'relative',\r\n        }}\r\n    >\r\n\r\n        <Provider store={store}>\r\n            <App />\r\n        </Provider>\r\n    </div>\r\n    , document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n\r\n"],"sourceRoot":""}