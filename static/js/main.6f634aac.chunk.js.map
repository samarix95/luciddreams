{"version":3,"sources":["img/map.png","img/sun.png","img/moon.png","img/astronaut.png","img/cloud.svg","history.js","actions/types.js","dictionary/en.js","reducers/currLang.js","reducers/cloud.js","reducers/star.js","reducers/themeMode.js","reducers/authReducer.js","reducers/errorReducer.js","reducers/snackbarReducer.js","reducers/index.js","store.js","utils/setAuthToken.js","utils/CheckLoginTimeOut.js","actions/Actions.js","components/PrivateRoute.js","components/Config.js","styles/Styles.js","components/muiltiple/MapCell.jsx","components/DreamMap.jsx","components/AddLocation.jsx","functions.js","components/AddDream.jsx","components/AddCDream.jsx","components/AddTechnics.jsx","components/muiltiple/DreamCard.jsx","components/ViewDreams.jsx","dictionary/ru.js","components/MainPage.jsx","components/Sign.js","components/muiltiple/TechnicCard.jsx","components/Technics.jsx","Routes.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","createBrowserHistory","GET_ERRORS","SET_CURRENT_USER","SET_CLOUD","CLEAR_CLOUD","SET_STAR","CLEAR_STAR","SET_LANG","SET_THEME_MODE","SET_SNACKBAR_MODE","words","current","buttons","signIn","signUp","dreamJoirnal","addDream","addCDream","techniques","adventures","close","about","cancel","add","Edit","Delete","Save","addTag","texts","or","nickname","password","passwordAgain","sucessRegistration","hello","changleLanguage","success","title","description","content","tags","dreams","technics","rating","Dream","Cdream","NoDreams","pickDate","pickTime","TapToShow","Public","Publish","Unpublish","PublicAlert","PublicText","PublicDescription","UnpublicAlert","UnpublicText","UnpublicDescription","DeleteAlert","DeleteText","Name","ChangeIcon","FindIcon","errors","emailLenght","nicknameLenght","passwordLenght","password2Lenght","passwordsCompare","UserNotExist","EmailIsNotValid","IncorrectPassword","EmailIsBusy","PasswordLenght5Symbols","NotLogin","EmptyName","EmptyTitle","EmptyDescription","EmptyDream","NoChanges","CantDeletePost","IconNotChange","ColorNotChange","initialState","currLang","EnDict","clouds","stars","palette","type","primary","main","secondary","error","isempty","require","isAuthenticated","user","loading","snackbar","open","variant","message","rootReducer","combineReducers","lang","state","action","currLangState","cloudState","starState","themeMode","auth","payload","middleware","thunk","store","createStore","applyMiddleware","setAuthToken","token","axios","defaults","headers","common","CheckTimeOut","localStorage","jwtToken","decoded","jwt_decode","dispatch","currentTime","Date","now","exp","setCurrLang","setSnackbar","connect","Component","component","rest","render","props","to","instance","create","baseURL","timeout","params","amountStars","amountClouds","size","min","max","giant","duration","variantIcon","CheckCircleIcon","warning","WarningIcon","ErrorIcon","info","InfoIcon","randomBetween","a","b","Math","random","useStyles","makeStyles","theme","formControl","position","left","top","transform","width","height","SwipeableViews","media","iconCenter","display","margin","dreamCardDiv","marginTop","marginBottom","borderRadius","divDreamsNotFoundImg","background","divDreamsNotFound","textAlign","contentPaper","backgroundColor","text","padding","pickerGridContainer","div85width","ratingGridContainer","pickers","avatarRoot","verySmallAvatar","spacing","smallAvatar","smallChip","centerCircularProgress","mainGridDreamsBodyItemContainer","paddingTop","boxSizing","maxHeight","overflow","mainGridDreamsBodyItemContainerPaper","opacity","hiddenOverflow","mainGridDreamsContainer","card","maxWidth","expand","marginLeft","transition","transitions","shortest","expandOpen","textField","root","flexGrow","window","innerHeight","mainPage","aboutPage","AppDivDark","zIndex","AppDivLight","AppStarsDiv","AppCloudsDiv","AppStar","filter","animation","AppCloud","backgroundRepeat","backgroundImage","CloudSvg","image","SkyDiv","MoonSrc","backgroundSize","MoonImg","SunSrc","SunImg","AstronautButton","AstronautDiv","AstronautImg","MapButton","MapDiv","MapImg","mainGridContainer","mainGridBodyItem","menuButtonContainer","menuDivButton","centerButton","menuButton","minWidth","actionButton","poppupButton","aboutGridContainer","fullMinWidth","inputDiv","inputScrollableDiv","noWrap","flexWrap","chip","aboutGridItem","paper","marginRight","height12","height11","height10","height9","height8","height7","height6","height5","height4","height3","height2","height1","height0","classes","i","j","cellHeight","cellWidth","id","locations","loadMap","history","React","useState","anchorEl","setAnchorEl","tagId","setTagId","disabledSave","Boolean","popoverId","undefined","style","length","className","onClick","event","currentTarget","find","loc","img_url","color","Skeleton","Popover","anchorOrigin","vertical","horizontal","transformOrigin","Grid","container","direction","justify","alignItems","item","xs","Typography","name_rus","name_eng","IconButton","push","pathname","defaultData","prevUrl","fontSize","FormControl","Select","value","onChange","target","MenuProps","PaperProps","map","key","MenuItem","Avatar","src","align","Button","disabled","newCell","oldLoc","newLoc","console","log","JSONtable","0","1","2","3","4","5","6","7","8","9","muiTheme","createMuiTheme","cellSize","setCellSize","setLocations","dreamMap","setDreamMap","get","then","res","data","catch","err","useEffect","CssBaseline","Container","borderCollapse","table","Object","keys","forEach","row","rows","col","createTable","Fab","Slider","newValue","isEditMode","setIsEditMode","setValue","setPrevUrl","isIconsLoading","setIsIconsLoading","locationIcons","setLocationIcons","searchName","setSearchName","nameEn","setNameEn","nameRu","setNameRu","selectedIcon","setSelectedIcon","iconColor","setIconColor","location","getIcon","post","icons","newArray","concat","name","Paper","Tabs","centered","indicatorColor","textColor","Tab","label","animateHeight","axis","index","onChangeIndex","role","TextField","required","e","onBlur","loadIconsList","postData","replace","CircularProgress","InputLabel","labelId","onChangeComplete","hex","errorMessage","chages","saveLocation","compare","obj1","obj2","every","hasOwnProperty","defaultTags","assign","overrides","MUIRichTextEditor","border","toolbar","justifyContent","minHeight","borderBottom","placeHolder","editor","editorContainer","isLoading","setIsLoading","titleText","setTitleText","selectedDate","setSelectedDate","contentText","setContentText","prevContentText","setPrevContentText","selectedLocations","setselectedLocations","handleDateChange","date","saveToLocalStorage","getItem","JSON","parse","setItem","stringify","loadFromLocalStorage","post_title","dream_date","post_content","Number","utils","DateFnsUtils","locale","ruLocale","format","KeyboardButtonProps","ampm","currCont","getCurrentContent","convert","convertToRaw","inlineToolbar","controls","customControls","icon","inlineStyle","Autocomplete","multiple","options","getOptionLabel","option","Chip","avatar","defaultValue","handleChangeLocations","filterSelectedOptions","renderInput","fullWidth","LinearProgress","removeItem","havErr","blocks","hasChanges","tagChanges","post_id","getTime","dreamDate","toLocaleString","timeZone","deleteTags","item1","some","item2","addTags","remove","create_user","post_type","savepost","defaultTechnics","selectedTechnics","setselectedTechnics","realisticsValue","setRealisticsValue","setTechnics","tech","handleChangeTechnics","Rating","techChanges","deleteTech","addTech","titleRu","titleEn","descriptionRu","descriptionEn","technicsData","setTechnicsData","fileldsErr","setFileldsErr","changeData","field","newTechnicsData","newFileldsErr","multiline","isError","save","is_public","expanded","setExpanded","openAlert","setOpenAlert","publicChecked","setPublicChecked","header","body","commit","alertTexts","setAlertTexts","dateOfDream","getDate","getMonth","getFullYear","getHours","getMinutes","slice","srcContent","toString","jsonPparse","convertfromraw","convertFromRaw","text_content","EditorState","createWithContent","getPlainText","closeMenu","clickMenu","newAlertTexts","checked","loadPosts","newPublic","Dialog","onClose","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","DialogActions","autoFocus","Menu","keepMounted","ListItemIcon","FormControlLabel","control","Checkbox","Card","raised","CardHeader","paddingBottom","Tooltip","disableFocusListener","disableTouchListener","subheader","aria-label","CardActions","disableSpacing","clsx","aria-expanded","Collapse","in","unmountOnExit","CardContent","technic","tag","readOnly","setDreams","useCallback","disableShrink","TransitionDown","Slide","setCurrLangAction","setTheme","prevLanguage","setPrevLanguage","openLangSnakbar","setOpenLangSnakbar","langSnakbarMessage","setLangSnakbarMessage","setTransition","changeLanguage","language","RuDict","handleCloseLangSnakbar","times_mode","Snackbar","TransitionComponent","SnackbarContent","newLang","newUserData","ButtonBase","focusRipple","alert","newPaletteType","primaryColor","secondaryColor","Transition","forwardRef","ref","setUserState","State","email","loginData","setLoginData","password2","registData","setRegistData","emailErr","emailErrText","nicknameErr","nicknameErrText","passwordErr","passwordErrText","password2Err","password2ErrText","regFieldErrors","setRegFieldErrors","showPassword","setShowPassword","openLogin","setOpenLogin","openRegist","setOpenRegist","page","setPage","handleMouseDownPassword","preventDefault","singUp","isErr","newRegFieldErrors","newRegistData","click","response","newPages","passwordincorrect","newLoginData","changeAuthLogin","changeAuthPassword","InputProps","endAdornment","InputAdornment","tabIndex","edge","onMouseDown","helperText","changeRegistLogin","changeRegistNickname","changeRegistPassword","changeRegistPassword2","aboutPaper","actions","loadTechnics","CardActionArea","CardMedia","gutterBottom","roles","useStyles1","green","dark","amber","iconVariant","MySnackbarContentWrapper","Icon","openSnackbar","setOpenSnackbar","openSnackbarVariant","setOpenSnackbarVariant","snackbarMessage","setSnackbarMessage","handleCloseSnackbar","reason","autoHideDuration","exact","path","Sign","DreamMap","AddLocation","MainPage","ViewDreams","AddDream","AddCDream","Technics","AddTechnics","check","round","boxShadow","animationDuration","scale","speed","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6f634aac.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/map.71ce46a8.png\";","module.exports = __webpack_public_path__ + \"static/media/sun.4f817e2f.png\";","module.exports = __webpack_public_path__ + \"static/media/moon.ca0fb531.png\";","module.exports = __webpack_public_path__ + \"static/media/astronaut.7219d35a.png\";","module.exports = __webpack_public_path__ + \"static/media/cloud.7fb181bd.svg\";","import { createBrowserHistory } from \"history\";\r\n\r\nexport default createBrowserHistory();","export const GET_ERRORS = \"GET_ERRORS\";\r\nexport const USER_LOADING = \"USER_LOADING\";\r\nexport const SET_CURRENT_USER = \"SET_CURRENT_USER\";\r\n\r\nexport const SET_CLOUD = 'SET_CLOUD';\r\nexport const CLEAR_CLOUD = 'CLEAR_CLOUD';\r\n\r\nexport const SET_STAR = 'SET_STAR';\r\nexport const CLEAR_STAR = 'CLEAR_STAR';\r\n\r\nexport const SET_LANG = 'SET_LANG';\r\nexport const SET_THEME_MODE = 'SET_THEME_MODE';\r\n\r\nexport const SET_SNACKBAR_MODE = 'SET_SNACKBAR_MODE';","const words = {\r\n    current: 'En',\r\n    buttons: {\r\n        signIn: 'Sign in',\r\n        signUp: 'Sign up',\r\n        dreamJoirnal: 'Dream joirnal',\r\n        addDream: 'Add dream',\r\n        addCDream: 'Add C-dream',\r\n        techniques: 'Techniques',\r\n        adventures: 'Adventures',\r\n        close: 'Back',\r\n        about: 'About us',\r\n        cancel: 'Cancel',\r\n        add: 'Add',\r\n        Edit: 'Edit',\r\n        Delete: 'Delete',\r\n        Save: 'Save',\r\n        addTag: 'New loc',\r\n    },\r\n    texts: {\r\n        about: 'About us About us About us About us About us About us About us About us About us About us ',\r\n        or: 'OR',\r\n        nickname: 'Nickname',\r\n        password: 'Password',\r\n        passwordAgain: 'Password again',\r\n        cancel: 'Cancel',\r\n        sucessRegistration: 'You are sign up successful',\r\n        hello: 'Hello, ',\r\n        changleLanguage: 'Save change language to ',\r\n        success: 'Success',\r\n        title: 'Title',\r\n        description: 'Description',\r\n        content: \"What's a dream\",\r\n        tags: 'Locations',\r\n        dreams: 'Dreams',\r\n        technics: 'Technics',\r\n        rating: 'Realistics',\r\n        Dream: 'Regular dream',\r\n        Cdream: 'C-dream',\r\n        NoDreams: \"You don't have dreams\",\r\n        pickDate: \"Date\",\r\n        pickTime: \"Time\",\r\n        TapToShow: \"Tap on text to show highlights\",\r\n        Public: \"Public\",\r\n        Publish: \"Unpublish\",\r\n        Unpublish: \"Publish\",\r\n        PublicAlert: \"Are you sure you want to public the dream?\",\r\n        PublicText: \"After public your friends can read this dream.\",\r\n        PublicDescription: \"Your friends can read this dream\",\r\n        UnpublicAlert: \"Are you sure you want to unpublic the dream?\",\r\n        UnpublicText: \"After unpublic your friends can't read this dream.\",\r\n        UnpublicDescription: \"Your friends can't read this dream\",\r\n        DeleteAlert: \"Are you sure you want to remove?\",\r\n        DeleteText: \"You can't restore data.\",\r\n        Name: \"Name\",\r\n        ChangeIcon: \"Icon\",\r\n        FindIcon: \"Search icon\",\r\n    },\r\n    errors: {\r\n        emailLenght: 'Email must not be empty',\r\n        nicknameLenght: 'Nickname must not be empty',\r\n        passwordLenght: 'Password must not be empty',\r\n        password2Lenght: 'Password must not be empty',\r\n        passwordsCompare: 'Passwords not equal',\r\n        UserNotExist: 'Invalid email or password',\r\n        EmailIsNotValid: 'Invalid email',\r\n        IncorrectPassword: 'Invalid email or password',\r\n        EmailIsBusy: 'Email is busy',\r\n        PasswordLenght5Symbols: 'Minimum password length: 5 symbols',\r\n        NotLogin: 'You not loggin in',\r\n        EmptyName: 'Name must not be empty',\r\n        EmptyTitle: 'Title must not be empty',\r\n        EmptyDescription: 'Description must not be empty',\r\n        EmptyDream: 'Dream must not be empty',\r\n        NoChanges: 'No changes',\r\n        CantDeletePost: 'Error deleting dream',\r\n        IconNotChange: 'Change icon',\r\n        ColorNotChange: 'Change color',\r\n    },\r\n};\r\n\r\nexport default words;","import { SET_LANG } from '../actions/types';\r\nimport EnDict from '../dictionary/en';\r\n\r\nconst initialState = {\r\n    currLang: EnDict,\r\n}\r\n\r\nexport function currLangReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case SET_LANG:\r\n            return { ...state, currLang: action.currLangState }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}","import { SET_CLOUD, CLEAR_CLOUD } from '../actions/types';\r\n\r\nconst initialState = {\r\n\tclouds: [],\r\n}\r\n\r\nexport function cloudsReducer(state = initialState, action) {\r\n\tswitch (action.type) {\r\n\t\tcase SET_CLOUD:\r\n\t\t\treturn {\r\n\t\t\t\t...state, clouds: [...state.clouds, action.cloudState]\r\n\t\t\t}\r\n\t\tcase CLEAR_CLOUD:\r\n\t\t\treturn {\r\n\t\t\t\t...state, clouds: []\r\n\t\t\t}\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n}","import { SET_STAR, CLEAR_STAR } from '../actions/types';\r\n\r\nconst initialState = {\r\n\tstars: [],\r\n}\r\n\r\nexport function starsReducer(state = initialState, action) {\r\n\tswitch (action.type) {\r\n\t\tcase SET_STAR:\r\n\t\t\treturn {\r\n\t\t\t\t...state, stars: [...state.stars, action.starState]\r\n\t\t\t}\r\n\t\tcase CLEAR_STAR:\r\n\t\t\treturn {\r\n\t\t\t\t...state, stars: []\r\n\t\t\t}\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n}","import { SET_THEME_MODE } from '../actions/types';\r\n\r\nconst initialState = {\r\n    palette: {\r\n        type: \"dark\",\r\n        primary: { main: \"#f9a825\" },\r\n        secondary: { main: \"#f50057\" },\r\n        error: { main: \"#cc0000\" },\r\n    },\r\n}\r\n\r\nexport function themeReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case SET_THEME_MODE:\r\n            return { ...state, palette: action.palette }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}","import { SET_CURRENT_USER, USER_LOADING } from \"../actions/types\";\r\n\r\nconst isempty = require(\"is-empty\");\r\n\r\nconst initialState = {\r\n    isAuthenticated: false,\r\n    user: {},\r\n    loading: false\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case SET_CURRENT_USER:\r\n            return {\r\n                ...state,\r\n                isAuthenticated: !isempty(action.payload),\r\n                user: action.payload\r\n            };\r\n        case USER_LOADING:\r\n            return {\r\n                ...state,\r\n                loading: true\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}","import { GET_ERRORS } from \"../actions/types\";\r\nconst initialState = {};\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case GET_ERRORS:\r\n            return action.payload;\r\n        default:\r\n            return state;\r\n    }\r\n}","import { SET_SNACKBAR_MODE } from '../actions/types';\r\n\r\nconst initialState = {\r\n    snackbar: {\r\n        open: false,\r\n        variant: '',\r\n        message: '',\r\n    },\r\n}\r\n\r\nexport function snackbarReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case SET_SNACKBAR_MODE:\r\n            return { ...state, snackbar: action.snackbar }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}","import { combineReducers } from 'redux';\r\nimport { currLangReducer } from './currLang';\r\nimport { cloudsReducer } from './cloud';\r\nimport { starsReducer } from './star';\r\nimport { themeReducer } from './themeMode';\r\nimport authReducer from './authReducer';\r\nimport errorReducer from './errorReducer';\r\nimport { snackbarReducer } from './snackbarReducer';\r\n\r\nexport const rootReducer = combineReducers({\r\n    lang: currLangReducer,\r\n    clouds: cloudsReducer,\r\n    stars: starsReducer,\r\n    themeMode: themeReducer,\r\n    auth: authReducer,\r\n    errors: errorReducer,\r\n    snackbar: snackbarReducer,\r\n});","import { createStore, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { rootReducer } from './reducers';\r\n\r\nconst middleware = [thunk];\r\n\r\nexport const store = createStore(\r\n    rootReducer,\r\n    {},\r\n    applyMiddleware(...middleware)\r\n);","import axios from \"axios\";\r\n\r\nconst setAuthToken = token => {\r\n    if (token) {\r\n        // Apply authorization token to every request if logged in\r\n        axios.defaults.headers.common[\"Authorization\"] = token;\r\n    }\r\n    else {\r\n        // Delete auth header\r\n        delete axios.defaults.headers.common[\"Authorization\"];\r\n    }\r\n};\r\n\r\nexport default setAuthToken;","import jwt_decode from \"jwt-decode\";\r\n\r\nimport { store } from \"../store\";\r\nimport setAuthToken from \"../utils/setAuthToken\";\r\nimport { SET_CURRENT_USER } from \"../actions/types\"\r\n\r\nexport function CheckTimeOut() {\r\n    if (localStorage.jwtToken) {\r\n        const token = localStorage.jwtToken;\r\n        setAuthToken(token);\r\n        const decoded = jwt_decode(token);\r\n        store.dispatch({\r\n            type: SET_CURRENT_USER,\r\n            payload: decoded\r\n        });\r\n\r\n        const currentTime = Date.now() / 1000; // to get in milliseconds\r\n        if (decoded.exp < currentTime) {\r\n            return false;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }\r\n}","import { SET_LANG } from '../actions/types';\r\n\r\nexport function setCloud(state) {\r\n\treturn {\r\n\t\ttype: state.type,\r\n\t\tcloudState: state.cloudState,\r\n\t}\r\n}\r\nexport function setStar(state) {\r\n\treturn {\r\n\t\ttype: state.type,\r\n\t\tstarState: state.starState,\r\n\t}\r\n}\r\nexport function setCurrLang(state) {\r\n\treturn {\r\n\t\ttype: SET_LANG,\r\n\t\tcurrLangState: state,\r\n\t}\r\n}\r\nexport function setTheme(state) {\r\n\treturn {\r\n\t\ttype: state.type,\r\n\t\tpalette: state.palette,\r\n\t}\r\n}\r\nexport function setUserState(state) {\r\n\treturn {\r\n\t\ttype: state.type,\r\n\t\tpayload: state.payload,\r\n\t}\r\n}\r\nexport function setSnackbar(state) {\r\n\treturn {\r\n\t\ttype: state.type,\r\n\t\tsnackbar: state.snackbar,\r\n\t}\r\n}","import React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst PrivateRoute = ({ component: Component, auth, ...rest }) => (\r\n    <Route\r\n        {...rest}\r\n        render={props =>\r\n            auth.isAuthenticated === true\r\n                ? <Component {...props} />\r\n                : <Redirect to=\"/\" />\r\n        }\r\n    />\r\n);\r\n\r\nPrivateRoute.propTypes = {\r\n    auth: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    auth: state.auth\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps\r\n)(PrivateRoute);","import axios from \"axios\";\r\n\r\n\r\nexport const instance = axios.create({\r\n    baseURL: 'https://ldserver.herokuapp.com',\r\n    timeout: 10000,\r\n    headers: { \"Access-Control-Allow-Origin\": \"*\" }\r\n});","import { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\nimport WarningIcon from '@material-ui/icons/Warning';\r\nimport ErrorIcon from '@material-ui/icons/Error';\r\nimport InfoIcon from '@material-ui/icons/Info';\r\n\r\nimport MapImg from '../img/map.png';\r\nimport SunImg from '../img/sun.png';\r\nimport MoonImg from '../img/moon.png';\r\nimport AstronautImg from '../img/astronaut.png';\r\nimport CloudSvg from '../img/cloud.svg';\r\n\r\nexport const params = {\r\n    amountStars: 25,\r\n    amountClouds: 5,\r\n    size: {\r\n        min: 1,\r\n        max: 5,\r\n        giant: 9\r\n    },\r\n    duration: {\r\n        min: 5,\r\n        max: 25,\r\n    }\r\n}\r\n\r\nexport const variantIcon = {\r\n    success: CheckCircleIcon,\r\n    warning: WarningIcon,\r\n    error: ErrorIcon,\r\n    info: InfoIcon,\r\n};\r\n\r\nexport function randomBetween(a, b) {\r\n    return (a + (Math.random() * (b - a)));\r\n}\r\n\r\nexport const useStyles = makeStyles(theme => ({\r\n    formControl: {\r\n        position: 'absolute',\r\n        left: '50%',\r\n        top: '50%',\r\n        transform: 'translate(-50%, -50%)',\r\n        width: 'auto',\r\n        height: 'auto',\r\n    },\r\n    SwipeableViews: {\r\n        position: 'relative',\r\n        height: '90%',\r\n        '& .react-swipeable-view-container': {\r\n            height: '100% !Important',\r\n        },\r\n    },\r\n    media: {\r\n        height: 140,\r\n    },\r\n    iconCenter: {\r\n        display: \"block\",\r\n        margin: \"auto\"\r\n    },\r\n    dreamCardDiv: {\r\n        marginTop: '15px',\r\n        marginBottom: '15px',\r\n        width: '100%',\r\n        height: 'auto',\r\n        borderRadius: '4px',\r\n    },\r\n    divDreamsNotFoundImg: {\r\n        background: \"url('https://static.thenounproject.com/png/603669-200.png') no-repeat center\",\r\n    },\r\n    divDreamsNotFound: {\r\n        position: \"relative\",\r\n        left: \"50%\",\r\n        transform: \"translateX(-50%)\",\r\n        width: 200,\r\n        height: 100,\r\n        textAlign: \"center\",\r\n    },\r\n    contentPaper: {\r\n        backgroundColor: theme.palette.text.main,\r\n        padding: 10,\r\n    },\r\n    pickerGridContainer: {\r\n        position: \"relative\",\r\n        width: \"85%\",\r\n        left: \"50%\",\r\n        transform: \"translateX(-50%)\",\r\n        marginBottom: \"5px\",\r\n    },\r\n    div85width: {\r\n        position: \"relative\",\r\n        width: \"85%\",\r\n        top: \"65%\",\r\n        left: \"50%\",\r\n        transform: \"translate(-50%, -50%)\",\r\n    },\r\n    ratingGridContainer: {\r\n        position: \"relative\",\r\n        width: \"100%\",\r\n        top: \"65%\",\r\n        left: \"50%\",\r\n        transform: \"translate(-50%, -50%)\",\r\n    },\r\n    pickers: {\r\n        position: \"relative\",\r\n        width: \"90%\",\r\n        left: \"50%\",\r\n        transform: \"translateX(-50%)\",\r\n    },\r\n    avatarRoot: {\r\n        textAlign: 'center',\r\n        width: '100%',\r\n    },\r\n    verySmallAvatar: {\r\n        margin: theme.spacing(1),\r\n        width: theme.spacing(3),\r\n        height: theme.spacing(3),\r\n        display: 'inline-flex !Important',\r\n    },\r\n    smallAvatar: {\r\n        margin: theme.spacing(0.5),\r\n        width: theme.spacing(5),\r\n        height: theme.spacing(5),\r\n        display: 'inline-flex !Important',\r\n    },\r\n    smallChip: {\r\n        margin: theme.spacing(0.5),\r\n    },\r\n    centerCircularProgress: {\r\n        position: 'relative',\r\n        top: '50%',\r\n        left: '50%',\r\n    },\r\n    mainGridDreamsBodyItemContainer: {\r\n        paddingTop: '16px',\r\n        position: 'absolute',\r\n        boxSizing: 'border-box',\r\n        maxHeight: '90%',\r\n        overflow: 'auto',\r\n        borderRadius: '4px',\r\n    },\r\n    mainGridDreamsBodyItemContainerPaper: {\r\n        height: '100%',\r\n        opacity: 0.9,\r\n    },\r\n    hiddenOverflow: {\r\n        overflow: 'hidden',\r\n    },\r\n    mainGridDreamsContainer: {\r\n        height: '100%',\r\n        position: 'relative',\r\n        width: '90%',\r\n        left: '50%',\r\n        transform: 'translateX(-50%)',\r\n    },\r\n    card: {\r\n        maxWidth: '100%',\r\n        height: '100%',\r\n    },\r\n    expand: {\r\n        transform: \"rotate(0deg)\",\r\n        marginLeft: \"auto\",\r\n        transition: theme.transitions.create(\"transform\", {\r\n            duration: theme.transitions.duration.shortest\r\n        })\r\n    },\r\n    expandOpen: {\r\n        transform: \"rotate(180deg)\"\r\n    },\r\n    textField: {\r\n        width: '100%',\r\n    },\r\n    margin: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    root: {\r\n        flexGrow: 1,\r\n        position: 'relative',\r\n        width: '100%',\r\n        height: window.innerHeight - 0.1,\r\n        overflow: 'hidden',\r\n    },\r\n    mainPage: {\r\n        top: 0,\r\n        left: 0,\r\n        position: 'absolute',\r\n        transition: 'all 0.3s linear',\r\n        width: '100%',\r\n        height: '100%',\r\n    },\r\n    aboutPage: {\r\n        position: 'absolute',\r\n        transition: 'all 0.3s linear',\r\n        top: '100%',\r\n        width: '100%',\r\n        height: '100%',\r\n    },\r\n    AppDivDark: {\r\n        position: 'fixed',\r\n        background: 'radial-gradient(ellipse at center, rgba(8, 25, 42, 1) 20%, rgba(1, 4, 6, 1) 100%)',\r\n        opacity: 1,\r\n        margin: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        zIndex: -3,\r\n    },\r\n    AppDivLight: {\r\n        position: 'absolute',\r\n        background: 'radial-gradient(ellipse at center, rgba(207, 225, 237, 1) 20%, rgba(127, 170, 202, 1) 100%)',\r\n        transition: 'opacity 0.5s linear',\r\n        margin: 0,\r\n        opacity: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        zIndex: -3,\r\n    },\r\n    AppStarsDiv: {\r\n        transition: 'opacity 0.5s linear',\r\n        opacity: 0,\r\n        position: 'absolute',\r\n        width: '100%',\r\n        height: '100%',\r\n        overflow: 'hidden',\r\n        zIndex: -2,\r\n    },\r\n    AppCloudsDiv: {\r\n        transition: 'opacity 0.5s linear',\r\n        opacity: 0,\r\n        position: 'absolute',\r\n        width: '100%',\r\n        height: '100%',\r\n        overflow: 'hidden',\r\n        zIndex: -2,\r\n    },\r\n    AppStar: {\r\n        borderRadius: '100%',\r\n        position: 'absolute',\r\n        background: 'radial-gradient(ellipse at center, rgba(177, 198, 219, 1) 2%, rgba(5, 63, 118, 1) 100%)',\r\n        filter: 'blur(1px)',\r\n        animation: '$shine infinite alternate',\r\n        zIndex: -1,\r\n    },\r\n    AppCloud: {\r\n        position: 'absolute',\r\n        backgroundRepeat: 'no-repeat',\r\n        backgroundImage: 'url(' + CloudSvg + ')',\r\n        animation: '$moveclouds infinite linear',\r\n        zIndex: -1,\r\n    },\r\n    image: {\r\n        position: 'relative',\r\n        left: '50%',\r\n        top: '25%',\r\n        transform: 'translate(-50%, -25%)',\r\n        width: '35vw !important',\r\n        height: '35vw',\r\n        borderRadius: '50%',\r\n    },\r\n    SkyDiv: {\r\n        position: 'absolute',\r\n        borderRadius: '50%',\r\n        top: 0,\r\n        left: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        overflow: 'hidden',\r\n    },\r\n    MoonSrc: {\r\n        backgroundSize: 'cover',\r\n        background: 'url(' + MoonImg + ')',\r\n        backgroundRepeat: 'no-repeat',\r\n        position: 'absolute',\r\n        top: 0,\r\n        left: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        transition: 'all 0.3s linear',\r\n    },\r\n    SunSrc: {\r\n        backgroundSize: 'cover',\r\n        background: 'url(' + SunImg + ')',\r\n        backgroundRepeat: 'no-repeat',\r\n        position: 'absolute',\r\n        top: 0,\r\n        left: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        transition: 'all 0.3s linear',\r\n    },\r\n    AstronautButton: {\r\n        position: 'relative',\r\n        left: '50%',\r\n        top: '50%',\r\n        transform: 'translate(-50%, -50%)',\r\n        width: '25vw !important',\r\n        height: '25vw',\r\n        borderRadius: '50%',\r\n    },\r\n    AstronautDiv: {\r\n        position: 'absolute',\r\n        borderRadius: '50%',\r\n        top: 0,\r\n        left: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        overflow: 'hidden',\r\n        animation: '$swinging 30s infinite linear',\r\n    },\r\n    AstronautImg: {\r\n        backgroundSize: 'cover',\r\n        background: 'url(' + AstronautImg + ')',\r\n        backgroundRepeat: 'no-repeat',\r\n        position: 'absolute',\r\n        top: 0,\r\n        left: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        transition: 'filter 0.5s linear',\r\n    },\r\n    MapButton: {\r\n        position: 'relative',\r\n        left: '50%',\r\n        top: '50%',\r\n        transform: 'translate(-50%, -50%)',\r\n        width: '25vw !important',\r\n        height: '25vw',\r\n        borderRadius: '10%',\r\n    },\r\n    MapDiv: {\r\n        position: 'absolute',\r\n        top: 0,\r\n        left: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        overflow: 'hidden',\r\n        animation: '$swinging 30s infinite linear',\r\n    },\r\n    MapImg: {\r\n        backgroundSize: 'cover',\r\n        background: 'url(' + MapImg + ')',\r\n        backgroundRepeat: 'no-repeat',\r\n        position: 'absolute',\r\n        top: 0,\r\n        left: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        transition: 'filter 0.5s linear',\r\n    },\r\n    mainGridContainer: {\r\n        height: '100% !Important',\r\n        position: 'relative',\r\n    },\r\n    mainGridBodyItem: {\r\n        maxWidth: '100% !Important',\r\n        position: 'relative',\r\n    },\r\n    menuButtonContainer: {\r\n        height: '100% !Important',\r\n        position: 'relative',\r\n    },\r\n    menuDivButton: {\r\n        maxWidth: '100% !Important',\r\n        position: 'relative',\r\n    },\r\n    centerButton: {\r\n        position: 'absolute',\r\n        top: '50%',\r\n        left: '50%',\r\n        transform: 'translate(-50%, -50%)',\r\n    },\r\n    menuButton: {\r\n        minWidth: '55vw',\r\n        maxWidth: '55vw',\r\n        height: '75%',\r\n    },\r\n    actionButton: {\r\n        minWidth: '40vw',\r\n        maxWidth: '40vw',\r\n    },\r\n    poppupButton: {\r\n        minWidth: '90%',\r\n        maxWidth: '90%',\r\n    },\r\n    aboutGridContainer: {\r\n        width: '100%',\r\n        height: '100%',\r\n        margin: 0,\r\n    },\r\n    fullMinWidth: {\r\n        minWidth: '100% !Important',\r\n        position: 'relative'\r\n    },\r\n    inputDiv: {\r\n        minWidth: '85% !Important',\r\n        maxWidth: '85% !Important',\r\n        position: 'absolute',\r\n        top: '50%',\r\n        left: '50%',\r\n        transform: 'translate(-50%, -50%)',\r\n        opacity: 1,\r\n    },\r\n    inputScrollableDiv: {\r\n        minWidth: '85% !Important',\r\n        maxWidth: '85% !Important',\r\n        height: '100%',\r\n        position: 'absolute',\r\n        top: '50%',\r\n        left: '50%',\r\n        transform: 'translate(-50%, -50%)',\r\n        opacity: 1,\r\n    },\r\n    noWrap: {\r\n        flexWrap: 'nowrap',\r\n    },\r\n    chip: {\r\n        margin: 1\r\n    },\r\n    aboutGridItem: {\r\n        width: '100%',\r\n    },\r\n    paper: {\r\n        height: '91%',\r\n        marginTop: theme.spacing(3),\r\n        marginLeft: theme.spacing(2),\r\n        marginRight: theme.spacing(2),\r\n        opacity: 0.9,\r\n    },\r\n    \"@keyframes shine\": {\r\n        \"0%\": {\r\n            transform: 'scale(1)',\r\n            opacity: '1',\r\n        },\r\n        \"20%\": {\r\n            transform: 'scale(.9)',\r\n            opacity: '.8',\r\n        },\r\n        \"40%\": {\r\n            transform: 'scale(1)',\r\n            opacity: '.9',\r\n        },\r\n        \"60%\": {\r\n            transform: 'scale(.2)',\r\n            opacity: '.1',\r\n        },\r\n        \"80%\": {\r\n            transform: 'scale(.5)',\r\n            opacity: '.5',\r\n        },\r\n        \"100%\": {\r\n            transform: 'scale(.9)',\r\n            opacity: '.9',\r\n        },\r\n    },\r\n    \"@keyframes moveclouds\": {\r\n        '100%': {\r\n            left: '-100%',\r\n        },\r\n    },\r\n    \"@keyframes swinging\": {\r\n        '0%': {\r\n            transform: 'rotate(0)',\r\n        },\r\n        '10%': {\r\n            transform: 'rotate(12deg)',\r\n        },\r\n        '20%': {\r\n            transform: 'rotate(-10deg)',\r\n        },\r\n        '30%': {\r\n            transform: 'rotate(9deg)',\r\n        },\r\n        '40%': {\r\n            transform: 'rotate(-8deg)',\r\n        },\r\n        '50%': {\r\n            transform: 'rotate(7deg)',\r\n        },\r\n        '60%': {\r\n            transform: 'rotate(-6deg)',\r\n        },\r\n        '70%': {\r\n            transform: 'rotate(5deg)',\r\n        },\r\n        '80%': {\r\n            transform: 'rotate(-4deg)',\r\n        },\r\n        '90%': {\r\n            transform: 'rotate(3deg)',\r\n        },\r\n        '100%': {\r\n            transform: 'rotate(0)',\r\n        },\r\n    },\r\n    height12: {\r\n        height: 100 / 12 * 12 + \"%\",\r\n    },\r\n    height11: {\r\n        height: 100 / 12 * 11 - 0.1 + \"%\",\r\n    },\r\n    height10: {\r\n        height: 100 / 12 * 10 - 0.1 + \"%\",\r\n    },\r\n    height9: {\r\n        height: 100 / 12 * 9 - 0.1 + \"%\",\r\n    },\r\n    height8: {\r\n        height: 100 / 12 * 8 - 0.1 + \"%\",\r\n    },\r\n    height7: {\r\n        height: 100 / 12 * 7 - 0.1 + \"%\",\r\n    },\r\n    height6: {\r\n        height: 100 / 12 * 6 - 0.1 + \"%\",\r\n    },\r\n    height5: {\r\n        height: 100 / 12 * 5 - 0.1 + \"%\",\r\n    },\r\n    height4: {\r\n        height: 100 / 12 * 4 - 0.1 + \"%\",\r\n    },\r\n    height3: {\r\n        height: 100 / 12 * 3 - 0.1 + \"%\",\r\n    },\r\n    height2: {\r\n        height: 100 / 12 * 2 - 0.1 + \"%\",\r\n    },\r\n    height1: {\r\n        height: 100 / 12 * 1 - 0.1 + \"%\",\r\n    },\r\n    height0: {\r\n        height: 100 / 12 * 0 + \"%\",\r\n    },\r\n}));","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Popover from \"@material-ui/core/Popover\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nimport Skeleton from '@material-ui/lab/Skeleton';\r\n\r\nimport EditIcon from '@material-ui/icons/Edit';\r\n\r\nimport { useStyles } from '../../styles/Styles';\r\n//import { SET_SNACKBAR_MODE } from \"../../actions/types\";\r\nimport { setSnackbar } from '../../actions/Actions';\r\n\r\nfunction MapCell(props) {\r\n    const classes = useStyles();\r\n    const { i, j, cellHeight, cellWidth, id, locations, palette, lang, loadMap, history } = props;\r\n    const [anchorEl, setAnchorEl] = React.useState(null);\r\n    const [tagId, setTagId] = React.useState(id);\r\n    const disabledSave = tagId === id ? true : false;\r\n\r\n    const handleClick = event => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setTagId(id);\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    const changeTagId = event => {\r\n        setTagId(event.target.value);\r\n    };\r\n\r\n    const editLocation = () => {\r\n        history.push({\r\n            pathname: \"/addlocation\",\r\n            defaultData: {\r\n                id: tagId,\r\n                name_rus: locations.find(loc => loc.id === tagId).name_rus,\r\n                name_eng: locations.find(loc => loc.id === tagId).name_eng,\r\n                img_url: locations.find(loc => loc.id === tagId).img_url,\r\n                color: locations.find(loc => loc.id === tagId).color,\r\n                prevUrl: \"/dreammap\",\r\n            }\r\n        });\r\n    };\r\n\r\n    const saveCellLoc = () => {\r\n        let newCell = {\r\n            \"i\": i,\r\n            \"j\": j,\r\n        };\r\n        newCell.oldLoc = id;\r\n        newCell.newLoc = tagId;\r\n        console.log(newCell);\r\n        setAnchorEl(null);\r\n        loadMap();\r\n    };\r\n\r\n    const open = Boolean(anchorEl);\r\n    const popoverId = open ? \"simple-popover\" : undefined;\r\n\r\n    return (\r\n        <td\r\n            style={{\r\n                height: cellHeight + 'px',\r\n                minWidth: cellWidth + 'px',\r\n                maxWidth: cellWidth + 'px',\r\n                padding: 0,\r\n                margin: 0,\r\n                transition: \"all 0.1s\",\r\n            }}\r\n        >\r\n            {locations.length\r\n                ? <div className={classes.aboutGridContainer}\r\n                    onClick={handleClick}\r\n                    style={{\r\n                        backgroundImage: 'url(' + locations.find(loc => loc.id === tagId).img_url + ')',\r\n                        backgroundSize: 'contain',\r\n                        backgroundColor: locations.find(loc => loc.id === tagId).color,\r\n                        overflow: 'hidden',\r\n                        //position: 'absolute',\r\n                        // width: cellWidth,\r\n                        // height: cellHeight,\r\n                        // transform: 'rotateZ(45deg) rotateY(0deg) rotateX(-60deg)',\r\n                        // transformOrigin: 'bottom center',\r\n                        // borderRadius: '40%',\r\n                    }}\r\n                />\r\n                : <Skeleton variant=\"circle\" width={cellHeight} height={cellWidth} />\r\n            }\r\n            <Popover id={popoverId}\r\n                open={open}\r\n                anchorEl={anchorEl}\r\n                anchorOrigin={{\r\n                    vertical: \"center\",\r\n                    horizontal: \"center\"\r\n                }}\r\n                transformOrigin={{\r\n                    vertical: \"center\",\r\n                    horizontal: \"center\"\r\n                }}\r\n            >\r\n                <Grid container\r\n                    className={`${classes.height12}`}\r\n                    direction=\"column\"\r\n                    justify=\"center\"\r\n                    alignItems=\"stretch\"\r\n                >\r\n                    <Grid item className={`${classes.mainGridBodyItem} ${classes.height11}`}\r\n                        style={{\r\n                            padding: '16px'\r\n                        }}\r\n                    >\r\n                        {locations.length\r\n                            ? <Grid container\r\n                                className={`${classes.height12}`}\r\n                                direction=\"column\"\r\n                                justify=\"center\"\r\n                                alignItems=\"stretch\"\r\n                            >\r\n                                <Grid item>\r\n                                    <Grid container\r\n                                        className={`${classes.height12}`}\r\n                                        direction=\"row\"\r\n                                        justify=\"center\"\r\n                                        alignItems=\"stretch\"\r\n                                    >\r\n                                        <Grid item xs={10}\r\n                                            style={{\r\n                                                textAlign: 'center',\r\n                                                position: 'relative',\r\n                                            }}\r\n                                        >\r\n                                            <Typography variant='h6'\r\n                                                style={{\r\n                                                    position: 'absolute',\r\n                                                    top: '50%',\r\n                                                    left: '50%',\r\n                                                    transform: 'translate(-50%, -50%)',\r\n                                                }}\r\n                                            >\r\n                                                {lang.currLang.current === \"Ru\"\r\n                                                    ? locations.find(loc => loc.id === tagId).name_rus\r\n                                                    : locations.find(loc => loc.id === tagId).name_eng\r\n                                                }\r\n                                            </Typography>\r\n                                        </Grid>\r\n                                        <Grid item xs={2}>\r\n                                            <IconButton onClick={editLocation}>\r\n                                                <EditIcon fontSize=\"small\" />\r\n                                            </IconButton >\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Grid\r\n                                        container\r\n                                        direction=\"row\"\r\n                                        justify=\"space-around\"\r\n                                        alignItems=\"center\"\r\n                                    >\r\n                                        <Grid item>\r\n                                            <FormControl>\r\n                                                <Select value={tagId}\r\n                                                    onChange={changeTagId}\r\n                                                    MenuProps={{\r\n                                                        PaperProps: {\r\n                                                            style: {\r\n                                                                maxHeight: 48 * 4.5 + 8,\r\n                                                                width: 'auto',\r\n                                                            },\r\n                                                        },\r\n                                                    }}\r\n                                                >\r\n                                                    {locations.map((item, key) => (\r\n                                                        <MenuItem key={key} value={item.id}>\r\n                                                            <Avatar className={classes.smallAvatar}\r\n                                                                src={item.img_url}\r\n                                                                style={palette.type === 'dark'\r\n                                                                    ? {\r\n                                                                        filter: 'invert(1)',\r\n                                                                    }\r\n                                                                    : {}\r\n                                                                }\r\n                                                            />\r\n                                                        </MenuItem>\r\n                                                    ))}\r\n                                                </Select>\r\n                                            </FormControl>\r\n                                        </Grid>\r\n                                        <Grid item>\r\n                                            <Typography component='div' variant='body2'>\r\n                                                {lang.currLang.texts.dreams}:\r\n                                            </Typography>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                            : ''\r\n                        }\r\n                    </Grid>\r\n                    <Grid item className={`${classes.mainGridBodyItem} ${classes.height1}`}>\r\n                        <Grid className={classes.menuDivButton}\r\n                            container\r\n                            direction=\"row\"\r\n                            justify=\"space-around\"\r\n                            alignItems=\"stretch\"\r\n                            style={{\r\n                                padding: '16px'\r\n                            }}\r\n                        >\r\n                            <Grid item xs={6} align=\"center\">\r\n                                <Button className={classes.poppupButton}\r\n                                    variant=\"contained\"\r\n                                    color=\"secondary\"\r\n                                    onClick={handleClose}\r\n                                >\r\n                                    {lang.currLang.texts.cancel}\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid item xs={6} align=\"center\">\r\n                                <Button className={classes.poppupButton}\r\n                                    disabled={disabledSave}\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    onClick={saveCellLoc}\r\n                                >\r\n                                    {lang.currLang.buttons.Save}\r\n                                </Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Popover>\r\n        </td >\r\n    )\r\n}\r\n\r\nMapCell.propTypes = {\r\n    setSnackbar: PropTypes.func.isRequired,\r\n    lang: PropTypes.object.isRequired,\r\n    palette: PropTypes.object.isRequired,\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        lang: store.lang,\r\n        palette: store.themeMode.palette,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setSnackbar: snackbar => dispatch(setSnackbar(snackbar)),\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(MapCell);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Container from '@material-ui/core/Container';\r\nimport Button from '@material-ui/core/Button';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Fab from '@material-ui/core/Fab';\r\n\r\nimport RemoveIcon from '@material-ui/icons/Remove';\r\nimport AddIcon from '@material-ui/icons/Add';\r\n\r\nimport { instance } from './Config';\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\nimport MapCell from './muiltiple/MapCell';\r\nimport { useStyles } from '../styles/Styles';\r\n\r\nconst JSONtable = {\r\n    0: {\r\n        0: {\r\n            id: 5,\r\n        },\r\n        1: {\r\n            id: 3,\r\n        },\r\n        2: {\r\n            id: 4,\r\n        },\r\n        3: {\r\n            id: 4,\r\n        },\r\n        4: {\r\n            id: 4,\r\n        },\r\n        5: {\r\n            id: 4,\r\n\r\n        },\r\n        6: {\r\n            id: 4,\r\n\r\n        },\r\n        7: {\r\n            id: 4,\r\n\r\n        },\r\n        8: {\r\n            id: 4,\r\n\r\n        },\r\n        9: {\r\n            id: 4,\r\n\r\n        },\r\n    },\r\n    1: {\r\n        0: {\r\n            id: 5,\r\n        },\r\n        1: {\r\n            id: 6,\r\n        },\r\n        2: {\r\n            id: 4,\r\n\r\n        },\r\n        3: {\r\n            id: 4,\r\n\r\n        },\r\n        4: {\r\n            id: 4,\r\n\r\n        },\r\n        5: {\r\n            id: 4,\r\n\r\n        },\r\n        6: {\r\n            id: 4,\r\n\r\n        },\r\n        7: {\r\n            id: 4,\r\n\r\n        },\r\n        8: {\r\n            id: 4,\r\n\r\n        },\r\n        9: {\r\n            id: 4,\r\n\r\n        },\r\n    },\r\n    2: {\r\n        0: {\r\n            id: 5,\r\n        },\r\n        1: {\r\n            id: 5,\r\n        },\r\n        2: {\r\n            id: 4,\r\n\r\n        },\r\n        3: {\r\n            id: 4,\r\n\r\n        },\r\n        4: {\r\n            id: 4,\r\n\r\n        },\r\n        5: {\r\n            id: 4,\r\n\r\n        },\r\n        6: {\r\n            id: 4,\r\n\r\n        },\r\n        7: {\r\n            id: 4,\r\n\r\n        },\r\n        8: {\r\n            id: 4,\r\n\r\n        },\r\n        9: {\r\n            id: 4,\r\n\r\n        },\r\n    },\r\n    3: {\r\n        0: {\r\n            id: 5,\r\n        },\r\n        1: {\r\n            id: 5,\r\n        },\r\n        2: {\r\n            id: 4,\r\n\r\n        },\r\n        3: {\r\n            id: 4,\r\n\r\n        },\r\n        4: {\r\n            id: 4,\r\n\r\n        },\r\n        5: {\r\n            id: 4,\r\n\r\n        },\r\n        6: {\r\n            id: 4,\r\n\r\n        },\r\n        7: {\r\n            id: 4,\r\n\r\n        },\r\n        8: {\r\n            id: 4,\r\n\r\n        },\r\n        9: {\r\n            id: 4,\r\n\r\n        },\r\n    },\r\n    4: {\r\n        0: {\r\n            id: 5,\r\n        },\r\n        1: {\r\n            id: 5,\r\n        },\r\n        2: {\r\n            id: 4,\r\n\r\n        },\r\n        3: {\r\n            id: 4,\r\n\r\n        },\r\n        4: {\r\n            id: 4,\r\n\r\n        },\r\n        5: {\r\n            id: 4,\r\n\r\n        },\r\n        6: {\r\n            id: 4,\r\n\r\n        },\r\n        7: {\r\n            id: 4,\r\n\r\n        },\r\n        8: {\r\n            id: 4,\r\n\r\n        },\r\n        9: {\r\n            id: 4,\r\n\r\n        },\r\n    },\r\n    5: {\r\n        0: {\r\n            id: 5,\r\n        },\r\n        1: {\r\n            id: 5,\r\n        },\r\n        2: {\r\n            id: 4,\r\n\r\n        },\r\n        3: {\r\n            id: 4,\r\n\r\n        },\r\n        4: {\r\n            id: 4,\r\n\r\n        },\r\n        5: {\r\n            id: 4,\r\n\r\n        },\r\n        6: {\r\n            id: 4,\r\n\r\n        },\r\n        7: {\r\n            id: 4,\r\n\r\n        },\r\n        8: {\r\n            id: 4,\r\n\r\n        },\r\n        9: {\r\n            id: 4,\r\n\r\n        },\r\n    },\r\n    6: {\r\n        0: {\r\n            id: 5,\r\n        },\r\n        1: {\r\n            id: 5,\r\n        },\r\n        2: {\r\n            id: 4,\r\n\r\n        },\r\n        3: {\r\n            id: 4,\r\n\r\n        },\r\n        4: {\r\n            id: 4,\r\n\r\n        },\r\n        5: {\r\n            id: 4,\r\n\r\n        },\r\n        6: {\r\n            id: 4,\r\n\r\n        },\r\n        7: {\r\n            id: 4,\r\n\r\n        },\r\n        8: {\r\n            id: 6,\r\n        },\r\n        9: {\r\n            id: 4,\r\n\r\n        },\r\n    },\r\n    7: {\r\n        0: {\r\n            id: 5,\r\n        },\r\n        1: {\r\n            id: 5,\r\n        },\r\n        2: {\r\n            id: 4,\r\n\r\n        },\r\n        3: {\r\n            id: 4,\r\n\r\n        },\r\n        4: {\r\n            id: 4,\r\n\r\n        },\r\n        5: {\r\n            id: 4,\r\n\r\n        },\r\n        6: {\r\n            id: 4,\r\n\r\n        },\r\n        7: {\r\n            id: 4,\r\n\r\n        },\r\n        8: {\r\n            id: 4,\r\n\r\n        },\r\n        9: {\r\n            id: 4,\r\n\r\n        },\r\n    },\r\n    8: {\r\n        0: {\r\n            id: 5,\r\n        },\r\n        1: {\r\n            id: 5,\r\n        },\r\n        2: {\r\n            id: 4,\r\n\r\n        },\r\n        3: {\r\n            id: 4,\r\n\r\n        },\r\n        4: {\r\n            id: 4,\r\n\r\n        },\r\n        5: {\r\n            id: 4,\r\n\r\n        },\r\n        6: {\r\n            id: 4,\r\n\r\n        },\r\n        7: {\r\n            id: 4,\r\n\r\n        },\r\n        8: {\r\n            id: 4,\r\n\r\n        },\r\n        9: {\r\n            id: 4,\r\n\r\n        },\r\n    },\r\n    9: {\r\n        0: {\r\n            id: 5,\r\n        },\r\n        1: {\r\n            id: 5,\r\n        },\r\n        2: {\r\n            id: 4,\r\n\r\n        },\r\n        3: {\r\n            id: 4,\r\n\r\n        },\r\n        4: {\r\n            id: 4,\r\n\r\n        },\r\n        5: {\r\n            id: 4,\r\n\r\n        },\r\n        6: {\r\n            id: 4,\r\n\r\n        },\r\n        7: {\r\n            id: 4,\r\n\r\n        },\r\n        8: {\r\n            id: 4,\r\n\r\n        },\r\n        9: {\r\n            id: 4,\r\n\r\n        },\r\n    },\r\n};\r\n\r\nfunction DreamMap(props) {\r\n    const { lang, themeMode, history } = props;\r\n    const classes = useStyles();\r\n    const muiTheme = createMuiTheme(themeMode);\r\n    const [cellSize, setCellSize] = React.useState(50);\r\n    const [locations, setLocations] = React.useState({});\r\n    const [dreamMap, setDreamMap] = React.useState(null);\r\n\r\n    const changeCellSize = (event, newValue) => {\r\n        setCellSize(newValue);\r\n    };\r\n\r\n    const sizeUp = () => {\r\n        const newcellSize = cellSize + 5;\r\n        setCellSize(newcellSize);\r\n    };\r\n\r\n    const sizeDown = () => {\r\n        const newcellSize = cellSize - 5;\r\n        setCellSize(newcellSize);\r\n    };\r\n\r\n    const createTable = () => {\r\n        let table = [];\r\n        let i = 0;\r\n        let j = 0;\r\n\r\n        Object.keys(dreamMap).forEach(row => {\r\n            let rows = [];\r\n            Object.keys(dreamMap[row]).forEach(col => {\r\n                rows.push(\r\n                    <MapCell key={'cell' + i + j}\r\n                        i={i}\r\n                        j={j}\r\n                        cellHeight={cellSize * 0.6}\r\n                        cellWidth={cellSize * 0.6}\r\n                        dreamMap={dreamMap}\r\n                        id={dreamMap[row][col].id}\r\n                        locations={locations}\r\n                        loadMap={loadMap}\r\n                        history={history}\r\n                    />\r\n                );\r\n                i++;\r\n            })\r\n            table.push(\r\n                <tr key={'row' + j} >\r\n                    {rows}\r\n                </tr>\r\n            );\r\n            j++;\r\n            i = 0;\r\n        });\r\n\r\n        return table;\r\n    }\r\n\r\n    const loadMap = () => {\r\n        instance.get(\"/gettags\")\r\n            .then(res => {\r\n                setLocations(res.data);\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            });\r\n        setDreamMap(JSONtable);\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        loadMap();\r\n    }, []);\r\n\r\n    return (\r\n        <MuiThemeProvider theme={muiTheme}>\r\n            <CssBaseline />\r\n            <div className={classes.root}>\r\n                <Grid container\r\n                    className={`${classes.height12}`}\r\n                    direction=\"column\"\r\n                    justify=\"center\"\r\n                    alignItems=\"stretch\"\r\n                >\r\n                    <Grid item className={`${classes.hiddenOverflow} ${classes.height9}`}>\r\n                        <Container\r\n                            style={{\r\n                                paddingTop: '16px',\r\n                                height: '75%',\r\n                                width: '100%',\r\n                                position: 'absolute',\r\n                            }}\r\n                        >\r\n                            <div\r\n                                style={{\r\n                                    position: 'relative',\r\n                                    height: '100%',\r\n                                    width: '100%',\r\n                                    overflow: 'auto',\r\n                                }}\r\n                            >\r\n                                <table\r\n                                    style={{\r\n                                        // transform: 'rotateX(60deg) rotateY(0deg) rotateZ(-45deg)',\r\n                                        // transformStyle: 'preserve-3d',\r\n                                        position: 'relative',\r\n                                        margin: 'auto',\r\n                                        backgroundColor: 'rgb(196, 188, 78, 0.6)',\r\n                                        borderRadius: '4px',\r\n                                        borderCollapse: 'collapse',\r\n\r\n                                    }}\r\n                                >\r\n                                    <tbody>\r\n                                        {dreamMap !== null\r\n                                            ? createTable()\r\n                                            : <tr>\r\n                                                <td />\r\n                                            </tr>\r\n                                        }\r\n                                    </tbody>\r\n                                </table>\r\n                            </div>\r\n                        </Container>\r\n                    </Grid>\r\n                    <Grid item className={`${classes.mainGridBodyItem} ${classes.height2}`}>\r\n                        <Grid container\r\n                            className={classes.mainGridContainer}\r\n                            direction=\"row\"\r\n                            justify=\"space-evenly\"\r\n                            alignItems=\"center\" >\r\n                            <Grid item xs={1} align=\"center\" />\r\n                            <Grid item xs={2} align=\"center\">\r\n                                <Fab size=\"small\"\r\n                                    color=\"secondary\"\r\n                                    onClick={sizeDown}\r\n                                >\r\n                                    <RemoveIcon />\r\n                                </Fab>\r\n                            </Grid>\r\n                            <Grid item xs={6} align=\"center\">\r\n                                <Slider\r\n                                    min={6}\r\n                                    value={typeof cellSize === 'number' ? cellSize : 0}\r\n                                    onChange={changeCellSize}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={2} align=\"center\">\r\n                                <Fab size=\"small\"\r\n                                    color=\"primary\"\r\n                                    onClick={sizeUp}\r\n                                >\r\n                                    <AddIcon />\r\n                                </Fab>\r\n                            </Grid>\r\n                            <Grid item xs={1} align=\"center\" />\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid item className={`${classes.mainGridBodyItem} ${classes.height1}`}>\r\n                        <Grid container\r\n                            direction=\"row\"\r\n                            justify=\"space-evenly\"\r\n                            alignItems=\"center\"\r\n                        >\r\n                            <Grid item>\r\n                                <Button className={classes.actionButton}\r\n                                    variant=\"contained\"\r\n                                    color=\"secondary\"\r\n                                    onClick={() => { history.push(\"/luciddreams\") }}\r\n                                >\r\n                                    {lang.currLang.buttons.close}\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Button className={classes.actionButton}\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    onClick={() => { history.push(\"/addlocation\") }}\r\n                                >\r\n                                    {lang.currLang.buttons.add}\r\n                                </Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </MuiThemeProvider >\r\n    )\r\n}\r\n\r\nDreamMap.propTypes = {\r\n    themeMode: PropTypes.object.isRequired,\r\n    lang: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        themeMode: store.themeMode,\r\n        lang: store.lang,\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(DreamMap);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport SwipeableViews from \"react-swipeable-views\";\r\nimport { SliderPicker } from 'react-color';\r\n\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Button from '@material-ui/core/Button';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Select from \"@material-ui/core/Select\";\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\n\r\nimport { setSnackbar } from '../actions/Actions';\r\nimport { SET_SNACKBAR_MODE } from \"../actions/types\";\r\n\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\nimport { instance } from './Config';\r\nimport { useStyles } from '../styles/Styles';\r\n\r\nfunction AddLocation(props) {\r\n    const { lang, themeMode, history, palette, setSnackbar } = props;\r\n    const classes = useStyles();\r\n    const muiTheme = createMuiTheme(themeMode);\r\n    const [isEditMode, setIsEditMode] = React.useState(false);\r\n    const [value, setValue] = React.useState(0);\r\n    const [prevUrl, setPrevUrl] = React.useState('');\r\n    const [isIconsLoading, setIsIconsLoading] = React.useState(false);\r\n    const [locationIcons, setLocationIcons] = React.useState([]);\r\n    const [searchName, setSearchName] = React.useState('');\r\n    const [nameEn, setNameEn] = React.useState('');\r\n    const [nameRu, setNameRu] = React.useState('');\r\n    const [selectedIcon, setSelectedIcon] = React.useState('');\r\n    const [iconColor, setIconColor] = React.useState('');\r\n\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue);\r\n    };\r\n\r\n    const handleChangeIndex = index => {\r\n        setValue(index);\r\n    };\r\n\r\n    const changeNameRu = (e) => {\r\n        setNameRu(e.target.value)\r\n    };\r\n\r\n    const changeNameEn = (e) => {\r\n        setNameEn(e.target.value)\r\n    };\r\n\r\n    const changeIcon = (e) => {\r\n        setSelectedIcon(e.target.value);\r\n    };\r\n\r\n    const setColor = (color, e) => {\r\n        setIconColor(color.hex);\r\n    };\r\n\r\n    const loadIconsList = () => {\r\n        if (searchName.length !== 0) {\r\n            setIsIconsLoading(true);\r\n            const postData = {\r\n                name: searchName.replace(/ /g, \"%20\"),\r\n            };\r\n            instance\r\n                .post('/actions/users/geticons', postData)\r\n                .then(res => {\r\n                    if (res.data.length === 0) {\r\n                        loadIconsList();\r\n                    }\r\n                    else {\r\n                        setLocationIcons(res.data);\r\n                        setIsIconsLoading(false);\r\n                    }\r\n                });\r\n        }\r\n    };\r\n\r\n    const saveLocation = () => {\r\n        let errorMessage = '';\r\n        let error = false;\r\n        if (!isEditMode) {\r\n            if (iconColor.length === 0) {\r\n                errorMessage = lang.currLang.errors.ColorNotChange;\r\n                error = true;\r\n            }\r\n            if (selectedIcon.length === 0) {\r\n                errorMessage = lang.currLang.errors.IconNotChange;\r\n                error = true;\r\n            }\r\n            if (nameRu.length === 0) {\r\n                errorMessage = lang.currLang.errors.EmptyName;\r\n                error = true;\r\n                setValue(0);\r\n            }\r\n            if (nameEn.length === 0) {\r\n                errorMessage = lang.currLang.errors.EmptyName;\r\n                error = true;\r\n                setValue(1);\r\n            }\r\n\r\n            if (error) {\r\n                setSnackbar({\r\n                    type: SET_SNACKBAR_MODE,\r\n                    snackbar: {\r\n                        open: true,\r\n                        variant: 'error',\r\n                        message: errorMessage,\r\n                    },\r\n                });\r\n            }\r\n            else {\r\n                let postData = {\r\n                    name_rus: nameRu,\r\n                    name_eng: nameEn,\r\n                    img_url: selectedIcon,\r\n                    color: iconColor\r\n                };\r\n                console.log(postData);\r\n            }\r\n        }\r\n        else {\r\n            let chages = false;\r\n            let postData = {\r\n                id: props.location.defaultData.id,\r\n            };\r\n\r\n            if (nameRu !== props.location.defaultData.name_rus) {\r\n                postData.name_rus = nameRu;\r\n                chages = true;\r\n            }\r\n            if (nameEn !== props.location.defaultData.name_eng) {\r\n                postData.name_eng = nameEn;\r\n                chages = true;\r\n            }\r\n            if (selectedIcon !== props.location.defaultData.img_url) {\r\n                postData.img_url = selectedIcon;\r\n                chages = true;\r\n            }\r\n            if (iconColor !== props.location.defaultData.color) {\r\n                postData.color = iconColor;\r\n                chages = true;\r\n            }\r\n\r\n            if (chages) {\r\n                console.log(postData);\r\n            }\r\n            else {\r\n                setSnackbar({\r\n                    type: SET_SNACKBAR_MODE,\r\n                    snackbar: {\r\n                        open: true,\r\n                        variant: 'error',\r\n                        message: lang.currLang.errors.NoChanges,\r\n                    },\r\n                });\r\n            }\r\n        }\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        if (typeof (props.location.defaultData) !== 'undefined') {\r\n            const getIcon = (data, img_url) => {\r\n                instance\r\n                    .post('/actions/users/geticons', data)\r\n                    .then(res => {\r\n                        if (res.data.length === 0) {\r\n                            getIcon(data, img_url);\r\n                        }\r\n                        else {\r\n                            let icons = [];\r\n                            icons.push(img_url);\r\n                            const newArray = icons.concat(res.data);\r\n                            setLocationIcons(newArray);\r\n                            setIsIconsLoading(false);\r\n                        }\r\n                    });\r\n            };\r\n\r\n            if (typeof props.location.defaultData.id === 'number') {\r\n                setIsEditMode(true);\r\n                const { name_rus, name_eng, img_url, color, prevUrl } = props.location.defaultData;\r\n                setNameRu(name_rus);\r\n                setNameEn(name_eng);\r\n                setSelectedIcon(img_url);\r\n                setIconColor(color);\r\n                setPrevUrl(prevUrl);\r\n                setIsIconsLoading(true);\r\n                const postData = {\r\n                    name: name_eng,\r\n                };\r\n                getIcon(postData, img_url);\r\n            }\r\n            else {\r\n                const { prevUrl } = props.location.defaultData;\r\n                setPrevUrl(prevUrl);\r\n            }\r\n        }\r\n    }, [props.location.defaultData]);\r\n\r\n    return (\r\n        <MuiThemeProvider theme={muiTheme}>\r\n            <CssBaseline />\r\n            <div className={classes.root}>\r\n                <Grid container\r\n                    className={`${classes.height12}`}\r\n                    direction=\"column\"\r\n                    justify=\"center\"\r\n                    alignItems=\"stretch\"\r\n                >\r\n                    <Grid item className={`${classes.mainGridBodyItem} ${classes.height11}`}>\r\n                        <Paper className={classes.paper}>\r\n                            <Grid className={`${classes.height12}`}\r\n                                container\r\n                                direction=\"column\"\r\n                                justify=\"center\"\r\n                                alignItems=\"stretch\"\r\n                            >\r\n                                <Grid item className={`${classes.mainGridBodyItem} ${classes.height5}`}>\r\n                                    <Paper>\r\n                                        <Tabs centered\r\n                                            value={value}\r\n                                            onChange={handleChange}\r\n                                            indicatorColor=\"primary\"\r\n                                            textColor=\"primary\"\r\n                                        >\r\n                                            <Tab label=\"RU\" />\r\n                                            <Tab label=\"EN\" />\r\n                                        </Tabs>\r\n                                    </Paper>\r\n                                    <SwipeableViews className={classes.SwipeableViews}\r\n                                        animateHeight\r\n                                        axis={muiTheme.direction === \"rtl\" ? \"x-reverse\" : \"x\"}\r\n                                        index={value}\r\n                                        onChangeIndex={handleChangeIndex}\r\n                                    >\r\n                                        <Grid container\r\n                                            className={`${classes.height12}`}\r\n                                            direction=\"column\"\r\n                                            justify=\"center\"\r\n                                            alignItems=\"center\"\r\n                                            role=\"tabpanel\"\r\n                                        >\r\n                                            <Grid item className={classes.fullMinWidth} >\r\n                                                <TextField className={classes.inputDiv}\r\n                                                    disabled={!isIconsLoading\r\n                                                        ? false\r\n                                                        : true\r\n                                                    }\r\n                                                    required\r\n                                                    id=\"outlined-required\"\r\n                                                    value={nameRu}\r\n                                                    label={lang.currLang.texts.Name}\r\n                                                    variant=\"outlined\"\r\n                                                    onChange={changeNameRu}\r\n                                                />\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                        <Grid container\r\n                                            className={`${classes.height12}`}\r\n                                            direction=\"column\"\r\n                                            justify=\"center\"\r\n                                            alignItems=\"center\"\r\n                                            role=\"tabpanel\"\r\n                                        >\r\n                                            <Grid item className={classes.fullMinWidth} >\r\n                                                <TextField className={classes.inputDiv}\r\n                                                    disabled={!isIconsLoading\r\n                                                        ? false\r\n                                                        : true\r\n                                                    }\r\n                                                    required\r\n                                                    id=\"outlined-required\"\r\n                                                    value={nameEn}\r\n                                                    label={lang.currLang.texts.Name}\r\n                                                    variant=\"outlined\"\r\n                                                    onChange={changeNameEn}\r\n                                                />\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </SwipeableViews>\r\n                                </Grid>\r\n                                <Grid item className={`${classes.mainGridBodyItem} ${classes.height3}`}>\r\n                                    <Grid className={`${classes.height12}`}\r\n                                        container\r\n                                        direction=\"column\"\r\n                                        justify=\"center\"\r\n                                        alignItems=\"stretch\"\r\n                                    >\r\n                                        <Grid item className={`${classes.mainGridBodyItem} ${classes.height6}`}>\r\n                                            <TextField className={classes.inputDiv}\r\n                                                disabled={!isIconsLoading\r\n                                                    ? false\r\n                                                    : true\r\n                                                }\r\n                                                value={searchName}\r\n                                                id=\"outlined-required\"\r\n                                                label={lang.currLang.texts.FindIcon}\r\n                                                variant=\"outlined\"\r\n                                                onChange={(event) => setSearchName(event.target.value)}\r\n                                                onBlur={loadIconsList}\r\n                                            />\r\n                                        </Grid>\r\n                                        <Grid item className={`${classes.mainGridBodyItem} ${classes.height6}`}>\r\n                                            <div className={classes.formControl}>\r\n                                                {!isIconsLoading\r\n                                                    ? <FormControl\r\n                                                        disabled={locationIcons.length !== 0\r\n                                                            ? false\r\n                                                            : true\r\n                                                        }\r\n                                                    >\r\n                                                        <InputLabel id=\"select-icon\">\r\n                                                            {lang.currLang.texts.ChangeIcon}\r\n                                                        </InputLabel>\r\n                                                        <Select value={selectedIcon}\r\n                                                            style={{\r\n                                                                minWidth: 100,\r\n                                                            }}\r\n                                                            labelId=\"select-icon\"\r\n                                                            onChange={changeIcon}\r\n                                                            MenuProps={{\r\n                                                                PaperProps: {\r\n                                                                    style: {\r\n                                                                        maxHeight: 48 * 4.5 + 8,\r\n                                                                        width: 'auto',\r\n                                                                    },\r\n                                                                },\r\n                                                            }}\r\n                                                        >\r\n                                                            {locationIcons.map((item, key) => (\r\n                                                                <MenuItem key={key} value={item} >\r\n                                                                    <Avatar className={classes.smallAvatar}\r\n                                                                        src={item}\r\n                                                                        style={palette.type === 'dark'\r\n                                                                            ? {\r\n                                                                                filter: 'invert(1)',\r\n                                                                            }\r\n                                                                            : {}}\r\n                                                                    />\r\n                                                                </MenuItem>\r\n                                                            ))}\r\n                                                        </Select>\r\n                                                    </FormControl>\r\n                                                    : <CircularProgress />\r\n                                                }\r\n                                            </div>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                                <Grid item className={`${classes.mainGridBodyItem} ${classes.height4}`}>\r\n                                    <SliderPicker className={classes.inputDiv}\r\n                                        color={iconColor}\r\n                                        onChangeComplete={setColor}\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Paper>\r\n                    </Grid>\r\n                    <Grid item className={`${classes.mainGridBodyItem} ${classes.height1}`}>\r\n                        <Grid container\r\n                            direction=\"row\"\r\n                            justify=\"space-evenly\"\r\n                            alignItems=\"center\"\r\n                        >\r\n                            <Grid item>\r\n                                <Button className={classes.actionButton}\r\n                                    variant=\"contained\"\r\n                                    color=\"secondary\"\r\n                                    onClick={() => {\r\n                                        prevUrl.length === 0\r\n                                            ? history.push(\"/dreammap\")\r\n                                            : history.push(prevUrl)\r\n                                    }}\r\n                                >\r\n                                    {lang.currLang.buttons.close}\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    className={classes.actionButton}\r\n                                    onClick={() => saveLocation()}\r\n                                >\r\n                                    {isEditMode\r\n                                        ? lang.currLang.buttons.Save\r\n                                        : lang.currLang.buttons.add\r\n                                    }\r\n                                </Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </MuiThemeProvider >\r\n    )\r\n}\r\n\r\nAddLocation.propTypes = {\r\n    setSnackbar: PropTypes.func.isRequired,\r\n    themeMode: PropTypes.object.isRequired,\r\n    lang: PropTypes.object.isRequired,\r\n    palette: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        themeMode: store.themeMode,\r\n        palette: store.themeMode.palette,\r\n        lang: store.lang,\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setSnackbar: snackbar => dispatch(setSnackbar(snackbar)),\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(AddLocation);","export function compare(obj1, obj2) {\r\n    if (!Object.keys(obj2).every(key => obj1.hasOwnProperty(key))) {\r\n        return false;\r\n    }\r\n    return Object.keys(obj1).every(function (key) {\r\n        if (typeof obj1[key] == \"object\") {\r\n            return compare(obj1[key], obj2[key]);\r\n        }\r\n        else {\r\n            return obj1[key] === obj2[key];\r\n        }\r\n    });\r\n}","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport ruLocale from \"date-fns/locale/ru\";\r\nimport enLocale from \"date-fns/locale/ru\";\r\n\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Button from '@material-ui/core/Button';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\n\r\nimport MUIRichTextEditor from 'mui-rte';\r\nimport { convertToRaw } from 'draft-js';\r\n\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\n\r\nimport { MuiPickersUtilsProvider, KeyboardTimePicker, KeyboardDatePicker } from '@material-ui/pickers';\r\n\r\nimport FormatColorFillIcon from '@material-ui/icons/FormatColorFill';\r\nimport AddIcon from '@material-ui/icons/Add';\r\n\r\nimport { useStyles } from '../styles/Styles';\r\nimport { setSnackbar } from '../actions/Actions';\r\nimport { SET_SNACKBAR_MODE } from \"../actions/types\";\r\n\r\nimport { instance } from './Config';\r\n\r\nimport { compare } from '../functions';\r\n\r\nlet defaultTags = [];\r\n\r\nfunction AddDream(props) {\r\n    const classes = useStyles();\r\n    const { lang, themeMode, history, auth, setSnackbar } = props;\r\n    const muiTheme = createMuiTheme(themeMode);\r\n    Object.assign(muiTheme, {\r\n        overrides: {\r\n            MUIRichTextEditor: {\r\n                root: {\r\n                    border: \"1px solid gray\",\r\n                    borderRadius: '4px',\r\n                    height: '100%',\r\n                    //Весь компонент\r\n                },\r\n                container: {\r\n                    height: '100%',\r\n                    margin: '0 !Important',\r\n                    //Без шапки\r\n                },\r\n                toolbar: {\r\n                    //textAlign: 'center',\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    justifyContent: 'center',\r\n                    height: '20%',\r\n                    minHeight: '48px',\r\n                    margin: '0 !Important',\r\n                    borderBottom: \"1px solid gray\",\r\n                    borderRadius: '4px',\r\n                },\r\n                placeHolder: {\r\n                    height: '72%',\r\n                },\r\n                editor: {\r\n                    height: '72%',\r\n                    width: '100%',\r\n                    position: 'relative',\r\n                    overflow: 'hidden',\r\n                    //Эдитор\r\n                },\r\n                editorContainer: {\r\n                    margin: '0 !Important',\r\n                    padding: \"0px 14px\",\r\n                    borderRadius: '4px',\r\n                    position: 'relative',\r\n                    boxSizing: 'border-box',\r\n                    maxHeight: '100%',\r\n                    overflow: 'auto',\r\n                    //Редактор\r\n                },\r\n            }\r\n        }\r\n    })\r\n    const [isEditMode, setIsEditMode] = React.useState(false);\r\n    const [isLoading, setIsLoading] = React.useState(false);\r\n    const [titleText, setTitleText] = React.useState('');\r\n    const [selectedDate, setSelectedDate] = React.useState(new Date());\r\n    const [contentText, setContentText] = React.useState();\r\n    const [prevContentText, setPrevContentText] = React.useState();\r\n    const [selectedLocations, setselectedLocations] = React.useState([]);\r\n    const [locations, setLocations] = React.useState({});\r\n\r\n    const addLocation = () => {\r\n        saveToLocalStorage();\r\n        history.push({\r\n            pathname: \"/addlocation\",\r\n            defaultData: {\r\n                prevUrl: \"/addregulardream\",\r\n            }\r\n        });\r\n    };\r\n\r\n    const handleChangeLocations = (event, value) => {\r\n        setselectedLocations(value);\r\n    };\r\n\r\n    const changeTitle = (event) => {\r\n        setTitleText(event.target.value);\r\n    };\r\n\r\n    const handleDateChange = date => {\r\n        saveToLocalStorage();\r\n        setSelectedDate(date);\r\n    };\r\n\r\n    const changeContent = (state) => {\r\n        const currCont = state.getCurrentContent();\r\n        const convert = convertToRaw(currCont);\r\n        const content = JSON.stringify(convert);\r\n        if (prevContentText !== content) {\r\n            saveToLocalStorage();\r\n            setPrevContentText(content);\r\n        }\r\n    };\r\n\r\n    const savepost = () => {\r\n        setIsLoading(true);\r\n        let havErr = false;\r\n        let errorMessage = '';\r\n        if (typeof (titleText) !== 'undefined') {\r\n            if (titleText.length === 0) {\r\n                errorMessage = lang.currLang.errors.EmptyTitle;\r\n                havErr = true;\r\n            }\r\n        }\r\n        else {\r\n            errorMessage = lang.currLang.errors.EmptyTitle;\r\n            havErr = true;\r\n        }\r\n\r\n        if (typeof (prevContentText) !== 'undefined') {\r\n            if (JSON.parse(prevContentText).blocks[0].text.length === 0) {\r\n                errorMessage = lang.currLang.errors.EmptyDream;\r\n                havErr = true;\r\n            }\r\n        }\r\n        else {\r\n            errorMessage = lang.currLang.errors.EmptyDream;\r\n            havErr = true;\r\n        }\r\n\r\n        if (havErr) {\r\n            setSnackbar({\r\n                type: SET_SNACKBAR_MODE,\r\n                snackbar: {\r\n                    open: true,\r\n                    variant: 'error',\r\n                    message: errorMessage,\r\n                },\r\n            });\r\n            setIsLoading(false);\r\n        }\r\n        else {\r\n            if (isEditMode) {\r\n                let hasChanges = false;\r\n                let tagChanges = false;\r\n                let postData = {\r\n                    post_id: props.location.defaultData.post_id,\r\n                };\r\n\r\n                if (props.location.defaultData.post_title !== titleText) {\r\n                    postData.title = titleText;\r\n                    hasChanges = true;\r\n                }\r\n\r\n                if (props.location.defaultData.dream_date.getTime() !== selectedDate.getTime()) {\r\n                    postData.dreamDate = selectedDate.toLocaleString(\"ru-RU\", { timeZone: 'Europe/London' });\r\n                    hasChanges = true;\r\n                }\r\n\r\n                if (props.location.defaultData.post_content !== prevContentText) {\r\n                    postData.content = prevContentText;\r\n                    hasChanges = true;\r\n                }\r\n\r\n                if (defaultTags.length === selectedLocations.length) {\r\n                    if (!compare(defaultTags, selectedLocations)) {\r\n                        hasChanges = true;\r\n                        tagChanges = true;\r\n                    }\r\n                }\r\n                else {\r\n                    hasChanges = true;\r\n                    tagChanges = true;\r\n                }\r\n\r\n                if (hasChanges) {\r\n                    if (tagChanges) {\r\n                        let deleteTags = defaultTags.filter(item1 =>\r\n                            !selectedLocations.some(item2 => (\r\n                                item2.id === item1.id)\r\n                            )\r\n                        );\r\n                        let addTags = selectedLocations.filter(item1 =>\r\n                            !defaultTags.some(item2 => (\r\n                                item2.id === item1.id)\r\n                            )\r\n                        );\r\n                        if (addTags.length > 0) {\r\n                            let add = {};\r\n                            addTags.map((item, key) => (\r\n                                add[key] = item\r\n                            ));\r\n                            postData.tags = { ...postData.tags, add: add };\r\n                        }\r\n                        if (deleteTags.length > 0) {\r\n                            let remove = {};\r\n                            deleteTags.map((item, key) => (\r\n                                remove[key] = item\r\n                            ));\r\n                            postData.tags = { ...postData.tags, remove: remove };\r\n                        }\r\n                    }\r\n                    instance\r\n                        .post('/actions/users/updatepost', postData)\r\n                        .then(res => {\r\n                            setIsLoading(false);\r\n                            setSnackbar({\r\n                                type: SET_SNACKBAR_MODE,\r\n                                snackbar: {\r\n                                    open: true,\r\n                                    variant: 'success',\r\n                                    message: lang.currLang.texts.success,\r\n                                },\r\n                            });\r\n                            window.localStorage.removeItem(\"postDreamData\");\r\n                            history.push(\"/dreams\")\r\n                        })\r\n                        .catch(err => {\r\n                            console.log(err);\r\n                            setIsLoading(false);\r\n                        });\r\n                }\r\n                else {\r\n                    setSnackbar({\r\n                        type: SET_SNACKBAR_MODE,\r\n                        snackbar: {\r\n                            open: true,\r\n                            variant: 'error',\r\n                            message: lang.currLang.errors.NoChanges,\r\n                        },\r\n                    });\r\n                    setIsLoading(false);\r\n                }\r\n            }\r\n            else {\r\n                let postData = {\r\n                    title: titleText,\r\n                    dreamDate: selectedDate.toLocaleString(\"ru-RU\", { timeZone: 'Europe/London' }),\r\n                    content: prevContentText,\r\n                    create_user: auth.user.id,\r\n                    post_type: 0,\r\n                    nickname: auth.user.nickname,\r\n                    tags: selectedLocations,\r\n                }\r\n                instance\r\n                    .post('/actions/users/createpost', postData)\r\n                    .then(res => {\r\n                        setIsLoading(false);\r\n                        setSnackbar({\r\n                            type: SET_SNACKBAR_MODE,\r\n                            snackbar: {\r\n                                open: true,\r\n                                variant: 'success',\r\n                                message: lang.currLang.texts.success,\r\n                            },\r\n                        });\r\n                        window.localStorage.removeItem(\"postDreamData\");\r\n                        history.push(\"/luciddreams\")\r\n                    })\r\n                    .catch(err => {\r\n                        setIsLoading(false);\r\n                    });\r\n            }\r\n        }\r\n    };\r\n\r\n    const saveToLocalStorage = () => {\r\n        let data = {};\r\n        if (window.localStorage.getItem(\"postDreamData\")) {\r\n            data = JSON.parse(window.localStorage.getItem(\"postDreamData\"));\r\n        }\r\n        data.selectedDate = selectedDate;\r\n        if (titleText.length !== 0) {\r\n            data.titleText = titleText;\r\n        }\r\n        if (typeof prevContentText !== 'undefined')\r\n            if (prevContentText.length !== 0) {\r\n                data.contentText = prevContentText;\r\n            }\r\n        window.localStorage.setItem(\"postDreamData\", JSON.stringify(data));\r\n    };\r\n\r\n    const loadFromLocalStorage = () => {\r\n        const { selectedDate, titleText, contentText } = JSON.parse(window.localStorage.getItem(\"postDreamData\"));\r\n        if (typeof selectedDate !== 'undefined') {\r\n            setSelectedDate(new Date(selectedDate));\r\n        }\r\n        if (typeof titleText !== 'undefined') {\r\n            setTitleText(titleText);\r\n        }\r\n        if (typeof contentText !== 'undefined') {\r\n            setContentText(contentText);\r\n            setPrevContentText(contentText);\r\n        }\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        if (window.localStorage.getItem(\"postDreamData\"))\r\n            loadFromLocalStorage();\r\n\r\n        defaultTags = [];\r\n        instance.get(\"/gettags\")\r\n            .then(res => {\r\n                setLocations(res.data);\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            });\r\n\r\n        if (typeof (props.location.defaultData) !== 'undefined') {\r\n            setIsEditMode(true);\r\n            const { post_title, dream_date, post_content, tags } = props.location.defaultData;\r\n            setTitleText(post_title);\r\n            setSelectedDate(dream_date);\r\n            setContentText(post_content);\r\n            setPrevContentText(post_content);\r\n            if (typeof tags[0][0] === 'string') {\r\n                tags.forEach(item => {\r\n                    let location = {};\r\n                    location.id = Number(item[0]);\r\n                    location.name_rus = item[1];\r\n                    location.name_eng = item[2];\r\n                    location.img_url = item[3];\r\n                    defaultTags.push(location);\r\n                });\r\n                setselectedLocations(defaultTags);\r\n            }\r\n        }\r\n    }, [props.location.defaultData, lang.currLang]);\r\n\r\n    return (\r\n        <MuiThemeProvider theme={muiTheme}>\r\n            <CssBaseline />\r\n            <div className={classes.root} >\r\n                <Grid container\r\n                    className={`${classes.height12}`}\r\n                    direction=\"column\"\r\n                    justify=\"center\"\r\n                    alignItems=\"stretch\"\r\n                >\r\n                    <Grid item className={`${classes.mainGridBodyItem} ${classes.height11}`}>\r\n                        <Paper className={classes.paper}>\r\n                            <Grid container\r\n                                className={`${classes.height12}`}\r\n                                direction=\"column\"\r\n                                justify=\"center\"\r\n                                alignItems=\"stretch\"\r\n                            >\r\n                                <Grid item className={`${classes.fullMinWidth} ${classes.height2}`}>\r\n                                    <TextField className={classes.inputDiv}\r\n                                        required\r\n                                        id=\"outlined-required\"\r\n                                        value={titleText}\r\n                                        label={lang.currLang.texts.title}\r\n                                        variant=\"outlined\"\r\n                                        onChange={(e) => { changeTitle(e) }}\r\n                                        onBlur={saveToLocalStorage}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item className={`${classes.fullMinWidth} ${classes.height2}`}>\r\n                                    <MuiPickersUtilsProvider utils={DateFnsUtils}\r\n                                        locale={lang.currLang.current === \"Ru\"\r\n                                            ? ruLocale\r\n                                            : enLocale}\r\n                                    >\r\n                                        <Grid container\r\n                                            className={classes.pickerGridContainer}\r\n                                            direction=\"row\"\r\n                                            justify=\"center\"\r\n                                            alignItems=\"stretch\"\r\n                                        >\r\n                                            <Grid item xs={7} >\r\n                                                <KeyboardDatePicker className={classes.pickers}\r\n                                                    id=\"date-picker-dialog\"\r\n                                                    label={lang.currLang.texts.pickDate}\r\n                                                    format=\"dd.MM.yyyy\"\r\n                                                    value={selectedDate}\r\n                                                    onChange={handleDateChange}\r\n                                                    KeyboardButtonProps={{\r\n                                                        'aria-label': 'change date',\r\n                                                    }}\r\n                                                />\r\n                                            </Grid>\r\n                                            <Grid item xs={5} >\r\n                                                <KeyboardTimePicker className={classes.pickers}\r\n                                                    id=\"time-picker\"\r\n                                                    label={lang.currLang.texts.pickTime}\r\n                                                    value={selectedDate}\r\n                                                    onChange={handleDateChange}\r\n                                                    ampm={false}\r\n                                                    KeyboardButtonProps={{\r\n                                                        'aria-label': 'change time',\r\n                                                    }}\r\n                                                />\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </MuiPickersUtilsProvider>\r\n                                </Grid>\r\n                                <Grid item className={`${classes.fullMinWidth} ${classes.height5}`}>\r\n                                    <div className={classes.inputScrollableDiv}>\r\n                                        <MUIRichTextEditor\r\n                                            value={contentText}\r\n                                            onChange={changeContent}\r\n                                            label={lang.currLang.texts.content}\r\n                                            inlineToolbar={false}\r\n                                            controls={[\r\n                                                \"bold\",\r\n                                                \"italic\",\r\n                                                \"underline\",\r\n                                                \"strikethrough\",\r\n                                                \"colorfill\",\r\n                                            ]}\r\n                                            customControls={[\r\n                                                {\r\n                                                    name: \"colorfill\",\r\n                                                    icon: <FormatColorFillIcon />,\r\n                                                    type: \"inline\",\r\n                                                    inlineStyle: {\r\n                                                        backgroundColor: \"yellow\",\r\n                                                        color: \"black\"\r\n                                                    }\r\n                                                }\r\n                                            ]}\r\n                                        />\r\n\r\n                                    </div>\r\n                                </Grid>\r\n                                <Grid item className={`${classes.fullMinWidth} ${classes.height3}`}>\r\n                                    <Grid container\r\n                                        className={`${classes.height12}`}\r\n                                        direction=\"row\"\r\n                                        justify=\"center\"\r\n                                        alignItems=\"stretch\"\r\n                                    >\r\n                                        <Grid item xs={10} style={{ position: 'relative' }}>\r\n                                            {locations.length\r\n                                                ? <Autocomplete\r\n                                                    multiple\r\n                                                    className={classes.inputDiv}\r\n                                                    id=\"tags-outlined\"\r\n                                                    size=\"small\"\r\n                                                    options={locations}\r\n                                                    getOptionLabel={option => (\r\n                                                        <Chip\r\n                                                            size=\"small\"\r\n                                                            className={classes.chip}\r\n                                                            avatar={\r\n                                                                <Avatar src={option.img_url} />\r\n                                                            }\r\n                                                            label={\r\n                                                                lang.currLang.current === \"Ru\"\r\n                                                                    ? option.name_rus\r\n                                                                    : option.name_eng\r\n                                                            }\r\n                                                        />\r\n                                                    )}\r\n                                                    defaultValue={\r\n                                                        defaultTags.map(item => {\r\n                                                            return locations[item.id - 1];\r\n                                                        })\r\n                                                    }\r\n                                                    onChange={(event, value) => handleChangeLocations(event, value)}\r\n                                                    filterSelectedOptions\r\n                                                    renderInput={params => (\r\n                                                        <TextField\r\n                                                            {...params}\r\n                                                            label={lang.currLang.texts.tags}\r\n                                                            fullWidth\r\n                                                        />\r\n                                                    )}\r\n                                                />\r\n                                                : <div className={classes.inputDiv}>\r\n                                                    <LinearProgress />\r\n                                                </div>\r\n                                            }\r\n                                        </Grid>\r\n                                        <Grid item xs={2} style={{ position: 'relative' }}>\r\n                                            <IconButton onClick={addLocation} className={`${classes.centerButton}`}>\r\n                                                <AddIcon fontSize=\"small\" />\r\n                                            </IconButton>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Paper>\r\n                    </Grid>\r\n                    <Grid item className={`${classes.mainGridBodyItem} ${classes.height1}`}>\r\n                        {isLoading\r\n                            ? <LinearProgress />\r\n                            : <Grid\r\n                                container\r\n                                direction=\"row\"\r\n                                justify=\"space-evenly\"\r\n                                alignItems=\"center\"\r\n                            >\r\n                                <Grid item>\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        color=\"secondary\"\r\n                                        className={classes.actionButton}\r\n                                        onClick={() => {\r\n                                            isEditMode\r\n                                                ? history.push(\"/dreams\")\r\n                                                : history.push(\"/luciddreams\");\r\n                                            window.localStorage.removeItem(\"postDreamData\");\r\n                                        }}\r\n                                    >\r\n                                        {lang.currLang.buttons.close}\r\n                                    </Button>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        color=\"primary\"\r\n                                        className={classes.actionButton}\r\n                                        onClick={() => savepost()}\r\n                                    >\r\n                                        {isEditMode\r\n                                            ? lang.currLang.buttons.Save\r\n                                            : lang.currLang.buttons.add\r\n                                        }\r\n                                    </Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                        }\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </MuiThemeProvider >\r\n    );\r\n};\r\n\r\nAddDream.propTypes = {\r\n    setSnackbar: PropTypes.func.isRequired,\r\n    themeMode: PropTypes.object.isRequired,\r\n    lang: PropTypes.object.isRequired,\r\n    auth: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        themeMode: store.themeMode,\r\n        lang: store.lang,\r\n        auth: store.auth,\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setSnackbar: snackbar => dispatch(setSnackbar(snackbar)),\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(AddDream);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport ruLocale from \"date-fns/locale/ru\";\r\nimport enLocale from \"date-fns/locale/ru\";\r\n\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Button from '@material-ui/core/Button';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\n\r\nimport MUIRichTextEditor from 'mui-rte';\r\nimport { convertToRaw } from 'draft-js';\r\n\r\nimport Rating from \"@material-ui/lab/Rating\";\r\n\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\n\r\nimport { MuiPickersUtilsProvider, KeyboardTimePicker, KeyboardDatePicker } from '@material-ui/pickers';\r\n\r\nimport FormatColorFillIcon from '@material-ui/icons/FormatColorFill';\r\nimport AddIcon from '@material-ui/icons/Add';\r\n\r\nimport { useStyles } from '../styles/Styles';\r\nimport { SET_SNACKBAR_MODE } from \"../actions/types\";\r\nimport { setSnackbar } from '../actions/Actions';\r\n\r\nimport { instance } from './Config';\r\n\r\nimport { compare } from '../functions';\r\n\r\nlet defaultTechnics = [];\r\nlet defaultTags = [];\r\n\r\nfunction AddCDream(props) {\r\n    const classes = useStyles();\r\n    const { lang, themeMode, history, auth, setSnackbar } = props;\r\n    const muiTheme = createMuiTheme(themeMode);\r\n    Object.assign(muiTheme, {\r\n        overrides: {\r\n            MUIRichTextEditor: {\r\n                root: {\r\n                    border: \"1px solid gray\",\r\n                    borderRadius: '4px',\r\n                    height: '100%',\r\n                    //Весь компонент\r\n                },\r\n                container: {\r\n                    height: '100%',\r\n                    margin: '0 !Important',\r\n                    //Без шапки\r\n                },\r\n                toolbar: {\r\n                    //textAlign: 'center',\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    justifyContent: 'center',\r\n                    height: '20%',\r\n                    minHeight: '48px',\r\n                    margin: '0 !Important',\r\n                    borderBottom: \"1px solid gray\",\r\n                    borderRadius: '4px',\r\n                },\r\n                placeHolder: {\r\n                    height: '72%',\r\n                },\r\n                editor: {\r\n                    height: '72%',\r\n                    width: '100%',\r\n                    position: 'relative',\r\n                    overflow: 'hidden',\r\n                    //Эдитор\r\n                },\r\n                editorContainer: {\r\n                    margin: '0 !Important',\r\n                    padding: \"0px 14px\",\r\n                    borderRadius: '4px',\r\n                    position: 'relative',\r\n                    boxSizing: 'border-box',\r\n                    maxHeight: '100%',\r\n                    overflow: 'auto',\r\n                    //Редактор\r\n                },\r\n            }\r\n        }\r\n    })\r\n    const [isEditMode, setIsEditMode] = React.useState(false);\r\n    const [isLoading, setIsLoading] = React.useState(false);\r\n    const [titleText, setTitleText] = React.useState('');\r\n    const [selectedDate, setSelectedDate] = React.useState(new Date());\r\n    const [contentText, setContentText] = React.useState();\r\n    const [prevContentText, setPrevContentText] = React.useState();\r\n    const [selectedLocations, setselectedLocations] = React.useState([]);\r\n    const [selectedTechnics, setselectedTechnics] = React.useState([]);\r\n    const [realisticsValue, setRealisticsValue] = React.useState(1);\r\n    const [locations, setLocations] = React.useState({});\r\n    const [technics, setTechnics] = React.useState({});\r\n\r\n    const addLocation = () => {\r\n        saveToLocalStorage();\r\n        history.push({\r\n            pathname: \"/addlocation\",\r\n            defaultData: {\r\n                prevUrl: \"/addcdream\",\r\n            }\r\n        });\r\n    };\r\n\r\n    const handleChangeRealistics = (event, newValue) => {\r\n        setRealisticsValue(newValue);\r\n    };\r\n\r\n    const handleChangeLocations = (event, value) => {\r\n        setselectedLocations(value);\r\n    };\r\n\r\n    const handleChangeTechnics = (event, value) => {\r\n        setselectedTechnics(value);\r\n    };\r\n\r\n    const blurTitle = (event) => {\r\n        setTitleText(event.target.value);\r\n    };\r\n\r\n    const handleDateChange = date => {\r\n        saveToLocalStorage();\r\n        setSelectedDate(date);\r\n    };\r\n\r\n    const changeContent = (state) => {\r\n        const currCont = state.getCurrentContent();\r\n        const convert = convertToRaw(currCont);\r\n        const content = JSON.stringify(convert);\r\n        if (prevContentText !== content) {\r\n            saveToLocalStorage();\r\n            setPrevContentText(content);\r\n        }\r\n    };\r\n\r\n    const savepost = () => {\r\n        setIsLoading(true);\r\n        let havErr = false;\r\n        let errorMessage = '';\r\n        if (typeof (titleText) !== 'undefined') {\r\n            if (titleText.length === 0) {\r\n                errorMessage = lang.currLang.errors.EmptyTitle;\r\n                havErr = true;\r\n            }\r\n        }\r\n        else {\r\n            errorMessage = lang.currLang.errors.EmptyTitle;\r\n            havErr = true;\r\n        }\r\n        if (typeof (prevContentText) !== 'undefined') {\r\n            if (JSON.parse(prevContentText).blocks[0].text.length === 0) {\r\n                errorMessage = lang.currLang.errors.EmptyDream;\r\n                havErr = true;\r\n            }\r\n        }\r\n        else {\r\n            errorMessage = lang.currLang.errors.EmptyDream;\r\n            havErr = true;\r\n        }\r\n        if (havErr) {\r\n            setSnackbar({\r\n                type: SET_SNACKBAR_MODE,\r\n                snackbar: {\r\n                    open: true,\r\n                    variant: 'error',\r\n                    message: errorMessage,\r\n                },\r\n            });\r\n            setIsLoading(false);\r\n        }\r\n        else {\r\n            if (isEditMode) {\r\n                let hasChanges = false;\r\n                let tagChanges = false;\r\n                let techChanges = false;\r\n                let postData = {\r\n                    post_id: props.location.defaultData.post_id,\r\n                };\r\n\r\n                if (props.location.defaultData.post_title !== titleText) {\r\n                    postData.title = titleText;\r\n                    hasChanges = true;\r\n                }\r\n\r\n                if (props.location.defaultData.dream_date.getTime() !== selectedDate.getTime()) {\r\n                    postData.dreamDate = selectedDate.toLocaleString(\"ru-RU\", { timeZone: 'Europe/London' });\r\n                    hasChanges = true;\r\n                }\r\n\r\n                if (props.location.defaultData.post_content !== prevContentText) {\r\n                    postData.content = prevContentText;\r\n                    hasChanges = true;\r\n                }\r\n\r\n                if (props.location.defaultData.rating !== realisticsValue) {\r\n                    postData.rating = realisticsValue;\r\n                    hasChanges = true;\r\n                }\r\n\r\n                if (defaultTechnics.length === selectedTechnics.length) {\r\n                    if (!compare(defaultTechnics, selectedTechnics)) {\r\n                        hasChanges = true;\r\n                        techChanges = true;\r\n                    }\r\n                }\r\n                else {\r\n                    hasChanges = true;\r\n                    techChanges = true;\r\n                }\r\n\r\n                if (defaultTags.length === selectedLocations.length) {\r\n                    if (!compare(defaultTags, selectedLocations)) {\r\n                        hasChanges = true;\r\n                        tagChanges = true;\r\n                    }\r\n                }\r\n                else {\r\n                    hasChanges = true;\r\n                    tagChanges = true;\r\n                }\r\n\r\n                if (hasChanges) {\r\n                    if (tagChanges) {\r\n                        let deleteTags = defaultTags.filter(item1 =>\r\n                            !selectedLocations.some(item2 => (\r\n                                item2.id === item1.id)\r\n                            )\r\n                        );\r\n                        let addTags = selectedLocations.filter(item1 =>\r\n                            !defaultTags.some(item2 => (\r\n                                item2.id === item1.id)\r\n                            )\r\n                        );\r\n                        if (addTags.length > 0) {\r\n                            let add = {};\r\n                            addTags.map((item, key) => (\r\n                                add[key] = item\r\n                            ));\r\n                            postData.tags = { ...postData.tags, add: add };\r\n                        }\r\n                        if (deleteTags.length > 0) {\r\n                            let remove = {};\r\n                            deleteTags.map((item, key) => (\r\n                                remove[key] = item\r\n                            ));\r\n                            postData.tags = { ...postData.tags, remove: remove };\r\n                        }\r\n                    }\r\n                    if (techChanges) {\r\n                        let deleteTech = defaultTechnics.filter(item1 =>\r\n                            !selectedTechnics.some(item2 => (\r\n                                item2.id === item1.id)\r\n                            )\r\n                        );\r\n                        let addTech = selectedTechnics.filter(item1 =>\r\n                            !defaultTechnics.some(item2 => (\r\n                                item2.id === item1.id)\r\n                            )\r\n                        );\r\n                        if (addTech.length > 0) {\r\n                            let add = {};\r\n                            addTech.map((item, key) => (\r\n                                add[key] = item\r\n                            ));\r\n                            postData.technics = { ...postData.technics, add: add };\r\n                        }\r\n                        if (deleteTech.length > 0) {\r\n                            let remove = {};\r\n                            deleteTech.map((item, key) => (\r\n                                remove[key] = item\r\n                            ));\r\n                            postData.technics = { ...postData.technics, remove: remove };\r\n                        }\r\n                    }\r\n                    instance\r\n                        .post('/actions/users/updatepost', postData)\r\n                        .then(res => {\r\n                            setIsLoading(false);\r\n                            setSnackbar({\r\n                                type: SET_SNACKBAR_MODE,\r\n                                snackbar: {\r\n                                    open: true,\r\n                                    variant: 'success',\r\n                                    message: lang.currLang.texts.success,\r\n                                },\r\n                            });\r\n                            window.localStorage.removeItem(\"postСDreamData\");\r\n                            history.push(\"/dreams\")\r\n                        })\r\n                        .catch(err => {\r\n                            console.log(err);\r\n                            setIsLoading(false);\r\n                        });\r\n                }\r\n                else {\r\n                    setSnackbar({\r\n                        type: SET_SNACKBAR_MODE,\r\n                        snackbar: {\r\n                            open: true,\r\n                            variant: 'error',\r\n                            message: lang.currLang.errors.NoChanges,\r\n                        },\r\n                    });\r\n                    setIsLoading(false);\r\n                }\r\n            }\r\n            else {\r\n                let postData = {\r\n                    title: titleText,\r\n                    dreamDate: selectedDate.toLocaleString(\"ru-RU\", { timeZone: 'Europe/London' }),\r\n                    content: prevContentText,\r\n                    create_user: auth.user.id,\r\n                    rating: realisticsValue,\r\n                    post_type: 1,\r\n                    nickname: auth.user.nickname,\r\n                    tags: selectedLocations,\r\n                    technics: selectedTechnics\r\n                }\r\n\r\n                instance\r\n                    .post('/actions/users/createpost', postData)\r\n                    .then(res => {\r\n                        setIsLoading(false);\r\n                        setSnackbar({\r\n                            type: SET_SNACKBAR_MODE,\r\n                            snackbar: {\r\n                                open: true,\r\n                                variant: 'success',\r\n                                message: lang.currLang.texts.success,\r\n                            },\r\n                        });\r\n                        window.localStorage.removeItem(\"postСDreamData\");\r\n                        history.push(\"/luciddreams\")\r\n                    })\r\n                    .catch(err => {\r\n                        setIsLoading(false);\r\n                    });\r\n            }\r\n        }\r\n    };\r\n\r\n    const saveToLocalStorage = () => {\r\n        let data = {};\r\n        if (window.localStorage.getItem(\"postСDreamData\")) {\r\n            data = JSON.parse(window.localStorage.getItem(\"postСDreamData\"));\r\n        }\r\n        data.selectedDate = selectedDate;\r\n        if (titleText.length !== 0) {\r\n            data.titleText = titleText;\r\n        }\r\n        if (typeof prevContentText !== 'undefined')\r\n            if (prevContentText.length !== 0) {\r\n                data.contentText = prevContentText;\r\n            }\r\n        window.localStorage.setItem(\"postСDreamData\", JSON.stringify(data));\r\n    };\r\n\r\n    const loadFromLocalStorage = () => {\r\n        const { selectedDate, titleText, contentText } = JSON.parse(window.localStorage.getItem(\"postСDreamData\"));\r\n        if (typeof selectedDate !== 'undefined') {\r\n            setSelectedDate(new Date(selectedDate));\r\n        }\r\n        if (typeof titleText !== 'undefined') {\r\n            setTitleText(titleText);\r\n        }\r\n        if (typeof contentText !== 'undefined') {\r\n            setContentText(contentText);\r\n            setPrevContentText(contentText);\r\n        }\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        if (window.localStorage.getItem(\"postСDreamData\"))\r\n            loadFromLocalStorage();\r\n\r\n        defaultTechnics = [];\r\n        defaultTags = [];\r\n        instance.get(\"/gettags\")\r\n            .then(res => {\r\n                setLocations(res.data);\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            });\r\n        instance.get(\"/gettechnics\")\r\n            .then(res => {\r\n                setTechnics(res.data);\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            });\r\n\r\n        if (typeof (props.location.defaultData) !== 'undefined') {\r\n            setIsEditMode(true);\r\n            defaultTechnics = [];\r\n            defaultTags = [];\r\n            const { post_title, dream_date, post_content, technics, tags, rating } = props.location.defaultData;\r\n            setTitleText(post_title);\r\n            setSelectedDate(dream_date);\r\n            setContentText(post_content);\r\n            setPrevContentText(post_content);\r\n\r\n            if (typeof tags[0][0] === 'string') {\r\n                tags.forEach(item => {\r\n                    let location = {};\r\n                    location.id = Number(item[0]);\r\n                    location.name_rus = item[1];\r\n                    location.name_eng = item[2];\r\n                    location.img_url = item[3];\r\n                    defaultTags.push(location);\r\n                });\r\n                setselectedLocations(defaultTags);\r\n            }\r\n\r\n            if (typeof technics[0][0] === 'string') {\r\n                technics.forEach(item => {\r\n                    let tech = {};\r\n                    tech.id = Number(item[0]);\r\n                    tech.name_rus = item[1];\r\n                    tech.name_eng = item[2];\r\n                    defaultTechnics.push(tech);\r\n                });\r\n                setselectedTechnics(defaultTechnics);\r\n            }\r\n\r\n            setRealisticsValue(rating);\r\n        }\r\n    }, [props.location.defaultData, lang.currLang]);\r\n\r\n    return (\r\n        <MuiThemeProvider theme={muiTheme}>\r\n            <CssBaseline />\r\n            <div className={classes.root} >\r\n                <Grid className={classes.mainGridContainer}\r\n                    container\r\n                    direction=\"column\"\r\n                    justify=\"center\"\r\n                    alignItems=\"stretch\" >\r\n                    <Grid item xs={11} className={classes.mainGridBodyItem}>\r\n                        <Paper className={classes.paper}>\r\n                            <Grid className={`${classes.mainGridContainer} ${classes.noWrap}`}\r\n                                container\r\n                                direction=\"column\"\r\n                                justify=\"center\"\r\n                                alignItems=\"center\" >\r\n                                <Grid item xs={2} className={classes.fullMinWidth} >\r\n                                    <TextField className={classes.inputDiv}\r\n                                        required\r\n                                        id=\"outlined-required\"\r\n                                        value={titleText}\r\n                                        label={lang.currLang.texts.title}\r\n                                        variant=\"outlined\"\r\n                                        onChange={(e) => { blurTitle(e) }}\r\n                                        onBlur={saveToLocalStorage}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={1} className={classes.fullMinWidth} >\r\n                                    <MuiPickersUtilsProvider utils={DateFnsUtils}\r\n                                        locale={lang.currLang.current === \"Ru\"\r\n                                            ? ruLocale\r\n                                            : enLocale}\r\n                                    >\r\n                                        <Grid className={classes.pickerGridContainer}\r\n                                            container\r\n                                            direction=\"row\"\r\n                                            justify=\"center\"\r\n                                            alignItems=\"stretch\" >\r\n                                            <Grid item xs={7} >\r\n                                                <KeyboardDatePicker className={classes.pickers}\r\n                                                    id=\"date-picker-dialog\"\r\n                                                    label={lang.currLang.texts.pickDate}\r\n                                                    format=\"dd.MM.yyyy\"\r\n                                                    value={selectedDate}\r\n                                                    onChange={handleDateChange}\r\n                                                    KeyboardButtonProps={{\r\n                                                        'aria-label': 'change date',\r\n                                                    }}\r\n                                                />\r\n                                            </Grid>\r\n                                            <Grid item xs={5} >\r\n                                                <KeyboardTimePicker className={classes.pickers}\r\n                                                    id=\"time-picker\"\r\n                                                    label={lang.currLang.texts.pickTime}\r\n                                                    value={selectedDate}\r\n                                                    onChange={handleDateChange}\r\n                                                    ampm={false}\r\n                                                    KeyboardButtonProps={{\r\n                                                        'aria-label': 'change time',\r\n                                                    }}\r\n                                                />\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </MuiPickersUtilsProvider>\r\n                                </Grid>\r\n                                <Grid item xs={4} className={classes.fullMinWidth} >\r\n                                    <div className={classes.inputScrollableDiv}>\r\n                                        <MUIRichTextEditor\r\n                                            value={contentText}\r\n                                            onChange={changeContent}\r\n                                            label={lang.currLang.texts.content}\r\n                                            inlineToolbar={false}\r\n                                            controls={[\r\n                                                \"bold\",\r\n                                                \"italic\",\r\n                                                \"underline\",\r\n                                                \"strikethrough\",\r\n                                                \"colorfill\",\r\n                                            ]}\r\n                                            customControls={[\r\n                                                {\r\n                                                    name: \"colorfill\",\r\n                                                    icon: <FormatColorFillIcon />,\r\n                                                    type: \"inline\",\r\n                                                    inlineStyle: {\r\n                                                        backgroundColor: \"yellow\",\r\n                                                        color: \"black\"\r\n                                                    }\r\n                                                }\r\n                                            ]}\r\n                                        />\r\n                                    </div>\r\n                                </Grid>\r\n                                <Grid item xs={2} className={classes.fullMinWidth}>\r\n                                    <Grid container\r\n                                        className={classes.mainGridContainer}\r\n                                        direction=\"row\"\r\n                                        justify=\"center\"\r\n                                        alignItems=\"center\"\r\n                                    >\r\n                                        <Grid item xs={12} style={{ position: 'relative' }}>\r\n                                            {technics.length\r\n                                                ? <Autocomplete\r\n                                                    multiple\r\n                                                    className={classes.inputDiv}\r\n                                                    id=\"technics-outlined\"\r\n                                                    size=\"small\"\r\n                                                    options={technics}\r\n                                                    getOptionLabel={option => (\r\n                                                        <Chip\r\n                                                            size=\"small\"\r\n                                                            className={classes.chip}\r\n                                                            label={\r\n                                                                lang.currLang.current === \"Ru\"\r\n                                                                    ? option.name_rus\r\n                                                                    : option.name_eng\r\n                                                            }\r\n                                                        />\r\n                                                    )}\r\n                                                    defaultValue={\r\n                                                        defaultTechnics.map(item => {\r\n                                                            return technics[item.id - 1];\r\n                                                        })}\r\n                                                    onChange={(event, value) => handleChangeTechnics(event, value)}\r\n                                                    filterSelectedOptions\r\n                                                    renderInput={params => (\r\n                                                        <TextField\r\n                                                            {...params}\r\n                                                            label={lang.currLang.texts.technics}\r\n                                                            fullWidth\r\n                                                        />\r\n                                                    )}\r\n                                                />\r\n                                                : <div className={classes.inputDiv}>\r\n                                                    <LinearProgress />\r\n                                                </div>\r\n                                            }\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                                <Grid item xs={2} className={classes.fullMinWidth}>\r\n                                    <Grid container\r\n                                        className={classes.mainGridContainer}\r\n                                        direction=\"row\"\r\n                                        justify=\"center\"\r\n                                        alignItems=\"center\"\r\n                                    >\r\n                                        <Grid item xs={10} style={{ position: 'relative' }}>\r\n                                            {locations.length\r\n                                                ? <Autocomplete\r\n                                                    multiple\r\n                                                    className={classes.inputDiv}\r\n                                                    id=\"tags-outlined\"\r\n                                                    size=\"small\"\r\n                                                    options={locations}\r\n                                                    getOptionLabel={option => (\r\n                                                        <Chip\r\n                                                            size=\"small\"\r\n                                                            className={classes.chip}\r\n                                                            avatar={\r\n                                                                <Avatar src={option.img_url} />\r\n                                                            }\r\n                                                            label={\r\n                                                                lang.currLang.current === \"Ru\"\r\n                                                                    ? option.name_rus\r\n                                                                    : option.name_eng\r\n                                                            }\r\n                                                        />\r\n                                                    )}\r\n                                                    defaultValue={\r\n                                                        defaultTags.map(item => {\r\n                                                            return locations[item.id - 1];\r\n                                                        })}\r\n                                                    onChange={(event, value) => handleChangeLocations(event, value)}\r\n                                                    filterSelectedOptions\r\n                                                    renderInput={params => (\r\n                                                        <TextField\r\n                                                            {...params}\r\n                                                            label={lang.currLang.texts.tags}\r\n                                                            fullWidth\r\n                                                        />\r\n                                                    )}\r\n                                                />\r\n                                                : <div className={classes.inputDiv}>\r\n                                                    <LinearProgress />\r\n                                                </div>\r\n                                            }\r\n                                        </Grid>\r\n                                        <Grid item xs={2}>\r\n                                            <IconButton onClick={addLocation}>\r\n                                                <AddIcon fontSize=\"small\" />\r\n                                            </IconButton>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                                <Grid item xs={1} className={classes.fullMinWidth} >\r\n                                    <div className={classes.div85width}>\r\n                                        <Grid className={classes.ratingGridContainer}\r\n                                            container\r\n                                            direction=\"row\"\r\n                                            justify=\"center\"\r\n                                            alignItems=\"stretch\" >\r\n                                            <Grid item xs={6}>\r\n                                                <Typography variant=\"body2\">\r\n                                                    {lang.currLang.texts.rating}:\r\n                                                </Typography>\r\n                                            </Grid>\r\n                                            <Grid item xs={6}>\r\n                                                <Rating name=\"simple-controlled\"\r\n                                                    value={realisticsValue}\r\n                                                    onChange={handleChangeRealistics}\r\n                                                />\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </div>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Paper>\r\n                    </Grid>\r\n                    <Grid item xs={1} className={classes.mainGridBodyItem} >\r\n                        {isLoading\r\n                            ? <LinearProgress />\r\n                            : <Grid\r\n                                container\r\n                                direction=\"row\"\r\n                                justify=\"space-evenly\"\r\n                                alignItems=\"center\"\r\n                            >\r\n                                <Grid item>\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        color=\"secondary\"\r\n                                        className={classes.actionButton}\r\n                                        onClick={() => {\r\n                                            window.localStorage.removeItem(\"postСDreamData\");\r\n                                            isEditMode\r\n                                                ? history.push(\"/dreams\")\r\n                                                : history.push(\"/luciddreams\");\r\n                                        }}\r\n                                    >\r\n                                        {lang.currLang.buttons.close}\r\n                                    </Button>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        color=\"primary\"\r\n                                        className={classes.actionButton}\r\n                                        onClick={() => savepost()}\r\n                                    >\r\n                                        {isEditMode\r\n                                            ? lang.currLang.buttons.Save\r\n                                            : lang.currLang.buttons.add\r\n                                        }\r\n                                    </Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                        }\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </MuiThemeProvider >\r\n    );\r\n};\r\n\r\nAddCDream.propTypes = {\r\n    setSnackbar: PropTypes.func.isRequired,\r\n    themeMode: PropTypes.object.isRequired,\r\n    lang: PropTypes.object.isRequired,\r\n    auth: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        themeMode: store.themeMode,\r\n        lang: store.lang,\r\n        auth: store.auth,\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setSnackbar: snackbar => dispatch(setSnackbar(snackbar)),\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(AddCDream);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport SwipeableViews from \"react-swipeable-views\";\r\n\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from '@material-ui/core/Button';\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Tab from \"@material-ui/core/Tab\";\r\n\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\n\r\nimport { useStyles } from '../styles/Styles';\r\nimport { setSnackbar } from '../actions/Actions';\r\nimport { SET_SNACKBAR_MODE } from \"../actions/types\";\r\n\r\nfunction AddTechnics(props) {\r\n    const classes = useStyles();\r\n    const { lang, themeMode, history, setSnackbar } = props;\r\n    const muiTheme = createMuiTheme(themeMode);\r\n    const [isEditMode, setIsEditMode] = React.useState(false);\r\n    const [value, setValue] = React.useState(0);\r\n    const [technicsData, setTechnicsData] = React.useState({\r\n        titleRu: '',\r\n        titleEn: '',\r\n        descriptionRu: '',\r\n        descriptionEn: '',\r\n    });\r\n    const [fileldsErr, setFileldsErr] = React.useState({\r\n        titleRu: false,\r\n        titleEn: false,\r\n        descriptionRu: false,\r\n        descriptionEn: false,\r\n    });\r\n\r\n    const changeData = (event, field) => {\r\n        let newTechnicsData = technicsData;\r\n        let newFileldsErr = fileldsErr;\r\n        switch (field) {\r\n            case 'title-ru':\r\n                newTechnicsData = { ...newTechnicsData, titleRu: event.target.value };\r\n                if (newFileldsErr.titleRu) {\r\n                    newFileldsErr = { ...newFileldsErr, titleRu: false };\r\n                    setFileldsErr(newFileldsErr);\r\n                }\r\n                break;\r\n            case 'title-en':\r\n                newTechnicsData = { ...newTechnicsData, titleEn: event.target.value };\r\n                if (newFileldsErr.titleEn) {\r\n                    newFileldsErr = { ...newFileldsErr, titleEn: false };\r\n                    setFileldsErr(newFileldsErr);\r\n                }\r\n                break;\r\n            case 'description-ru':\r\n                newTechnicsData = { ...newTechnicsData, descriptionRu: event.target.value };\r\n                if (newFileldsErr.descriptionRu) {\r\n                    newFileldsErr = { ...newFileldsErr, descriptionRu: false };\r\n                    setFileldsErr(newFileldsErr);\r\n                }\r\n                break;\r\n            case 'description-en':\r\n                newTechnicsData = { ...newTechnicsData, descriptionEn: event.target.value };\r\n                if (newFileldsErr.descriptionEn) {\r\n                    newFileldsErr = { ...newFileldsErr, descriptionEn: false };\r\n                    setFileldsErr(newFileldsErr);\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        setTechnicsData(newTechnicsData);\r\n    };\r\n\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue);\r\n    };\r\n\r\n    const handleChangeIndex = index => {\r\n        setValue(index);\r\n    };\r\n\r\n    const save = () => {\r\n        let isError = false;\r\n        let errorMessage = '';\r\n        let newFileldsErr = fileldsErr;\r\n        if (technicsData.titleRu.length === 0) {\r\n            isError = true;\r\n            errorMessage = lang.currLang.errors.EmptyTitle;\r\n            newFileldsErr = { ...newFileldsErr, titleRu: true };\r\n            setValue(0);\r\n        }\r\n        if (technicsData.titleEn.length === 0 && !isError) {\r\n            isError = true;\r\n            errorMessage = lang.currLang.errors.EmptyTitle;\r\n            newFileldsErr = { ...newFileldsErr, titleEn: true };\r\n            setValue(1);\r\n        }\r\n        if (technicsData.descriptionRu.length === 0 && !isError) {\r\n            isError = true;\r\n            errorMessage = lang.currLang.errors.EmptyDescription;\r\n            newFileldsErr = { ...newFileldsErr, descriptionRu: true };\r\n            setValue(0);\r\n        }\r\n        if (technicsData.descriptionEn.length === 0 && !isError) {\r\n            isError = true;\r\n            errorMessage = lang.currLang.errors.EmptyDescription;\r\n            newFileldsErr = { ...newFileldsErr, descriptionEn: true };\r\n            setValue(1);\r\n        }\r\n\r\n        if (isError) {\r\n            setFileldsErr(newFileldsErr);\r\n            setSnackbar({\r\n                type: SET_SNACKBAR_MODE,\r\n                snackbar: {\r\n                    open: true,\r\n                    variant: 'error',\r\n                    message: errorMessage,\r\n                },\r\n            });\r\n        }\r\n        else {\r\n            console.log(technicsData);\r\n        }\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        if (typeof (props.location.defaultData) !== 'undefined') {\r\n            setIsEditMode(true);\r\n            const { name_rus, name_eng } = props.location.defaultData.item;\r\n            let newTechnicsData = {};\r\n            newTechnicsData = { ...newTechnicsData, titleRu: name_rus };\r\n            newTechnicsData = { ...newTechnicsData, titleEn: name_eng };\r\n            setTechnicsData(newTechnicsData);\r\n        }\r\n    }, [props.location.defaultData]);\r\n\r\n    return (\r\n        <MuiThemeProvider theme={muiTheme}>\r\n            <CssBaseline />\r\n            <div className={classes.root} >\r\n                <Grid container\r\n                    className={`${classes.height12}`}\r\n                    direction=\"column\"\r\n                    justify=\"center\"\r\n                    alignItems=\"stretch\" >\r\n                    <Grid item className={`${classes.mainGridBodyItem} ${classes.height11}`}>\r\n                        <Paper className={classes.paper}>\r\n                            <Paper style={{\r\n                                position: 'relative',\r\n                                height: '10%',\r\n                            }}>\r\n                                <Tabs centered\r\n                                    value={value}\r\n                                    onChange={handleChange}\r\n                                    indicatorColor=\"primary\"\r\n                                    textColor=\"primary\"\r\n                                >\r\n                                    <Tab label=\"RU\" />\r\n                                    <Tab label=\"EN\" />\r\n                                </Tabs>\r\n                            </Paper>\r\n                            <SwipeableViews className={classes.SwipeableViews}\r\n                                animateHeight\r\n                                axis={\r\n                                    muiTheme.direction === \"rtl\"\r\n                                        ? \"x-reverse\"\r\n                                        : \"x\"\r\n                                }\r\n                                index={value}\r\n                                onChangeIndex={handleChangeIndex}\r\n                            >\r\n                                <Grid container\r\n                                    className={`${classes.height12}`}\r\n                                    direction=\"column\"\r\n                                    justify=\"center\"\r\n                                    alignItems=\"stretch\"\r\n                                    role=\"tabpanel\"\r\n                                >\r\n                                    <Grid item className={`${classes.mainGridBodyItem} ${classes.height2}`}>\r\n                                        <TextField className={classes.inputDiv}\r\n                                            error={fileldsErr.titleRu}\r\n                                            required\r\n                                            id=\"title-ru\"\r\n                                            value={technicsData.titleRu}\r\n                                            label={lang.currLang.texts.title}\r\n                                            variant=\"outlined\"\r\n                                            onChange={(e) => { changeData(e, 'title-ru') }}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item className={`${classes.mainGridBodyItem} ${classes.height10}`}>\r\n                                        <TextField className={classes.inputDiv}\r\n                                            error={fileldsErr.descriptionRu}\r\n                                            required\r\n                                            id=\"description-ru\"\r\n                                            multiline\r\n                                            rows=\"5\"\r\n                                            value={technicsData.descriptionRu}\r\n                                            label={lang.currLang.texts.description}\r\n                                            variant=\"outlined\"\r\n                                            onChange={(e) => { changeData(e, 'description-ru') }}\r\n                                        />\r\n                                    </Grid>\r\n                                </Grid>\r\n                                <Grid container\r\n                                    className={`${classes.height12}`}\r\n                                    direction=\"column\"\r\n                                    justify=\"center\"\r\n                                    alignItems=\"stretch\"\r\n                                    role=\"tabpanel\"\r\n                                >\r\n                                    <Grid item className={`${classes.mainGridBodyItem} ${classes.height2}`}>\r\n                                        <TextField className={classes.inputDiv}\r\n                                            error={fileldsErr.titleEn}\r\n                                            required\r\n                                            id=\"title-en\"\r\n                                            value={technicsData.titleEn}\r\n                                            label={lang.currLang.texts.title}\r\n                                            variant=\"outlined\"\r\n                                            onChange={(e) => { changeData(e, 'title-en') }}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item className={`${classes.mainGridBodyItem} ${classes.height10}`}>\r\n                                        <TextField className={classes.inputDiv}\r\n                                            error={fileldsErr.descriptionEn}\r\n                                            required\r\n                                            id=\"description-en\"\r\n                                            multiline\r\n                                            rows=\"5\"\r\n                                            value={technicsData.descriptionEn}\r\n                                            label={lang.currLang.texts.description}\r\n                                            variant=\"outlined\"\r\n                                            onChange={(e) => { changeData(e, 'description-en') }}\r\n                                        />\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </SwipeableViews>\r\n                        </Paper>\r\n                    </Grid>\r\n                    <Grid item className={`${classes.mainGridBodyItem} ${classes.height1}`}>\r\n                        <Grid container\r\n                            direction=\"row\"\r\n                            justify=\"space-evenly\"\r\n                            alignItems=\"center\"\r\n                        >\r\n                            <Grid item>\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    color=\"secondary\"\r\n                                    className={classes.actionButton}\r\n                                    onClick={() => { history.push(\"/technics\") }}\r\n                                >\r\n                                    {lang.currLang.buttons.close}\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    className={classes.actionButton}\r\n                                    onClick={() => save()}\r\n                                >\r\n                                    {isEditMode\r\n                                        ? lang.currLang.buttons.Save\r\n                                        : lang.currLang.buttons.add\r\n                                    }\r\n                                </Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </MuiThemeProvider>\r\n    )\r\n}\r\n\r\nAddTechnics.propTypes = {\r\n    setSnackbar: PropTypes.func.isRequired,\r\n    themeMode: PropTypes.object.isRequired,\r\n    lang: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        themeMode: store.themeMode,\r\n        lang: store.lang,\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setSnackbar: snackbar => dispatch(setSnackbar(snackbar)),\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(AddTechnics);","import React from 'react';\r\nimport clsx from \"clsx\";\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport MUIRichTextEditor from 'mui-rte';\r\nimport { EditorState, convertFromRaw } from 'draft-js';\r\n\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport CardHeader from \"@material-ui/core/CardHeader\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Collapse from \"@material-ui/core/Collapse\";\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Button from '@material-ui/core/Button';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Card from \"@material-ui/core/Card\";\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport Menu from '@material-ui/core/Menu';\r\n\r\nimport Rating from \"@material-ui/lab/Rating\";\r\n\r\nimport FormatColorFillIcon from '@material-ui/icons/FormatColorFill';\r\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport Visibility from '@material-ui/icons/Visibility';\r\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\n\r\nimport { useStyles } from '../../styles/Styles';\r\n\r\nimport { instance } from '../Config';\r\n\r\nimport { SET_SNACKBAR_MODE } from \"../../actions/types\";\r\nimport { setSnackbar } from '../../actions/Actions';\r\n\r\nfunction DreamCard(props) {\r\n    const classes = useStyles();\r\n    const { post_id, post_title, post_content, post_type, tags, technics, rating, dream_date, is_public } = props.item;\r\n    const { lang, palette, history, setSnackbar } = props;\r\n    const [expanded, setExpanded] = React.useState(false);\r\n    const [anchorEl, setAnchorEl] = React.useState(null);\r\n    const [openAlert, setOpenAlert] = React.useState(false);\r\n    const [publicChecked, setPublicChecked] = React.useState(false);\r\n    const [alertTexts, setAlertTexts] = React.useState({\r\n        header: '',\r\n        body: '',\r\n        commit: '',\r\n        action: '',\r\n    });\r\n    const dateOfDream = new Date(dream_date).getDate() + '.' + (new Date(dream_date).getMonth() + 1) + '.' + new Date(dream_date).getFullYear() + ' ' + new Date(dream_date).getHours() + ':' + (\"0\" + new Date(dream_date).getMinutes()).slice(-2);\r\n    const srcContent = post_content.toString();\r\n    const jsonPparse = JSON.parse(srcContent);\r\n    const convertfromraw = convertFromRaw(jsonPparse);\r\n    const text_content = EditorState.createWithContent(convertfromraw).getCurrentContent().getPlainText('');\r\n\r\n    React.useEffect(() => {\r\n        is_public === 1\r\n            ? setPublicChecked(true)\r\n            : setPublicChecked(false);\r\n    }, [is_public]);\r\n\r\n    const openMenu = event => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const closeMenu = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    const clickMenu = (action, event) => {\r\n        let newAlertTexts = alertTexts;\r\n        switch (action) {\r\n            case 'public':\r\n                if (event.target.checked) {\r\n                    newAlertTexts = { ...newAlertTexts, header: lang.currLang.texts.PublicAlert };\r\n                    newAlertTexts = { ...newAlertTexts, body: lang.currLang.texts.PublicText };\r\n                    newAlertTexts = { ...newAlertTexts, commit: lang.currLang.texts.Publish };\r\n                    newAlertTexts = { ...newAlertTexts, action: 'publicOk' };\r\n                    setAlertTexts(newAlertTexts);\r\n                }\r\n                else {\r\n                    newAlertTexts = { ...newAlertTexts, header: lang.currLang.texts.UnpublicAlert };\r\n                    newAlertTexts = { ...newAlertTexts, body: lang.currLang.texts.UnpublicText };\r\n                    newAlertTexts = { ...newAlertTexts, commit: lang.currLang.texts.Unpublish };\r\n                    newAlertTexts = { ...newAlertTexts, action: 'publicOk' };\r\n                    setAlertTexts(newAlertTexts);\r\n                }\r\n                setOpenAlert(true);\r\n                closeMenu();\r\n                break;\r\n\r\n            case 'edit':\r\n                closeMenu();\r\n                if (post_type === 0) {\r\n                    history.push({\r\n                        pathname: \"/addregulardream\",\r\n                        defaultData: {\r\n                            post_id: post_id,\r\n                            post_title: post_title,\r\n                            dream_date: new Date(dream_date),\r\n                            post_content: post_content,\r\n                            tags: tags,\r\n                        }\r\n                    });\r\n                }\r\n                else if (post_type === 1) {\r\n                    history.push({\r\n                        pathname: \"/addcdream\",\r\n                        defaultData: {\r\n                            post_id: post_id,\r\n                            post_title: post_title,\r\n                            dream_date: new Date(dream_date),\r\n                            post_content: post_content,\r\n                            tags: tags,\r\n                            technics: technics,\r\n                            rating: rating,\r\n                        }\r\n                    });\r\n                }\r\n                break;\r\n\r\n            case 'delete':\r\n                newAlertTexts = { ...newAlertTexts, header: lang.currLang.texts.DeleteAlert };\r\n                newAlertTexts = { ...newAlertTexts, body: lang.currLang.texts.DeleteText };\r\n                newAlertTexts = { ...newAlertTexts, commit: lang.currLang.buttons.Delete };\r\n                newAlertTexts = { ...newAlertTexts, action: 'deleteOk' };\r\n                setAlertTexts(newAlertTexts);\r\n                closeMenu();\r\n                setOpenAlert(true);\r\n                break;\r\n\r\n            case 'closeAlert':\r\n                setOpenAlert(false);\r\n                break;\r\n\r\n            case 'deleteOk':\r\n                const postData = {\r\n                    post_id: post_id\r\n                };\r\n                instance\r\n                    .post('/actions/users/deletepost', postData)\r\n                    .then(res => {\r\n                        closeMenu();\r\n                        setSnackbar({\r\n                            type: SET_SNACKBAR_MODE,\r\n                            snackbar: {\r\n                                open: true,\r\n                                variant: 'success',\r\n                                message: lang.currLang.texts.success,\r\n                            },\r\n                        });\r\n                        setOpenAlert(false);\r\n                        props.loadPosts();\r\n                    })\r\n                    .catch(err => {\r\n                        setSnackbar({\r\n                            type: SET_SNACKBAR_MODE,\r\n                            snackbar: {\r\n                                open: true,\r\n                                variant: 'error',\r\n                                message: lang.currLang.texts.CantDeletePost,\r\n                            },\r\n                        });\r\n                        closeMenu();\r\n                        setOpenAlert(false);\r\n                    });\r\n                break;\r\n\r\n            case 'publicOk':\r\n                closeMenu();\r\n                setOpenAlert(false);\r\n                if (publicChecked) {\r\n                    const postData = {\r\n                        post_id: post_id,\r\n                        newPublic: 0\r\n                    };\r\n                    instance\r\n                        .post('/actions/users/updatepost', postData)\r\n                        .then(res => {\r\n                            setPublicChecked(false);\r\n                            setSnackbar({\r\n                                type: SET_SNACKBAR_MODE,\r\n                                snackbar: {\r\n                                    open: true,\r\n                                    variant: 'success',\r\n                                    message: lang.currLang.texts.success,\r\n                                },\r\n                            });\r\n                        })\r\n                        .catch(err => {\r\n                            setPublicChecked(true);\r\n                        });\r\n                }\r\n                else {\r\n                    const postData = {\r\n                        post_id: post_id,\r\n                        newPublic: 1,\r\n                    };\r\n                    instance\r\n                        .post('/actions/users/updatepost', postData)\r\n                        .then(res => {\r\n                            setPublicChecked(true);\r\n                            setSnackbar({\r\n                                type: SET_SNACKBAR_MODE,\r\n                                snackbar: {\r\n                                    open: true,\r\n                                    variant: 'success',\r\n                                    message: lang.currLang.texts.success,\r\n                                },\r\n                            });\r\n                        })\r\n                        .catch(err => {\r\n                            setPublicChecked(false);\r\n                        });\r\n                }\r\n                break;\r\n\r\n            default:\r\n                console.log('Command not found');\r\n                break;\r\n        }\r\n    };\r\n\r\n    const handleExpandClick = () => {\r\n        setExpanded(!expanded);\r\n    };\r\n\r\n    return (\r\n        <Grid item className={classes.dreamCardDiv}>\r\n            <Dialog open={openAlert}\r\n                onClose={() => clickMenu('closeAlert')}\r\n                aria-labelledby=\"alert-dialog-title\"\r\n                aria-describedby=\"alert-dialog-description\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-title\" >\r\n                    {alertTexts.header}\r\n                </DialogTitle>\r\n                <DialogContent >\r\n                    <DialogContentText id=\"alert-dialog-description\" >\r\n                        {alertTexts.body}\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => clickMenu('closeAlert')}\r\n                        color=\"secondary\">\r\n                        {lang.currLang.buttons.cancel}\r\n                    </Button>\r\n                    <Button onClick={() => clickMenu(alertTexts.action)}\r\n                        color=\"primary\" autoFocus>\r\n                        {alertTexts.commit}\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n            <Menu id=\"simple-menu\"\r\n                anchorEl={anchorEl}\r\n                keepMounted\r\n                open={Boolean(anchorEl)}\r\n                onClose={closeMenu}\r\n            >\r\n                <MenuItem >\r\n                    <ListItemIcon>\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Checkbox\r\n                                    onChange={(e) => clickMenu('public', e)}\r\n                                    checked={publicChecked}\r\n                                    value=\"checkedB\"\r\n                                    color=\"primary\"\r\n                                />\r\n                            }\r\n                        />\r\n                    </ListItemIcon>\r\n                    {lang.currLang.texts.Public}\r\n                </MenuItem>\r\n                <MenuItem onClick={() => clickMenu('edit')}>\r\n                    <ListItemIcon>\r\n                        <EditIcon fontSize=\"small\" />\r\n                    </ListItemIcon>\r\n                    {lang.currLang.buttons.Edit}\r\n                </MenuItem>\r\n                <MenuItem onClick={() => clickMenu('delete')}>\r\n                    <ListItemIcon>\r\n                        <DeleteIcon fontSize=\"small\" />\r\n                    </ListItemIcon>\r\n                    {lang.currLang.buttons.Delete}\r\n                </MenuItem>\r\n            </Menu>\r\n            <Card raised={true} className={classes.card}>\r\n                <CardHeader\r\n                    style={{\r\n                        paddingBottom: '0px',\r\n                    }}\r\n                    title={\r\n                        <Grid container\r\n                            direction=\"row\"\r\n                            justify=\"flex-start\"\r\n                            alignItems=\"center\"\r\n                        >\r\n                            <Grid item xs={10} >\r\n                                <Typography variant='subtitle1'>\r\n                                    {post_title} (\r\n                                    {post_type === 0\r\n                                        ? lang.currLang.texts.Dream\r\n                                        : lang.currLang.texts.Cdream})\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid item xs={2} >\r\n                                <Tooltip\r\n                                    disableFocusListener\r\n                                    disableTouchListener\r\n                                    title={publicChecked\r\n                                        ? lang.currLang.texts.PublicDescription\r\n                                        : lang.currLang.texts.UnpublicDescription\r\n                                    }\r\n                                >\r\n                                    {publicChecked\r\n                                        ? <Visibility className={classes.iconCenter} />\r\n                                        : <VisibilityOff className={classes.iconCenter} />\r\n                                    }\r\n                                </Tooltip>\r\n                            </Grid>\r\n                        </Grid>\r\n                    }\r\n                    subheader={dateOfDream}\r\n                    action={\r\n                        <IconButton\r\n                            aria-label=\"settings\"\r\n                            onClick={(e) => openMenu(e)}\r\n                        >\r\n                            <MoreVertIcon />\r\n                        </IconButton>\r\n                    }\r\n                />\r\n                <CardActions disableSpacing={true}>\r\n                    <Typography\r\n                        noWrap={expanded\r\n                            ? false\r\n                            : true\r\n                        }\r\n                        variant='body2'\r\n                        style={{\r\n                            padding: '12px',\r\n                        }}\r\n                    >\r\n                        {expanded\r\n                            ? lang.currLang.texts.TapToShow\r\n                            : text_content\r\n                        }\r\n                    </Typography>\r\n                    <IconButton\r\n                        className={clsx(classes.expand, {\r\n                            [classes.expandOpen]: expanded\r\n                        })}\r\n                        onClick={handleExpandClick}\r\n                        aria-expanded={expanded}\r\n                        aria-label=\"show more\"\r\n                    >\r\n                        <ExpandMoreIcon />\r\n                    </IconButton>\r\n                </CardActions>\r\n                <Collapse in={expanded}\r\n                    timeout=\"auto\"\r\n                    unmountOnExit >\r\n                    <CardContent>\r\n                        <div className={classes.avatarRoot}>\r\n                            {technics.map((technic, key) =>\r\n                                technic[0]\r\n                                    ? <Chip className={classes.smallChip}\r\n                                        key={key}\r\n                                        label={lang.currLang.current === \"Ru\"\r\n                                            ? technic[1]\r\n                                            : technic[2]}\r\n                                    />\r\n                                    : ''\r\n                            )}\r\n                        </div>\r\n                        <div className={classes.avatarRoot}>\r\n                            {tags.map((tag, key) =>\r\n                                tag[0]\r\n                                    ? <Tooltip key={key}\r\n                                        disableFocusListener\r\n                                        disableTouchListener\r\n                                        title={\r\n                                            lang.currLang.current === \"Ru\"\r\n                                                ? tag[1]\r\n                                                : tag[2]\r\n                                        }\r\n                                    >\r\n                                        <Avatar className={classes.smallAvatar}\r\n                                            src={tag[3]}\r\n                                            style={palette.type === 'dark'\r\n                                                ? {\r\n                                                    filter: 'invert(1)',\r\n                                                }\r\n                                                : {}}\r\n                                        />\r\n                                    </Tooltip>\r\n                                    : ''\r\n                            )}\r\n                        </div>\r\n                        <Paper className={classes.contentPaper}>\r\n                            <MUIRichTextEditor\r\n                                controls={[\r\n                                    \"bold\",\r\n                                    \"italic\",\r\n                                    \"underline\",\r\n                                    \"strikethrough\",\r\n                                    \"colorfill\",\r\n                                ]}\r\n                                customControls={[\r\n                                    {\r\n                                        name: \"colorfill\",\r\n                                        icon: <FormatColorFillIcon />,\r\n                                        type: \"inline\",\r\n                                        inlineStyle: {\r\n                                            backgroundColor: \"yellow\",\r\n                                            color: \"black\"\r\n                                        }\r\n                                    }\r\n                                ]}\r\n                                readOnly={true}\r\n                                toolbar={false}\r\n                                value={post_content}\r\n                            />\r\n                        </Paper>\r\n                        {post_type === 0\r\n                            ? ''\r\n                            : <Grid container\r\n                                direction=\"row\"\r\n                                justify=\"center\"\r\n                                alignItems=\"stretch\"\r\n                                style={{\r\n                                    paddingTop: '10px',\r\n                                }}\r\n                            >\r\n                                <Grid item xs={6}>\r\n                                    <Typography component=\"legend\" variant='body2'>\r\n                                        {lang.currLang.texts.rating}:\r\n                                    </Typography>\r\n                                </Grid>\r\n                                <Grid item xs={6}>\r\n                                    <Rating name=\"simple-controlled\"\r\n                                        value={rating}\r\n                                        readOnly\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n                        }\r\n                    </CardContent>\r\n                </Collapse>\r\n            </Card>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nDreamCard.propTypes = {\r\n    setSnackbar: PropTypes.func.isRequired,\r\n    lang: PropTypes.object.isRequired,\r\n    palette: PropTypes.object.isRequired,\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        lang: store.lang,\r\n        palette: store.themeMode.palette,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setSnackbar: snackbar => dispatch(setSnackbar(snackbar)),\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(DreamCard);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Button from '@material-ui/core/Button';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\n\r\nimport DreamCard from './muiltiple/DreamCard';\r\nimport { useStyles } from '../styles/Styles';\r\nimport { instance } from './Config';\r\n\r\nfunction ViewDreams(props) {\r\n    const { lang, themeMode, history, auth } = props;\r\n    const muiTheme = createMuiTheme(themeMode);\r\n    const classes = useStyles();\r\n    const [isLoading, setIsLoading] = React.useState(true);\r\n    const [dreams, setDreams] = React.useState([]);\r\n\r\n    const loadPosts = React.useCallback(() => {\r\n        setIsLoading(true);\r\n        instance.post(\"/actions/users/getuserposts\", { id: auth.user.id })\r\n            .then(res => {\r\n                setDreams(res.data);\r\n                setIsLoading(false);\r\n            })\r\n            .catch(err => {\r\n                setIsLoading(false);\r\n            });\r\n    }, [auth.user.id]);\r\n\r\n    React.useEffect(() => {\r\n        loadPosts();\r\n    }, [loadPosts]);\r\n\r\n    return (\r\n        <MuiThemeProvider theme={muiTheme}>\r\n            <CssBaseline />\r\n            <div className={classes.root}>\r\n                <Grid container\r\n                    className={`${classes.height12}`}\r\n                    direction=\"column\"\r\n                    justify=\"center\"\r\n                    alignItems=\"stretch\"\r\n                >\r\n                    <Grid item className={`${classes.hiddenOverflow} ${classes.height11}`}>\r\n                        {isLoading\r\n                            ? <div className={classes.centerCircularProgress}>\r\n                                <CircularProgress disableShrink />\r\n                            </div>\r\n                            : <Container className={classes.mainGridDreamsBodyItemContainer}>\r\n                                <Paper className={classes.mainGridDreamsBodyItemContainerPaper}>\r\n                                    {dreams.length !== 0\r\n                                        ? <Grid className={`${classes.mainGridDreamsContainer}`}\r\n                                            container\r\n                                            direction=\"column\"\r\n                                            justify=\"center\"\r\n                                            alignItems=\"stretch\"\r\n                                        >\r\n                                            {dreams.map((item, key) => (\r\n                                                <DreamCard\r\n                                                    item={item}\r\n                                                    key={key}\r\n                                                    history={history}\r\n                                                    loadPosts={loadPosts}\r\n                                                />\r\n                                            ))}\r\n                                        </Grid>\r\n                                        : <div>\r\n                                            <div className={classes.divDreamsNotFound} />\r\n                                            <div className={`${classes.divDreamsNotFound} ${classes.divDreamsNotFoundImg}`} />\r\n                                            <div className={classes.divDreamsNotFound}>\r\n                                                <Typography>\r\n                                                    {lang.currLang.texts.NoDreams}\r\n                                                </Typography>\r\n                                            </div>\r\n                                        </div>\r\n                                    }\r\n                                </Paper>\r\n                            </Container>\r\n                        }\r\n                    </Grid>\r\n                    <Grid item className={`${classes.mainGridBodyItem} ${classes.height1}`}>\r\n                        <Grid container\r\n                            direction=\"row\"\r\n                            justify=\"space-evenly\"\r\n                            alignItems=\"center\"\r\n                        >\r\n                            <Grid item xs={6} align=\"center\">\r\n                                <Button variant=\"contained\"\r\n                                    color=\"secondary\"\r\n                                    className={classes.actionButton}\r\n                                    onClick={() => { history.push(\"/luciddreams\") }}\r\n                                >\r\n                                    {lang.currLang.buttons.close}\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid item xs={6} />\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </MuiThemeProvider >\r\n    );\r\n}\r\n\r\nViewDreams.propTypes = {\r\n    themeMode: PropTypes.object.isRequired,\r\n    lang: PropTypes.object.isRequired,\r\n    auth: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        themeMode: store.themeMode,\r\n        lang: store.lang,\r\n        auth: store.auth,\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(ViewDreams);","const words = {\r\n    current: 'Ru',\r\n    buttons: {\r\n        signIn: 'Вход',\r\n        signUp: 'Регистрация',\r\n        dreamJoirnal: 'Дневник снов',\r\n        addDream: 'Добавить сон',\r\n        addCDream: 'Добавить ос',\r\n        techniques: 'Техники',\r\n        adventures: 'Приключения',\r\n        close: 'Назад',\r\n        about: 'О нас',\r\n        cancel: 'Отмена',\r\n        add: 'Добавить',\r\n        Edit: 'Изменить',\r\n        Delete: 'Удалить',\r\n        Save: 'Сохранить',\r\n        addTag: '+ место',\r\n    },\r\n    texts: {\r\n        about: 'О нас О нас О нас О нас О нас О нас О нас О нас О нас О нас О нас О нас',\r\n        or: 'ИЛИ',\r\n        nickname: 'Отображаемое имя',\r\n        password: 'Пароль',\r\n        passwordAgain: 'Поторите пароль',\r\n        cancel: 'Отмена',\r\n        sucessRegistration: 'Вы успешно зарегистрировались',\r\n        hello: 'Привет, ',\r\n        changleLanguage: 'Сохранить изменение языка на ',\r\n        success: 'Успешно',\r\n        title: 'Заголовок',\r\n        description: 'Описание',\r\n        content: 'Что снилось',\r\n        tags: 'Места',\r\n        dreams: 'Снов',\r\n        technics: 'Техники',\r\n        rating: 'Реалистичность',\r\n        Dream: 'Обычный сон',\r\n        Cdream: 'ОC',\r\n        NoDreams: \"У вас нет снов\",\r\n        pickDate: \"Дата\",\r\n        pickTime: \"Время\",\r\n        TapToShow: \"Нажмите на текст, чтобы отобразить подсвечивание\",\r\n        Public: \"Опубликовано\",\r\n        Publish: \"Опубликовать\",\r\n        Unpublish: \"Скрыть\",\r\n        PublicAlert: \"Вы точно хотите опубликовать сон?\",\r\n        PublicText: \"После публикации ваши друзья смогут прочитать этот сон.\",\r\n        PublicDescription: \"Ваши друзья могут прочитать этот сон\",\r\n        UnpublicAlert: \"Вы точно хотите скрыть сон?\",\r\n        UnpublicText: \"После скрытия ваши друзья не смогут прочитать этот сон.\",\r\n        UnpublicDescription: \"Ваши друзья не могут прочитать этот сон\",\r\n        DeleteAlert: \"Вы точно хотите удалить?\",\r\n        DeleteText: \"После удаления запись не получится восстановить.\",\r\n        Name: \"Наименование\",\r\n        ChangeIcon: \"Иконка\",\r\n        FindIcon: \"Поиск иконки по названию\",\r\n    },\r\n    errors: {\r\n        emailLenght: 'Введите email',\r\n        nicknameLenght: 'Введите отображаемое имя',\r\n        passwordLenght: 'Введите пароль',\r\n        password2Lenght: 'Введите пароль',\r\n        passwordsCompare: 'Пароли не совпадают',\r\n        UserNotExist: 'Неверный email или пароль',\r\n        EmailIsNotValid: 'Введен некорректный email',\r\n        IncorrectPassword: 'Неверный email или пароль',\r\n        EmailIsBusy: 'Email занят',\r\n        PasswordLenght5Symbols: 'Длина пароля - больше 5 символов',\r\n        NotLogin: 'Вы не авторизированы',\r\n        EmptyName: 'Пустое наименование',\r\n        EmptyTitle: 'Пустой заголовок',\r\n        EmptyDescription: 'Пустое описание',\r\n        EmptyDream: 'Пустое поле сна',\r\n        NoChanges: 'Нет изменений',\r\n        CantDeletePost: 'Ошибка удаления сна',\r\n        IconNotChange: 'Выберите иконку',\r\n        ColorNotChange: 'Выберите цвет',\r\n    },\r\n};\r\n\r\nexport default words;","import React from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport SnackbarContent from \"@material-ui/core/SnackbarContent\";\r\nimport ButtonBase from '@material-ui/core/ButtonBase';\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport Button from '@material-ui/core/Button';\r\nimport Slide from \"@material-ui/core/Slide\";\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport { SET_THEME_MODE, SET_SNACKBAR_MODE } from \"../actions/types\";\r\n\r\nimport { setCurrLang, setTheme, setSnackbar } from '../actions/Actions';\r\nimport { useStyles } from '../styles/Styles';\r\nimport { instance } from './Config';\r\nimport { CheckTimeOut } from '../utils/CheckLoginTimeOut';\r\n\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\n\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\n\r\nimport RuDict from '../dictionary/ru';\r\nimport EnDict from '../dictionary/en';\r\n\r\nfunction TransitionDown(props) {\r\n    return <Slide {...props} direction=\"down\" />;\r\n}\r\n\r\nfunction MainPage(props) {\r\n    const classes = useStyles();\r\n    const { lang, themeMode, auth, history, setCurrLangAction, setTheme, setSnackbar } = props;\r\n    const muiTheme = createMuiTheme(themeMode);\r\n    const [prevLanguage, setPrevLanguage] = React.useState(undefined);\r\n    const [openLangSnakbar, setOpenLangSnakbar] = React.useState(false);\r\n    const [langSnakbarMessage, setLangSnakbarMessage] = React.useState('');\r\n    const [transition, setTransition] = React.useState(undefined);\r\n\r\n    const switchMode = () => {\r\n        let newPaletteType = themeMode.palette.type === \"light\" ? \"dark\" : \"light\";\r\n        let primaryColor = themeMode.palette.type === \"light\" ? \"#f9a825\" : \"#3f51b5\";\r\n        let secondaryColor = themeMode.palette.type === \"light\" ? \"#f50057\" : \"#f50057\";\r\n        setTheme({\r\n            type: SET_THEME_MODE,\r\n            palette: {\r\n                type: newPaletteType,\r\n                primary: { main: primaryColor },\r\n                secondary: { main: secondaryColor },\r\n            }\r\n        });\r\n    };\r\n\r\n    const onAstronautClick = () => {\r\n        alert('Тут должны перейти на страницу космонафта');\r\n    };\r\n\r\n    const onMapClick = () => {\r\n        let check = CheckTimeOut();\r\n        if (check) history.push(\"/dreammap\");\r\n        else history.push(\"/\");\r\n    };\r\n\r\n    const changeLanguage = (language) => {\r\n        if (language !== lang.currLang.current) {\r\n            if (language === 'Ru') {\r\n                setPrevLanguage(lang.currLang.current);\r\n                setCurrLangAction(RuDict);\r\n                setLangSnakbarMessage(language);\r\n                setTransition(() => TransitionDown);\r\n                setOpenLangSnakbar(true);\r\n            }\r\n            if (lang.currLang.current !== 'En') {\r\n                setPrevLanguage(lang.currLang.current);\r\n                setCurrLangAction(EnDict);\r\n                setLangSnakbarMessage(language);\r\n                setTransition(() => TransitionDown);\r\n                setOpenLangSnakbar(true);\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleCloseLangSnakbar = () => {\r\n        switch (prevLanguage) {\r\n            case 'En':\r\n                setCurrLangAction(EnDict);\r\n                break;\r\n            case 'Ru':\r\n                setCurrLangAction(RuDict);\r\n                break;\r\n            default:\r\n                setCurrLangAction(EnDict);\r\n                break;\r\n        }\r\n        setOpenLangSnakbar(false);\r\n    };\r\n\r\n    const handleSaveLangSnakbar = () => {\r\n        let newLang;\r\n        switch (lang.currLang.current) {\r\n            case 'En':\r\n                newLang = 0;\r\n                break;\r\n            case 'Ru':\r\n                newLang = 1;\r\n                break;\r\n            default:\r\n                newLang = 0;\r\n                break;\r\n        }\r\n        let userid = auth.user.id;\r\n        let usernickname = auth.user.nickname;\r\n        let newUserData = {\r\n            language: newLang,\r\n            id: userid,\r\n            nickname: usernickname,\r\n        };\r\n\r\n        const check = CheckTimeOut();\r\n        if (check) {\r\n            instance\r\n                .post('/actions/users/updateuserdata', newUserData)\r\n                .then(res => {\r\n                    setSnackbar({\r\n                        type: SET_SNACKBAR_MODE,\r\n                        snackbar: {\r\n                            open: true,\r\n                            variant: 'success',\r\n                            message: lang.currLang.texts.success,\r\n                        },\r\n                    });\r\n                    setOpenLangSnakbar(false);\r\n                })\r\n                .catch(err => {\r\n                    handleCloseLangSnakbar();\r\n                });\r\n\r\n        }\r\n        else {\r\n            setSnackbar({\r\n                type: SET_SNACKBAR_MODE,\r\n                snackbar: {\r\n                    open: true,\r\n                    variant: 'error',\r\n                    message: lang.currLang.errors.NotLogin,\r\n                },\r\n            });\r\n            handleCloseLangSnakbar();\r\n        }\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        let id = {\r\n            id: auth.user.id,\r\n        };\r\n        instance\r\n            .post('/actions/users/getuserdata', id)\r\n            .then(res => {\r\n                res.data.language === 0 ? setCurrLangAction(EnDict) : setCurrLangAction(RuDict);\r\n            })\r\n            .catch(err => {\r\n                auth.user.language === 0 ? setCurrLangAction(EnDict) : setCurrLangAction(RuDict);\r\n            });\r\n        // if (auth.user.times_mode === 0) {\r\n        //     setTheme({\r\n        //         type: SET_THEME_MODE,\r\n        //         palette: {\r\n        //             type: \"dark\",\r\n        //             primary: { main: \"#f9a825\" },\r\n        //             secondary: { main: \"#f50057\" },\r\n        //         }\r\n        //     });\r\n        // }\r\n        // else {\r\n        //     setTheme({\r\n        //         type: SET_THEME_MODE,\r\n        //         palette: {\r\n        //             type: \"light\",\r\n        //             primary: { main: \"#3f51b5\" },\r\n        //             secondary: { main: \"#f50057\" },\r\n        //         }\r\n        //     });\r\n        // }\r\n    }, [classes, setTheme, setCurrLangAction, auth.user.language, auth.user.times_mode, auth.user.id]);\r\n\r\n    return (\r\n        <MuiThemeProvider theme={muiTheme}>\r\n            <CssBaseline />\r\n            <Snackbar open={openLangSnakbar}\r\n                anchorOrigin={{\r\n                    vertical: \"top\",\r\n                    horizontal: \"center\"\r\n                }}\r\n                key={\"top, center\"}\r\n                TransitionComponent={transition}\r\n            >\r\n                <SnackbarContent aria-describedby=\"lang-snackbar\"\r\n                    message={\r\n                        <Typography className={`${classes.height12}`}\r\n                            align='center'\r\n                            id=\"lang-snackbar\"\r\n                            variant='body2'>\r\n                            {lang.currLang.texts.changleLanguage + langSnakbarMessage + ' ?'}\r\n                        </Typography>\r\n                    }\r\n                    action={[\r\n                        <div key={\"lang-snackbar-buttons\"}>\r\n                            <IconButton key=\"save\"\r\n                                aria-label=\"save\"\r\n                                color=\"inherit\"\r\n                                onClick={handleSaveLangSnakbar}\r\n                            >\r\n                                <SaveIcon />\r\n                            </IconButton>\r\n                            <IconButton key=\"close\"\r\n                                aria-label=\"close\"\r\n                                color=\"inherit\"\r\n                                onClick={handleCloseLangSnakbar}\r\n                            >\r\n                                <CloseIcon />\r\n                            </IconButton>\r\n                        </div>\r\n                    ]}\r\n                />\r\n            </Snackbar>\r\n            <div className={classes.root}>\r\n                <Grid container\r\n                    className={`${classes.height12}`}\r\n                    direction=\"column\"\r\n                    justify=\"center\"\r\n                    alignItems=\"stretch\"\r\n                >\r\n                    <Grid item className={`${classes.mainGridBodyItem} ${classes.height4}`}>\r\n                        <Grid container\r\n                            className={classes.mainGridContainer}\r\n                            direction=\"row\"\r\n                            justify=\"space-around\"\r\n                            alignItems=\"stretch\"\r\n                        >\r\n                            <Grid item xs={4} >\r\n                                <ButtonBase className={classes.AstronautButton}\r\n                                    type='button'\r\n                                    focusRipple\r\n                                    onClick={onAstronautClick}>\r\n                                    <div className={classes.AstronautDiv}>\r\n                                        <div className={classes.AstronautImg} style={themeMode.palette.type === \"light\" ? { filter: 'invert(0)', } : { filter: 'invert(1)', }} />\r\n                                    </div>\r\n                                </ButtonBase>\r\n                            </Grid>\r\n                            <Grid item xs={4} >\r\n                                <ButtonBase className={classes.image}\r\n                                    type='button'\r\n                                    focusRipple\r\n                                    onClick={switchMode}>\r\n                                    <div className={classes.SkyDiv}>\r\n                                        <div className={classes.SunSrc} style={themeMode.palette.type === \"dark\" ? { transform: 'translateY(36vw)' } : { transform: 'translateY(0)' }} />\r\n                                        <div className={classes.MoonSrc} style={themeMode.palette.type === \"dark\" ? { transform: 'translateY(0)' } : { transform: 'translateY(-36vw)' }} />\r\n                                    </div>\r\n                                </ButtonBase>\r\n                            </Grid>\r\n                            <Grid item xs={4} >\r\n                                <ButtonBase className={classes.MapButton}\r\n                                    type='button'\r\n                                    focusRipple\r\n                                    onClick={onMapClick}>\r\n                                    <div className={classes.MapDiv}>\r\n                                        <div className={classes.MapImg} style={themeMode.palette.type === \"light\" ? { filter: 'invert(0)', } : { filter: 'invert(1)', }} />\r\n                                    </div>\r\n                                </ButtonBase>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid item className={`${classes.mainGridBodyItem} ${classes.height1}`}>\r\n                        <Grid container\r\n                            className={`${classes.height12}`}\r\n                            direction=\"column\"\r\n                            justify=\"center\"\r\n                            alignItems=\"stretch\"\r\n                        >\r\n                            <Grid item className={`${classes.mainGridBodyItem} ${classes.height12}`}>\r\n                                <Typography className={classes.mainGridContainer}\r\n                                    align='center'\r\n                                    variant='h6'\r\n                                >\r\n                                    {lang.currLang.texts.hello + auth.user.nickname}\r\n                                </Typography>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid item className={`${classes.mainGridBodyItem} ${classes.height6}`}>\r\n                        <Grid container\r\n                            className={`${classes.menuButtonContainer} ${classes.height12}`}\r\n                            direction=\"column\"\r\n                            justify=\"center\"\r\n                            alignItems=\"stretch\"\r\n                        >\r\n                            <Grid item className={`${classes.menuDivButton} ${classes.height2}`} align=\"center\">\r\n                                <Button variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    className={`${classes.menuButton} ${classes.centerButton}`}\r\n                                    onClick={() => {\r\n                                        let check = CheckTimeOut();\r\n                                        if (check) history.push(\"/dreams\");\r\n                                        else history.push(\"/\");\r\n                                    }}\r\n                                >\r\n                                    {lang.currLang.buttons.dreamJoirnal}\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid item className={`${classes.menuDivButton} ${classes.height2}`} align=\"center\">\r\n                                <Button variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    className={`${classes.menuButton} ${classes.centerButton}`}\r\n                                    onClick={() => {\r\n                                        let check = CheckTimeOut();\r\n                                        if (check) history.push(\"/addregulardream\");\r\n                                        else history.push(\"/\");\r\n                                    }}\r\n                                >\r\n                                    {lang.currLang.buttons.addDream}\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid item className={`${classes.menuDivButton} ${classes.height2}`} align=\"center\">\r\n                                <Button variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    className={`${classes.menuButton} ${classes.centerButton}`}\r\n                                    onClick={() => {\r\n                                        let check = CheckTimeOut();\r\n                                        if (check) history.push(\"/addcdream\");\r\n                                        else history.push(\"/\");\r\n                                    }}\r\n                                >\r\n                                    {lang.currLang.buttons.addCDream}\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid item className={`${classes.menuDivButton} ${classes.height2}`} align=\"center\">\r\n                                <Button variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    className={`${classes.menuButton} ${classes.centerButton}`}\r\n                                    onClick={() => {\r\n                                        let check = CheckTimeOut();\r\n                                        if (check) history.push(\"/technics\");\r\n                                        else history.push(\"/\");\r\n                                    }}\r\n                                >\r\n                                    {lang.currLang.buttons.techniques}\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid item className={`${classes.menuDivButton} ${classes.height2}`} align=\"center\">\r\n                                <Button variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    className={`${classes.menuButton} ${classes.centerButton}`}\r\n                                >\r\n                                    {lang.currLang.buttons.adventures}\r\n                                </Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid item className={`${classes.mainGridBodyItem} ${classes.height1}`}>\r\n                        <Grid container\r\n                            direction=\"row\"\r\n                            justify=\"center\"\r\n                            alignItems=\"center\"\r\n                        >\r\n                            <Grid item>\r\n                                <Button onClick={() => { changeLanguage('Ru') }}>\r\n                                    RU\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Button onClick={() => { changeLanguage('En') }}>\r\n                                    EN\r\n                                </Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </MuiThemeProvider>\r\n    );\r\n};\r\n\r\nMainPage.propTypes = {\r\n    setCurrLangAction: PropTypes.func.isRequired,\r\n    setTheme: PropTypes.func.isRequired,\r\n    setSnackbar: PropTypes.func.isRequired,\r\n    lang: PropTypes.object.isRequired,\r\n    themeMode: PropTypes.object.isRequired,\r\n    auth: PropTypes.object.isRequired,\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        lang: store.lang,\r\n        themeMode: store.themeMode,\r\n        auth: store.auth,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setCurrLangAction: currLangState => dispatch(setCurrLang(currLangState)),\r\n        setTheme: palette => dispatch(setTheme(palette)),\r\n        setSnackbar: snackbar => dispatch(setSnackbar(snackbar)),\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(MainPage);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport jwt_decode from \"jwt-decode\";\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { GET_ERRORS, SET_CURRENT_USER, SET_SNACKBAR_MODE } from \"../actions/types\";\r\nimport { setCurrLang, setUserState, setSnackbar } from '../actions/Actions';\r\nimport { useStyles } from '../styles/Styles';\r\nimport setAuthToken from \"../utils/setAuthToken\";\r\nimport { instance } from './Config';\r\n\r\nimport RuDict from '../dictionary/ru';\r\nimport EnDict from '../dictionary/en';\r\n\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\r\nimport Visibility from '@material-ui/icons/Visibility';\r\n\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\n\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nfunction Sign(props) {\r\n    const classes = useStyles();\r\n    const { history, themeMode, lang, setUserState, setSnackbar, setCurrLang } = props;\r\n    const muiTheme = createMuiTheme(themeMode);\r\n    const [loginData, setLoginData] = React.useState({\r\n        email: '',\r\n        password: '',\r\n    });\r\n    const [registData, setRegistData] = React.useState({\r\n        email: '',\r\n        nickname: '',\r\n        password: '',\r\n        password2: '',\r\n    });\r\n    const [regFieldErrors, setRegFieldErrors] = React.useState({\r\n        emailErr: false,\r\n        emailErrText: '',\r\n        nicknameErr: false,\r\n        nicknameErrText: '',\r\n        passwordErr: false,\r\n        passwordErrText: '',\r\n        password2Err: false,\r\n        password2ErrText: '',\r\n    });\r\n    const [isLoading, setIsLoading] = React.useState(false);\r\n    const [showPassword, setShowPassword] = React.useState(false);\r\n    const [openLogin, setOpenLogin] = React.useState(false);\r\n    const [openRegist, setOpenRegist] = React.useState(false);\r\n    const [page, setPage] = React.useState({\r\n        mainPage: true,\r\n        aboutPage: false,\r\n    });\r\n\r\n    const handleMouseDownPassword = event => {\r\n        event.preventDefault();\r\n    };\r\n\r\n    const changeAuthLogin = (e) => {\r\n        let newLoginData = loginData;\r\n        newLoginData = { ...newLoginData, email: e.target.value };\r\n        setLoginData(newLoginData);\r\n    };\r\n\r\n    const changeAuthPassword = (e) => {\r\n        let newLoginData = loginData;\r\n        newLoginData = { ...newLoginData, password: e.target.value };\r\n        setLoginData(newLoginData);\r\n    };\r\n\r\n    const changeRegistLogin = (e) => {\r\n        let newRegFieldErrors = regFieldErrors;\r\n        newRegFieldErrors = { ...newRegFieldErrors, emailErr: false };\r\n        newRegFieldErrors = { ...newRegFieldErrors, emailErrText: '' };\r\n        setRegFieldErrors(newRegFieldErrors);\r\n\r\n        let newRegistData = registData;\r\n        newRegistData = { ...newRegistData, email: e.target.value };\r\n        setRegistData(newRegistData);\r\n    };\r\n\r\n    const changeRegistNickname = (e) => {\r\n        let newRegFieldErrors = regFieldErrors;\r\n        newRegFieldErrors = { ...newRegFieldErrors, nicknameErr: false };\r\n        newRegFieldErrors = { ...newRegFieldErrors, nicknameErrText: '' };\r\n        setRegFieldErrors(newRegFieldErrors);\r\n\r\n        let newRegistData = registData;\r\n        newRegistData = { ...newRegistData, nickname: e.target.value };\r\n        setRegistData(newRegistData);\r\n    };\r\n\r\n    const changeRegistPassword = (e) => {\r\n        let newRegFieldErrors = regFieldErrors;\r\n        newRegFieldErrors = { ...newRegFieldErrors, passwordErr: false };\r\n        newRegFieldErrors = { ...newRegFieldErrors, passwordErrText: '' };\r\n        newRegFieldErrors = { ...newRegFieldErrors, password2Err: false };\r\n        newRegFieldErrors = { ...newRegFieldErrors, password2ErrText: '' };\r\n        setRegFieldErrors(newRegFieldErrors);\r\n\r\n        let newRegistData = registData;\r\n        newRegistData = { ...newRegistData, password: e.target.value };\r\n        setRegistData(newRegistData);\r\n    };\r\n\r\n    const changeRegistPassword2 = (e) => {\r\n        let newRegFieldErrors = regFieldErrors;\r\n        newRegFieldErrors = { ...newRegFieldErrors, passwordErr: false };\r\n        newRegFieldErrors = { ...newRegFieldErrors, passwordErrText: '' };\r\n        newRegFieldErrors = { ...newRegFieldErrors, password2Err: false };\r\n        newRegFieldErrors = { ...newRegFieldErrors, password2ErrText: '' };\r\n        setRegFieldErrors(newRegFieldErrors);\r\n        let newRegistData = registData;\r\n        newRegistData = { ...newRegistData, password2: e.target.value };\r\n        setRegistData(newRegistData);\r\n    };\r\n\r\n    const singIn = () => {\r\n        instance\r\n            .post(\"/actions/users/login\", loginData)\r\n            .then(res => {\r\n                const { token } = res.data;\r\n                localStorage.setItem(\"jwtToken\", token);\r\n                setAuthToken(token);\r\n                const decoded = jwt_decode(token);\r\n                setUserState({\r\n                    type: SET_CURRENT_USER,\r\n                    payload: decoded\r\n                });\r\n                setIsLoading(false);\r\n                history.push(\"/luciddreams\");\r\n            })\r\n            .catch(err => {\r\n                //console.log(err);\r\n                let errorMessage = '';\r\n                if (err.response.data.email === 'UserNotExist') {\r\n                    errorMessage = lang.currLang.errors.UserNotExist;\r\n                }\r\n                if (err.response.data.email === 'EmailIsNotValid') {\r\n                    errorMessage = lang.currLang.errors.EmailIsNotValid;\r\n                }\r\n                if (err.response.data.passwordincorrect === 'IncorrectPassword') {\r\n                    errorMessage = lang.currLang.errors.IncorrectPassword;\r\n                }\r\n                setSnackbar({\r\n                    type: SET_SNACKBAR_MODE,\r\n                    snackbar: {\r\n                        open: true,\r\n                        variant: 'error',\r\n                        message: errorMessage,\r\n                    },\r\n                });\r\n                setIsLoading(false);\r\n            });\r\n    };\r\n\r\n    const singUp = () => {\r\n        let isErr = false;\r\n        let newRegFieldErrors = regFieldErrors;\r\n        if (registData.email.length === 0) {\r\n            newRegFieldErrors = { ...newRegFieldErrors, emailErr: true };\r\n            newRegFieldErrors = { ...newRegFieldErrors, emailErrText: lang.currLang.errors.emailLenght };\r\n            isErr = true;\r\n        }\r\n        if (registData.nickname.length === 0) {\r\n            newRegFieldErrors = { ...newRegFieldErrors, nicknameErr: true };\r\n            newRegFieldErrors = { ...newRegFieldErrors, nicknameErrText: lang.currLang.errors.nicknameLenght };\r\n            isErr = true;\r\n        }\r\n        if (registData.password.length === 0) {\r\n            newRegFieldErrors = { ...newRegFieldErrors, passwordErr: true };\r\n            newRegFieldErrors = { ...newRegFieldErrors, passwordErrText: lang.currLang.errors.passwordLenght };\r\n            isErr = true;\r\n        }\r\n        if (registData.password2.length === 0) {\r\n            newRegFieldErrors = { ...newRegFieldErrors, password2Err: true };\r\n            newRegFieldErrors = { ...newRegFieldErrors, password2ErrText: lang.currLang.errors.password2Lenght };\r\n            isErr = true;\r\n        }\r\n        if (registData.password !== registData.password2) {\r\n            newRegFieldErrors = { ...newRegFieldErrors, passwordErr: true };\r\n            newRegFieldErrors = { ...newRegFieldErrors, passwordErrText: lang.currLang.errors.passwordsCompare };\r\n            newRegFieldErrors = { ...newRegFieldErrors, password2Err: true };\r\n            newRegFieldErrors = { ...newRegFieldErrors, password2ErrText: lang.currLang.errors.passwordsCompare };\r\n            isErr = true;\r\n        }\r\n        if (isErr) {\r\n            setRegFieldErrors(newRegFieldErrors);\r\n            setIsLoading(false);\r\n        }\r\n        else {\r\n            instance\r\n                .post('/actions/users/register', registData)\r\n                .then(res => {\r\n                    setSnackbar({\r\n                        type: SET_SNACKBAR_MODE,\r\n                        snackbar: {\r\n                            open: true,\r\n                            variant: 'success',\r\n                            message: lang.currLang.texts.sucessRegistration,\r\n                        },\r\n                    });\r\n                    let newRegistData = registData;\r\n                    newRegistData = { ...newRegistData, email: '' };\r\n                    newRegistData = { ...newRegistData, nickname: '' };\r\n                    newRegistData = { ...newRegistData, password: '' };\r\n                    newRegistData = { ...newRegistData, password2: '' };\r\n                    setRegistData(newRegistData);\r\n                    click('closeRegist');\r\n                    click('openLogin');\r\n                    setIsLoading(false);\r\n                })\r\n                .catch(err => {\r\n                    let errorMessage = '';\r\n                    setUserState({\r\n                        type: GET_ERRORS,\r\n                        payload: err.response.data\r\n                    });\r\n                    if (err.response.data.email === 'EmailIsBusy') {\r\n                        errorMessage = lang.currLang.errors.EmailIsBusy;\r\n                    }\r\n                    if (err.response.data.password === 'PasswordLenght5Symbols') {\r\n                        errorMessage = lang.currLang.errors.PasswordLenght5Symbols;\r\n                    }\r\n                    setSnackbar({\r\n                        type: SET_SNACKBAR_MODE,\r\n                        snackbar: {\r\n                            open: true,\r\n                            variant: 'error',\r\n                            message: errorMessage,\r\n                        },\r\n                    });\r\n                    setIsLoading(false);\r\n                });\r\n        }\r\n    };\r\n\r\n    const click = (action) => {\r\n        let newPages = page;\r\n        switch (action) {\r\n            case 'useVk':\r\n                // window.VK.Auth.login(checkLoginState, 4194304);\r\n                // let loadItems = async () => {\r\n                //     const response = await fetch('http://10.203.117.137:3001/auth/vk', {\r\n                //         method: 'GET',\r\n                //         credentials: 'include',\r\n                //     });\r\n                //     const body = await response.json();\r\n\r\n                //     console.log(response);\r\n                // }\r\n                break;\r\n            case 'openLogin':\r\n                setOpenLogin(true);\r\n                break;\r\n            case 'openRegist':\r\n                setOpenRegist(true);\r\n                break;\r\n            case 'closeLogin':\r\n                setOpenLogin(false);\r\n                setShowPassword(false);\r\n                break;\r\n            case 'closeRegist':\r\n                setOpenRegist(false);\r\n                setShowPassword(false);\r\n                break;\r\n            case 'signIn':\r\n                setIsLoading(true);\r\n                singIn();\r\n                break;\r\n            case 'signUp':\r\n                setIsLoading(true);\r\n                singUp();\r\n                break;\r\n            case 'openAboutPage':\r\n                newPages = { ...newPages, aboutPage: true };\r\n                newPages = { ...newPages, mainPage: false };\r\n                setPage(newPages);\r\n                break;\r\n            case 'closeAboutPage':\r\n                newPages = { ...newPages, aboutPage: false };\r\n                newPages = { ...newPages, mainPage: true };\r\n                setPage(newPages);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    };\r\n\r\n    const changeLanguage = (language) => {\r\n        if (language === 'Ru') {\r\n            setCurrLang(RuDict);\r\n        }\r\n        else {\r\n            setCurrLang(EnDict);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <MuiThemeProvider theme={muiTheme}>\r\n            <CssBaseline />\r\n            <Dialog keepMounted\r\n                open={openLogin}\r\n                TransitionComponent={Transition}\r\n                aria-labelledby=\"alert-dialog-slide-title\"\r\n                aria-describedby=\"alert-dialog-slide-description\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-slide-title\">\r\n                    {lang.currLang.buttons.signIn}\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <Grid className={`${classes.menuDivButton}`} align=\"center\">\r\n                        <TextField\r\n                            className={classes.textField}\r\n                            id=\"email-field\"\r\n                            type=\"email\"\r\n                            label=\"Email\"\r\n                            onBlur={(e) => { changeAuthLogin(e) }} />\r\n                    </Grid>\r\n                    <Grid className={`${classes.menuDivButton}`} align=\"center\">\r\n                        <TextField\r\n                            id=\"password-field\"\r\n                            className={classes.textField}\r\n                            type={showPassword ? 'text' : 'password'}\r\n                            label={lang.currLang.texts.password}\r\n                            onBlur={(e) => { changeAuthPassword(e) }}\r\n                            InputProps={{\r\n                                endAdornment: (\r\n                                    <InputAdornment position=\"end\">\r\n                                        <IconButton\r\n                                            tabIndex=\"-1\"\r\n                                            edge=\"end\"\r\n                                            aria-label=\"toggle password visibility\"\r\n                                            onClick={() => { showPassword ? setShowPassword(false) : setShowPassword(true) }}\r\n                                            onMouseDown={handleMouseDownPassword} >\r\n                                            {showPassword ? <VisibilityOff /> : <Visibility />}\r\n                                        </IconButton>\r\n                                    </InputAdornment>\r\n                                ),\r\n                            }} />\r\n                    </Grid>\r\n                    {isLoading\r\n                        ? <LinearProgress /> :\r\n                        ''\r\n                    }\r\n                </DialogContent>\r\n                {!isLoading\r\n                    ? <DialogActions>\r\n                        <Button onClick={() => { click('closeLogin') }}\r\n                            color=\"secondary\"\r\n                            disabled={isLoading}>\r\n                            {lang.currLang.buttons.cancel}\r\n                        </Button>\r\n                        <Button onClick={() => { click('signIn') }}\r\n                            color=\"primary\"\r\n                            disabled={isLoading}>\r\n                            {lang.currLang.buttons.signIn}\r\n                        </Button>\r\n                    </DialogActions>\r\n                    : ''}\r\n            </Dialog>\r\n            <Dialog keepMounted\r\n                open={openRegist}\r\n                TransitionComponent={Transition}\r\n                aria-labelledby=\"alert-dialog-slide-title\"\r\n                aria-describedby=\"alert-dialog-slide-description\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-slide-title\">\r\n                    {lang.currLang.buttons.signUp}\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <Grid className={`${classes.menuDivButton}`} align=\"center\">\r\n                        <TextField id=\"reg-email-field\"\r\n                            error={regFieldErrors.emailErr}\r\n                            helperText={regFieldErrors.emailErrText}\r\n                            className={classes.textField}\r\n                            type=\"email\"\r\n                            label=\"Email\"\r\n                            onBlur={(e) => { changeRegistLogin(e) }} />\r\n                    </Grid>\r\n                    <Grid className={`${classes.menuDivButton}`} align=\"center\">\r\n                        <TextField id=\"reg-nickname-field\"\r\n                            error={regFieldErrors.nicknameErr}\r\n                            helperText={regFieldErrors.nicknameErrText}\r\n                            className={classes.textField}\r\n                            type=\"text\"\r\n                            label={lang.currLang.texts.nickname}\r\n                            onBlur={(e) => { changeRegistNickname(e) }} />\r\n                    </Grid>\r\n                    <Grid className={`${classes.menuDivButton}`} align=\"center\">\r\n                        <TextField id=\"reg-password-field\"\r\n                            error={regFieldErrors.passwordErr}\r\n                            helperText={regFieldErrors.passwordErrText}\r\n                            className={classes.textField}\r\n                            type={showPassword ? 'text' : 'password'}\r\n                            label={lang.currLang.texts.password}\r\n                            onBlur={(e) => { changeRegistPassword(e) }}\r\n                            InputProps={{\r\n                                endAdornment: (\r\n                                    <InputAdornment position=\"end\">\r\n                                        <IconButton\r\n                                            tabIndex=\"-1\"\r\n                                            edge=\"end\"\r\n                                            aria-label=\"toggle password visibility\"\r\n                                            onClick={() => { showPassword ? setShowPassword(false) : setShowPassword(true) }}\r\n                                            onMouseDown={handleMouseDownPassword} >\r\n                                            {showPassword ? <VisibilityOff /> : <Visibility />}\r\n                                        </IconButton>\r\n                                    </InputAdornment>\r\n                                ),\r\n                            }} />\r\n                    </Grid>\r\n                    <Grid className={`${classes.menuDivButton}`} align=\"center\">\r\n                        <TextField id=\"reg-password2-field\"\r\n                            error={regFieldErrors.password2Err}\r\n                            helperText={regFieldErrors.password2ErrText}\r\n                            className={classes.textField}\r\n                            type={showPassword ? 'text' : 'password'}\r\n                            label={lang.currLang.texts.passwordAgain}\r\n                            onBlur={(e) => { changeRegistPassword2(e) }}\r\n                            InputProps={{\r\n                                endAdornment: (\r\n                                    <InputAdornment position=\"end\">\r\n                                        <IconButton\r\n                                            tabIndex=\"-1\"\r\n                                            edge=\"end\"\r\n                                            aria-label=\"toggle password visibility\"\r\n                                            onClick={() => { showPassword ? setShowPassword(false) : setShowPassword(true) }}\r\n                                            onMouseDown={handleMouseDownPassword} >\r\n                                            {showPassword ? <VisibilityOff /> : <Visibility />}\r\n                                        </IconButton>\r\n                                    </InputAdornment>\r\n                                ),\r\n                            }} />\r\n                    </Grid>\r\n                    {isLoading\r\n                        ? <LinearProgress />\r\n                        : ''\r\n                    }\r\n                </DialogContent>\r\n                {!isLoading\r\n                    ? <DialogActions>\r\n                        <Button onClick={() => { click('closeRegist') }}\r\n                            color=\"secondary\"\r\n                            disabled={isLoading}>\r\n                            {lang.currLang.buttons.cancel}\r\n                        </Button>\r\n                        <Button onClick={() => { click('signUp') }}\r\n                            color=\"primary\"\r\n                            disabled={isLoading}>\r\n                            {lang.currLang.buttons.signUp}\r\n                        </Button>\r\n                    </DialogActions>\r\n                    : ''}\r\n            </Dialog>\r\n            <div className={classes.root}>\r\n                <div className={classes.mainPage}\r\n                    style={\r\n                        page.mainPage === true\r\n                            ? { transform: 'translateY(0%)' }\r\n                            : { transform: 'translateY(-100%)' }\r\n                    }\r\n                >\r\n                    <Grid container\r\n                        className={`${classes.height12}`}\r\n                        direction=\"column\"\r\n                        justify=\"center\"\r\n                        alignItems=\"stretch\"\r\n                    >\r\n                        <Grid item className={`${classes.mainGridBodyItem} ${classes.height11}`}>\r\n                            <Grid container\r\n                                className={`${classes.height12}`}\r\n                                direction=\"column\"\r\n                                justify=\"center\"\r\n                                alignItems=\"stretch\"\r\n                            >\r\n                                <Grid item className={`${classes.height3}`} />\r\n                                <Grid item className={`${classes.height6} ${classes.menuDivButton}`}>\r\n                                    <Grid item className={`${classes.menuDivButton} ${classes.height2}`} align=\"center\">\r\n                                        <Button variant=\"contained\" color=\"primary\"\r\n                                            className={`${classes.menuButton} ${classes.centerButton}`}\r\n                                            onClick={() => { click('openLogin') }}>\r\n                                            {lang.currLang.buttons.signIn}\r\n                                        </Button>\r\n                                    </Grid>\r\n                                    <Grid item className={`${classes.menuDivButton} ${classes.height2}`} align=\"center\">\r\n                                        <Button variant=\"contained\" color=\"primary\"\r\n                                            className={`${classes.menuButton} ${classes.centerButton}`}\r\n                                            onClick={() => { click('openRegist') }}>\r\n                                            {lang.currLang.buttons.signUp}\r\n                                        </Button>\r\n                                    </Grid>\r\n                                    <Grid item className={`${classes.menuDivButton} ${classes.height2}`} align=\"center\" />\r\n                                    <Grid item className={`${classes.menuDivButton} ${classes.height2}`} align=\"center\">\r\n                                        <Button variant=\"contained\" color=\"primary\"\r\n                                            className={`${classes.menuButton} ${classes.centerButton}`}\r\n                                            onClick={() => (click('openAboutPage'))} >\r\n                                            {lang.currLang.buttons.about}\r\n                                        </Button>\r\n                                    </Grid>\r\n                                </Grid>\r\n                                <Grid item className={`${classes.height3}`} />\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item className={`${classes.mainGridBodyItem} ${classes.height1}`}>\r\n                            <Grid container\r\n                                direction=\"row\"\r\n                                justify=\"center\"\r\n                                alignItems=\"center\"\r\n                            >\r\n                                <Grid item>\r\n                                    <Button onClick={() => { changeLanguage('Ru') }}>\r\n                                        RU\r\n                                    </Button>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Button onClick={() => { changeLanguage('En') }}>\r\n                                        EN\r\n                                    </Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </div >\r\n                <div className={classes.aboutPage}\r\n                    style={page.aboutPage === true\r\n                        ? { transform: 'translateY(-100%)' }\r\n                        : { transform: 'translateY(0%)' }\r\n                    }\r\n                >\r\n                    <Grid className={classes.aboutGridContainer}\r\n                        container\r\n                        direction=\"column\"\r\n                        justify=\"center\"\r\n                        alignItems=\"stretch\"\r\n                        spacing={5} >\r\n                        <Grid item\r\n                            className={classes.aboutGridItem}\r\n                            align='center'>\r\n                            <Paper className={classes.aboutPaper}>\r\n                                <Typography>\r\n                                    {lang.currLang.texts.about}\r\n                                </Typography>\r\n                            </Paper>\r\n                        </Grid>\r\n                        <Grid item\r\n                            className={classes.aboutGridItem}\r\n                            align='center'>\r\n                            <Button variant=\"contained\"\r\n                                color=\"primary\"\r\n                                className={classes.menuButton}\r\n                                onClick={() => (click('closeAboutPage'))} >\r\n                                {lang.currLang.buttons.close}\r\n                            </Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                </div>\r\n            </div >\r\n        </MuiThemeProvider>\r\n    )\r\n}\r\n\r\nSign.propTypes = {\r\n    setCurrLang: PropTypes.func.isRequired,\r\n    setUserState: PropTypes.func.isRequired,\r\n    setSnackbar: PropTypes.func.isRequired,\r\n    themeMode: PropTypes.object.isRequired,\r\n    lang: PropTypes.object.isRequired,\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        themeMode: store.themeMode,\r\n        lang: store.lang,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setCurrLang: currLangState => dispatch(setCurrLang(currLangState)),\r\n        setUserState: State => dispatch(setUserState(State)),\r\n        setSnackbar: snackbar => dispatch(setSnackbar(snackbar)),\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Sign);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Card from '@material-ui/core/Card';\r\n\r\nimport { useStyles } from '../../styles/Styles';\r\nimport { setSnackbar } from '../../actions/Actions';\r\n\r\nfunction TechnicCard(props) {\r\n    const { item, lang, auth, history } = props;\r\n    const classes = useStyles();\r\n    const [openAlert, setOpenAlert] = React.useState(false);\r\n    const [alertTexts, setAlertTexts] = React.useState({\r\n        header: '',\r\n        body: '',\r\n        commit: '',\r\n        action: '',\r\n    });\r\n\r\n    const actions = (action) => {\r\n        switch (action) {\r\n            case 'edit':\r\n                history.push({\r\n                    pathname: \"/addtechnics\",\r\n                    defaultData: {\r\n                        item: item,\r\n                    }\r\n                });\r\n                break;\r\n            case 'delete':\r\n                let newAlertTexts = alertTexts;\r\n                newAlertTexts = { ...newAlertTexts, header: lang.currLang.texts.DeleteAlert };\r\n                newAlertTexts = { ...newAlertTexts, body: lang.currLang.texts.DeleteText };\r\n                newAlertTexts = { ...newAlertTexts, commit: lang.currLang.buttons.Delete };\r\n                newAlertTexts = { ...newAlertTexts, action: 'deleteOk' };\r\n                setAlertTexts(newAlertTexts);\r\n                setOpenAlert(true);\r\n                break;\r\n            case 'deleteOk':\r\n                setOpenAlert(false);\r\n                props.loadTechnics();\r\n                break;\r\n            case 'closeAlert':\r\n                setOpenAlert(false);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Grid item className={classes.dreamCardDiv} >\r\n            <Dialog open={openAlert}\r\n                onClose={() => actions('closeAlert')}\r\n                aria-labelledby=\"alert-dialog-title\"\r\n                aria-describedby=\"alert-dialog-description\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-title\" >\r\n                    {alertTexts.header}\r\n                </DialogTitle>\r\n                <DialogContent >\r\n                    <DialogContentText id=\"alert-dialog-description\" >\r\n                        {alertTexts.body}\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => actions('closeAlert')}\r\n                        color=\"secondary\">\r\n                        {lang.currLang.buttons.cancel}\r\n                    </Button>\r\n                    <Button onClick={() => actions(alertTexts.action)}\r\n                        color=\"primary\" autoFocus>\r\n                        {alertTexts.commit}\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n            <Card raised={true} className={classes.card}>\r\n                <CardActionArea>\r\n                    <CardMedia className={classes.media}\r\n                        image=\"https://4.bp.blogspot.com/-imM00o7SslA/V8NXohT8AmI/AAAAAAAAFOM/F7h1SZjMaCU4mJ6PlwUlx7tpePjVJWlcACLcB/s1600/Cockpit%2B2.png\"\r\n                    />\r\n                    <CardContent>\r\n                        <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                            {lang.currLang.current === \"Ru\"\r\n                                ? item.name_rus\r\n                                : item.name_eng\r\n                            }\r\n                        </Typography>\r\n                        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                            Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging\r\n                            across all continents except Antarctica\r\n                        </Typography>\r\n                    </CardContent>\r\n                </CardActionArea>\r\n                {auth.user.roles < 2 //0 - admin; 1 - moderator\r\n                    ? <CardActions>\r\n                        <Button size=\"small\" color=\"secondary\" onClick={() => { actions('delete') }}>\r\n                            {lang.currLang.buttons.Delete}\r\n                        </Button>\r\n                        <Button size=\"small\" color=\"primary\" onClick={() => { actions('edit') }}>\r\n                            {lang.currLang.buttons.Edit}\r\n                        </Button>\r\n                    </CardActions>\r\n                    : ''\r\n                }\r\n            </Card>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nTechnicCard.propTypes = {\r\n    setSnackbar: PropTypes.func.isRequired,\r\n    lang: PropTypes.object.isRequired,\r\n    palette: PropTypes.object.isRequired,\r\n    auth: PropTypes.object.isRequired,\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        lang: store.lang,\r\n        palette: store.themeMode.palette,\r\n        auth: store.auth,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setSnackbar: snackbar => dispatch(setSnackbar(snackbar)),\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(TechnicCard);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Container from '@material-ui/core/Container';\r\nimport Button from '@material-ui/core/Button';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\n\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\n\r\nimport { CheckTimeOut } from '../utils/CheckLoginTimeOut';\r\nimport TechnicCard from './muiltiple/TechnicCard';\r\nimport { useStyles } from '../styles/Styles';\r\nimport { instance } from './Config';\r\n\r\nfunction Technics(props) {\r\n    const { lang, themeMode, history, auth } = props;\r\n    const muiTheme = createMuiTheme(themeMode);\r\n    const classes = useStyles();\r\n\r\n    const [isLoading, setIsLoading] = React.useState(true);\r\n    const [technics, setTechnics] = React.useState([]);\r\n\r\n    const loadTechnics = React.useCallback(() => {\r\n        setIsLoading(true);\r\n        instance.get(\"/gettechnics\")\r\n            .then(res => {\r\n                setTechnics(res.data);\r\n                setIsLoading(false);\r\n            })\r\n            .catch(err => {\r\n                setIsLoading(false);\r\n            });\r\n    }, []);\r\n\r\n    React.useEffect(() => {\r\n        loadTechnics();\r\n    }, [loadTechnics]);\r\n\r\n    return (\r\n        <MuiThemeProvider theme={muiTheme}>\r\n            <CssBaseline />\r\n            <div className={classes.root}>\r\n                <Grid container\r\n                    className={`${classes.height12}`}\r\n                    direction=\"column\"\r\n                    justify=\"center\"\r\n                    alignItems=\"stretch\"\r\n                >\r\n                    <Grid item className={`${classes.hiddenOverflow} ${classes.height11}`}>\r\n                        {isLoading\r\n                            ? <div className={classes.centerCircularProgress}>\r\n                                <CircularProgress disableShrink />\r\n                            </div>\r\n                            : <Container className={classes.mainGridDreamsBodyItemContainer}>\r\n                                <Paper className={classes.mainGridDreamsBodyItemContainerPaper}>\r\n                                    <Grid container\r\n                                        className={classes.mainGridDreamsContainer}\r\n                                        direction=\"column\"\r\n                                        justify=\"center\"\r\n                                        alignItems=\"stretch\"\r\n                                    >\r\n                                        {technics.map((item, key) => (\r\n                                            <TechnicCard key={key}\r\n                                                item={item}\r\n                                                loadTechnics={loadTechnics}\r\n                                                history={history}\r\n                                            />\r\n                                        ))}\r\n                                    </Grid>\r\n                                </Paper>\r\n                            </Container>\r\n                        }\r\n                    </Grid>\r\n                    <Grid item className={`${classes.mainGridBodyItem} ${classes.height1}`}>\r\n                        <Grid container\r\n                            direction=\"row\"\r\n                            justify=\"space-evenly\"\r\n                            alignItems=\"center\"\r\n                        >\r\n                            <Grid item>\r\n                                <Button variant=\"contained\"\r\n                                    color=\"secondary\"\r\n                                    className={classes.actionButton}\r\n                                    onClick={() => { history.push(\"/luciddreams\") }}\r\n                                >\r\n                                    {lang.currLang.buttons.close}\r\n                                </Button>\r\n                            </Grid>\r\n                            {auth.user.roles < 2 //0 - admin; 1 - moderator\r\n                                ? <Grid item align=\"center\">\r\n                                    <Button variant=\"contained\"\r\n                                        color=\"primary\"\r\n                                        className={classes.actionButton}\r\n                                        onClick={() => {\r\n                                            let check = CheckTimeOut();\r\n                                            if (check) history.push(\"/addtechnics\");\r\n                                            else history.push(\"/\");\r\n                                        }}\r\n                                    >\r\n                                        {lang.currLang.buttons.add}\r\n                                    </Button>\r\n                                </Grid>\r\n                                : <Grid item xs={6} />\r\n                            }\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </MuiThemeProvider >\r\n    );\r\n}\r\n\r\nTechnics.propTypes = {\r\n    themeMode: PropTypes.object.isRequired,\r\n    lang: PropTypes.object.isRequired,\r\n    auth: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        themeMode: store.themeMode,\r\n        lang: store.lang,\r\n        auth: store.auth,\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Technics);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport { Route, Switch } from \"react-router-dom\";\r\n\r\nimport { SET_SNACKBAR_MODE } from \"./actions/types\";\r\nimport { setSnackbar } from './actions/Actions';\r\n\r\nimport PrivateRoute from \"./components/PrivateRoute\";\r\n\r\nimport DreamMap from './components/DreamMap';\r\nimport AddLocation from './components/AddLocation';\r\nimport AddDream from './components/AddDream';\r\nimport AddCDream from './components/AddCDream';\r\nimport AddTechnics from './components/AddTechnics';\r\nimport ViewDreams from './components/ViewDreams';\r\nimport MainPage from \"./components/MainPage\";\r\nimport Sign from './components/Sign';\r\nimport Technics from './components/Technics';\r\n\r\nimport { useStyles, variantIcon } from './styles/Styles';\r\n\r\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { amber, green } from '@material-ui/core/colors';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nconst useStyles1 = makeStyles(theme => ({\r\n    success: {\r\n        backgroundColor: green[600],\r\n    },\r\n    error: {\r\n        backgroundColor: theme.palette.error.dark,\r\n    },\r\n    info: {\r\n        backgroundColor: theme.palette.primary.main,\r\n    },\r\n    warning: {\r\n        backgroundColor: amber[700],\r\n    },\r\n    icon: {\r\n        fontSize: 20,\r\n    },\r\n    iconVariant: {\r\n        opacity: 0.9,\r\n        marginRight: theme.spacing(1),\r\n    },\r\n    message: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n    },\r\n}));\r\n\r\nfunction MySnackbarContentWrapper(props) {\r\n    const classes = useStyles1();\r\n    const { className, message, onClose, variant } = props;\r\n    const Icon = variantIcon[variant];\r\n    return (\r\n        <SnackbarContent\r\n            className={clsx(classes[variant], className)}\r\n            aria-describedby=\"client-snackbar\"\r\n            message={\r\n                <span id=\"client-snackbar\" className={classes.message}>\r\n                    <Icon className={clsx(classes.icon, classes.iconVariant)} />\r\n                    <Typography className={classes.mainGridContainer}\r\n                        align='center'\r\n                        variant='body2'>\r\n                        {message}\r\n                    </Typography>\r\n                </span>\r\n            }\r\n            action={[\r\n                <IconButton key=\"close\"\r\n                    aria-label=\"close\"\r\n                    color=\"inherit\"\r\n                    onClick={onClose}\r\n                >\r\n                    <CloseIcon className={classes.icon} />\r\n                </IconButton>,\r\n            ]}\r\n        />\r\n    );\r\n}\r\n\r\nfunction Routes(props) {\r\n    const classes = useStyles();\r\n    const { open, variant, message } = props;\r\n    const [openSnackbar, setOpenSnackbar] = React.useState(false);\r\n    const [openSnackbarVariant, setOpenSnackbarVariant] = React.useState('');\r\n    const [snackbarMessage, setSnackbarMessage] = React.useState('');\r\n\r\n    const handleCloseSnackbar = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setOpenSnackbar(false);\r\n        props.setSnackbar({\r\n            type: SET_SNACKBAR_MODE,\r\n            snackbar: {\r\n                open: false,\r\n                variant: openSnackbarVariant,\r\n                message: snackbarMessage,\r\n            },\r\n        });\r\n    };\r\n    React.useEffect(() => {\r\n        setOpenSnackbarVariant(variant);\r\n        setSnackbarMessage(message);\r\n        setOpenSnackbar(open);\r\n    }, [open, variant, message]);\r\n\r\n    return (\r\n        <div>\r\n            <Snackbar\r\n                open={openSnackbar}\r\n                onClose={handleCloseSnackbar}\r\n                autoHideDuration={3000}>\r\n                <MySnackbarContentWrapper\r\n                    className={classes.margin}\r\n                    onClose={handleCloseSnackbar}\r\n                    variant={openSnackbarVariant}\r\n                    message={snackbarMessage}\r\n                />\r\n            </Snackbar>\r\n            <Route exact path=\"/\" component={Sign} />\r\n            <Switch>\r\n                <PrivateRoute exact path=\"/dreammap\" component={DreamMap} />\r\n                <PrivateRoute exact path=\"/addlocation\" component={AddLocation} />\r\n                <PrivateRoute exact path=\"/luciddreams\" component={MainPage} />\r\n                <PrivateRoute exact path=\"/dreams\" component={ViewDreams} />\r\n                <PrivateRoute exact path=\"/addregulardream\" component={AddDream} />\r\n                <PrivateRoute exact path=\"/addcdream\" component={AddCDream} />\r\n                <PrivateRoute exact path=\"/technics\" component={Technics} />\r\n                <PrivateRoute exact path=\"/addtechnics\" component={AddTechnics} />\r\n            </Switch>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nRoutes.propTypes = {\r\n    open: PropTypes.bool.isRequired,\r\n    variant: PropTypes.string.isRequired,\r\n    message: PropTypes.string.isRequired,\r\n    setSnackbar: PropTypes.func.isRequired,\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        open: store.snackbar.snackbar.open,\r\n        variant: store.snackbar.snackbar.variant,\r\n        message: store.snackbar.snackbar.message,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setSnackbar: snackbar => dispatch(setSnackbar(snackbar)),\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Routes);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { Router } from \"react-router-dom\";\r\nimport './App.css';\r\n\r\nimport history from '../history';\r\nimport { store } from \"../store\";\r\nimport { CheckTimeOut } from '../utils/CheckLoginTimeOut';\r\nimport setAuthToken from \"../utils/setAuthToken\";\r\nimport { SET_CURRENT_USER, SET_THEME_MODE } from \"../actions/types\";\r\n\r\nimport Routes from '../Routes';\r\n\r\nimport { useStyles, params, randomBetween } from '../styles/Styles';\r\n\r\nlet check = CheckTimeOut();\r\nlet stars = [];\r\nlet clouds = [];\r\n\r\nif (!check) {\r\n    localStorage.removeItem(\"jwtToken\");\r\n    setAuthToken(false);\r\n    store.dispatch({\r\n        type: SET_CURRENT_USER,\r\n        payload: null\r\n    });\r\n    history.push(\"/\");\r\n}\r\nelse {\r\n    history.push(\"/luciddreams\");\r\n}\r\n\r\nif (new Date().getHours() >= 16 || (new Date().getHours() >= 0 && new Date().getHours() < 6)) {\r\n    store.dispatch({\r\n        type: SET_THEME_MODE,\r\n        palette: {\r\n            type: \"dark\",\r\n            primary: { main: \"#f9a825\" },\r\n            secondary: { main: \"#f50057\" },\r\n            error: { main: \"#cc0000\" },\r\n        }\r\n    });\r\n}\r\nelse {\r\n    store.dispatch({\r\n        type: SET_THEME_MODE,\r\n        palette: {\r\n            type: \"light\",\r\n            primary: { main: \"#3f51b5\" },\r\n            secondary: { main: \"#f50057\" },\r\n            error: { main: \"#cc0000\" },\r\n        }\r\n    });\r\n}\r\n\r\nfunction App(props) {\r\n    const { type } = props;\r\n    const classes = useStyles();\r\n    stars = [];\r\n    clouds = [];\r\n    for (let i = 0; i < params.amountStars; i++) {\r\n        let size = Math.round(Math.random() * 10) === 0\r\n            ? params.size.giant\r\n            : randomBetween(params.size.min, params.size.max);\r\n        stars.push(\r\n            <div\r\n                className={classes.AppStar}\r\n                key={i + 'AppStar'}\r\n                style={{\r\n                    left: randomBetween(0, 100) + \"%\",\r\n                    top: randomBetween(0, 100) + \"%\",\r\n                    width: size + \"px\",\r\n                    height: size + \"px\",\r\n                    boxShadow: \"0 0 \" + size + \"px \" + size / 2 + \"px #043668\",\r\n                    animationDuration: randomBetween(params.duration.min, params.duration.max) + \"s\",\r\n                }}\r\n            />\r\n        );\r\n    }\r\n\r\n    for (let i = 0; i < params.amountClouds; i++) {\r\n        let left = Math.round(Math.random() * 50 + 150);\r\n        let top = Math.round(Math.random() * 100 / 100 * 90);\r\n        let scale = Math.random() * 2 - 0.5;\r\n        let opacity = Math.random() * 90 / 100;\r\n        let speed = Math.random() * 30 + 15;\r\n        clouds.push(\r\n            <div className={classes.AppCloud}\r\n                key={i + 'AppCloud'}\r\n                style={{\r\n                    left: left + '%',\r\n                    top: top + '%',\r\n                    width: '400px',\r\n                    height: '100px',\r\n                    transform: 'scale(' + scale + ')',\r\n                    opacity: opacity,\r\n                    animationDuration: speed + 's',\r\n                }}\r\n            />\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Router history={history}>\r\n            <div className={classes.AppDivDark}>\r\n                <div className={classes.AppDivLight}\r\n                    style={type === \"light\"\r\n                        ? { opacity: 1, }\r\n                        : { opacity: 0, }}\r\n                />\r\n                {type === \"light\"\r\n                    ?\r\n                    <div className={classes.AppCloudsDiv}\r\n                        style={type === \"light\"\r\n                            ? { opacity: 1, }\r\n                            : { opacity: 0, }}\r\n                    >\r\n                        {clouds}\r\n                    </div>\r\n                    :\r\n                    <div className={classes.AppStarsDiv}\r\n                        style={type === \"light\"\r\n                            ? { opacity: 0, }\r\n                            : { opacity: 1, }}\r\n                    >\r\n                        {stars}\r\n                    </div>\r\n                }\r\n            </div>\r\n            <Routes />\r\n        </Router>\r\n    );\r\n};\r\n\r\nApp.propTypes = {\r\n    type: PropTypes.string.isRequired,\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        type: store.themeMode.palette.type,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from \"./store\";\r\n\r\nReactDOM.render(\r\n    <div id='global' >\r\n        <Provider store={store}>\r\n            <App />\r\n        </Provider>\r\n    </div>\r\n    , document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n\r\n"],"sourceRoot":""}