{"version":3,"sources":["img/map.png","img/sun.png","img/moon.png","img/astronaut.png","history.js","actions/types.js","dictionary/en.js","reducers/currLang.js","reducers/cloud.js","reducers/star.js","reducers/themeMode.js","reducers/authReducer.js","reducers/errorReducer.js","reducers/index.js","store.js","utils/setAuthToken.js","utils/CheckLoginTimeOut.js","actions/Actions.js","components/PrivateRoute.js","styles/Styles.js","components/Config.js","functions.js","components/AddDream.jsx","components/muiltiple/DreamCard.jsx","components/ViewDreams.jsx","components/AddCDream.jsx","dictionary/ru.js","components/MainPage.jsx","components/Sign.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","createBrowserHistory","GET_ERRORS","SET_CURRENT_USER","SET_CLOUD","CLEAR_CLOUD","SET_STAR","CLEAR_STAR","SET_LANG","SET_THEME_MODE","words","current","buttons","signIn","signUp","dreamJoirnal","addDream","addCDream","techniques","adventures","close","about","cancel","add","Edit","Delete","Save","texts","or","nickname","password","passwordAgain","sucessRegistration","hello","changleLanguage","success","title","content","tags","technics","rating","Dream","Cdream","NoDreams","pickDate","pickTime","TapToShow","Public","Publish","Unpublish","PublicAlert","PublicText","PublicDescription","UnpublicAlert","UnpublicText","UnpublicDescription","DeleteAlert","DeleteText","errors","emailLenght","nicknameLenght","passwordLenght","password2Lenght","passwordsCompare","UserNotExist","EmailIsNotValid","IncorrectPassword","EmailIsBusy","PasswordLenght5Symbols","NotLogin","EmptyTitle","EmptyDream","NoChanges","initialState","currLang","EnDict","clouds","stars","palette","type","primary","main","secondary","error","isempty","require","isAuthenticated","user","loading","rootReducer","combineReducers","lang","state","action","currLangState","cloudState","starState","themeMode","auth","payload","middleware","thunk","store","createStore","applyMiddleware","setAuthToken","token","axios","defaults","headers","common","CheckTimeOut","localStorage","jwtToken","decoded","jwt_decode","dispatch","currentTime","Date","now","exp","setCurrLang","setTheme","connect","Component","component","rest","render","props","to","params","amountStars","amountClouds","size","min","max","giant","duration","variantIcon","CheckCircleIcon","warning","WarningIcon","ErrorIcon","info","InfoIcon","randomBetween","a","b","Math","random","useStyles","makeStyles","theme","contentPaper","backgroundColor","text","padding","pickerGridContainer","position","width","left","transform","marginBottom","div85width","top","ratingGridContainer","pickers","avatarRoot","textAlign","smallAvatar","margin","spacing","height","display","smallChip","centerCircularProgress","mainGridDreamsBodyItemContainer","boxSizing","maxHeight","overflow","borderRadius","mainGridDreamsBodyItemContainerPaper","opacity","mainGridDreamsBodyItem","mainGridDreamsContainer","card","maxWidth","expand","marginLeft","transition","transitions","create","shortest","expandOpen","textField","root","flexGrow","window","innerHeight","mainPage","aboutPage","AppDivDark","background","zIndex","AppDivLight","AppStarsDiv","AppCloudsDiv","AppStar","filter","animation","AppCloud","backgroundRepeat","backgroundImage","image","SkyDiv","MoonSrc","backgroundSize","MoonImg","SunSrc","SunImg","AstronautButton","AstronautDiv","AstronautImg","MapButton","MapDiv","MapImg","mainGridContainer","mainGridHeadItem","mainGridBodyItem","menuButtonContainerItem","menuButtonContainer","menuButtonGrid","menuDivButton","menuButton","minWidth","actionButton","mainGridFooterItem","menuButtonContainerFooterLanguageButtons","aboutGridContainer","fullMinWidth","inputDiv","inputScrollableDiv","chips","flexWrap","chip","aboutGridItem","mainPaperGridBodyItem","paper","minMargin","VKLoginDiv","VKLoginButton","boxShadow","instance","baseURL","timeout","areArraysEqualSets","a1","a2","superSet","i","length","e","MenuProps","PaperProps","style","ITEM_HEIGHT","getStyles","name","selectedLocations","fontWeight","indexOf","typography","fontWeightSmall","fontWeightMedium","useStyles1","dark","icon","fontSize","iconVariant","marginRight","message","alignItems","MySnackbarContentWrapper","classes","className","onClose","Icon","SnackbarContent","clsx","aria-describedby","id","Typography","align","variant","IconButton","key","aria-label","color","onClick","defaultTags","useTheme","history","muiTheme","createMuiTheme","Object","assign","overrides","MUIRichTextEditor","border","container","toolbar","justifyContent","minHeight","borderBottom","placeHolder","editor","editorContainer","React","useState","isEditMode","setIsEditMode","openSnackbar","setOpenSnackbar","snackbarMessage","setSnackbarMessage","isLoading","setIsLoading","titleText","setTitleText","selectedDate","setSelectedDate","contentText","setContentText","prevContentText","setPrevContentText","setselectedLocations","locations","setLocations","handleDateChange","date","handleCloseSnackbar","event","reason","useEffect","get","then","res","data","catch","err","console","log","location","defaultData","post_title","dream_date","post_content","map","item","push","CssBaseline","Grid","direction","justify","xs","Paper","TextField","required","value","label","onChange","target","utils","DateFnsUtils","locale","ruLocale","format","KeyboardButtonProps","ampm","currCont","getCurrentContent","convert","convertToRaw","JSON","stringify","inlineToolbar","controls","customControls","inlineStyle","FormControl","InputLabel","Select","labelId","multiple","input","Input","renderValue","selected","Chip","avatar","Avatar","alt","find","name_rus","name_eng","src","img_url","keys","MenuItem","LinearProgress","Button","havErr","parse","blocks","hasChanges","postData","post_id","getTime","dreamDate","toLocaleString","timeZone","deleteTags","item1","some","item2","addTags","remove","post","create_user","post_type","savepost","Snackbar","open","autoHideDuration","DreamCard","is_public","expanded","setExpanded","anchorEl","setAnchorEl","openAlert","setOpenAlert","publicChecked","setPublicChecked","header","body","commit","alertTexts","setAlertTexts","dateOfDream","getDate","getMonth","getFullYear","getHours","getMinutes","slice","srcContent","toString","jsonPparse","convertfromraw","convertFromRaw","text_content","EditorState","createWithContent","getPlainText","closeMenu","clickMenu","newAlertTexts","checked","pathname","loadPosts","alert","newPublic","marginTop","Dialog","aria-labelledby","DialogTitle","DialogContent","DialogContentText","DialogActions","autoFocus","Menu","keepMounted","Boolean","ListItemIcon","FormControlLabel","control","Checkbox","Card","raised","CardHeader","subheader","currentTarget","CardContent","Tooltip","disableFocusListener","disableTouchListener","technic","tag","CardActions","disableSpacing","noWrap","aria-expanded","Collapse","in","unmountOnExit","readOnly","paddingTop","Rating","dreams","setDreams","useCallback","zeroMinWidth","CircularProgress","disableShrink","Container","defaultTechnics","selectedTechnics","setselectedTechnics","realisticsValue","setRealisticsValue","setTechnics","newValue","deleteTechnics","addTechnics","TransitionDown","Slide","green","amber","SnackbarContentWrapper","setCurrLangAction","undefined","prevLanguage","setPrevLanguage","openLangSnakbar","setOpenLangSnakbar","openMessageSnackbar","setOpenMessageSnackbar","langSnakbarMessage","setLangSnakbarMessage","setTransition","infoSnackbar","setInfoSnackbar","changeLanguage","language","RuDict","handleCloseLangSnakbar","handleCloseMessageSnackbar","times_mode","anchorOrigin","vertical","horizontal","TransitionComponent","newLang","newUserData","newInfoSnackbar","ButtonBase","focusRipple","newPaletteType","primaryColor","secondaryColor","Transition","forwardRef","ref","setUserState","State","email","loginData","setLoginData","password2","registData","setRegistData","emailErr","emailErrText","nicknameErr","nicknameErrText","passwordErr","passwordErrText","password2Err","password2ErrText","regFieldErrors","setRegFieldErrors","showPassword","setShowPassword","openLogin","setOpenLogin","openRegist","setOpenRegist","page","setPage","handleMouseDownPassword","preventDefault","singUp","isErr","newRegFieldErrors","newRegistData","click","response","newPages","setItem","passwordincorrect","onBlur","newLoginData","changeAuthLogin","changeAuthPassword","InputProps","endAdornment","InputAdornment","tabIndex","edge","onMouseDown","button","disabled","path","mdiVk","helperText","changeRegistLogin","changeRegistNickname","changeRegistPassword","changeRegistPassword2","aboutPaper","removeItem","round","animationDuration","scale","speed","exact","Sign","MainPage","AddCDream","AddDream","ViewDreams","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9fb712a2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/map.71ce46a8.png\";","module.exports = __webpack_public_path__ + \"static/media/sun.4f817e2f.png\";","module.exports = __webpack_public_path__ + \"static/media/moon.ca0fb531.png\";","module.exports = __webpack_public_path__ + \"static/media/astronaut.7219d35a.png\";","import { createBrowserHistory } from \"history\";\r\n\r\nexport default createBrowserHistory();","export const GET_ERRORS = \"GET_ERRORS\";\r\nexport const USER_LOADING = \"USER_LOADING\";\r\nexport const SET_CURRENT_USER = \"SET_CURRENT_USER\";\r\n\r\nexport const SET_CLOUD = 'SET_CLOUD'\r\nexport const CLEAR_CLOUD = 'CLEAR_CLOUD'\r\n\r\nexport const SET_STAR = 'SET_STAR'\r\nexport const CLEAR_STAR = 'CLEAR_STAR'\r\n\r\nexport const SET_LANG = 'SET_LANG'\r\nexport const SET_THEME_MODE = 'SET_THEME_MODE'","const words = {\r\n    current: 'En',\r\n    buttons : {\r\n        signIn: 'Sign in',\r\n        signUp: 'Sign up',\r\n        dreamJoirnal: 'Dream joirnal',\r\n        addDream: 'Add dream',\r\n        addCDream: 'Add C-dream',\r\n        techniques: 'Techniques',\r\n        adventures: 'Adventures',\r\n        close: 'Back',\r\n        about: 'About us',\r\n        cancel: 'Cancel',\r\n        add: 'Add',\r\n        Edit: 'Edit',\r\n        Delete: 'Delete',\r\n        Save: 'Save',\r\n    },\r\n    texts: {\r\n        about: 'About us About us About us About us About us About us About us About us About us About us ',\r\n        or: 'OR',\r\n        nickname: 'Nickname',\r\n        password: 'Password',\r\n        passwordAgain: 'Password again',\r\n        cancel: 'Cancel',\r\n        sucessRegistration: 'You are sign up successful',\r\n        hello: 'Hello, ',\r\n        changleLanguage: 'Save change language to ',\r\n        success: 'Success',\r\n        title: 'Title',\r\n        content: \"What's a dream\",\r\n        tags: 'Locations',\r\n        technics: 'Technics',\r\n        rating: 'Realistics',\r\n        Dream: 'Regular dream',\r\n        Cdream: 'C-dream',\r\n        NoDreams: \"You don't have dreams\",\r\n        pickDate: \"Date\",\r\n        pickTime: \"Time\",\r\n        TapToShow: \"Tap on text to show highlights\",\r\n        Public: \"Public\",\r\n        Publish: \"Unpublish\",\r\n        Unpublish: \"Publish\",\r\n        PublicAlert: \"Are you sure you want to public the dream?\",\r\n        PublicText: \"After public your friends can read this dream.\",\r\n        PublicDescription: \"Your friends can read this dream\",\r\n        UnpublicAlert: \"Are you sure you want to unpublic the dream?\",\r\n        UnpublicText: \"After unpublic your friends can't read this dream.\",\r\n        UnpublicDescription: \"Your friends can't read this dream\",\r\n        DeleteAlert: \"Are you sure you want to remove the dream?\",\r\n        DeleteText: \"You can't restore dream. Never.\",\r\n    },\r\n    errors: {\r\n        emailLenght: 'Email must not be empty',\r\n        nicknameLenght: 'Nickname must not be empty',\r\n        passwordLenght: 'Password must not be empty',\r\n        password2Lenght: 'Password must not be empty',\r\n        passwordsCompare: 'Passwords not equal',\r\n        UserNotExist: 'Invalid email or password',\r\n        EmailIsNotValid: 'Invalid email',\r\n        IncorrectPassword: 'Invalid email or password',\r\n        EmailIsBusy: 'Email is busy',\r\n        PasswordLenght5Symbols: 'Minimum password length: 5 symbols',\r\n        NotLogin: 'You not loggin in',\r\n        EmptyTitle: 'Title must not be empty',\r\n        EmptyDream: 'Dream must not be empty',\r\n        NoChanges: 'No changes',\r\n    },\r\n};\r\n\r\nexport default words;","import { SET_LANG } from '../actions/types';\r\nimport EnDict from '../dictionary/en';\r\n\r\nconst initialState = {\r\n    currLang: EnDict,\r\n}\r\n\r\nexport function currLangReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case SET_LANG:\r\n            return { ...state, currLang: action.currLangState }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}","import { SET_CLOUD, CLEAR_CLOUD } from '../actions/types';\r\n\r\nconst initialState = {\r\n\tclouds: [],\r\n}\r\n\r\nexport function cloudsReducer(state = initialState, action) {\r\n\tswitch (action.type) {\r\n\t\tcase SET_CLOUD:\r\n\t\t\treturn {\r\n\t\t\t\t...state, clouds: [...state.clouds, action.cloudState]\r\n\t\t\t}\r\n\t\tcase CLEAR_CLOUD:\r\n\t\t\treturn {\r\n\t\t\t\t...state, clouds: []\r\n\t\t\t}\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n}","import { SET_STAR, CLEAR_STAR } from '../actions/types';\r\n\r\nconst initialState = {\r\n\tstars: [],\r\n}\r\n\r\nexport function starsReducer(state = initialState, action) {\r\n\tswitch (action.type) {\r\n\t\tcase SET_STAR:\r\n\t\t\treturn {\r\n\t\t\t\t...state, stars: [...state.stars, action.starState]\r\n\t\t\t}\r\n\t\tcase CLEAR_STAR:\r\n\t\t\treturn {\r\n\t\t\t\t...state, stars: []\r\n\t\t\t}\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n}","import { SET_THEME_MODE } from '../actions/types';\r\n\r\nconst initialState = {\r\n    palette: {\r\n        type: \"dark\",\r\n        primary: { main: \"#f9a825\" },\r\n        secondary: { main: \"#f50057\" },\r\n        error: { main: \"#cc0000\" },\r\n    },\r\n}\r\n\r\nexport function themeReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case SET_THEME_MODE:\r\n            return { ...state, palette: action.palette }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}","import { SET_CURRENT_USER, USER_LOADING } from \"../actions/types\";\r\n\r\nconst isempty = require(\"is-empty\");\r\n\r\nconst initialState = {\r\n    isAuthenticated: false,\r\n    user: {},\r\n    loading: false\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case SET_CURRENT_USER:\r\n            return {\r\n                ...state,\r\n                isAuthenticated: !isempty(action.payload),\r\n                user: action.payload\r\n            };\r\n        case USER_LOADING:\r\n            return {\r\n                ...state,\r\n                loading: true\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}","import { GET_ERRORS } from \"../actions/types\";\r\nconst initialState = {};\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case GET_ERRORS:\r\n            return action.payload;\r\n        default:\r\n            return state;\r\n    }\r\n}","import { combineReducers } from 'redux';\r\nimport { currLangReducer } from './currLang';\r\nimport { cloudsReducer } from './cloud';\r\nimport { starsReducer } from './star';\r\nimport { themeReducer } from './themeMode';\r\nimport authReducer from './authReducer';\r\nimport errorReducer from './errorReducer';\r\n\r\nexport const rootReducer = combineReducers({\r\n    lang: currLangReducer,\r\n    clouds: cloudsReducer,\r\n    stars: starsReducer,\r\n    themeMode: themeReducer,\r\n    auth: authReducer,\r\n    errors: errorReducer,\r\n});","import { createStore, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { rootReducer } from './reducers';\r\n\r\nconst middleware = [thunk];\r\n\r\nexport const store = createStore(\r\n    rootReducer,\r\n    {},\r\n    applyMiddleware(...middleware)\r\n);","import axios from \"axios\";\r\n\r\nconst setAuthToken = token => {\r\n    if (token) {\r\n        // Apply authorization token to every request if logged in\r\n        axios.defaults.headers.common[\"Authorization\"] = token;\r\n    }\r\n    else {\r\n        // Delete auth header\r\n        delete axios.defaults.headers.common[\"Authorization\"];\r\n    }\r\n};\r\n\r\nexport default setAuthToken;","import jwt_decode from \"jwt-decode\";\r\n\r\nimport { store } from \"../store\";\r\nimport setAuthToken from \"../utils/setAuthToken\";\r\nimport { SET_CURRENT_USER } from \"../actions/types\"\r\n\r\nexport function CheckTimeOut() {\r\n    if (localStorage.jwtToken) {\r\n        const token = localStorage.jwtToken;\r\n        setAuthToken(token);\r\n        const decoded = jwt_decode(token);\r\n        store.dispatch({\r\n            type: SET_CURRENT_USER,\r\n            payload: decoded\r\n        });\r\n\r\n        const currentTime = Date.now() / 1000; // to get in milliseconds\r\n        if (decoded.exp < currentTime) {\r\n            return false;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }\r\n}","import { SET_LANG } from '../actions/types';\r\n\r\nexport function setCloud(state) {\r\n\treturn {\r\n\t\ttype: state.type,\r\n\t\tcloudState: state.cloudState,\r\n\t}\r\n}\r\nexport function setStar(state) {\r\n\treturn {\r\n\t\ttype: state.type,\r\n\t\tstarState: state.starState,\r\n\t}\r\n}\r\nexport function setCurrLang(state) {\r\n\treturn {\r\n\t\ttype: SET_LANG,\r\n\t\tcurrLangState: state,\r\n\t}\r\n}\r\nexport function setTheme(state) {\r\n\treturn {\r\n\t\ttype: state.type,\r\n\t\tpalette: state.palette,\r\n\t}\r\n}\r\nexport function setUserState(state) {\r\n\treturn {\r\n\t\ttype: state.type,\r\n\t\tpayload: state.payload\r\n\t}\r\n}","import React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst PrivateRoute = ({ component: Component, auth, ...rest }) => (\r\n    <Route\r\n        {...rest}\r\n        render={props =>\r\n            auth.isAuthenticated === true\r\n                ? <Component {...props} />\r\n                : <Redirect to=\"/\" />\r\n        }\r\n    />\r\n);\r\n\r\nPrivateRoute.propTypes = {\r\n    auth: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    auth: state.auth\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps\r\n)(PrivateRoute);","import { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\nimport WarningIcon from '@material-ui/icons/Warning';\r\nimport ErrorIcon from '@material-ui/icons/Error';\r\nimport InfoIcon from '@material-ui/icons/Info';\r\n\r\nimport MapImg from '../img/map.png';\r\nimport SunImg from '../img/sun.png';\r\nimport MoonImg from '../img/moon.png';\r\nimport AstronautImg from '../img/astronaut.png';\r\n\r\nexport const params = {\r\n    amountStars: 25,\r\n    amountClouds: 5,\r\n    size: {\r\n        min: 1,\r\n        max: 5,\r\n        giant: 9\r\n    },\r\n    duration: {\r\n        min: 5,\r\n        max: 25,\r\n    }\r\n}\r\n\r\nexport const variantIcon = {\r\n    success: CheckCircleIcon,\r\n    warning: WarningIcon,\r\n    error: ErrorIcon,\r\n    info: InfoIcon,\r\n};\r\n\r\nexport function randomBetween(a, b) {\r\n    return (a + (Math.random() * (b - a)));\r\n}\r\n\r\nexport const useStyles = makeStyles(theme => ({\r\n    contentPaper: {\r\n        backgroundColor: theme.palette.text.main,\r\n        padding: 10,\r\n    },\r\n    pickerGridContainer: {\r\n        position: \"relative\",\r\n        width: \"85%\",\r\n        left: \"50%\",\r\n        transform: \"translateX(-50%)\",\r\n        marginBottom: \"5px\",\r\n    },\r\n    div85width: {\r\n        position: \"relative\",\r\n        width: \"85%\",\r\n        top: \"65%\",\r\n        left: \"50%\",\r\n        transform: \"translate(-50%, -50%)\",\r\n    },\r\n    ratingGridContainer: {\r\n        position: \"relative\",\r\n        width: \"100%\",\r\n        top: \"65%\",\r\n        left: \"50%\",\r\n        transform: \"translate(-50%, -50%)\",\r\n    },\r\n    pickers: {\r\n        position: \"relative\",\r\n        width: \"90%\",\r\n        left: \"50%\",\r\n        transform: \"translateX(-50%)\",\r\n    },\r\n    avatarRoot: {\r\n        // display: \"flex\",\r\n        // flexWrap: \"wrap\",\r\n        // overflow: 'auto',\r\n        textAlign: 'center',\r\n        width: '100%',\r\n    },\r\n    smallAvatar: {\r\n        margin: theme.spacing(0.5),\r\n        width: theme.spacing(5),\r\n        height: theme.spacing(5),\r\n        display: 'inline-block',\r\n    },\r\n    smallChip: {\r\n        margin: theme.spacing(0.5),\r\n    },\r\n    centerCircularProgress: {\r\n        position: 'relative',\r\n        top: '50%',\r\n        left: '50%',\r\n    },\r\n    mainGridDreamsBodyItemContainer: {\r\n        position: 'absolute',\r\n        boxSizing: 'border-box',\r\n        maxHeight: '90%',\r\n        overflow: 'auto',\r\n        borderRadius: '4px',\r\n    },\r\n    mainGridDreamsBodyItemContainerPaper: {\r\n        height: '100%',\r\n        opacity: 0.9,\r\n    },\r\n    mainGridDreamsBodyItem: {\r\n        overflow: 'hidden',\r\n    },\r\n    mainGridDreamsContainer: {\r\n        height: '100%',\r\n        position: 'relative',\r\n        width: '90%',\r\n        left: '50%',\r\n        transform: 'translateX(-50%)',\r\n    },\r\n    card: {\r\n        maxWidth: '100%',\r\n        height: '100%',\r\n    },\r\n    expand: {\r\n        transform: \"rotate(0deg)\",\r\n        marginLeft: \"auto\",\r\n        transition: theme.transitions.create(\"transform\", {\r\n            duration: theme.transitions.duration.shortest\r\n        })\r\n    },\r\n    expandOpen: {\r\n        transform: \"rotate(180deg)\"\r\n    },\r\n    textField: {\r\n        width: '100%',\r\n    },\r\n    margin: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    root: {\r\n        flexGrow: 1,\r\n        position: 'relative',\r\n        width: '100%',\r\n        height: window.innerHeight - 1,\r\n        overflow: 'hidden',\r\n    },\r\n    mainPage: {\r\n        top: 0,\r\n        left: 0,\r\n        position: 'absolute',\r\n        transition: 'all 0.3s linear',\r\n        width: '100%',\r\n        height: '100%',\r\n    },\r\n    aboutPage: {\r\n        position: 'absolute',\r\n        transition: 'all 0.3s linear',\r\n        top: '100%',\r\n        width: '100%',\r\n        height: '100%',\r\n    },\r\n    AppDivDark: {\r\n        position: 'fixed',\r\n        background: 'radial-gradient(ellipse at center, rgba(8, 25, 42, 1) 20%, rgba(1, 4, 6, 1) 100%)',\r\n        opacity: 1,\r\n        margin: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        zIndex: -3,\r\n    },\r\n    AppDivLight: {\r\n        position: 'absolute',\r\n        background: 'radial-gradient(ellipse at center, rgba(207, 225, 237, 1) 20%, rgba(127, 170, 202, 1) 100%)',\r\n        transition: 'opacity 0.5s linear',\r\n        margin: 0,\r\n        opacity: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        zIndex: -3,\r\n    },\r\n    AppStarsDiv: {\r\n        transition: 'opacity 0.5s linear',\r\n        opacity: 0,\r\n        position: 'absolute',\r\n        width: '100%',\r\n        height: '100%',\r\n        overflow: 'hidden',\r\n        zIndex: -2,\r\n    },\r\n    AppCloudsDiv: {\r\n        transition: 'opacity 0.5s linear',\r\n        opacity: 0,\r\n        position: 'absolute',\r\n        width: '100%',\r\n        height: '100%',\r\n        overflow: 'hidden',\r\n        zIndex: -2,\r\n    },\r\n    AppStar: {\r\n        borderRadius: '100%',\r\n        position: 'absolute',\r\n        background: 'radial-gradient(ellipse at center, rgba(177, 198, 219, 1) 2%, rgba(5, 63, 118, 1) 100%)',\r\n        filter: 'blur(1px)',\r\n        animation: '$shine infinite alternate',\r\n        zIndex: -1,\r\n    },\r\n    AppCloud: {\r\n        position: 'absolute',\r\n        backgroundRepeat: 'no-repeat',\r\n        backgroundImage: 'url(https://www.turbotobias.dk/wp-content/uploads/2019/03/White-cloud-type3.svg)',\r\n        animation: '$moveclouds infinite linear',\r\n        zIndex: -1,\r\n    },\r\n    image: {\r\n        position: 'relative',\r\n        left: '50%',\r\n        top: '25%',\r\n        transform: 'translate(-50%, -25%)',\r\n        width: '35vw !important',\r\n        height: '35vw',\r\n        borderRadius: '50%',\r\n    },\r\n    SkyDiv: {\r\n        position: 'absolute',\r\n        borderRadius: '50%',\r\n        top: 0,\r\n        left: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        overflow: 'hidden',\r\n    },\r\n    MoonSrc: {\r\n        backgroundSize: 'cover',\r\n        background: 'url(' + MoonImg + ')',\r\n        backgroundRepeat: 'no-repeat',\r\n        position: 'absolute',\r\n        top: 0,\r\n        left: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        transition: 'all 0.3s linear',\r\n    },\r\n    SunSrc: {\r\n        backgroundSize: 'cover',\r\n        background: 'url(' + SunImg + ')',\r\n        backgroundRepeat: 'no-repeat',\r\n        position: 'absolute',\r\n        top: 0,\r\n        left: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        transition: 'all 0.3s linear',\r\n    },\r\n    AstronautButton: {\r\n        position: 'relative',\r\n        left: '50%',\r\n        top: '50%',\r\n        transform: 'translate(-50%, -50%)',\r\n        width: '25vw !important',\r\n        height: '25vw',\r\n        borderRadius: '50%',\r\n    },\r\n    AstronautDiv: {\r\n        position: 'absolute',\r\n        borderRadius: '50%',\r\n        top: 0,\r\n        left: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        overflow: 'hidden',\r\n        animation: '$swinging 30s infinite linear',\r\n    },\r\n    AstronautImg: {\r\n        backgroundSize: 'cover',\r\n        background: 'url(' + AstronautImg + ')',\r\n        backgroundRepeat: 'no-repeat',\r\n        position: 'absolute',\r\n        top: 0,\r\n        left: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        transition: 'filter 0.5s linear',\r\n    },\r\n    MapButton: {\r\n        position: 'relative',\r\n        left: '50%',\r\n        top: '50%',\r\n        transform: 'translate(-50%, -50%)',\r\n        width: '25vw !important',\r\n        height: '25vw',\r\n        borderRadius: '10%',\r\n    },\r\n    MapDiv: {\r\n        position: 'absolute',\r\n        top: 0,\r\n        left: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        overflow: 'hidden',\r\n        animation: '$swinging 30s infinite linear',\r\n    },\r\n    MapImg: {\r\n        backgroundSize: 'cover',\r\n        background: 'url(' + MapImg + ')',\r\n        backgroundRepeat: 'no-repeat',\r\n        position: 'absolute',\r\n        top: 0,\r\n        left: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        transition: 'filter 0.5s linear',\r\n    },\r\n    mainGridContainer: {\r\n        height: '100%',\r\n    },\r\n    mainGridHeadItem: {\r\n        maxWidth: '100% !Important',\r\n    },\r\n    mainGridBodyItem: {\r\n        maxWidth: '100% !Important',\r\n    },\r\n    menuButtonContainerItem: {\r\n        maxWidth: '100% !Important',\r\n    },\r\n    menuButtonContainer: {\r\n        height: '100% !Important',\r\n    },\r\n    menuButtonGrid: {\r\n    },\r\n    menuDivButton: {\r\n        maxWidth: '100% !Important',\r\n        padding: '10px',\r\n    },\r\n    menuButton: {\r\n        minWidth: '55vw',\r\n        maxWidth: '55vw',\r\n    },\r\n    actionButton: {\r\n        minWidth: '40vw',\r\n        maxWidth: '40vw',\r\n    },\r\n    mainGridFooterItem: {\r\n        maxWidth: '100% !Important',\r\n    },\r\n    menuButtonContainerFooterLanguageButtons: {\r\n    },\r\n    aboutGridContainer: {\r\n        width: '100%',\r\n        height: '100%',\r\n        margin: 0,\r\n    },\r\n    fullMinWidth: {\r\n        minWidth: '100% !Important',\r\n        position: 'relative'\r\n    },\r\n    inputDiv: {\r\n        minWidth: '85% !Important',\r\n        maxWidth: '85% !Important',\r\n        position: 'absolute',\r\n        top: '50%',\r\n        left: '50%',\r\n        transform: 'translate(-50%, -50%)',\r\n        opacity: 1,\r\n    },\r\n    inputScrollableDiv: {\r\n        minWidth: '85% !Important',\r\n        maxWidth: '85% !Important',\r\n        height: '100%',\r\n        position: 'absolute',\r\n        top: '50%',\r\n        left: '50%',\r\n        transform: 'translate(-50%, -50%)',\r\n        opacity: 1,\r\n        //overflowY: 'auto',\r\n    },\r\n    chips: {\r\n        display: \"flex\",\r\n        flexWrap: \"wrap\"\r\n    },\r\n    chip: {\r\n        margin: 1\r\n    },\r\n    aboutGridItem: {\r\n        width: '100%',\r\n    },\r\n    mainPaperGridBodyItem: {\r\n        maxWidth: '100% !Important',\r\n    },\r\n    paper: {\r\n        height: '90%',\r\n        margin: theme.spacing(3, 2),\r\n        opacity: 0.9,\r\n    },\r\n    minMargin: {\r\n        margin: theme.spacing(0.5),\r\n    },\r\n    VKLoginDiv: {\r\n        position: 'absolute',\r\n        width: '15vw',\r\n        height: '15vw',\r\n    },\r\n    VKLoginButton: {\r\n        background: 'url(https://dressirovka70.ru/wp-content/uploads/2019/10/1200px-VK.com-logo.svg1_-1024x1024.png)',\r\n        boxShadow: '0px 3px 1px -2px rgba(0,0,0,0.2), 0px 2px 2px 0px rgba(0,0,0,0.14), 0px 1px 5px 0px rgba(0,0,0,0.12)',\r\n        backgroundSize: 'cover',\r\n        borderRadius: '25%',\r\n        width: '100%',\r\n        height: '100%',\r\n    },\r\n    \"@keyframes shine\": {\r\n        \"0%\": {\r\n            transform: 'scale(1)',\r\n            opacity: '1',\r\n        },\r\n        \"20%\": {\r\n            transform: 'scale(.9)',\r\n            opacity: '.8',\r\n        },\r\n        \"40%\": {\r\n            transform: 'scale(1)',\r\n            opacity: '.9',\r\n        },\r\n        \"60%\": {\r\n            transform: 'scale(.2)',\r\n            opacity: '.1',\r\n        },\r\n        \"80%\": {\r\n            transform: 'scale(.5)',\r\n            opacity: '.5',\r\n        },\r\n        \"100%\": {\r\n            transform: 'scale(.9)',\r\n            opacity: '.9',\r\n        },\r\n    },\r\n    \"@keyframes moveclouds\": {\r\n        '100%': {\r\n            left: '-100%',\r\n        },\r\n    },\r\n    \"@keyframes swinging\": {\r\n        '0%': {\r\n            transform: 'rotate(0)',\r\n        },\r\n        '10%': {\r\n            transform: 'rotate(12deg)',\r\n        },\r\n        '20%': {\r\n            transform: 'rotate(-10deg)',\r\n        },\r\n        '30%': {\r\n            transform: 'rotate(9deg)',\r\n        },\r\n        '40%': {\r\n            transform: 'rotate(-8deg)',\r\n        },\r\n        '50%': {\r\n            transform: 'rotate(7deg)',\r\n        },\r\n        '60%': {\r\n            transform: 'rotate(-6deg)',\r\n        },\r\n        '70%': {\r\n            transform: 'rotate(5deg)',\r\n        },\r\n        '80%': {\r\n            transform: 'rotate(-4deg)',\r\n        },\r\n        '90%': {\r\n            transform: 'rotate(3deg)',\r\n        },\r\n        '100%': {\r\n            transform: 'rotate(0)',\r\n        },\r\n    }\r\n}));","import axios from \"axios\";\r\n\r\n\r\nexport const instance = axios.create({\r\n    baseURL: 'https://ldserver.herokuapp.com',\r\n    timeout: 10000,\r\n    headers: { \"Access-Control-Allow-Origin\": \"*\" }\r\n});","export function areArraysEqualSets(a1, a2) {\r\n    let superSet = {};\r\n    for (let i = 0; i < a1.length; i++) {\r\n        const e = a1[i] + typeof a1[i];\r\n        superSet[e] = 1;\r\n    }\r\n    for (let i = 0; i < a2.length; i++) {\r\n        const e = a2[i] + typeof a2[i];\r\n        if (!superSet[e]) {\r\n            return false;\r\n        }\r\n        superSet[e] = 2;\r\n    }\r\n    for (let e in superSet) {\r\n        if (superSet[e] === 1) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport ruLocale from \"date-fns/locale/ru\";\r\nimport enLocale from \"date-fns/locale/ru\";\r\n\r\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Typography from '@material-ui/core/Typography';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport Button from '@material-ui/core/Button';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Input from \"@material-ui/core/Input\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport MUIRichTextEditor from 'mui-rte';\r\nimport { convertToRaw } from 'draft-js';\r\n\r\nimport { MuiThemeProvider, createMuiTheme, useTheme, makeStyles } from '@material-ui/core/styles';\r\n\r\nimport { MuiPickersUtilsProvider, KeyboardTimePicker, KeyboardDatePicker } from '@material-ui/pickers';\r\n\r\nimport FormatColorFillIcon from '@material-ui/icons/FormatColorFill';\r\nimport ErrorIcon from '@material-ui/icons/Error';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nimport { useStyles } from '../styles/Styles';\r\n\r\nimport { instance } from './Config';\r\n\r\nimport { areArraysEqualSets } from '../functions';\r\n\r\nconst ITEM_HEIGHT = 48;\r\nconst ITEM_PADDING_TOP = 8;\r\nconst MenuProps = {\r\n    PaperProps: {\r\n        style: {\r\n            maxHeight: ITEM_HEIGHT * 5 + ITEM_PADDING_TOP,\r\n            width: 250\r\n        }\r\n    }\r\n};\r\n\r\nfunction getStyles(name, selectedLocations, theme) {\r\n    return {\r\n        fontWeight:\r\n            selectedLocations.indexOf(name) === -1\r\n                ? theme.typography.fontWeightSmall\r\n                : theme.typography.fontWeightMedium\r\n    };\r\n}\r\n\r\nconst useStyles1 = makeStyles(theme => ({\r\n    error: {\r\n        backgroundColor: theme.palette.error.dark,\r\n    },\r\n    icon: {\r\n        fontSize: 20,\r\n    },\r\n    iconVariant: {\r\n        opacity: 0.9,\r\n        marginRight: theme.spacing(1),\r\n    },\r\n    message: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n    },\r\n}));\r\n\r\nfunction MySnackbarContentWrapper(props) {\r\n    const classes = useStyles1();\r\n    const { className, message, onClose } = props;\r\n    const Icon = ErrorIcon;\r\n\r\n    return (\r\n        <SnackbarContent\r\n            className={clsx(classes.error, className)}\r\n            aria-describedby=\"client-snackbar\"\r\n            message={\r\n                <span id=\"client-snackbar\" className={classes.message}>\r\n                    <Icon className={clsx(classes.icon, classes.iconVariant)} />\r\n                    <Typography className={classes.mainGridContainer}\r\n                        align='center'\r\n                        variant='body2'>\r\n                        {message}\r\n                    </Typography>\r\n                </span>\r\n            }\r\n            action={[\r\n                <IconButton key=\"close\" aria-label=\"close\" color=\"inherit\" onClick={onClose}>\r\n                    <CloseIcon className={classes.icon} />\r\n                </IconButton>,\r\n            ]}\r\n        />\r\n    );\r\n}\r\n\r\nlet defaultTags = [];\r\n\r\nfunction AddDream(props) {\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const { lang, themeMode, history, auth } = props;\r\n    const muiTheme = createMuiTheme(themeMode);\r\n    Object.assign(muiTheme, {\r\n        overrides: {\r\n            MUIRichTextEditor: {\r\n                root: {\r\n                    border: \"1px solid gray\",\r\n                    borderRadius: '4px',\r\n                    height: '100%',\r\n                    //Весь компонент\r\n                },\r\n                container: {\r\n                    height: '100%',\r\n                    margin: '0 !Important',\r\n                    //Без шапки\r\n                },\r\n                toolbar: {\r\n                    //textAlign: 'center',\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    justifyContent: 'center',\r\n                    height: '20%',\r\n                    minHeight: '48px',\r\n                    margin: '0 !Important',\r\n                    borderBottom: \"1px solid gray\",\r\n                    borderRadius: '4px',\r\n                },\r\n                placeHolder: {\r\n                },\r\n                editor: {\r\n                    height: '69%',\r\n                    width: '100%',\r\n                    position: 'relative',\r\n                    overflow: 'hidden',\r\n                    //Эдитор\r\n                },\r\n                editorContainer: {\r\n                    padding: \"18.5px 14px\",\r\n                    borderRadius: '4px',\r\n                    position: 'relative',\r\n                    boxSizing: 'border-box',\r\n                    maxHeight: '100%',\r\n                    overflow: 'auto',\r\n                    //Редактор\r\n                },\r\n            }\r\n        }\r\n    })\r\n    const [isEditMode, setIsEditMode] = React.useState(false);\r\n    const [openSnackbar, setOpenSnackbar] = React.useState(false);\r\n    const [snackbarMessage, setSnackbarMessage] = React.useState('');\r\n    const [isLoading, setIsLoading] = React.useState(false);\r\n    const [titleText, setTitleText] = React.useState('');\r\n    const [selectedDate, setSelectedDate] = React.useState(new Date());\r\n    const [contentText, setContentText] = React.useState();\r\n    const [prevContentText, setPrevContentText] = React.useState();\r\n    const [selectedLocations, setselectedLocations] = React.useState([]);\r\n    const [locations, setLocations] = React.useState({});\r\n\r\n    const handleChangeLocations = (event) => {\r\n        setselectedLocations(event.target.value);\r\n    };\r\n    const changeTitle = (event) => {\r\n        setTitleText(event.target.value);\r\n    };\r\n    const handleDateChange = date => {\r\n        setSelectedDate(date);\r\n    };\r\n    const changeContent = (state) => {\r\n        const currCont = state.getCurrentContent();\r\n        const convert = convertToRaw(currCont);\r\n        const content = JSON.stringify(convert);\r\n        if (prevContentText !== content) {\r\n            setPrevContentText(content);\r\n        }\r\n    };\r\n    const savepost = () => {\r\n        setIsLoading(true);\r\n        let havErr = false;\r\n\r\n        if (typeof (titleText) !== 'undefined') {\r\n            if (titleText.length === 0) {\r\n                setSnackbarMessage(lang.currLang.errors.EmptyTitle);\r\n                havErr = true;\r\n            }\r\n        }\r\n        else {\r\n            setSnackbarMessage(lang.currLang.errors.EmptyTitle);\r\n            havErr = true;\r\n        }\r\n\r\n        if (typeof (prevContentText) !== 'undefined') {\r\n            if (JSON.parse(prevContentText).blocks[0].text.length === 0) {\r\n                setSnackbarMessage(lang.currLang.errors.EmptyDream);\r\n                havErr = true;\r\n            }\r\n        }\r\n        else {\r\n            setSnackbarMessage(lang.currLang.errors.EmptyDream);\r\n            havErr = true;\r\n        }\r\n\r\n        if (havErr) {\r\n            setOpenSnackbar(true);\r\n            setIsLoading(false);\r\n        }\r\n        else {\r\n            if (isEditMode) {\r\n                let hasChanges = false;\r\n                let postData = {\r\n                    post_id: props.location.defaultData.post_id,\r\n                };\r\n\r\n                if (props.location.defaultData.post_title !== titleText) {\r\n                    postData.title = titleText;\r\n                    hasChanges = true;\r\n                }\r\n\r\n                if (props.location.defaultData.dream_date.getTime() !== selectedDate.getTime()) {\r\n                    postData.dreamDate = selectedDate.toLocaleString(\"ru-RU\", { timeZone: 'Europe/London' });\r\n                    hasChanges = true;\r\n                }\r\n\r\n                if (props.location.defaultData.post_content !== prevContentText) {\r\n                    postData.content = prevContentText;\r\n                    hasChanges = true;\r\n                }\r\n\r\n                if (!areArraysEqualSets(defaultTags, selectedLocations)) {\r\n                    hasChanges = true;\r\n                    let deleteTags = defaultTags.filter(item1 =>\r\n                        !selectedLocations.some(item2 => (\r\n                            item2 === item1)\r\n                        )\r\n                    );\r\n                    let addTags = selectedLocations.filter(item1 =>\r\n                        !defaultTags.some(item2 => (\r\n                            item2 === item1)\r\n                        )\r\n                    );\r\n                    if (addTags.length > 0) {\r\n                        let add = {};\r\n                        addTags.map((item, key) => (\r\n                            add[key] = item\r\n                        ));\r\n                        postData.tags = { ...postData.tags, add: add };\r\n                    }\r\n                    if (deleteTags.length > 0) {\r\n                        let remove = {};\r\n                        deleteTags.map((item, key) => (\r\n                            remove[key] = item\r\n                        ));\r\n                        postData.tags = { ...postData.tags, remove: remove };\r\n                    }\r\n                }\r\n\r\n                if (hasChanges) {\r\n                    instance\r\n                        .post('/actions/users/updatepost', postData)\r\n                        .then(res => {\r\n                            setIsLoading(false);\r\n                            history.push(\"/dreams\")\r\n                        })\r\n                        .catch(err => {\r\n                            console.log(err);\r\n                            setIsLoading(false);\r\n                        });\r\n                }\r\n                else {\r\n                    setSnackbarMessage(lang.currLang.errors.NoChanges);\r\n                    setOpenSnackbar(true);\r\n                    setIsLoading(false);\r\n                }\r\n            }\r\n            else {\r\n                //let convert = JSON.stringify(contentText);\r\n\r\n                let postData = {\r\n                    title: titleText,\r\n                    dreamDate: selectedDate.toLocaleString(\"ru-RU\", { timeZone: 'Europe/London' }),\r\n                    content: prevContentText,\r\n                    create_user: auth.user.id,\r\n                    post_type: 0,\r\n                    nickname: auth.user.nickname,\r\n                    tags: selectedLocations,\r\n                }\r\n\r\n                instance\r\n                    .post('/actions/users/createpost', postData)\r\n                    .then(res => {\r\n                        setIsLoading(false);\r\n                        history.push(\"/luciddreams\")\r\n                    })\r\n                    .catch(err => {\r\n                        setIsLoading(false);\r\n                    });\r\n            }\r\n        }\r\n    };\r\n    const handleCloseSnackbar = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setOpenSnackbar(false);\r\n    };\r\n    React.useEffect(() => {\r\n        instance.get(\"/gettags\")\r\n            .then(res => {\r\n                setLocations(res.data);\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            });\r\n\r\n        if (typeof (props.location.defaultData) !== 'undefined') {\r\n            setIsEditMode(true);\r\n            defaultTags = [];\r\n            const { post_title, dream_date, post_content, tags } = props.location.defaultData;\r\n            setTitleText(post_title);\r\n            setSelectedDate(dream_date);\r\n            setContentText(post_content);\r\n            setPrevContentText(post_content);\r\n\r\n            if (typeof tags[0][0] === 'string') {\r\n                lang.currLang.current === \"Ru\"\r\n                    ? tags.map(item => defaultTags.push(item[1]))\r\n                    : tags.map(item => defaultTags.push(item[2]));\r\n                setselectedLocations(defaultTags);\r\n            }\r\n        }\r\n    }, [props.location.defaultData, lang.currLang]);\r\n\r\n    return (\r\n        <MuiThemeProvider theme={muiTheme}>\r\n            <CssBaseline />\r\n\r\n            <div className={classes.root} >\r\n\r\n                <Grid className={classes.mainGridContainer}\r\n                    container\r\n                    direction=\"column\"\r\n                    justify=\"center\"\r\n                    alignItems=\"stretch\" >\r\n\r\n                    <Grid item xs={11} className={classes.mainGridBodyItem}>\r\n\r\n                        <Paper className={classes.paper}>\r\n\r\n                            <Grid container\r\n                                className={classes.mainGridContainer}\r\n                                direction=\"column\"\r\n                                justify=\"center\"\r\n                                alignItems=\"center\"\r\n                            >\r\n\r\n                                <Grid item xs={2} className={classes.fullMinWidth} >\r\n                                    <TextField className={classes.inputDiv}\r\n                                        required\r\n                                        id=\"outlined-required\"\r\n                                        value={titleText}\r\n                                        label={lang.currLang.texts.title}\r\n                                        variant=\"outlined\"\r\n                                        onChange={(e) => { changeTitle(e) }}\r\n                                    />\r\n                                </Grid>\r\n\r\n                                <Grid item xs={2} className={classes.fullMinWidth} >\r\n                                    <MuiPickersUtilsProvider utils={DateFnsUtils}\r\n                                        locale={lang.currLang.current === \"Ru\"\r\n                                            ? ruLocale\r\n                                            : enLocale}\r\n                                    >\r\n                                        <Grid className={classes.pickerGridContainer}\r\n                                            container\r\n                                            direction=\"row\"\r\n                                            justify=\"center\"\r\n                                            alignItems=\"stretch\" >\r\n                                            <Grid item xs={7} >\r\n                                                <KeyboardDatePicker className={classes.pickers}\r\n                                                    id=\"date-picker-dialog\"\r\n                                                    label={lang.currLang.texts.pickDate}\r\n                                                    format=\"dd.MM.yyyy\"\r\n                                                    value={selectedDate}\r\n                                                    onChange={handleDateChange}\r\n                                                    KeyboardButtonProps={{\r\n                                                        'aria-label': 'change date',\r\n                                                    }}\r\n                                                />\r\n                                            </Grid>\r\n                                            <Grid item xs={5} >\r\n                                                <KeyboardTimePicker className={classes.pickers}\r\n                                                    id=\"time-picker\"\r\n                                                    label={lang.currLang.texts.pickTime}\r\n                                                    value={selectedDate}\r\n                                                    onChange={handleDateChange}\r\n                                                    ampm={false}\r\n                                                    KeyboardButtonProps={{\r\n                                                        'aria-label': 'change time',\r\n                                                    }}\r\n                                                />\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </MuiPickersUtilsProvider>\r\n                                </Grid>\r\n\r\n                                <Grid item xs={5} className={classes.fullMinWidth} >\r\n\r\n                                    <div className={classes.inputScrollableDiv}>\r\n\r\n                                        <MUIRichTextEditor\r\n                                            value={contentText}\r\n                                            onChange={changeContent}\r\n                                            label={lang.currLang.texts.content}\r\n                                            inlineToolbar={false}\r\n                                            controls={[\r\n                                                \"bold\",\r\n                                                \"italic\",\r\n                                                \"underline\",\r\n                                                \"strikethrough\",\r\n                                                \"colorfill\",\r\n                                            ]}\r\n                                            customControls={[\r\n                                                {\r\n                                                    name: \"colorfill\",\r\n                                                    icon: <FormatColorFillIcon />,\r\n                                                    type: \"inline\",\r\n                                                    inlineStyle: {\r\n                                                        backgroundColor: \"yellow\",\r\n                                                        color: \"black\"\r\n                                                    }\r\n                                                }\r\n                                            ]}\r\n                                        />\r\n\r\n                                    </div>\r\n\r\n                                </Grid>\r\n\r\n                                <Grid item xs={3} className={classes.fullMinWidth} >\r\n                                    <FormControl className={classes.inputDiv}>\r\n                                        <InputLabel id=\"location-chip-label\">\r\n                                            {lang.currLang.texts.tags}\r\n                                        </InputLabel>\r\n                                        <Select\r\n                                            labelId=\"location-chip-label\"\r\n                                            id=\"location-chip\"\r\n                                            multiple\r\n                                            value={selectedLocations}\r\n                                            onChange={handleChangeLocations}\r\n                                            input={\r\n                                                <Input id=\"select-location-chip\" />\r\n                                            }\r\n                                            renderValue={selected =>\r\n                                                (\r\n                                                    <div className={classes.chips}>\r\n                                                        {selected.map(value => (\r\n                                                            <Chip\r\n                                                                size=\"small\"\r\n                                                                avatar={\r\n                                                                    locations.length\r\n                                                                        ? lang.currLang.current === \"Ru\"\r\n                                                                            ? < Avatar\r\n                                                                                alt={locations.find(locations => locations.name_rus === value).name_eng}\r\n                                                                                src={locations.find(locations => locations.name_rus === value).img_url}\r\n                                                                            />\r\n                                                                            : < Avatar\r\n                                                                                alt={locations.find(locations => locations.name_eng === value).name_eng}\r\n                                                                                src={locations.find(locations => locations.name_eng === value).img_url}\r\n                                                                            />\r\n                                                                        : null\r\n                                                                }\r\n                                                                key={value}\r\n                                                                label={value}\r\n                                                                className={classes.chip}\r\n                                                            />\r\n                                                        ))}\r\n                                                    </div>\r\n                                                )\r\n                                            }\r\n                                            MenuProps={MenuProps}\r\n                                        >\r\n                                            {Object.keys(locations)\r\n                                                .map(item =>\r\n                                                    <MenuItem\r\n                                                        key={locations[item].id + ' chip'}\r\n                                                        value={\r\n                                                            lang.currLang.current === \"Ru\"\r\n                                                                ? locations[item].name_rus\r\n                                                                : locations[item].name_eng\r\n                                                        }\r\n                                                        style={getStyles(locations[item].name_eng, selectedLocations, theme)}\r\n                                                    >\r\n                                                        {lang.currLang.current === \"Ru\"\r\n                                                            ? locations[item].name_rus\r\n                                                            : locations[item].name_eng}\r\n                                                    </MenuItem>\r\n                                                )}\r\n                                        </Select>\r\n                                    </FormControl>\r\n                                </Grid>\r\n\r\n                            </Grid>\r\n\r\n                        </Paper>\r\n\r\n                    </Grid>\r\n\r\n                    <Grid item xs={1} className={classes.mainGridBodyItem} >\r\n\r\n                        {isLoading\r\n                            ? <LinearProgress />\r\n                            : <Grid\r\n                                container\r\n                                direction=\"row\"\r\n                                justify=\"space-evenly\"\r\n                                alignItems=\"center\"\r\n                            >\r\n\r\n                                <Grid item>\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        color=\"secondary\"\r\n                                        className={classes.actionButton}\r\n                                        onClick={() => {\r\n                                            isEditMode\r\n                                                ? history.push(\"/dreams\")\r\n                                                : history.push(\"/luciddreams\")\r\n                                        }}\r\n                                    >\r\n                                        {lang.currLang.buttons.close}\r\n                                    </Button>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        color=\"primary\"\r\n                                        className={classes.actionButton}\r\n                                        onClick={() => savepost()}\r\n                                    >\r\n                                        {isEditMode\r\n                                            ? lang.currLang.buttons.Save\r\n                                            : lang.currLang.buttons.add\r\n                                        }\r\n                                    </Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                        }\r\n                    </Grid>\r\n                </Grid>\r\n\r\n            </div>\r\n\r\n            <Snackbar\r\n                open={openSnackbar}\r\n                onClose={handleCloseSnackbar}\r\n                autoHideDuration={3000}>\r\n                <MySnackbarContentWrapper\r\n                    className={classes.margin}\r\n                    onClose={handleCloseSnackbar}\r\n                    variant='error'\r\n                    message={snackbarMessage}\r\n                />\r\n            </Snackbar>\r\n\r\n        </MuiThemeProvider >\r\n    );\r\n};\r\n\r\nAddDream.propTypes = {\r\n    themeMode: PropTypes.object.isRequired,\r\n    lang: PropTypes.object.isRequired,\r\n    auth: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        themeMode: store.themeMode,\r\n        lang: store.lang,\r\n        auth: store.auth,\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(AddDream);","import React from 'react';\r\nimport clsx from \"clsx\";\r\nimport MUIRichTextEditor from 'mui-rte';\r\nimport { EditorState, convertFromRaw } from 'draft-js';\r\n\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport CardHeader from \"@material-ui/core/CardHeader\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Collapse from \"@material-ui/core/Collapse\";\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Button from '@material-ui/core/Button';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Card from \"@material-ui/core/Card\";\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport Menu from '@material-ui/core/Menu';\r\n\r\nimport Rating from \"@material-ui/lab/Rating\";\r\n\r\nimport FormatColorFillIcon from '@material-ui/icons/FormatColorFill';\r\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport Visibility from '@material-ui/icons/Visibility';\r\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\n\r\nimport { useStyles } from '../../styles/Styles';\r\n\r\nimport { instance } from '../Config';\r\n\r\nexport default function DreamCard(props) {\r\n    const classes = useStyles();\r\n    const { post_id, post_title, post_content, post_type, tags, technics, rating, dream_date, is_public } = props.item;\r\n    const { lang, palette, history } = props;\r\n    const [expanded, setExpanded] = React.useState(false);\r\n    const [anchorEl, setAnchorEl] = React.useState(null);\r\n    const [openAlert, setOpenAlert] = React.useState(false);\r\n    const [publicChecked, setPublicChecked] = React.useState(false);\r\n    const [alertTexts, setAlertTexts] = React.useState({\r\n        header: '',\r\n        body: '',\r\n        commit: '',\r\n        action: '',\r\n    });\r\n\r\n    const dateOfDream = new Date(dream_date).getDate() + '.' + (new Date(dream_date).getMonth() + 1) + '.' + new Date(dream_date).getFullYear() + ' ' + new Date(dream_date).getHours() + ':' + (\"0\" + new Date(dream_date).getMinutes()).slice(-2);\r\n    const srcContent = post_content.toString();\r\n    const jsonPparse = JSON.parse(srcContent);\r\n    const convertfromraw = convertFromRaw(jsonPparse);\r\n    const text_content = EditorState.createWithContent(convertfromraw).getCurrentContent().getPlainText('');\r\n\r\n    React.useEffect(() => {\r\n        is_public === 1\r\n            ? setPublicChecked(true)\r\n            : setPublicChecked(false);\r\n    }, [is_public]);\r\n\r\n    const openMenu = event => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const closeMenu = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    const clickMenu = (action, event) => {\r\n        let newAlertTexts = alertTexts;\r\n        switch (action) {\r\n            case 'public':\r\n                if (event.target.checked) {\r\n                    newAlertTexts = { ...newAlertTexts, header: lang.currLang.texts.PublicAlert };\r\n                    newAlertTexts = { ...newAlertTexts, body: lang.currLang.texts.PublicText };\r\n                    newAlertTexts = { ...newAlertTexts, commit: lang.currLang.texts.Publish };\r\n                    newAlertTexts = { ...newAlertTexts, action: 'publicOk' };\r\n                    setAlertTexts(newAlertTexts);\r\n                }\r\n                else {\r\n                    newAlertTexts = { ...newAlertTexts, header: lang.currLang.texts.UnpublicAlert };\r\n                    newAlertTexts = { ...newAlertTexts, body: lang.currLang.texts.UnpublicText };\r\n                    newAlertTexts = { ...newAlertTexts, commit: lang.currLang.texts.Unpublish };\r\n                    newAlertTexts = { ...newAlertTexts, action: 'publicOk' };\r\n                    setAlertTexts(newAlertTexts);\r\n                }\r\n                setOpenAlert(true);\r\n                closeMenu();\r\n                break;\r\n\r\n            case 'edit':\r\n                closeMenu();\r\n                if (post_type === 0) {\r\n                    history.push({\r\n                        pathname: \"/adddream\",\r\n                        defaultData: {\r\n                            post_id: post_id,\r\n                            post_title: post_title,\r\n                            dream_date: new Date(dream_date),\r\n                            post_content: post_content,\r\n                            tags: tags,\r\n                        }\r\n                    });\r\n                }\r\n                else if (post_type === 1) {\r\n                    history.push({\r\n                        pathname: \"/addcdream\",\r\n                        defaultData: {\r\n                            post_id: post_id,\r\n                            post_title: post_title,\r\n                            dream_date: new Date(dream_date),\r\n                            post_content: post_content,\r\n                            tags: tags,\r\n                            technics: technics,\r\n                            rating: rating,\r\n                        }\r\n                    });\r\n                }\r\n                break;\r\n\r\n            case 'delete':\r\n                newAlertTexts = { ...newAlertTexts, header: lang.currLang.texts.DeleteAlert };\r\n                newAlertTexts = { ...newAlertTexts, body: lang.currLang.texts.DeleteText };\r\n                newAlertTexts = { ...newAlertTexts, commit: lang.currLang.buttons.Delete };\r\n                newAlertTexts = { ...newAlertTexts, action: 'deleteOk' };\r\n                setAlertTexts(newAlertTexts);\r\n                closeMenu();\r\n                setOpenAlert(true);\r\n                break;\r\n\r\n            case 'closeAlert':\r\n                setOpenAlert(false);\r\n                break;\r\n\r\n            case 'deleteOk':\r\n                const postData = {\r\n                    post_id: post_id\r\n                };\r\n                instance\r\n                    .post('/actions/users/deletepost', postData)\r\n                    .then(res => {\r\n                        //TODO ADD LOADER\r\n                        closeMenu();\r\n                        setOpenAlert(false);\r\n                        props.loadPosts();\r\n                    })\r\n                    .catch(err => {\r\n                        alert('Cant delete post!');\r\n                        closeMenu();\r\n                        setOpenAlert(false);\r\n                    });\r\n                break;\r\n\r\n            case 'publicOk':\r\n                closeMenu();\r\n                setOpenAlert(false);\r\n                if (publicChecked) {\r\n                    const postData = {\r\n                        post_id: post_id,\r\n                        newPublic: 0\r\n                    };\r\n                    instance\r\n                        .post('/actions/users/updatepost', postData)\r\n                        .then(res => {\r\n                            setPublicChecked(false);\r\n                        })\r\n                        .catch(err => {\r\n                            setPublicChecked(true);\r\n                        });\r\n                }\r\n                else {\r\n                    const postData = {\r\n                        post_id: post_id,\r\n                        newPublic: 1,\r\n                    };\r\n                    instance\r\n                        .post('/actions/users/updatepost', postData)\r\n                        .then(res => {\r\n                            setPublicChecked(true);\r\n                        })\r\n                        .catch(err => {\r\n                            setPublicChecked(false);\r\n                        });\r\n                }\r\n                break;\r\n\r\n            default:\r\n                console.log('Command not found');\r\n                break;\r\n        }\r\n    };\r\n\r\n    const handleExpandClick = () => {\r\n        setExpanded(!expanded);\r\n    };\r\n\r\n    return (\r\n        <Grid item xs={12}\r\n            style={{\r\n                marginTop: '15px',\r\n                marginBottom: '15px',\r\n                width: '100%',\r\n                height: 'auto',\r\n                borderRadius: '4px',\r\n            }}>\r\n\r\n            <Dialog\r\n                open={openAlert}\r\n                onClose={() => clickMenu('closeAlert')}\r\n                aria-labelledby=\"alert-dialog-title\"\r\n                aria-describedby=\"alert-dialog-description\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-title\" >\r\n                    {alertTexts.header}\r\n                </DialogTitle>\r\n                <DialogContent >\r\n                    <DialogContentText id=\"alert-dialog-description\" >\r\n                        {alertTexts.body}\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => clickMenu('closeAlert')}\r\n                        color=\"secondary\">\r\n                        {lang.currLang.buttons.cancel}\r\n                    </Button>\r\n                    <Button onClick={() => clickMenu(alertTexts.action)}\r\n                        color=\"primary\" autoFocus>\r\n                        {alertTexts.commit}\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Menu id=\"simple-menu\"\r\n                anchorEl={anchorEl}\r\n                keepMounted\r\n                open={Boolean(anchorEl)}\r\n                onClose={closeMenu}>\r\n\r\n                <MenuItem >\r\n                    <ListItemIcon>\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Checkbox\r\n                                    onChange={(e) => clickMenu('public', e)}\r\n                                    checked={publicChecked}\r\n                                    value=\"checkedB\"\r\n                                    color=\"primary\"\r\n                                />\r\n                            }\r\n                        />\r\n                    </ListItemIcon>\r\n                    {lang.currLang.texts.Public}\r\n                </MenuItem>\r\n\r\n                <MenuItem onClick={() => clickMenu('edit')}>\r\n                    <ListItemIcon>\r\n                        <EditIcon fontSize=\"small\" />\r\n                    </ListItemIcon>\r\n                    {lang.currLang.buttons.Edit}\r\n                </MenuItem>\r\n\r\n                <MenuItem onClick={() => clickMenu('delete')}>\r\n                    <ListItemIcon>\r\n                        <EditIcon fontSize=\"small\" />\r\n                    </ListItemIcon>\r\n                    {lang.currLang.buttons.Delete}\r\n                </MenuItem>\r\n\r\n            </Menu>\r\n\r\n            <Card raised={false}\r\n                className={classes.card}>\r\n                <CardHeader\r\n                    title={post_title}\r\n                    subheader={dateOfDream}\r\n                    action={\r\n                        <IconButton\r\n                            aria-label=\"settings\"\r\n                            onClick={(e) => openMenu(e)}\r\n                        >\r\n                            <MoreVertIcon />\r\n                        </IconButton>\r\n                    }\r\n                />\r\n                <CardContent>\r\n                    <div className={classes.avatarRoot}>\r\n                        <div style={{ padding: '12px', }}>\r\n                            {publicChecked\r\n                                ? <Tooltip\r\n                                    disableFocusListener\r\n                                    disableTouchListener\r\n                                    title={lang.currLang.texts.PublicDescription}\r\n                                >\r\n                                    <Visibility />\r\n                                </Tooltip>\r\n                                : <Tooltip\r\n                                    disableFocusListener\r\n                                    disableTouchListener\r\n                                    title={lang.currLang.texts.UnpublicDescription}\r\n                                >\r\n                                    <VisibilityOff />\r\n                                </Tooltip>\r\n                            }\r\n                        </div>\r\n                        <Chip variant=\"outlined\"\r\n                            label={\r\n                                post_type === 0\r\n                                    ? lang.currLang.texts.Dream\r\n                                    : lang.currLang.texts.Cdream\r\n                            }\r\n                        />\r\n                        {technics.map((technic, key) =>\r\n                            technic[0]\r\n                                ? <Chip className={classes.smallChip}\r\n                                    key={key}\r\n                                    label={lang.currLang.current === \"Ru\"\r\n                                        ? technic[1]\r\n                                        : technic[2]}\r\n                                />\r\n                                : ''\r\n                        )}\r\n                    </div>\r\n                    <div className={classes.avatarRoot}>\r\n                        {tags.map((tag, key) =>\r\n                            tag[0]\r\n                                ? <Tooltip key={key}\r\n                                    disableFocusListener\r\n                                    disableTouchListener\r\n                                    title={\r\n                                        lang.currLang.current === \"Ru\"\r\n                                            ? tag[1]\r\n                                            : tag[2]\r\n                                    }\r\n                                >\r\n                                    <Avatar className={classes.smallAvatar}\r\n                                        alt=\"Remy Sharp\"\r\n                                        src={tag[3]}\r\n                                        style={palette.type === 'dark'\r\n                                            ? {\r\n                                                filter: 'invert(1)',\r\n                                            }\r\n                                            : {\r\n\r\n                                            }}\r\n                                    />\r\n                                </Tooltip>\r\n                                : ''\r\n                        )}\r\n                    </div>\r\n                </CardContent>\r\n                <CardActions disableSpacing={true}>\r\n                    <Typography\r\n                        noWrap={expanded\r\n                            ? false\r\n                            : true\r\n                        }\r\n                        variant='body2'\r\n                        style={{ padding: '12px', }}\r\n                    >\r\n                        {expanded\r\n                            ? lang.currLang.texts.TapToShow\r\n                            : text_content\r\n                        }\r\n                    </Typography>\r\n\r\n                    <IconButton\r\n                        className={clsx(classes.expand, {\r\n                            [classes.expandOpen]: expanded\r\n                        })}\r\n                        onClick={handleExpandClick}\r\n                        aria-expanded={expanded}\r\n                        aria-label=\"show more\"\r\n                    >\r\n                        <ExpandMoreIcon />\r\n                    </IconButton>\r\n                </CardActions>\r\n                <Collapse in={expanded}\r\n                    timeout=\"auto\"\r\n                    unmountOnExit >\r\n                    <CardContent>\r\n                        <Paper className={classes.contentPaper}>\r\n                            <MUIRichTextEditor\r\n                                controls={[\r\n                                    \"bold\",\r\n                                    \"italic\",\r\n                                    \"underline\",\r\n                                    \"strikethrough\",\r\n                                    \"colorfill\",\r\n                                ]}\r\n                                customControls={[\r\n                                    {\r\n                                        name: \"colorfill\",\r\n                                        icon: <FormatColorFillIcon />,\r\n                                        type: \"inline\",\r\n                                        inlineStyle: {\r\n                                            backgroundColor: \"yellow\",\r\n                                            color: \"black\"\r\n                                        }\r\n                                    }\r\n                                ]}\r\n                                readOnly={true}\r\n                                toolbar={false}\r\n                                value={post_content}\r\n                            />\r\n                        </Paper>\r\n                        {post_type === 0\r\n                            ? ''\r\n                            :\r\n                            <Grid style={{ paddingTop: '10px', }}\r\n                                container\r\n                                direction=\"row\"\r\n                                justify=\"center\"\r\n                                alignItems=\"stretch\" >\r\n                                <Grid item xs={6}>\r\n                                    <Typography component=\"legend\" variant='body2'>\r\n                                        {lang.currLang.texts.rating}:\r\n                                    </Typography>\r\n                                </Grid>\r\n                                <Grid item xs={6}>\r\n                                    <Rating name=\"simple-controlled\"\r\n                                        value={rating}\r\n                                        readOnly\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n                        }\r\n                    </CardContent>\r\n                </Collapse>\r\n            </Card>\r\n        </Grid>\r\n    );\r\n}","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Button from '@material-ui/core/Button';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\n\r\nimport DreamCard from './muiltiple/DreamCard';\r\nimport { useStyles } from '../styles/Styles';\r\nimport { instance } from './Config';\r\n\r\nfunction ViewDreams(props) {\r\n    const { lang, themeMode, history, auth } = props;\r\n    const muiTheme = createMuiTheme(themeMode);\r\n    const classes = useStyles();\r\n    const [isLoading, setIsLoading] = React.useState(true);\r\n    const [dreams, setDreams] = React.useState([]);\r\n\r\n    const loadPosts = React.useCallback(() => {\r\n        setIsLoading(true);\r\n        instance.post(\"/actions/users/getuserposts\", { id: auth.user.id })\r\n            .then(res => {\r\n                setDreams(res.data);\r\n                setIsLoading(false);\r\n            })\r\n            .catch(err => {\r\n                setIsLoading(false);\r\n            });\r\n    }, [auth.user.id]);\r\n\r\n    React.useEffect(() => {\r\n        loadPosts();\r\n    }, [loadPosts]);\r\n\r\n    return (\r\n        <MuiThemeProvider theme={muiTheme}>\r\n            <CssBaseline />\r\n\r\n            <div className={classes.root}>\r\n                <Grid className={classes.mainGridContainer}\r\n                    container\r\n                    direction=\"column\"\r\n                    justify=\"center\"\r\n                    alignItems=\"stretch\" >\r\n                    <Grid item xs={11} zeroMinWidth className={classes.mainGridDreamsBodyItem}>\r\n                        {isLoading\r\n                            ? <div className={classes.centerCircularProgress}>\r\n                                <CircularProgress disableShrink />\r\n                            </div>\r\n                            : <Container className={classes.mainGridDreamsBodyItemContainer}>\r\n                                <Paper className={classes.mainGridDreamsBodyItemContainerPaper}>\r\n                                    {dreams.length !== 0\r\n                                        ? <Grid className={classes.mainGridDreamsContainer}\r\n                                            container\r\n                                            direction=\"column\"\r\n                                            justify=\"center\"\r\n                                            alignItems=\"stretch\"\r\n                                        >\r\n                                            {dreams.map((item, key) => (\r\n                                                <DreamCard\r\n                                                    item={item}\r\n                                                    key={key}\r\n                                                    lang={lang}\r\n                                                    palette={themeMode.palette}\r\n                                                    history={history}\r\n                                                    loadPosts={loadPosts}\r\n                                                />\r\n                                            ))}\r\n                                        </Grid>\r\n                                        :\r\n                                        <div>\r\n                                            <div\r\n                                                style={{\r\n                                                    position: \"relative\",\r\n                                                    left: \"50%\",\r\n                                                    transform: \"translateX(-50%)\",\r\n                                                    width: 200,\r\n                                                    height: 100,\r\n                                                }}\r\n                                            >\r\n                                            </div>\r\n                                            <div\r\n                                                style={{\r\n                                                    position: \"relative\",\r\n                                                    left: \"50%\",\r\n                                                    transform: \"translateX(-50%)\",\r\n                                                    width: 200,\r\n                                                    height: 200,\r\n                                                    background: \"url('https://static.thenounproject.com/png/603669-200.png') no-repeat center\",\r\n                                                }}>\r\n                                            </div>\r\n                                            <div\r\n                                                style={{\r\n                                                    position: \"relative\",\r\n                                                    left: \"50%\",\r\n                                                    transform: \"translateX(-50%)\",\r\n                                                    width: 200,\r\n                                                    height: 100,\r\n                                                    textAlign: \"center\",\r\n                                                }}\r\n                                            >\r\n                                                <Typography>\r\n                                                    {lang.currLang.texts.NoDreams}\r\n                                                </Typography>\r\n                                            </div>\r\n                                        </div>\r\n                                    }\r\n                                </Paper>\r\n                            </Container>\r\n                        }\r\n                    </Grid>\r\n                    <Grid item xs={1} zeroMinWidth className={classes.mainGridBodyItem}>\r\n                        <Grid\r\n                            container\r\n                            direction=\"row\"\r\n                            justify=\"space-evenly\"\r\n                            alignItems=\"center\"\r\n                            spacing={1}\r\n                        >\r\n                            <Grid item xs={6} align=\"center\">\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    color=\"secondary\"\r\n                                    className={classes.actionButton}\r\n                                    onClick={() => { history.push(\"/luciddreams\") }}\r\n                                >\r\n                                    {lang.currLang.buttons.close}\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid item xs={6} />\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </MuiThemeProvider >\r\n    );\r\n\r\n}\r\n\r\nViewDreams.propTypes = {\r\n    themeMode: PropTypes.object.isRequired,\r\n    lang: PropTypes.object.isRequired,\r\n    auth: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        themeMode: store.themeMode,\r\n        lang: store.lang,\r\n        auth: store.auth,\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(ViewDreams);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport ruLocale from \"date-fns/locale/ru\";\r\nimport enLocale from \"date-fns/locale/ru\";\r\n\r\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Typography from '@material-ui/core/Typography';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport Button from '@material-ui/core/Button';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Input from \"@material-ui/core/Input\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport MUIRichTextEditor from 'mui-rte';\r\nimport { convertToRaw } from 'draft-js';\r\n\r\nimport Rating from \"@material-ui/lab/Rating\";\r\n\r\nimport { MuiThemeProvider, createMuiTheme, useTheme, makeStyles } from '@material-ui/core/styles';\r\n\r\nimport { MuiPickersUtilsProvider, KeyboardTimePicker, KeyboardDatePicker } from '@material-ui/pickers';\r\n\r\nimport FormatColorFillIcon from '@material-ui/icons/FormatColorFill';\r\nimport ErrorIcon from '@material-ui/icons/Error';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nimport { useStyles } from '../styles/Styles';\r\n\r\nimport { instance } from './Config';\r\n\r\nimport { areArraysEqualSets } from '../functions';\r\n\r\nconst ITEM_HEIGHT = 48;\r\nconst ITEM_PADDING_TOP = 8;\r\nconst MenuProps = {\r\n    PaperProps: {\r\n        style: {\r\n            maxHeight: ITEM_HEIGHT * 5 + ITEM_PADDING_TOP,\r\n            width: 250\r\n        }\r\n    }\r\n};\r\n\r\nfunction getStyles(name, selectedLocations, theme) {\r\n    return {\r\n        fontWeight:\r\n            selectedLocations.indexOf(name) === -1\r\n                ? theme.typography.fontWeightSmall\r\n                : theme.typography.fontWeightMedium\r\n    };\r\n}\r\n\r\nconst useStyles1 = makeStyles(theme => ({\r\n    error: {\r\n        backgroundColor: theme.palette.error.dark,\r\n    },\r\n    icon: {\r\n        fontSize: 20,\r\n    },\r\n    iconVariant: {\r\n        opacity: 0.9,\r\n        marginRight: theme.spacing(1),\r\n    },\r\n    message: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n    },\r\n}));\r\n\r\nfunction MySnackbarContentWrapper(props) {\r\n    const classes = useStyles1();\r\n    const { className, message, onClose } = props;\r\n    const Icon = ErrorIcon;\r\n\r\n    return (\r\n        <SnackbarContent\r\n            className={clsx(classes.error, className)}\r\n            aria-describedby=\"client-snackbar\"\r\n            message={\r\n                <span id=\"client-snackbar\" className={classes.message}>\r\n                    <Icon className={clsx(classes.icon, classes.iconVariant)} />\r\n                    <Typography className={classes.mainGridContainer}\r\n                        align='center'\r\n                        variant='body2'>\r\n                        {message}\r\n                    </Typography>\r\n                </span>\r\n            }\r\n            action={[\r\n                <IconButton key=\"close\" aria-label=\"close\" color=\"inherit\" onClick={onClose}>\r\n                    <CloseIcon className={classes.icon} />\r\n                </IconButton>,\r\n            ]}\r\n        />\r\n    );\r\n}\r\n\r\nlet defaultTechnics = [];\r\nlet defaultTags = [];\r\n\r\nfunction AddCDream(props) {\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const { lang, themeMode, history, auth } = props;\r\n    const muiTheme = createMuiTheme(themeMode);\r\n    Object.assign(muiTheme, {\r\n        overrides: {\r\n            MUIRichTextEditor: {\r\n                root: {\r\n                    border: \"1px solid gray\",\r\n                    borderRadius: '4px',\r\n                    height: '100%',\r\n                    //Весь компонент\r\n                },\r\n                container: {\r\n                    height: '100%',\r\n                    margin: '0 !Important',\r\n                    //Без шапки\r\n                },\r\n                toolbar: {\r\n                    //textAlign: 'center',\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    justifyContent: 'center',\r\n                    height: '20%',\r\n                    minHeight: '48px',\r\n                    margin: '0 !Important',\r\n                    borderBottom: \"1px solid gray\",\r\n                    borderRadius: '4px',\r\n                },\r\n                placeHolder: {\r\n                },\r\n                editor: {\r\n                    height: '69%',\r\n                    width: '100%',\r\n                    position: 'relative',\r\n                    overflow: 'hidden',\r\n                    //Эдитор\r\n                },\r\n                editorContainer: {\r\n                    padding: \"18.5px 14px\",\r\n                    borderRadius: '4px',\r\n                    position: 'relative',\r\n                    boxSizing: 'border-box',\r\n                    maxHeight: '100%',\r\n                    overflow: 'auto',\r\n                    //Редактор\r\n                },\r\n            }\r\n        }\r\n    })\r\n    const [isEditMode, setIsEditMode] = React.useState(false);\r\n    const [openSnackbar, setOpenSnackbar] = React.useState(false);\r\n    const [snackbarMessage, setSnackbarMessage] = React.useState('');\r\n    const [isLoading, setIsLoading] = React.useState(false);\r\n    const [titleText, setTitleText] = React.useState('');\r\n    const [selectedDate, setSelectedDate] = React.useState(new Date());\r\n    const [contentText, setContentText] = React.useState();\r\n    const [prevContentText, setPrevContentText] = React.useState();\r\n    const [selectedLocations, setselectedLocations] = React.useState([]);\r\n    const [selectedTechnics, setselectedTechnics] = React.useState([]);\r\n    const [realisticsValue, setRealisticsValue] = React.useState(1);\r\n    const [locations, setLocations] = React.useState({});\r\n    const [technics, setTechnics] = React.useState({});\r\n\r\n    const handleChangeRealistics = (event, newValue) => {\r\n        setRealisticsValue(newValue);\r\n    };\r\n    const handleChangeLocations = (event) => {\r\n        setselectedLocations(event.target.value);\r\n    };\r\n    const handleChangeTechnics = (event) => {\r\n        setselectedTechnics(event.target.value);\r\n    };\r\n    const blurTitle = (event) => {\r\n        setTitleText(event.target.value);\r\n    };\r\n    const handleDateChange = date => {\r\n        setSelectedDate(date);\r\n    };\r\n    const changeContent = (state) => {\r\n        const currCont = state.getCurrentContent();\r\n        const convert = convertToRaw(currCont);\r\n        const content = JSON.stringify(convert);\r\n        if (prevContentText !== content) {\r\n            setPrevContentText(content);\r\n        }\r\n    };\r\n    const savepost = () => {\r\n        setIsLoading(true);\r\n        let havErr = false;\r\n        if (typeof (titleText) !== 'undefined') {\r\n            if (titleText.length === 0) {\r\n                setSnackbarMessage(lang.currLang.errors.EmptyTitle);\r\n                havErr = true;\r\n            }\r\n        }\r\n        else {\r\n            setSnackbarMessage(lang.currLang.errors.EmptyTitle);\r\n            havErr = true;\r\n        }\r\n        if (typeof (prevContentText) !== 'undefined') {\r\n            if (JSON.parse(prevContentText).blocks[0].text.length === 0) {\r\n                setSnackbarMessage(lang.currLang.errors.EmptyDream);\r\n                havErr = true;\r\n            }\r\n        }\r\n        else {\r\n            setSnackbarMessage(lang.currLang.errors.EmptyDream);\r\n            havErr = true;\r\n        }\r\n        if (havErr) {\r\n            setOpenSnackbar(true);\r\n            setIsLoading(false);\r\n        }\r\n        else {\r\n            if (isEditMode) {\r\n                let hasChanges = false;\r\n                let postData = {\r\n                    post_id: props.location.defaultData.post_id,\r\n                };\r\n\r\n                if (props.location.defaultData.post_title !== titleText) {\r\n                    postData.title = titleText;\r\n                    hasChanges = true;\r\n                }\r\n\r\n                if (props.location.defaultData.dream_date.getTime() !== selectedDate.getTime()) {\r\n                    postData.dreamDate = selectedDate.toLocaleString(\"ru-RU\", { timeZone: 'Europe/London' });\r\n                    hasChanges = true;\r\n                }\r\n\r\n                if (props.location.defaultData.post_content !== prevContentText) {\r\n                    postData.content = prevContentText;\r\n                    hasChanges = true;\r\n                }\r\n\r\n                if (props.location.defaultData.rating !== realisticsValue) {\r\n                    postData.rating = realisticsValue;\r\n                    hasChanges = true;\r\n                }\r\n\r\n                if (!areArraysEqualSets(defaultTechnics, selectedTechnics)) {\r\n                    hasChanges = true;\r\n                    let deleteTechnics = defaultTechnics.filter(item1 =>\r\n                        !selectedTechnics.some(item2 => (\r\n                            item2 === item1)\r\n                        )\r\n                    );\r\n                    let addTechnics = selectedTechnics.filter(item1 =>\r\n                        !defaultTechnics.some(item2 => (\r\n                            item2 === item1)\r\n                        )\r\n                    );\r\n                    if (addTechnics.length > 0) {\r\n                        let add = {};\r\n                        addTechnics.map((item, key) => (\r\n                            add[key] = item\r\n                        ));\r\n                        postData.technics = { ...postData.technics, add: add };\r\n                    }\r\n                    if (deleteTechnics.length > 0) {\r\n                        let remove = {};\r\n                        deleteTechnics.map((item, key) => (\r\n                            remove[key] = item\r\n                        ));\r\n                        postData.technics = { ...postData.technics, remove: remove };\r\n                    }\r\n                }\r\n\r\n                if (!areArraysEqualSets(defaultTags, selectedLocations)) {\r\n                    hasChanges = true;\r\n                    let deleteTags = defaultTags.filter(item1 =>\r\n                        !selectedLocations.some(item2 => (\r\n                            item2 === item1)\r\n                        )\r\n                    );\r\n                    let addTags = selectedLocations.filter(item1 =>\r\n                        !defaultTags.some(item2 => (\r\n                            item2 === item1)\r\n                        )\r\n                    );\r\n                    if (addTags.length > 0) {\r\n                        let add = {};\r\n                        addTags.map((item, key) => (\r\n                            add[key] = item\r\n                        ));\r\n                        postData.tags = { ...postData.tags, add: add };\r\n                    }\r\n                    if (deleteTags.length > 0) {\r\n                        let remove = {};\r\n                        deleteTags.map((item, key) => (\r\n                            remove[key] = item\r\n                        ));\r\n                        postData.tags = { ...postData.tags, remove: remove };\r\n                    }\r\n                }\r\n\r\n                if (hasChanges) {\r\n                    instance\r\n                        .post('/actions/users/updatepost', postData)\r\n                        .then(res => {\r\n                            setIsLoading(false);\r\n                            history.push(\"/dreams\")\r\n                        })\r\n                        .catch(err => {\r\n                            console.log(err);\r\n                            setIsLoading(false);\r\n                        });\r\n                }\r\n                else {\r\n                    setSnackbarMessage(lang.currLang.errors.NoChanges);\r\n                    setOpenSnackbar(true);\r\n                    setIsLoading(false);\r\n                }\r\n            }\r\n            else {\r\n                //let convert = JSON.stringify(prevContentText);\r\n\r\n                let postData = {\r\n                    title: titleText,\r\n                    dreamDate: selectedDate.toLocaleString(\"ru-RU\", { timeZone: 'Europe/London' }),\r\n                    content: prevContentText,\r\n                    create_user: auth.user.id,\r\n                    rating: realisticsValue,\r\n                    post_type: 1,\r\n                    nickname: auth.user.nickname,\r\n                    tags: selectedLocations,\r\n                    technics: selectedTechnics\r\n                }\r\n\r\n                instance\r\n                    .post('/actions/users/createpost', postData)\r\n                    .then(res => {\r\n                        setIsLoading(false);\r\n                        history.push(\"/luciddreams\")\r\n                    })\r\n                    .catch(err => {\r\n                        setIsLoading(false);\r\n                    });\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleCloseSnackbar = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setOpenSnackbar(false);\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        instance.get(\"/gettags\")\r\n            .then(res => {\r\n                setLocations(res.data);\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            });\r\n        instance.get(\"/gettechnics\")\r\n            .then(res => {\r\n                setTechnics(res.data);\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            });\r\n\r\n        if (typeof (props.location.defaultData) !== 'undefined') {\r\n            setIsEditMode(true);\r\n            defaultTechnics = [];\r\n            defaultTags = [];\r\n            const { post_title, dream_date, post_content, technics, tags, rating } = props.location.defaultData;\r\n            setTitleText(post_title);\r\n            setSelectedDate(dream_date);\r\n            setContentText(post_content);\r\n            setPrevContentText(post_content);\r\n\r\n            if (typeof tags[0][0] === 'string') {\r\n                lang.currLang.current === \"Ru\"\r\n                    ? tags.map(item => defaultTags.push(item[1]))\r\n                    : tags.map(item => defaultTags.push(item[2]));\r\n                setselectedLocations(defaultTags);\r\n            }\r\n\r\n            if (typeof technics[0][0] === 'string') {\r\n                lang.currLang.current === \"Ru\"\r\n                    ? technics.map(item => defaultTechnics.push(item[1]))\r\n                    : technics.map(item => defaultTechnics.push(item[2]));\r\n                setselectedTechnics(defaultTechnics);\r\n            }\r\n\r\n            setRealisticsValue(rating);\r\n        }\r\n    }, [props.location.defaultData, lang.currLang]);\r\n\r\n    return (\r\n        <MuiThemeProvider theme={muiTheme}>\r\n            <CssBaseline />\r\n            <div className={classes.root} >\r\n                <Grid className={classes.mainGridContainer}\r\n                    container\r\n                    direction=\"column\"\r\n                    justify=\"center\"\r\n                    alignItems=\"stretch\" >\r\n                    <Grid item xs={11} className={classes.mainGridBodyItem}>\r\n                        <Paper className={classes.paper}>\r\n                            <Grid className={classes.mainGridContainer}\r\n                                style={{ flexWrap: 'nowrap' }}\r\n                                container\r\n                                direction=\"column\"\r\n                                justify=\"center\"\r\n                                alignItems=\"center\"\r\n                            >\r\n                                <Grid item xs={2} className={classes.fullMinWidth} >\r\n                                    <TextField className={classes.inputDiv}\r\n                                        required\r\n                                        id=\"outlined-required\"\r\n                                        value={titleText}\r\n                                        label={lang.currLang.texts.title}\r\n                                        variant=\"outlined\"\r\n                                        onChange={(e) => { blurTitle(e) }}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={1} className={classes.fullMinWidth} >\r\n                                    <MuiPickersUtilsProvider utils={DateFnsUtils}\r\n                                        locale={lang.currLang.current === \"Ru\"\r\n                                            ? ruLocale\r\n                                            : enLocale}\r\n                                    >\r\n                                        <Grid className={classes.pickerGridContainer}\r\n                                            container\r\n                                            direction=\"row\"\r\n                                            justify=\"center\"\r\n                                            alignItems=\"stretch\" >\r\n                                            <Grid item xs={7} >\r\n                                                <KeyboardDatePicker className={classes.pickers}\r\n                                                    id=\"date-picker-dialog\"\r\n                                                    label={lang.currLang.texts.pickDate}\r\n                                                    format=\"dd.MM.yyyy\"\r\n                                                    value={selectedDate}\r\n                                                    onChange={handleDateChange}\r\n                                                    KeyboardButtonProps={{\r\n                                                        'aria-label': 'change date',\r\n                                                    }}\r\n                                                />\r\n                                            </Grid>\r\n                                            <Grid item xs={5} >\r\n                                                <KeyboardTimePicker className={classes.pickers}\r\n                                                    id=\"time-picker\"\r\n                                                    label={lang.currLang.texts.pickTime}\r\n                                                    value={selectedDate}\r\n                                                    onChange={handleDateChange}\r\n                                                    ampm={false}\r\n                                                    KeyboardButtonProps={{\r\n                                                        'aria-label': 'change time',\r\n                                                    }}\r\n                                                />\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </MuiPickersUtilsProvider>\r\n                                </Grid>\r\n                                <Grid item xs={4} className={classes.fullMinWidth} >\r\n                                    <div className={classes.inputScrollableDiv}>\r\n                                        <MUIRichTextEditor\r\n                                            value={contentText}\r\n                                            onChange={changeContent}\r\n                                            label={lang.currLang.texts.content}\r\n                                            inlineToolbar={false}\r\n                                            controls={[\r\n                                                \"bold\",\r\n                                                \"italic\",\r\n                                                \"underline\",\r\n                                                \"strikethrough\",\r\n                                                \"colorfill\",\r\n                                            ]}\r\n                                            customControls={[\r\n                                                {\r\n                                                    name: \"colorfill\",\r\n                                                    icon: <FormatColorFillIcon />,\r\n                                                    type: \"inline\",\r\n                                                    inlineStyle: {\r\n                                                        backgroundColor: \"yellow\",\r\n                                                        color: \"black\"\r\n                                                    }\r\n                                                }\r\n                                            ]}\r\n                                        />\r\n                                    </div>\r\n                                </Grid>\r\n                                <Grid item xs={2} className={classes.fullMinWidth} >\r\n                                    <FormControl className={classes.inputDiv}>\r\n                                        <InputLabel id=\"technics-chip-label\">\r\n                                            {lang.currLang.texts.technics}\r\n                                        </InputLabel>\r\n                                        <Select\r\n                                            labelId=\"technics-chip-label\"\r\n                                            id=\"technics-chip\"\r\n                                            multiple\r\n                                            value={selectedTechnics}\r\n                                            onChange={handleChangeTechnics}\r\n                                            input={\r\n                                                <Input id=\"select-technics-chip\" />\r\n                                            }\r\n                                            renderValue={selected =>\r\n                                                (\r\n                                                    <div className={classes.chips}>\r\n                                                        {selected.map(value => (\r\n                                                            <Chip\r\n                                                                size=\"small\"\r\n                                                                key={value}\r\n                                                                label={value}\r\n                                                                className={classes.chip}\r\n                                                            />\r\n                                                        ))}\r\n                                                    </div>\r\n                                                )\r\n                                            }\r\n                                            MenuProps={MenuProps}\r\n                                        >\r\n                                            {Object.keys(technics)\r\n                                                .map(item =>\r\n                                                    <MenuItem\r\n                                                        key={technics[item].id + ' chip'}\r\n                                                        value={\r\n                                                            lang.currLang.current === \"Ru\"\r\n                                                                ? technics[item].name_rus\r\n                                                                : technics[item].name_eng\r\n                                                        }\r\n                                                        style={getStyles(technics[item].name_eng, selectedTechnics, theme)}\r\n                                                    >\r\n                                                        {lang.currLang.current === \"Ru\"\r\n                                                            ? technics[item].name_rus\r\n                                                            : technics[item].name_eng}\r\n                                                    </MenuItem>\r\n                                                )}\r\n                                        </Select>\r\n                                    </FormControl>\r\n                                </Grid>\r\n                                <Grid item xs={2} className={classes.fullMinWidth} >\r\n                                    <FormControl className={classes.inputDiv}>\r\n                                        <InputLabel id=\"location-chip-label\">\r\n                                            {lang.currLang.texts.tags}\r\n                                        </InputLabel>\r\n                                        <Select\r\n                                            labelId=\"location-chip-label\"\r\n                                            id=\"location-chip\"\r\n                                            multiple\r\n                                            value={selectedLocations}\r\n                                            onChange={handleChangeLocations}\r\n                                            input={\r\n                                                <Input id=\"select-location-chip\" />\r\n                                            }\r\n                                            renderValue={selected =>\r\n                                                (\r\n                                                    <div className={classes.chips}>\r\n                                                        {selected.map(value => (\r\n                                                            <Chip\r\n                                                                size=\"small\"\r\n                                                                avatar={\r\n                                                                    locations.length\r\n                                                                        ? lang.currLang.current === \"Ru\"\r\n                                                                            ? < Avatar\r\n                                                                                alt={locations.find(locations => locations.name_rus === value).name_eng}\r\n                                                                                src={locations.find(locations => locations.name_rus === value).img_url}\r\n                                                                            />\r\n                                                                            : < Avatar\r\n                                                                                alt={locations.find(locations => locations.name_eng === value).name_eng}\r\n                                                                                src={locations.find(locations => locations.name_eng === value).img_url}\r\n                                                                            />\r\n                                                                        : null\r\n                                                                }\r\n\r\n                                                                key={value}\r\n                                                                label={value}\r\n                                                                className={classes.chip}\r\n                                                            />\r\n                                                        ))}\r\n                                                    </div>\r\n                                                )\r\n                                            }\r\n                                            MenuProps={MenuProps}\r\n                                        >\r\n                                            {Object.keys(locations)\r\n                                                .map(item =>\r\n                                                    <MenuItem\r\n                                                        key={locations[item].id + ' chip'}\r\n                                                        value={\r\n                                                            lang.currLang.current === \"Ru\"\r\n                                                                ? locations[item].name_rus\r\n                                                                : locations[item].name_eng\r\n                                                        }\r\n                                                        style={getStyles(locations[item].name_eng, selectedLocations, theme)}\r\n                                                    >\r\n                                                        {lang.currLang.current === \"Ru\"\r\n                                                            ? locations[item].name_rus\r\n                                                            : locations[item].name_eng}\r\n                                                    </MenuItem>\r\n                                                )}\r\n                                        </Select>\r\n                                    </FormControl>\r\n                                </Grid>\r\n                                <Grid item xs={1} className={classes.fullMinWidth} >\r\n                                    <div className={classes.div85width}>\r\n                                        <Grid className={classes.ratingGridContainer}\r\n                                            container\r\n                                            direction=\"row\"\r\n                                            justify=\"center\"\r\n                                            alignItems=\"stretch\" >\r\n                                            <Grid item xs={6}>\r\n                                                <Typography component=\"legend\">\r\n                                                    {lang.currLang.texts.rating} :\r\n                                                </Typography>\r\n                                            </Grid>\r\n                                            <Grid item xs={6}>\r\n                                                <Rating name=\"simple-controlled\"\r\n                                                    value={realisticsValue}\r\n                                                    onChange={handleChangeRealistics}\r\n                                                />\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </div>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Paper>\r\n                    </Grid>\r\n                    <Grid item xs={1} className={classes.mainGridBodyItem} >\r\n                        {isLoading\r\n                            ? <LinearProgress />\r\n                            : <Grid\r\n                                container\r\n                                direction=\"row\"\r\n                                justify=\"space-evenly\"\r\n                                alignItems=\"center\"\r\n                            >\r\n                                <Grid item>\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        color=\"secondary\"\r\n                                        className={classes.actionButton}\r\n                                        onClick={() => {\r\n                                            isEditMode\r\n                                                ? history.push(\"/dreams\")\r\n                                                : history.push(\"/luciddreams\")\r\n                                        }}\r\n                                    >\r\n                                        {lang.currLang.buttons.close}\r\n                                    </Button>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        color=\"primary\"\r\n                                        className={classes.actionButton}\r\n                                        onClick={() => savepost()}\r\n                                    >\r\n                                        {isEditMode\r\n                                            ? lang.currLang.buttons.Save\r\n                                            : lang.currLang.buttons.add\r\n                                        }\r\n                                    </Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                        }\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n            <Snackbar\r\n                open={openSnackbar}\r\n                onClose={handleCloseSnackbar}\r\n                autoHideDuration={3000}>\r\n                <MySnackbarContentWrapper\r\n                    className={classes.margin}\r\n                    onClose={handleCloseSnackbar}\r\n                    variant='error'\r\n                    message={snackbarMessage}\r\n                />\r\n            </Snackbar>\r\n        </MuiThemeProvider >\r\n    );\r\n};\r\n\r\nAddCDream.propTypes = {\r\n    themeMode: PropTypes.object.isRequired,\r\n    lang: PropTypes.object.isRequired,\r\n    auth: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        themeMode: store.themeMode,\r\n        lang: store.lang,\r\n        auth: store.auth,\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddCDream);","const words = {\r\n    current: 'Ru',\r\n    buttons: {\r\n        signIn: 'Вход',\r\n        signUp: 'Регистрация',\r\n        dreamJoirnal: 'Дневник снов',\r\n        addDream: 'Добавить сон',\r\n        addCDream: 'Добавить осознанный сон',\r\n        techniques: 'Техники',\r\n        adventures: 'Приключения',\r\n        close: 'Назад',\r\n        about: 'О нас',\r\n        cancel: 'Отмена',\r\n        add: 'Добавить',\r\n        Edit: 'Изменить',\r\n        Delete: 'Удалить',\r\n        Save: 'Сохранить',\r\n    },\r\n    texts: {\r\n        about: 'О нас О нас О нас О нас О нас О нас О нас О нас О нас О нас О нас О нас',\r\n        or: 'ИЛИ',\r\n        nickname: 'Отображаемое имя',\r\n        password: 'Пароль',\r\n        passwordAgain: 'Поторите пароль',\r\n        cancel: 'Отмена',\r\n        sucessRegistration: 'Вы успешно зарегистрировались',\r\n        hello: 'Привет, ',\r\n        changleLanguage: 'Сохранить изменение языка на ',\r\n        success: 'Успешно',\r\n        title: 'Заголовок',\r\n        content: 'Что снилось',\r\n        tags: 'Места',\r\n        technics: 'Техники',\r\n        rating: 'Реалистичность',\r\n        Dream: 'Обычный сон',\r\n        Cdream: 'ОC',\r\n        NoDreams: \"У вас нет снов\",\r\n        pickDate: \"Дата\",\r\n        pickTime: \"Время\",\r\n        TapToShow: \"Нажмите на текст, чтобы отобразить подсвечивание\",\r\n        Public: \"Опубликовано\",\r\n        Publish: \"Опубликовать\",\r\n        Unpublish: \"Скрыть\",\r\n        PublicAlert: \"Вы точно хотите опубликовать сон?\",\r\n        PublicText: \"После публикации ваши друзья смогут прочитать этот сон.\",\r\n        PublicDescription: \"Ваши друзья могут прочитать этот сон\",\r\n        UnpublicAlert: \"Вы точно хотите скрыть сон?\",\r\n        UnpublicText: \"После скрытия ваши друзья не смогут прочитать этот сон.\",\r\n        UnpublicDescription: \"Ваши друзья не могут прочитать этот сон\",\r\n        DeleteAlert: \"Вы точно хотите удалить сон?\",\r\n        DeleteText: \"После удаления сон не получится восстановить. Никогда.\",\r\n    },\r\n    errors: {\r\n        emailLenght: 'Введите email',\r\n        nicknameLenght: 'Введите отображаемое имя',\r\n        passwordLenght: 'Введите пароль',\r\n        password2Lenght: 'Введите пароль',\r\n        passwordsCompare: 'Пароли не совпадают',\r\n        UserNotExist: 'Неверный email или пароль',\r\n        EmailIsNotValid: 'Введен некорректный email',\r\n        IncorrectPassword: 'Неверный email или пароль',\r\n        EmailIsBusy: 'Email занят',\r\n        PasswordLenght5Symbols: 'Минимальная длина пароля: 5 символов',\r\n        NotLogin: 'Вы не авторизированы',\r\n        EmptyTitle: 'Пустой заголовок',\r\n        EmptyDream: 'Пустое поле сна',\r\n        NoChanges: 'Нет изменений',\r\n    },\r\n};\r\n\r\nexport default words;","import React, { useEffect } from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\n\r\nimport SnackbarContent from \"@material-ui/core/SnackbarContent\";\r\nimport ButtonBase from '@material-ui/core/ButtonBase';\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport Button from '@material-ui/core/Button';\r\nimport Slide from \"@material-ui/core/Slide\";\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport { SET_THEME_MODE } from \"../actions/types\";\r\n\r\nimport { setCurrLang, setTheme } from '../actions/Actions';\r\nimport { useStyles, variantIcon } from '../styles/Styles';\r\nimport { instance } from './Config';\r\nimport { CheckTimeOut } from '../utils/CheckLoginTimeOut';\r\n\r\nimport { MuiThemeProvider, createMuiTheme, makeStyles } from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\n\r\nimport { amber, green } from '@material-ui/core/colors';\r\n\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\n\r\nimport RuDict from '../dictionary/ru';\r\nimport EnDict from '../dictionary/en';\r\n\r\nfunction TransitionDown(props) {\r\n    return <Slide {...props} direction=\"down\" />;\r\n}\r\n\r\nconst useStyles1 = makeStyles(theme => ({\r\n    success: {\r\n        backgroundColor: green[600],\r\n    },\r\n    error: {\r\n        backgroundColor: theme.palette.error.dark,\r\n    },\r\n    info: {\r\n        backgroundColor: theme.palette.primary.main,\r\n    },\r\n    warning: {\r\n        backgroundColor: amber[700],\r\n    },\r\n    icon: {\r\n        fontSize: 20,\r\n    },\r\n    iconVariant: {\r\n        opacity: 0.9,\r\n        marginRight: theme.spacing(1),\r\n    },\r\n    message: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n    },\r\n}));\r\n\r\nfunction SnackbarContentWrapper(props) {\r\n    const classes = useStyles1();\r\n    const { className, message, onClose, variant } = props;\r\n    const Icon = variantIcon[variant];\r\n\r\n    return (\r\n        <SnackbarContent\r\n            className={clsx(classes[variant], className)}\r\n            aria-describedby=\"message-snackbar\"\r\n            message={\r\n                <span id=\"message-snackbar\" className={classes.message}>\r\n                    <Icon className={clsx(classes.icon, classes.iconVariant)} />\r\n                    <Typography className={classes.mainGridContainer}\r\n                        align='center'\r\n                        variant='body2'>\r\n                        {message}\r\n                    </Typography>\r\n                </span>\r\n            }\r\n            action={[\r\n                <IconButton key=\"close\" aria-label=\"close\" color=\"inherit\" onClick={onClose}>\r\n                    <CloseIcon className={classes.icon} />\r\n                </IconButton>,\r\n            ]}\r\n        />\r\n    );\r\n}\r\n\r\nfunction MainPage(props) {\r\n    const classes = useStyles();\r\n    const { lang, themeMode, auth } = props.store;\r\n    const muiTheme = createMuiTheme(themeMode);\r\n    const { setCurrLangAction, setTheme, history } = props;\r\n    const [prevLanguage, setPrevLanguage] = React.useState(undefined);\r\n    const [openLangSnakbar, setOpenLangSnakbar] = React.useState(false);\r\n    const [openMessageSnackbar, setOpenMessageSnackbar] = React.useState(false);\r\n    const [langSnakbarMessage, setLangSnakbarMessage] = React.useState('');\r\n    const [transition, setTransition] = React.useState(undefined);\r\n    const [infoSnackbar, setInfoSnackbar] = React.useState({\r\n        variant: '',\r\n        message: '',\r\n    });\r\n\r\n    const switchMode = () => {\r\n        let newPaletteType = themeMode.palette.type === \"light\" ? \"dark\" : \"light\";\r\n        let primaryColor = themeMode.palette.type === \"light\" ? \"#f9a825\" : \"#3f51b5\";\r\n        let secondaryColor = themeMode.palette.type === \"light\" ? \"#f50057\" : \"#f50057\";\r\n        setTheme({\r\n            type: SET_THEME_MODE,\r\n            palette: {\r\n                type: newPaletteType,\r\n                primary: { main: primaryColor },\r\n                secondary: { main: secondaryColor },\r\n            }\r\n        });\r\n    }\r\n    const onAstronautClick = () => {\r\n        alert('Тут должны перейти на страницу космонафта');\r\n    };\r\n    const onMapClick = () => {\r\n        alert('Тут должны перейти на страницу карты');\r\n    };\r\n    const changeLanguage = (language) => {\r\n        if (language !== lang.currLang.current) {\r\n            if (language === 'Ru') {\r\n                setPrevLanguage(lang.currLang.current);\r\n                setCurrLangAction(RuDict);\r\n                setLangSnakbarMessage(language);\r\n                setTransition(() => TransitionDown);\r\n                setOpenLangSnakbar(true);\r\n            }\r\n            if (lang.currLang.current !== 'En') {\r\n                setPrevLanguage(lang.currLang.current);\r\n                setCurrLangAction(EnDict);\r\n                setLangSnakbarMessage(language);\r\n                setTransition(() => TransitionDown);\r\n                setOpenLangSnakbar(true);\r\n            }\r\n        }\r\n    }\r\n    const handleCloseLangSnakbar = () => {\r\n        switch (prevLanguage) {\r\n            case 'En':\r\n                setCurrLangAction(EnDict);\r\n                break;\r\n            case 'Ru':\r\n                setCurrLangAction(RuDict);\r\n                break;\r\n            default:\r\n                setCurrLangAction(EnDict);\r\n                break;\r\n        }\r\n        setOpenLangSnakbar(false);\r\n    };\r\n    const handleSaveLangSnakbar = () => {\r\n        let newLang;\r\n        switch (lang.currLang.current) {\r\n            case 'En':\r\n                newLang = 0;\r\n                break;\r\n            case 'Ru':\r\n                newLang = 1;\r\n                break;\r\n            default:\r\n                newLang = 0;\r\n                break;\r\n        }\r\n        let userid = props.store.auth.user.id;\r\n        let usernickname = props.store.auth.user.nickname;\r\n        let newUserData = {\r\n            language: newLang,\r\n            id: userid,\r\n            nickname: usernickname,\r\n        };\r\n\r\n        //Проверка на таймаут\r\n        let check = CheckTimeOut();\r\n\r\n        if (check) {\r\n            instance\r\n                .post('/actions/users/updateuserdata', newUserData)\r\n                .then(res => {\r\n                    let newInfoSnackbar = infoSnackbar;\r\n                    newInfoSnackbar = { ...newInfoSnackbar, variant: \"success\" };\r\n                    newInfoSnackbar = { ...newInfoSnackbar, message: lang.currLang.texts.success };\r\n                    setInfoSnackbar(newInfoSnackbar);\r\n                    setOpenMessageSnackbar(true);\r\n                    setOpenLangSnakbar(false);\r\n                })\r\n                .catch(err => {\r\n                    handleCloseLangSnakbar();\r\n                });\r\n\r\n        }\r\n        else {\r\n            let newInfoSnackbar = infoSnackbar;\r\n            newInfoSnackbar = { ...newInfoSnackbar, variant: \"error\" };\r\n            newInfoSnackbar = { ...newInfoSnackbar, message: lang.currLang.errors.NotLogin };\r\n            setInfoSnackbar(newInfoSnackbar);\r\n            setOpenMessageSnackbar(true);\r\n            handleCloseLangSnakbar();\r\n        }\r\n    };\r\n    const handleCloseMessageSnackbar = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setOpenMessageSnackbar(false);\r\n    };\r\n    useEffect(() => {\r\n\r\n        let id = {\r\n            id: auth.user.id,\r\n        };\r\n\r\n        instance\r\n            .post('/actions/users/getuserdata', id)\r\n            .then(res => {\r\n                res.data.language === 0 ? setCurrLangAction(EnDict) : setCurrLangAction(RuDict);\r\n            })\r\n            .catch(err => {\r\n                auth.user.language === 0 ? setCurrLangAction(EnDict) : setCurrLangAction(RuDict);\r\n            });\r\n\r\n        // if (auth.user.times_mode === 0) {\r\n        //     setTheme({\r\n        //         type: SET_THEME_MODE,\r\n        //         palette: {\r\n        //             type: \"dark\",\r\n        //             primary: { main: \"#f9a825\" },\r\n        //             secondary: { main: \"#f50057\" },\r\n        //         }\r\n        //     });\r\n        // }\r\n        // else {\r\n        //     setTheme({\r\n        //         type: SET_THEME_MODE,\r\n        //         palette: {\r\n        //             type: \"light\",\r\n        //             primary: { main: \"#3f51b5\" },\r\n        //             secondary: { main: \"#f50057\" },\r\n        //         }\r\n        //     });\r\n        // }\r\n\r\n    }, [classes, setTheme, setCurrLangAction, auth.user.language, auth.user.times_mode, auth.user.id]);\r\n\r\n    return (\r\n        <MuiThemeProvider theme={muiTheme}>\r\n            <CssBaseline />\r\n\r\n            <Snackbar\r\n                anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }}\r\n                key={\"top, center\"}\r\n                open={openLangSnakbar}\r\n                TransitionComponent={transition}\r\n            >\r\n                <SnackbarContent\r\n                    aria-describedby=\"lang-snackbar\"\r\n                    message={\r\n                        <Typography className={classes.mainGridContainer}\r\n                            align='center'\r\n                            id=\"lang-snackbar\"\r\n                            variant='body2'>\r\n                            {lang.currLang.texts.changleLanguage + langSnakbarMessage + ' ?'}\r\n                        </Typography>\r\n                    }\r\n                    action={[\r\n                        <div key={\"lang-snackbar-buttons\"}>\r\n                            <IconButton\r\n                                key=\"save\"\r\n                                aria-label=\"save\"\r\n                                color=\"inherit\"\r\n                                onClick={handleSaveLangSnakbar}\r\n                            >\r\n                                <SaveIcon />\r\n                            </IconButton>\r\n                            <IconButton\r\n                                key=\"close\"\r\n                                aria-label=\"close\"\r\n                                color=\"inherit\"\r\n                                onClick={handleCloseLangSnakbar}\r\n                            >\r\n                                <CloseIcon />\r\n                            </IconButton>\r\n                        </div>\r\n                    ]}\r\n                />\r\n            </Snackbar>\r\n\r\n            <div className={classes.root} id='rootDiv'>\r\n\r\n                <div className={classes.mainPage}>\r\n\r\n                    <Grid className={classes.mainGridContainer}\r\n                        container\r\n                        direction=\"column\"\r\n                        justify=\"center\"\r\n                        alignItems=\"stretch\" >\r\n\r\n                        <Grid item xs={4} className={classes.mainGridHeadItem} >\r\n                            <Grid container className={classes.mainGridContainer}\r\n                                direction=\"row\"\r\n                                justify=\"space-around\"\r\n                                alignItems=\"stretch\" >\r\n\r\n                                <Grid item xs={4} >\r\n                                    <ButtonBase className={classes.AstronautButton}\r\n                                        type='button'\r\n                                        focusRipple\r\n                                        onClick={onAstronautClick}>\r\n                                        <div className={classes.AstronautDiv}>\r\n                                            <div className={classes.AstronautImg} style={themeMode.palette.type === \"light\" ? { filter: 'invert(0)', } : { filter: 'invert(1)', }} />\r\n                                        </div>\r\n                                    </ButtonBase>\r\n                                </Grid>\r\n\r\n                                <Grid item xs={4} >\r\n                                    <ButtonBase className={classes.image}\r\n                                        type='button'\r\n                                        focusRipple\r\n                                        onClick={switchMode}>\r\n                                        <div className={classes.SkyDiv}>\r\n                                            <div className={classes.SunSrc} style={themeMode.palette.type === \"dark\" ? { transform: 'translateY(36vw)' } : { transform: 'translateY(0)' }} />\r\n                                            <div className={classes.MoonSrc} style={themeMode.palette.type === \"dark\" ? { transform: 'translateY(0)' } : { transform: 'translateY(-36vw)' }} />\r\n                                        </div>\r\n                                    </ButtonBase>\r\n                                </Grid>\r\n                                <Grid item xs={4} >\r\n                                    <ButtonBase className={classes.MapButton}\r\n                                        type='button'\r\n                                        focusRipple\r\n                                        onClick={onMapClick}>\r\n                                        <div className={classes.MapDiv}>\r\n                                            <div className={classes.MapImg} style={themeMode.palette.type === \"light\" ? { filter: 'invert(0)', } : { filter: 'invert(1)', }} />\r\n                                        </div>\r\n                                    </ButtonBase>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={1} className={classes.mainGridHeadItem} >\r\n                            <Grid className={classes.mainGridContainer}\r\n                                container\r\n                                direction=\"column\"\r\n                                justify=\"center\"\r\n                                alignItems=\"stretch\" >\r\n                                <Grid item xs={12} className={classes.menuButtonContainerItem} >\r\n                                    <Typography className={classes.mainGridContainer}\r\n                                        align='center'\r\n                                        variant='h6'>\r\n                                        {lang.currLang.texts.hello + props.store.auth.user.nickname}\r\n                                    </Typography>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={6} className={classes.mainGridBodyItem} >\r\n\r\n                            <Grid className={classes.mainGridContainer}\r\n                                container\r\n                                direction=\"column\"\r\n                                justify=\"center\"\r\n                                alignItems=\"stretch\" >\r\n\r\n                                <Grid className={classes.menuButtonContainer}\r\n                                    container\r\n                                    direction=\"column\"\r\n                                    justify=\"center\"\r\n                                    alignItems=\"stretch\" >\r\n\r\n\r\n                                    <Grid item xs={12} className={classes.menuButtonContainerItem} >\r\n\r\n                                        <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                            <Button\r\n                                                variant=\"contained\"\r\n                                                color=\"primary\"\r\n                                                className={classes.menuButton}\r\n                                                onClick={() => {\r\n                                                    let check = CheckTimeOut();\r\n                                                    if (check) history.push(\"/dreams\");\r\n                                                    else history.push(\"/\");\r\n                                                }}\r\n                                            >\r\n                                                {lang.currLang.buttons.dreamJoirnal}\r\n                                            </Button>\r\n                                        </Grid>\r\n\r\n                                        <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                            <Button\r\n                                                variant=\"contained\"\r\n                                                color=\"primary\"\r\n                                                className={classes.menuButton}\r\n                                                onClick={() => {\r\n                                                    let check = CheckTimeOut();\r\n                                                    if (check) history.push(\"/adddream\");\r\n                                                    else history.push(\"/\");\r\n                                                }}\r\n                                            >\r\n                                                {lang.currLang.buttons.addDream}\r\n                                            </Button>\r\n                                        </Grid>\r\n\r\n                                        <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                            <Button\r\n                                                variant=\"contained\"\r\n                                                color=\"primary\"\r\n                                                className={classes.menuButton}\r\n                                                onClick={() => {\r\n                                                    let check = CheckTimeOut();\r\n                                                    if (check) history.push(\"/addcdream\");\r\n                                                    else history.push(\"/\");\r\n                                                }}\r\n                                            >\r\n                                                {lang.currLang.buttons.addCDream}\r\n                                            </Button>\r\n                                        </Grid>\r\n\r\n                                        <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                            <Button variant=\"contained\" color=\"primary\" className={classes.menuButton}>\r\n                                                {lang.currLang.buttons.techniques}\r\n                                            </Button>\r\n                                        </Grid>\r\n\r\n                                        <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                            <Button variant=\"contained\" color=\"primary\" className={classes.menuButton}>\r\n                                                {lang.currLang.buttons.adventures}\r\n                                            </Button>\r\n                                        </Grid>\r\n\r\n                                    </Grid>\r\n\r\n                                </Grid>\r\n\r\n                            </Grid>\r\n\r\n                        </Grid>\r\n\r\n                        <Grid item xs={1} className={classes.mainGridFooterItem} >\r\n\r\n                            <Grid className={classes.menuButtonContainerFooterLanguageButtons}\r\n                                container\r\n                                direction=\"row\"\r\n                                justify=\"center\"\r\n                                alignItems=\"center\" >\r\n                                <Grid item>\r\n                                    <Button onClick={() => { changeLanguage('Ru') }}>\r\n                                        RU\r\n                                    </Button>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Button onClick={() => { changeLanguage('En') }}>\r\n                                        EN\r\n                                    </Button>\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                        </Grid>\r\n\r\n                    </Grid>\r\n\r\n                </div>\r\n\r\n            </div>\r\n\r\n            <Snackbar\r\n                open={openMessageSnackbar}\r\n                onClose={handleCloseMessageSnackbar}\r\n                autoHideDuration={3000}>\r\n                <SnackbarContentWrapper\r\n                    className={classes.margin}\r\n                    onClose={handleCloseMessageSnackbar}\r\n                    variant={infoSnackbar.variant}\r\n                    message={infoSnackbar.message}\r\n                />\r\n            </Snackbar>\r\n\r\n        </MuiThemeProvider>\r\n    );\r\n};\r\n\r\n\r\n\r\nMainPage.propTypes = {\r\n    setTheme: PropTypes.func.isRequired,\r\n    setCurrLangAction: PropTypes.func.isRequired,\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        store,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setCurrLangAction: currLangState => dispatch(setCurrLang(currLangState)),\r\n        setTheme: palette => dispatch(setTheme(palette)),\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(MainPage);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport jwt_decode from \"jwt-decode\";\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\n\r\nimport { setCurrLang, setUserState } from '../actions/Actions';\r\nimport { useStyles, variantIcon } from '../styles/Styles';\r\nimport setAuthToken from \"../utils/setAuthToken\";\r\nimport { instance } from './Config';\r\nimport { GET_ERRORS, SET_CURRENT_USER } from \"../actions/types\";\r\n\r\nimport RuDict from '../dictionary/ru';\r\nimport EnDict from '../dictionary/en';\r\n\r\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\r\nimport Visibility from '@material-ui/icons/Visibility';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nimport { MuiThemeProvider, createMuiTheme, makeStyles } from '@material-ui/core/styles';\r\n\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\n\r\nimport { mdiVk } from '@mdi/js';\r\nimport Icon from '@mdi/react';\r\n\r\nimport { amber, green } from '@material-ui/core/colors';\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nconst useStyles1 = makeStyles(theme => ({\r\n    success: {\r\n        backgroundColor: green[600],\r\n    },\r\n    error: {\r\n        backgroundColor: theme.palette.error.dark,\r\n    },\r\n    info: {\r\n        backgroundColor: theme.palette.primary.main,\r\n    },\r\n    warning: {\r\n        backgroundColor: amber[700],\r\n    },\r\n    icon: {\r\n        fontSize: 20,\r\n    },\r\n    iconVariant: {\r\n        opacity: 0.9,\r\n        marginRight: theme.spacing(1),\r\n    },\r\n    message: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n    },\r\n}));\r\n\r\nfunction MySnackbarContentWrapper(props) {\r\n    const classes = useStyles1();\r\n    const { className, message, onClose, variant } = props;\r\n    const Icon = variantIcon[variant];\r\n\r\n    return (\r\n        <SnackbarContent\r\n            className={clsx(classes[variant], className)}\r\n            aria-describedby=\"client-snackbar\"\r\n            message={\r\n                <span id=\"client-snackbar\" className={classes.message}>\r\n                    <Icon className={clsx(classes.icon, classes.iconVariant)} />\r\n                    <Typography className={classes.mainGridContainer}\r\n                        align='center'\r\n                        variant='body2'>\r\n                        {message}\r\n                    </Typography>\r\n                </span>\r\n            }\r\n            action={[\r\n                <IconButton key=\"close\" aria-label=\"close\" color=\"inherit\" onClick={onClose}>\r\n                    <CloseIcon className={classes.icon} />\r\n                </IconButton>,\r\n            ]}\r\n        />\r\n    );\r\n}\r\n\r\nfunction Sign(props) {\r\n    const classes = useStyles();\r\n    const { history } = props;\r\n    const { themeMode, lang } = props.store;\r\n    const muiTheme = createMuiTheme(themeMode);\r\n    const [openSnackbar, setOpenSnackbar] = React.useState(false);\r\n    const [snackbarMessage, setSnackbarMessage] = React.useState('');\r\n    const [loginData, setLoginData] = React.useState({\r\n        email: '',\r\n        password: '',\r\n    });\r\n    const [registData, setRegistData] = React.useState({\r\n        email: '',\r\n        nickname: '',\r\n        password: '',\r\n        password2: '',\r\n    });\r\n    const [regFieldErrors, setRegFieldErrors] = React.useState({\r\n        emailErr: false,\r\n        emailErrText: '',\r\n        nicknameErr: false,\r\n        nicknameErrText: '',\r\n        passwordErr: false,\r\n        passwordErrText: '',\r\n        password2Err: false,\r\n        password2ErrText: '',\r\n    });\r\n    const [isLoading, setIsLoading] = React.useState(false);\r\n    const [showPassword, setShowPassword] = React.useState(false);\r\n    const [openLogin, setOpenLogin] = React.useState(false);\r\n    const [openRegist, setOpenRegist] = React.useState(false);\r\n    const [page, setPage] = React.useState({\r\n        mainPage: true,\r\n        aboutPage: false,\r\n    });\r\n\r\n    const handleMouseDownPassword = event => {\r\n        event.preventDefault();\r\n    };\r\n    const changeAuthLogin = (e) => {\r\n        let newLoginData = loginData;\r\n        newLoginData = { ...newLoginData, email: e.target.value };\r\n        setLoginData(newLoginData);\r\n    };\r\n    const changeAuthPassword = (e) => {\r\n        let newLoginData = loginData;\r\n        newLoginData = { ...newLoginData, password: e.target.value };\r\n        setLoginData(newLoginData);\r\n    };\r\n    const changeRegistLogin = (e) => {\r\n        let newRegFieldErrors = regFieldErrors;\r\n        newRegFieldErrors = { ...newRegFieldErrors, emailErr: false };\r\n        newRegFieldErrors = { ...newRegFieldErrors, emailErrText: '' };\r\n        setRegFieldErrors(newRegFieldErrors);\r\n\r\n        let newRegistData = registData;\r\n        newRegistData = { ...newRegistData, email: e.target.value };\r\n        setRegistData(newRegistData);\r\n    };\r\n    const changeRegistNickname = (e) => {\r\n        let newRegFieldErrors = regFieldErrors;\r\n        newRegFieldErrors = { ...newRegFieldErrors, nicknameErr: false };\r\n        newRegFieldErrors = { ...newRegFieldErrors, nicknameErrText: '' };\r\n        setRegFieldErrors(newRegFieldErrors);\r\n\r\n        let newRegistData = registData;\r\n        newRegistData = { ...newRegistData, nickname: e.target.value };\r\n        setRegistData(newRegistData);\r\n    };\r\n    const changeRegistPassword = (e) => {\r\n        let newRegFieldErrors = regFieldErrors;\r\n        newRegFieldErrors = { ...newRegFieldErrors, passwordErr: false };\r\n        newRegFieldErrors = { ...newRegFieldErrors, passwordErrText: '' };\r\n        newRegFieldErrors = { ...newRegFieldErrors, password2Err: false };\r\n        newRegFieldErrors = { ...newRegFieldErrors, password2ErrText: '' };\r\n        setRegFieldErrors(newRegFieldErrors);\r\n\r\n        let newRegistData = registData;\r\n        newRegistData = { ...newRegistData, password: e.target.value };\r\n        setRegistData(newRegistData);\r\n    };\r\n    const changeRegistPassword2 = (e) => {\r\n        let newRegFieldErrors = regFieldErrors;\r\n        newRegFieldErrors = { ...newRegFieldErrors, passwordErr: false };\r\n        newRegFieldErrors = { ...newRegFieldErrors, passwordErrText: '' };\r\n        newRegFieldErrors = { ...newRegFieldErrors, password2Err: false };\r\n        newRegFieldErrors = { ...newRegFieldErrors, password2ErrText: '' };\r\n        setRegFieldErrors(newRegFieldErrors);\r\n        let newRegistData = registData;\r\n        newRegistData = { ...newRegistData, password2: e.target.value };\r\n        setRegistData(newRegistData);\r\n    };\r\n    const singIn = () => {\r\n        instance\r\n            .post(\"/actions/users/login\", loginData)\r\n            .then(res => {\r\n                const { token } = res.data;\r\n                localStorage.setItem(\"jwtToken\", token);\r\n                setAuthToken(token);\r\n                const decoded = jwt_decode(token);\r\n                props.setUserState({\r\n                    type: SET_CURRENT_USER,\r\n                    payload: decoded\r\n                });\r\n                setIsLoading(false);\r\n                history.push(\"/luciddreams\");\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                if (err.response.data.email === 'UserNotExist') {\r\n                    setSnackbarMessage(lang.currLang.errors.UserNotExist);\r\n                }\r\n                if (err.response.data.email === 'EmailIsNotValid') {\r\n                    setSnackbarMessage(lang.currLang.errors.EmailIsNotValid);\r\n                }\r\n                if (err.response.data.passwordincorrect === 'IncorrectPassword') {\r\n                    setSnackbarMessage(lang.currLang.errors.IncorrectPassword);\r\n                }\r\n                setOpenSnackbar(true);\r\n                setIsLoading(false);\r\n            });\r\n    };\r\n    const singUp = () => {\r\n        let isErr = false;\r\n        let newRegFieldErrors = regFieldErrors;\r\n        if (registData.email.length === 0) {\r\n            newRegFieldErrors = { ...newRegFieldErrors, emailErr: true };\r\n            newRegFieldErrors = { ...newRegFieldErrors, emailErrText: lang.currLang.errors.emailLenght };\r\n            isErr = true;\r\n        }\r\n        if (registData.nickname.length === 0) {\r\n            newRegFieldErrors = { ...newRegFieldErrors, nicknameErr: true };\r\n            newRegFieldErrors = { ...newRegFieldErrors, nicknameErrText: lang.currLang.errors.nicknameLenght };\r\n            isErr = true;\r\n        }\r\n        if (registData.password.length === 0) {\r\n            newRegFieldErrors = { ...newRegFieldErrors, passwordErr: true };\r\n            newRegFieldErrors = { ...newRegFieldErrors, passwordErrText: lang.currLang.errors.passwordLenght };\r\n            isErr = true;\r\n        }\r\n        if (registData.password2.length === 0) {\r\n            newRegFieldErrors = { ...newRegFieldErrors, password2Err: true };\r\n            newRegFieldErrors = { ...newRegFieldErrors, password2ErrText: lang.currLang.errors.password2Lenght };\r\n            isErr = true;\r\n        }\r\n        if (registData.password !== registData.password2) {\r\n            newRegFieldErrors = { ...newRegFieldErrors, passwordErr: true };\r\n            newRegFieldErrors = { ...newRegFieldErrors, passwordErrText: lang.currLang.errors.passwordsCompare };\r\n            newRegFieldErrors = { ...newRegFieldErrors, password2Err: true };\r\n            newRegFieldErrors = { ...newRegFieldErrors, password2ErrText: lang.currLang.errors.passwordsCompare };\r\n            isErr = true;\r\n        }\r\n        if (isErr) {\r\n            setRegFieldErrors(newRegFieldErrors);\r\n            setIsLoading(false);\r\n        }\r\n        else {\r\n            instance\r\n                .post('/actions/users/register', registData)\r\n                .then(res => {\r\n                    //TODO нормальный popup\r\n                    alert(lang.currLang.texts.sucessRegistration);\r\n                    let newRegistData = registData;\r\n                    newRegistData = { ...newRegistData, email: '' };\r\n                    newRegistData = { ...newRegistData, nickname: '' };\r\n                    newRegistData = { ...newRegistData, password: '' };\r\n                    newRegistData = { ...newRegistData, password2: '' };\r\n                    setRegistData(newRegistData);\r\n                    click('closeRegist');\r\n                    click('openLogin');\r\n                    setIsLoading(false);\r\n                })\r\n                .catch(err => {\r\n                    props.setUserState({\r\n                        type: GET_ERRORS,\r\n                        payload: err.response.data\r\n                    });\r\n                    if (err.response.data.email === 'EmailIsBusy') {\r\n                        setSnackbarMessage(lang.currLang.errors.EmailIsBusy);\r\n                    }\r\n                    if (err.response.data.password === 'PasswordLenght5Symbols') {\r\n                        setSnackbarMessage(lang.currLang.errors.PasswordLenght5Symbols);\r\n                    }\r\n                    setOpenSnackbar(true);\r\n                    setIsLoading(false);\r\n                });\r\n        }\r\n    };\r\n    const click = (action) => {\r\n        let newPages = page;\r\n        switch (action) {\r\n            case 'useVk':\r\n                // window.VK.Auth.login(checkLoginState, 4194304);\r\n                // let loadItems = async () => {\r\n                //     const response = await fetch('http://10.203.117.137:3001/auth/vk', {\r\n                //         method: 'GET',\r\n                //         credentials: 'include',\r\n                //     });\r\n                //     const body = await response.json();\r\n\r\n                //     console.log(response);\r\n                // }\r\n                break;\r\n            case 'openLogin':\r\n                setOpenLogin(true);\r\n                break;\r\n            case 'openRegist':\r\n                setOpenRegist(true);\r\n                break;\r\n            case 'closeLogin':\r\n                setOpenLogin(false);\r\n                setShowPassword(false);\r\n                break;\r\n            case 'closeRegist':\r\n                setOpenRegist(false);\r\n                setShowPassword(false);\r\n                break;\r\n            case 'signIn':\r\n                setIsLoading(true);\r\n                singIn();\r\n                break;\r\n            case 'signUp':\r\n                setIsLoading(true);\r\n                singUp();\r\n                break;\r\n            case 'openAboutPage':\r\n                newPages = { ...newPages, aboutPage: true };\r\n                newPages = { ...newPages, mainPage: false };\r\n                setPage(newPages);\r\n                break;\r\n            case 'closeAboutPage':\r\n                newPages = { ...newPages, aboutPage: false };\r\n                newPages = { ...newPages, mainPage: true };\r\n                setPage(newPages);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    };\r\n    const handleCloseSnackbar = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setOpenSnackbar(false);\r\n    };\r\n    const changeLanguage = (language) => {\r\n        if (language === 'Ru') {\r\n            props.setCurrLang(RuDict);\r\n        }\r\n        else {\r\n            props.setCurrLang(EnDict);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <MuiThemeProvider theme={muiTheme}>\r\n            <CssBaseline />\r\n\r\n            <div className={classes.root} id='rootDiv'>\r\n\r\n                <div className={classes.mainPage}\r\n                    style={\r\n                        page.mainPage === true\r\n                            ? { transform: 'translateY(0%)' }\r\n                            : { transform: 'translateY(-100%)' }\r\n                    } >\r\n                    <Grid className={classes.mainGridContainer}\r\n                        container\r\n                        direction=\"column\"\r\n                        justify=\"center\"\r\n                        alignItems=\"stretch\"\r\n                    >\r\n                        <Grid item xs={11} className={classes.mainGridBodyItem} >\r\n                            <Grid className={classes.menuButtonContainer}\r\n                                container\r\n                                direction=\"column\"\r\n                                justify=\"center\"\r\n                                alignItems=\"stretch\" >\r\n                                <Grid item xs={3} />\r\n                                <Grid item xs={6} className={classes.menuButtonContainerItem}>\r\n                                    <Dialog\r\n                                        open={openLogin}\r\n                                        TransitionComponent={Transition}\r\n                                        keepMounted\r\n                                        aria-labelledby=\"alert-dialog-slide-title\"\r\n                                        aria-describedby=\"alert-dialog-slide-description\"\r\n                                    >\r\n                                        <DialogTitle id=\"alert-dialog-slide-title\">\r\n                                            {lang.currLang.buttons.signIn}\r\n                                        </DialogTitle>\r\n                                        <DialogContent>\r\n                                            <Grid item xs={12} className={classes.menuButtonContainerItem}>\r\n                                                <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                                    <TextField\r\n                                                        className={classes.textField}\r\n                                                        id=\"email-field\"\r\n                                                        type=\"email\"\r\n                                                        label=\"Email\"\r\n                                                        onBlur={(e) => { changeAuthLogin(e) }} />\r\n                                                </Grid>\r\n                                                <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                                    <TextField\r\n                                                        id=\"password-field\"\r\n                                                        className={classes.textField}\r\n                                                        type={showPassword ? 'text' : 'password'}\r\n                                                        label={lang.currLang.texts.password}\r\n                                                        onBlur={(e) => { changeAuthPassword(e) }}\r\n                                                        InputProps={{\r\n                                                            endAdornment: (\r\n                                                                <InputAdornment position=\"end\">\r\n                                                                    <IconButton\r\n                                                                        tabIndex=\"-1\"\r\n                                                                        edge=\"end\"\r\n                                                                        aria-label=\"toggle password visibility\"\r\n                                                                        onClick={() => { showPassword ? setShowPassword(false) : setShowPassword(true) }}\r\n                                                                        onMouseDown={handleMouseDownPassword} >\r\n                                                                        {showPassword ? <VisibilityOff /> : <Visibility />}\r\n                                                                    </IconButton>\r\n                                                                </InputAdornment>\r\n                                                            ),\r\n                                                        }} />\r\n                                                </Grid>\r\n                                                <Grid item xs={2} className={classes.menuDivButton}\r\n                                                    align=\"center\"\r\n                                                >\r\n                                                    <Typography>\r\n                                                        {lang.currLang.texts.or}\r\n                                                    </Typography>\r\n                                                </Grid>\r\n                                                <Grid item xs={2} className={classes.menuDivButton}\r\n                                                    align=\"center\"\r\n                                                >\r\n                                                    <IconButton className={classes.button}\r\n                                                        onClick={() => { click('useVk') }}\r\n                                                        disabled={isLoading}>\r\n                                                        <Icon path={mdiVk} size={2} color={themeMode.palette.type === 'light' ? 'rgba(0, 0, 0, 0.54)' : 'rgba(255, 255, 255, 1)'} />\r\n                                                    </IconButton>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                            {isLoading\r\n                                                ? <LinearProgress /> :\r\n                                                ''}\r\n                                        </DialogContent>\r\n                                        {!isLoading\r\n                                            ?\r\n                                            <DialogActions>\r\n                                                <Button onClick={() => { click('closeLogin') }}\r\n                                                    color=\"secondary\"\r\n                                                    disabled={isLoading}>\r\n                                                    {lang.currLang.buttons.cancel}\r\n                                                </Button>\r\n                                                <Button onClick={() => { click('signIn') }}\r\n                                                    color=\"primary\"\r\n                                                    disabled={isLoading}>\r\n                                                    {lang.currLang.buttons.signIn}\r\n                                                </Button>\r\n                                            </DialogActions>\r\n                                            : ''}\r\n                                    </Dialog>\r\n                                    <Dialog\r\n                                        open={openRegist}\r\n                                        TransitionComponent={Transition}\r\n                                        keepMounted\r\n                                        aria-labelledby=\"alert-dialog-slide-title\"\r\n                                        aria-describedby=\"alert-dialog-slide-description\"\r\n                                    >\r\n                                        <DialogTitle id=\"alert-dialog-slide-title\">\r\n                                            {lang.currLang.buttons.signUp}\r\n                                        </DialogTitle>\r\n                                        <DialogContent>\r\n                                            <Grid item xs={12} className={classes.menuButtonContainerItem}>\r\n                                                <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                                    <TextField\r\n                                                        error={regFieldErrors.emailErr}\r\n                                                        helperText={regFieldErrors.emailErrText}\r\n                                                        className={classes.textField}\r\n                                                        id=\"reg-email-field\"\r\n                                                        type=\"email\"\r\n                                                        label=\"Email\"\r\n                                                        onBlur={(e) => { changeRegistLogin(e) }} />\r\n                                                </Grid>\r\n                                                <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                                    <TextField\r\n                                                        error={regFieldErrors.nicknameErr}\r\n                                                        helperText={regFieldErrors.nicknameErrText}\r\n                                                        className={classes.textField}\r\n                                                        id=\"reg-nickname-field\"\r\n                                                        type=\"text\"\r\n                                                        label={lang.currLang.texts.nickname}\r\n                                                        onBlur={(e) => { changeRegistNickname(e) }} />\r\n                                                </Grid>\r\n                                                <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                                    <TextField\r\n                                                        error={regFieldErrors.passwordErr}\r\n                                                        helperText={regFieldErrors.passwordErrText}\r\n                                                        id=\"reg-password-field\"\r\n                                                        className={classes.textField}\r\n                                                        type={showPassword ? 'text' : 'password'}\r\n                                                        label={lang.currLang.texts.password}\r\n                                                        onBlur={(e) => { changeRegistPassword(e) }}\r\n                                                        InputProps={{\r\n                                                            endAdornment: (\r\n                                                                <InputAdornment position=\"end\">\r\n                                                                    <IconButton\r\n                                                                        tabIndex=\"-1\"\r\n                                                                        edge=\"end\"\r\n                                                                        aria-label=\"toggle password visibility\"\r\n                                                                        onClick={() => { showPassword ? setShowPassword(false) : setShowPassword(true) }}\r\n                                                                        onMouseDown={handleMouseDownPassword} >\r\n                                                                        {showPassword ? <VisibilityOff /> : <Visibility />}\r\n                                                                    </IconButton>\r\n                                                                </InputAdornment>\r\n                                                            ),\r\n                                                        }} />\r\n                                                </Grid>\r\n                                                <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                                    <TextField\r\n                                                        error={regFieldErrors.password2Err}\r\n                                                        helperText={regFieldErrors.password2ErrText}\r\n                                                        id=\"reg-password2-field\"\r\n                                                        className={classes.textField}\r\n                                                        type={showPassword ? 'text' : 'password'}\r\n                                                        label={lang.currLang.texts.passwordAgain}\r\n                                                        onBlur={(e) => { changeRegistPassword2(e) }}\r\n                                                        InputProps={{\r\n                                                            endAdornment: (\r\n                                                                <InputAdornment position=\"end\">\r\n                                                                    <IconButton\r\n                                                                        tabIndex=\"-1\"\r\n                                                                        edge=\"end\"\r\n                                                                        aria-label=\"toggle password visibility\"\r\n                                                                        onClick={() => { showPassword ? setShowPassword(false) : setShowPassword(true) }}\r\n                                                                        onMouseDown={handleMouseDownPassword} >\r\n                                                                        {showPassword ? <VisibilityOff /> : <Visibility />}\r\n                                                                    </IconButton>\r\n                                                                </InputAdornment>\r\n                                                            ),\r\n                                                        }} />\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                            {isLoading\r\n                                                ? <LinearProgress />\r\n                                                : ''}\r\n\r\n                                        </DialogContent>\r\n                                        {!isLoading\r\n                                            ?\r\n                                            <DialogActions>\r\n                                                <Button onClick={() => { click('closeRegist') }}\r\n                                                    color=\"secondary\"\r\n                                                    disabled={isLoading}>\r\n                                                    {lang.currLang.buttons.cancel}\r\n                                                </Button>\r\n                                                <Button onClick={() => { click('signUp') }}\r\n                                                    color=\"primary\"\r\n                                                    disabled={isLoading}>\r\n                                                    {lang.currLang.buttons.signUp}\r\n                                                </Button>\r\n                                            </DialogActions>\r\n                                            : ''}\r\n                                    </Dialog>\r\n                                    <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                        <Button variant=\"contained\" color=\"primary\" className={classes.menuButton} onClick={() => { click('openLogin') }}>\r\n                                            {lang.currLang.buttons.signIn}\r\n                                        </Button>\r\n                                    </Grid>\r\n                                    <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                        <Button variant=\"contained\" color=\"primary\" className={classes.menuButton} onClick={() => { click('openRegist') }}>\r\n                                            {lang.currLang.buttons.signUp}\r\n                                        </Button>\r\n                                    </Grid>\r\n                                    <Grid item xs={2} className={classes.menuDivButton} align=\"center\" />\r\n                                    <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                        <Button variant=\"contained\"\r\n                                            color=\"primary\"\r\n                                            className={classes.menuButton}\r\n                                            onClick={() => (click('openAboutPage'))} >\r\n                                            {lang.currLang.buttons.about}\r\n                                        </Button>\r\n                                    </Grid>\r\n                                </Grid>\r\n                                <Grid item xs={3} />\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item xs={1} className={classes.mainGridFooterItem} >\r\n                            <Grid className={classes.menuButtonContainerFooterLanguageButtons}\r\n                                container\r\n                                direction=\"row\"\r\n                                justify=\"center\"\r\n                                alignItems=\"center\" >\r\n                                <Grid item>\r\n                                    <Button onClick={() => { changeLanguage('Ru') }}>\r\n                                        RU\r\n                                    </Button>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Button onClick={() => { changeLanguage('En') }}>\r\n                                        EN\r\n                                    </Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </div >\r\n\r\n                <div className={classes.aboutPage}\r\n                    style={page.aboutPage === true\r\n                        ? { transform: 'translateY(-100%)' }\r\n                        : { transform: 'translateY(0%)' }\r\n                    }\r\n                >\r\n                    <Grid className={classes.aboutGridContainer}\r\n                        container\r\n                        direction=\"column\"\r\n                        justify=\"center\"\r\n                        alignItems=\"stretch\"\r\n                        spacing={5} >\r\n                        <Grid item\r\n                            className={classes.aboutGridItem}\r\n                            align='center'>\r\n                            <Paper className={classes.aboutPaper}>\r\n                                <Typography>\r\n                                    {lang.currLang.texts.about}\r\n                                </Typography>\r\n                            </Paper>\r\n                        </Grid>\r\n                        <Grid item\r\n                            className={classes.aboutGridItem}\r\n                            align='center'>\r\n                            <Button variant=\"contained\"\r\n                                color=\"primary\"\r\n                                className={classes.menuButton}\r\n                                onClick={() => (click('closeAboutPage'))} >\r\n                                {lang.currLang.buttons.close}\r\n                            </Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                </div>\r\n            </div >\r\n\r\n            <Snackbar\r\n                open={openSnackbar}\r\n                onClose={handleCloseSnackbar}\r\n                autoHideDuration={3000}>\r\n                <MySnackbarContentWrapper\r\n                    className={classes.margin}\r\n                    onClose={handleCloseSnackbar}\r\n                    variant='error'\r\n                    message={snackbarMessage}\r\n                />\r\n            </Snackbar>\r\n\r\n        </MuiThemeProvider>\r\n    )\r\n}\r\n\r\nSign.propTypes = {\r\n    setCurrLang: PropTypes.func.isRequired,\r\n    setUserState: PropTypes.func.isRequired,\r\n    lang: PropTypes.object.isRequired,\r\n    auth: PropTypes.object.isRequired,\r\n    errors: PropTypes.object.isRequired,\r\n}\r\n\r\nMySnackbarContentWrapper.propTypes = {\r\n    className: PropTypes.string,\r\n    message: PropTypes.string,\r\n    onClose: PropTypes.func,\r\n    variant: PropTypes.oneOf(['error', 'info', 'success', 'warning']).isRequired,\r\n};\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        store,\r\n        lang: store.lang,\r\n        auth: store.auth,\r\n        errors: store.errors,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setCurrLang: currLangState => dispatch(setCurrLang(currLangState)),\r\n        setUserState: State => dispatch(setUserState(State)),\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Sign);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { Router, Route, Switch } from \"react-router-dom\";\r\nimport './App.css';\r\n\r\nimport history from '../history';\r\nimport { store } from \"../store\";\r\nimport { CheckTimeOut } from '../utils/CheckLoginTimeOut';\r\nimport setAuthToken from \"../utils/setAuthToken\";\r\nimport { SET_CURRENT_USER, SET_THEME_MODE } from \"../actions/types\"\r\nimport { setTheme } from '../actions/Actions';\r\nimport PrivateRoute from \"../components/PrivateRoute\";\r\n\r\nimport AddDream from './AddDream';\r\nimport ViewDreams from './ViewDreams';\r\nimport AddCDream from './AddCDream';\r\nimport MainPage from \"./MainPage\";\r\nimport Sign from './Sign';\r\n\r\nimport { useStyles, params, randomBetween } from '../styles/Styles';\r\n\r\nlet check = CheckTimeOut();\r\nif (!check) {\r\n    localStorage.removeItem(\"jwtToken\");\r\n    setAuthToken(false);\r\n    store.dispatch({\r\n        type: SET_CURRENT_USER,\r\n        payload: null\r\n    });\r\n    history.push(\"/\");\r\n}\r\nelse {\r\n    history.push(\"/luciddreams\");\r\n}\r\n\r\nlet stars = [];\r\nlet clouds = [];\r\n\r\nif (new Date().getHours() >= 16) {\r\n    store.dispatch({\r\n        type: SET_THEME_MODE,\r\n        palette: {\r\n            type: \"dark\",\r\n            primary: { main: \"#f9a825\" },\r\n            secondary: { main: \"#f50057\" },\r\n            error: { main: \"#cc0000\" },\r\n        }\r\n    });\r\n}\r\nelse {\r\n    store.dispatch({\r\n        type: SET_THEME_MODE,\r\n        palette: {\r\n            type: \"light\",\r\n            primary: { main: \"#3f51b5\" },\r\n            secondary: { main: \"#f50057\" },\r\n            error: { main: \"#cc0000\" },\r\n        }\r\n    });\r\n}\r\n\r\nfunction App(props) {\r\n    const classes = useStyles();\r\n\r\n    stars = [];\r\n    clouds = [];\r\n\r\n    for (let i = 0; i < params.amountStars; i++) {\r\n        let size = Math.round(Math.random() * 10) === 0\r\n            ? params.size.giant\r\n            : randomBetween(params.size.min, params.size.max);\r\n        stars.push(\r\n            <div\r\n                className={classes.AppStar}\r\n                key={i + 'AppStar'}\r\n                style={{\r\n                    left: randomBetween(0, 100) + \"%\",\r\n                    top: randomBetween(0, 100) + \"%\",\r\n                    width: size + \"px\",\r\n                    height: size + \"px\",\r\n                    boxShadow: \"0 0 \" + size + \"px \" + size / 2 + \"px #043668\",\r\n                    animationDuration: randomBetween(params.duration.min, params.duration.max) + \"s\",\r\n                }}\r\n            />\r\n        );\r\n    }\r\n\r\n    for (let i = 0; i < params.amountClouds; i++) {\r\n        let left = Math.round(Math.random() * 50 + 90);\r\n        let top = Math.round(Math.random() * 100 / 100 * 90);\r\n        let scale = Math.random() * 1.5 - 0.5;\r\n        let opacity = Math.random() * 90 / 100;\r\n        let speed = Math.random() * 30 + 15;\r\n        clouds.push(\r\n            <div className={classes.AppCloud}\r\n                key={i + 'AppCloud'}\r\n                style={{\r\n                    left: left + '%',\r\n                    top: top + '%',\r\n                    width: '400px',\r\n                    height: '100px',\r\n                    transform: 'scale(' + scale + ')',\r\n                    opacity: opacity,\r\n                    animationDuration: speed + 's',\r\n                }}\r\n            />\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Router history={history}>\r\n\r\n            <div className={classes.AppDivDark}>\r\n                <div className={classes.AppDivLight}\r\n                    style={props.type === \"light\"\r\n                        ? { opacity: 1, }\r\n                        : { opacity: 0, }}\r\n                />\r\n                {props.type === \"light\"\r\n                    ?\r\n                    <div className={classes.AppCloudsDiv}\r\n                        style={props.type === \"light\"\r\n                            ? { opacity: 1, }\r\n                            : { opacity: 0, }}\r\n                    >\r\n                        {clouds}\r\n                    </div>\r\n                    :\r\n                    <div className={classes.AppStarsDiv}\r\n                        style={props.type === \"light\"\r\n                            ? { opacity: 0, }\r\n                            : { opacity: 1, }}\r\n                    >\r\n                        {stars}\r\n                    </div>\r\n                }\r\n            </div>\r\n\r\n            <Route exact path=\"/\" component={Sign} />\r\n            <Switch>\r\n                <PrivateRoute exact path=\"/luciddreams\" component={MainPage} />\r\n                <PrivateRoute exact path=\"/addcdream\" component={AddCDream} />\r\n                <PrivateRoute exact path=\"/adddream\" component={AddDream} />\r\n                <PrivateRoute exact path=\"/dreams\" component={ViewDreams} />\r\n            </Switch>\r\n        </Router>\r\n    );\r\n};\r\n\r\nApp.propTypes = {\r\n    type: PropTypes.string.isRequired,\r\n    setTheme: PropTypes.func.isRequired,\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        type: store.themeMode.palette.type,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setTheme: palette => dispatch(setTheme(palette)),\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(App);","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from \"./store\";\r\n\r\nReactDOM.render(\r\n    <div id='global'\r\n        style={{\r\n            overflow: 'auto',\r\n            height: '100%',\r\n            position: 'relative',\r\n        }}\r\n    >\r\n\r\n        <Provider store={store}>\r\n            <App />\r\n        </Provider>\r\n    </div>\r\n    , document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n\r\n"],"sourceRoot":""}