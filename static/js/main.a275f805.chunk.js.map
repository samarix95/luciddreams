{"version":3,"sources":["img/map.png","img/sun.png","img/moon.png","img/astronaut.png","history.js","actions/types.js","dictionary/en.js","reducers/currLang.js","reducers/cloud.js","reducers/star.js","reducers/themeMode.js","reducers/authReducer.js","reducers/errorReducer.js","reducers/index.js","store.js","utils/setAuthToken.js","utils/CheckLoginTimeOut.js","components/PrivateRoute.js","styles/Styles.js","components/Config.js","components/AddDream.jsx","components/muiltiple/DreamCard.jsx","components/ViewDreams.jsx","components/AddCDream.jsx","actions/Actions.js","dictionary/ru.js","components/MainPage.jsx","components/Sign.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","createBrowserHistory","GET_ERRORS","SET_CURRENT_USER","SET_CLOUD","CLEAR_CLOUD","SET_STAR","CLEAR_STAR","SET_LANG","SET_THEME_MODE","words","current","buttons","signIn","signUp","dreamJoirnal","addDream","addCDream","techniques","adventures","close","about","cancel","add","texts","or","nickname","password","passwordAgain","sucessRegistration","hello","changleLanguage","success","title","content","tags","technics","rating","Dream","Cdream","errors","emailLenght","nicknameLenght","passwordLenght","password2Lenght","passwordsCompare","UserNotExist","EmailIsNotValid","IncorrectPassword","EmailIsBusy","PasswordLenght5Symbols","NotLogin","EmptyTitle","EmptyDream","initialState","currLang","EnDict","clouds","stars","palette","type","primary","main","secondary","isempty","require","isAuthenticated","user","loading","rootReducer","combineReducers","lang","state","action","currLangState","cloudState","starState","themeMode","themeModeState","auth","payload","middleware","thunk","store","createStore","applyMiddleware","setAuthToken","token","axios","defaults","headers","common","CheckTimeOut","localStorage","jwtToken","decoded","jwt_decode","dispatch","currentTime","Date","now","exp","connect","Component","component","rest","render","props","to","params","amountStars","amountClouds","size","min","max","giant","duration","variantIcon","CheckCircleIcon","warning","WarningIcon","error","ErrorIcon","info","InfoIcon","randomBetween","a","b","Math","random","useStyles","makeStyles","theme","avatarRoot","display","flexWrap","overflow","smallAvatar","margin","spacing","width","height","smallChip","mainGridDreamsBodyItemContainer","position","boxSizing","maxHeight","borderRadius","mainGridDreamsBodyItemContainerPaper","opacity","mainGridDreamsBodyItem","mainGridDreamsContainer","left","transform","card","maxWidth","expand","marginLeft","transition","transitions","create","shortest","expandOpen","textField","root","flexGrow","window","innerHeight","mainPage","top","aboutPage","AppDivDark","background","zIndex","AppDivLight","AppStarsDiv","AppCloudsDiv","AppStar","filter","animation","AppCloud","backgroundRepeat","backgroundImage","image","SkyDiv","MoonSrc","backgroundSize","MoonImg","SunSrc","SunImg","AstronautButton","AstronautDiv","AstronautImg","MapButton","MapDiv","MapImg","mainGridContainer","mainGridHeadItem","mainGridBodyItem","menuButtonContainerItem","menuButtonContainer","menuButtonGrid","menuDivButton","padding","menuButton","minWidth","actionButton","mainGridFooterItem","menuButtonContainerFooterLanguageButtons","aboutGridContainer","fullMinWidth","inputDiv","inputScrollableDiv","chips","chip","aboutGridItem","mainPaperGridBodyItem","paper","minMargin","VKLoginDiv","VKLoginButton","boxShadow","instance","baseURL","timeout","MenuProps","PaperProps","style","ITEM_HEIGHT","getStyles","name","selectedLocations","fontWeight","indexOf","typography","fontWeightSmall","fontWeightMedium","useStyles1","backgroundColor","dark","icon","fontSize","iconVariant","marginRight","message","alignItems","MySnackbarContentWrapper","classes","className","onClose","Icon","SnackbarContent","clsx","aria-describedby","id","Typography","align","variant","IconButton","key","aria-label","color","onClick","useTheme","history","muiTheme","createMuiTheme","Object","assign","overrides","MUIRichTextEditor","border","container","toolbar","justifyContent","minHeight","borderBottom","placeHolder","editor","editorContainer","React","useState","openSnackbar","setOpenSnackbar","snackbarMessage","setSnackbarMessage","isLoading","setIsLoading","titleText","setTitleText","contentText","setContentText","setselectedLocations","locations","setLocations","handleCloseSnackbar","event","reason","useEffect","get","then","res","data","catch","err","console","log","CssBaseline","Grid","direction","justify","item","xs","Paper","TextField","required","label","onChange","e","target","value","controls","raw","convertToRaw","getCurrentContent","inlineToolbar","customControls","inlineStyle","FormControl","InputLabel","Select","labelId","multiple","input","Input","renderValue","selected","map","Chip","avatar","Avatar","alt","find","name_rus","name_eng","src","img_url","keys","MenuItem","LinearProgress","Button","push","havErr","length","blocks","text","convert","JSON","stringify","postData","create_user","post_type","post","savepost","Snackbar","open","autoHideDuration","DreamCard","post_title","create_date","post_content","expanded","setExpanded","handleExpandClick","marginTop","marginBottom","Card","CardHeader","subheader","CardContent","tag","Tooltip","disableFocusListener","disableTouchListener","technic","CardActions","disableSpacing","aria-expanded","Collapse","in","unmountOnExit","replace","readOnly","dreams","setDreams","zeroMinWidth","CircularProgress","Container","selectedTechnics","setselectedTechnics","realisticsValue","setRealisticsValue","setTechnics","Box","borderColor","textAlign","Rating","newValue","setCloud","setStar","setCurrLang","setThemeMode","TransitionDown","Slide","green","amber","SnackbarContentWrapper","setCurrLangAction","setThemeModeAction","paletteState","undefined","prevLanguage","setPrevLanguage","openLangSnakbar","setOpenLangSnakbar","openMessageSnackbar","setOpenMessageSnackbar","langSnakbarMessage","setLangSnakbarMessage","setTransition","infoSnackbar","setInfoSnackbar","changeLanguage","language","RuDict","handleCloseLangSnakbar","handleCloseMessageSnackbar","i","round","animationDuration","scale","speed","times_mode","anchorOrigin","vertical","horizontal","TransitionComponent","newLang","newUserData","newInfoSnackbar","ButtonBase","focusRipple","alert","newPaletteType","primaryColor","secondaryColor","Transition","forwardRef","ref","setUserState","State","email","loginData","setLoginData","password2","registData","setRegistData","emailErr","emailErrText","nicknameErr","nicknameErrText","passwordErr","passwordErrText","password2Err","password2ErrText","regFieldErrors","setRegFieldErrors","showPassword","setShowPassword","openLogin","setOpenLogin","openRegist","setOpenRegist","page","setPage","handleMouseDownPassword","preventDefault","singUp","isErr","newRegFieldErrors","newRegistData","click","response","newPages","setItem","passwordincorrect","getHours","Dialog","keepMounted","aria-labelledby","DialogTitle","DialogContent","newLoginData","changeAuthLogin","changeAuthPassword","InputProps","endAdornment","InputAdornment","tabIndex","edge","onMouseDown","button","disabled","path","mdiVk","DialogActions","helperText","changeRegistLogin","changeRegistNickname","changeRegistPassword","changeRegistPassword2","aboutPaper","App","removeItem","exact","Sign","MainPage","AddCDream","AddDream","ViewDreams","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a275f805.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/map.71ce46a8.png\";","module.exports = __webpack_public_path__ + \"static/media/sun.4f817e2f.png\";","module.exports = __webpack_public_path__ + \"static/media/moon.ca0fb531.png\";","module.exports = __webpack_public_path__ + \"static/media/astronaut.7219d35a.png\";","import { createBrowserHistory } from \"history\";\r\n\r\nexport default createBrowserHistory();","export const GET_ERRORS = \"GET_ERRORS\";\r\nexport const USER_LOADING = \"USER_LOADING\";\r\nexport const SET_CURRENT_USER = \"SET_CURRENT_USER\";\r\n\r\nexport const SET_CLOUD = 'SET_CLOUD'\r\nexport const CLEAR_CLOUD = 'CLEAR_CLOUD'\r\n\r\nexport const SET_STAR = 'SET_STAR'\r\nexport const CLEAR_STAR = 'CLEAR_STAR'\r\n\r\nexport const SET_LANG = 'SET_LANG'\r\nexport const SET_THEME_MODE = 'SET_THEME_MODE'","const words = {\r\n    current: 'En',\r\n    buttons : {\r\n        signIn: 'Sign in',\r\n        signUp: 'Sign up',\r\n        dreamJoirnal: 'Dream joirnal',\r\n        addDream: 'Add dream',\r\n        addCDream: 'Add C-dream',\r\n        techniques: 'Techniques',\r\n        adventures: 'Adventures',\r\n        close: 'Back',\r\n        about: 'About us',\r\n        cancel: 'Cancel',\r\n        add: 'Add',\r\n    },\r\n    texts: {\r\n        about: 'About us About us About us About us About us About us About us About us About us About us ',\r\n        or: 'OR',\r\n        nickname: 'Nickname',\r\n        password: 'Password',\r\n        passwordAgain: 'Password again',\r\n        cancel: 'Cancel',\r\n        sucessRegistration: 'You are sign up successful',\r\n        hello: 'Hello, ',\r\n        changleLanguage: 'Save change language to ',\r\n        success: 'Success',\r\n        title: 'Title',\r\n        content: \"What's a dream\",\r\n        tags: 'Locations',\r\n        technics: 'Technics',\r\n        rating: 'Realistics',\r\n        Dream: 'Regular dream',\r\n        Cdream: 'C-dream',\r\n    },\r\n    errors: {\r\n        emailLenght: 'Email must not be empty',\r\n        nicknameLenght: 'Nickname must not be empty',\r\n        passwordLenght: 'Password must not be empty',\r\n        password2Lenght: 'Password must not be empty',\r\n        passwordsCompare: 'Passwords not equal',\r\n        UserNotExist: 'Invalid email or password',\r\n        EmailIsNotValid: 'Invalid email',\r\n        IncorrectPassword: 'Invalid email or password',\r\n        EmailIsBusy: 'Email is busy',\r\n        PasswordLenght5Symbols: 'Minimum password length: 5 symbols',\r\n        NotLogin: 'You not loggin in',\r\n        EmptyTitle: 'Title must not be empty',\r\n        EmptyDream: 'Dream must not be empty',\r\n    },\r\n};\r\n\r\nexport default words;","import { SET_LANG } from '../actions/types';\r\nimport EnDict from '../dictionary/en';\r\n\r\nconst initialState = {\r\n    currLang: EnDict,\r\n}\r\n\r\nexport function currLangReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case SET_LANG:\r\n            return { ...state, currLang: action.currLangState }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}","import { SET_CLOUD, CLEAR_CLOUD } from '../actions/types';\r\n\r\nconst initialState = {\r\n\tclouds: [],\r\n}\r\n\r\nexport function cloudsReducer(state = initialState, action) {\r\n\tswitch (action.type) {\r\n\t\tcase SET_CLOUD:\r\n\t\t\treturn {\r\n\t\t\t\t...state, clouds: [...state.clouds, action.cloudState]\r\n\t\t\t}\r\n\t\tcase CLEAR_CLOUD:\r\n\t\t\treturn {\r\n\t\t\t\t...state, clouds: []\r\n\t\t\t}\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n}","import { SET_STAR, CLEAR_STAR } from '../actions/types';\r\n\r\nconst initialState = {\r\n\tstars: [],\r\n}\r\n\r\nexport function starsReducer(state = initialState, action) {\r\n\tswitch (action.type) {\r\n\t\tcase SET_STAR:\r\n\t\t\treturn {\r\n\t\t\t\t...state, stars: [...state.stars, action.starState]\r\n\t\t\t}\r\n\t\tcase CLEAR_STAR:\r\n\t\t\treturn {\r\n\t\t\t\t...state, stars: []\r\n\t\t\t}\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n}","import { SET_THEME_MODE } from '../actions/types';\r\n\r\nconst initialState = {\r\n    palette: {\r\n        type: \"dark\",\r\n        primary: { main: \"#3f51b5\" },\r\n        secondary: { main: \"#f50057\" },\r\n    },\r\n}\r\n\r\nexport function themeReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case SET_THEME_MODE:\r\n            return { ...state, palette: action.themeModeState }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}","import { SET_CURRENT_USER, USER_LOADING } from \"../actions/types\";\r\n\r\nconst isempty = require(\"is-empty\");\r\n\r\nconst initialState = {\r\n    isAuthenticated: false,\r\n    user: {},\r\n    loading: false\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case SET_CURRENT_USER:\r\n            return {\r\n                ...state,\r\n                isAuthenticated: !isempty(action.payload),\r\n                user: action.payload\r\n            };\r\n        case USER_LOADING:\r\n            return {\r\n                ...state,\r\n                loading: true\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}","import { GET_ERRORS } from \"../actions/types\";\r\nconst initialState = {};\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case GET_ERRORS:\r\n            return action.payload;\r\n        default:\r\n            return state;\r\n    }\r\n}","import { combineReducers } from 'redux';\r\nimport { currLangReducer } from './currLang';\r\nimport { cloudsReducer } from './cloud';\r\nimport { starsReducer } from './star';\r\nimport { themeReducer } from './themeMode';\r\nimport authReducer from './authReducer';\r\nimport errorReducer from './errorReducer';\r\n\r\nexport const rootReducer = combineReducers({\r\n    lang: currLangReducer,\r\n    clouds: cloudsReducer,\r\n    stars: starsReducer,\r\n    themeMode: themeReducer,\r\n    auth: authReducer,\r\n    errors: errorReducer,\r\n});","import { createStore, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { rootReducer } from './reducers';\r\n\r\nconst middleware = [thunk];\r\n\r\nexport const store = createStore(\r\n    rootReducer,\r\n    {},\r\n    applyMiddleware(...middleware)\r\n);","import axios from \"axios\";\r\n\r\nconst setAuthToken = token => {\r\n    if (token) {\r\n        // Apply authorization token to every request if logged in\r\n        axios.defaults.headers.common[\"Authorization\"] = token;\r\n    }\r\n    else {\r\n        // Delete auth header\r\n        delete axios.defaults.headers.common[\"Authorization\"];\r\n    }\r\n};\r\n\r\nexport default setAuthToken;","import jwt_decode from \"jwt-decode\";\r\n\r\nimport { store } from \"../store\";\r\nimport setAuthToken from \"../utils/setAuthToken\";\r\nimport { SET_CURRENT_USER } from \"../actions/types\"\r\n\r\nexport function CheckTimeOut() {\r\n    if (localStorage.jwtToken) {\r\n        const token = localStorage.jwtToken;\r\n        setAuthToken(token);\r\n        const decoded = jwt_decode(token);\r\n        store.dispatch({\r\n            type: SET_CURRENT_USER,\r\n            payload: decoded\r\n        });\r\n\r\n        const currentTime = Date.now() / 1000; // to get in milliseconds\r\n        if (decoded.exp < currentTime) {\r\n            return false;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }\r\n}","import React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst PrivateRoute = ({ component: Component, auth, ...rest }) => (\r\n    <Route\r\n        {...rest}\r\n        render={props =>\r\n            auth.isAuthenticated === true\r\n                ? <Component {...props} />\r\n                : <Redirect to=\"/\" />\r\n        }\r\n    />\r\n);\r\n\r\nPrivateRoute.propTypes = {\r\n    auth: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    auth: state.auth\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps\r\n)(PrivateRoute);","import { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\nimport WarningIcon from '@material-ui/icons/Warning';\r\nimport ErrorIcon from '@material-ui/icons/Error';\r\nimport InfoIcon from '@material-ui/icons/Info';\r\n\r\nimport MapImg from '../img/map.png';\r\nimport SunImg from '../img/sun.png';\r\nimport MoonImg from '../img/moon.png';\r\nimport AstronautImg from '../img/astronaut.png';\r\n\r\nexport const params = {\r\n    amountStars: 5,\r\n    amountClouds: 1,\r\n    size: {\r\n        min: 1,\r\n        max: 5,\r\n        giant: 9\r\n    },\r\n    duration: {\r\n        min: 5,\r\n        max: 25,\r\n    }\r\n}\r\n\r\nexport const variantIcon = {\r\n    success: CheckCircleIcon,\r\n    warning: WarningIcon,\r\n    error: ErrorIcon,\r\n    info: InfoIcon,\r\n};\r\n\r\nexport function randomBetween(a, b) {\r\n    return (a + (Math.random() * (b - a)));\r\n}\r\n\r\nexport const useStyles = makeStyles(theme => ({\r\n    avatarRoot: {\r\n        display: \"flex\",\r\n        flexWrap: \"wrap\",\r\n        overflow: 'auto',\r\n    },\r\n    smallAvatar: {\r\n        margin: theme.spacing(0.5),\r\n        width: theme.spacing(5),\r\n        height: theme.spacing(5),\r\n    },\r\n    smallChip: {\r\n        margin: theme.spacing(0.5),\r\n    },\r\n    mainGridDreamsBodyItemContainer: {\r\n        position: 'absolute',\r\n        boxSizing: 'border-box',\r\n        maxHeight: '90%',\r\n        overflow: 'auto',\r\n        borderRadius: '4px',\r\n    },\r\n    mainGridDreamsBodyItemContainerPaper: {\r\n        height: '100%',\r\n        opacity: 0.9,\r\n    },\r\n    mainGridDreamsBodyItem: {\r\n        overflow: 'hidden',\r\n    },\r\n    mainGridDreamsContainer: {\r\n        height: '100%',\r\n        position: 'relative',\r\n        width: '90%',\r\n        left: '50%',\r\n        transform: 'translateX(-50%)',\r\n    },\r\n    card: {\r\n        maxWidth: '100%',\r\n        height: '100%',\r\n    },\r\n    expand: {\r\n        transform: \"rotate(0deg)\",\r\n        marginLeft: \"auto\",\r\n        transition: theme.transitions.create(\"transform\", {\r\n            duration: theme.transitions.duration.shortest\r\n        })\r\n    },\r\n    expandOpen: {\r\n        transform: \"rotate(180deg)\"\r\n    },\r\n    textField: {\r\n        width: '100%',\r\n    },\r\n    margin: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    root: {\r\n        flexGrow: 1,\r\n        position: 'relative',\r\n        width: '100%',\r\n        height: window.innerHeight - 1,\r\n        overflow: 'hidden',\r\n    },\r\n    mainPage: {\r\n        top: 0,\r\n        left: 0,\r\n        position: 'absolute',\r\n        transition: 'all 0.3s linear',\r\n        width: '100%',\r\n        height: '100%',\r\n    },\r\n    aboutPage: {\r\n        position: 'absolute',\r\n        transition: 'all 0.3s linear',\r\n        top: '100%',\r\n        width: '100%',\r\n        height: '100%',\r\n    },\r\n    AppDivDark: {\r\n        position: 'fixed',\r\n        background: 'radial-gradient(ellipse at center, rgba(8, 25, 42, 1) 20%, rgba(1, 4, 6, 1) 100%)',\r\n        opacity: 1,\r\n        margin: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        zIndex: -3,\r\n    },\r\n    AppDivLight: {\r\n        position: 'absolute',\r\n        background: 'radial-gradient(ellipse at center, rgba(207, 225, 237, 1) 20%, rgba(127, 170, 202, 1) 100%)',\r\n        transition: 'opacity 0.5s linear',\r\n        margin: 0,\r\n        opacity: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        zIndex: -3,\r\n    },\r\n    AppStarsDiv: {\r\n        transition: 'opacity 0.5s linear',\r\n        opacity: 0,\r\n        position: 'absolute',\r\n        width: '100%',\r\n        height: '100%',\r\n        overflow: 'hidden',\r\n        zIndex: -2,\r\n    },\r\n    AppCloudsDiv: {\r\n        transition: 'opacity 0.5s linear',\r\n        opacity: 0,\r\n        position: 'absolute',\r\n        width: '100%',\r\n        height: '100%',\r\n        overflow: 'hidden',\r\n        zIndex: -2,\r\n    },\r\n    AppStar: {\r\n        borderRadius: '100%',\r\n        position: 'absolute',\r\n        background: 'radial-gradient(ellipse at center, rgba(177, 198, 219, 1) 2%, rgba(5, 63, 118, 1) 100%)',\r\n        filter: 'blur(1px)',\r\n        animation: '$shine infinite alternate',\r\n        zIndex: -1,\r\n    },\r\n    AppCloud: {\r\n        position: 'absolute',\r\n        backgroundRepeat: 'no-repeat',\r\n        backgroundImage: 'url(https://www.turbotobias.dk/wp-content/uploads/2019/03/White-cloud-type3.svg)',\r\n        animation: '$moveclouds infinite linear',\r\n        zIndex: -1,\r\n    },\r\n    image: {\r\n        position: 'relative',\r\n        left: '50%',\r\n        top: '25%',\r\n        transform: 'translate(-50%, -25%)',\r\n        width: '35vw !important',\r\n        height: '35vw',\r\n        borderRadius: '50%',\r\n    },\r\n    SkyDiv: {\r\n        position: 'absolute',\r\n        borderRadius: '50%',\r\n        top: 0,\r\n        left: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        overflow: 'hidden',\r\n    },\r\n    MoonSrc: {\r\n        backgroundSize: 'cover',\r\n        background: 'url(' + MoonImg + ')',\r\n        backgroundRepeat: 'no-repeat',\r\n        position: 'absolute',\r\n        top: 0,\r\n        left: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        transition: 'all 0.3s linear',\r\n    },\r\n    SunSrc: {\r\n        backgroundSize: 'cover',\r\n        background: 'url(' + SunImg + ')',\r\n        backgroundRepeat: 'no-repeat',\r\n        position: 'absolute',\r\n        top: 0,\r\n        left: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        transition: 'all 0.3s linear',\r\n    },\r\n    AstronautButton: {\r\n        position: 'relative',\r\n        left: '50%',\r\n        top: '50%',\r\n        transform: 'translate(-50%, -50%)',\r\n        width: '25vw !important',\r\n        height: '25vw',\r\n        borderRadius: '50%',\r\n    },\r\n    AstronautDiv: {\r\n        position: 'absolute',\r\n        borderRadius: '50%',\r\n        top: 0,\r\n        left: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        overflow: 'hidden',\r\n        animation: '$swinging 30s infinite linear',\r\n    },\r\n    AstronautImg: {\r\n        backgroundSize: 'cover',\r\n        background: 'url(' + AstronautImg + ')',\r\n        backgroundRepeat: 'no-repeat',\r\n        position: 'absolute',\r\n        top: 0,\r\n        left: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        transition: 'filter 0.5s linear',\r\n    },\r\n    MapButton: {\r\n        position: 'relative',\r\n        left: '50%',\r\n        top: '50%',\r\n        transform: 'translate(-50%, -50%)',\r\n        width: '25vw !important',\r\n        height: '25vw',\r\n        borderRadius: '10%',\r\n    },\r\n    MapDiv: {\r\n        position: 'absolute',\r\n        top: 0,\r\n        left: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        overflow: 'hidden',\r\n        animation: '$swinging 30s infinite linear',\r\n    },\r\n    MapImg: {\r\n        backgroundSize: 'cover',\r\n        background: 'url(' + MapImg + ')',\r\n        backgroundRepeat: 'no-repeat',\r\n        position: 'absolute',\r\n        top: 0,\r\n        left: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        transition: 'filter 0.5s linear',\r\n    },\r\n    mainGridContainer: {\r\n        height: '100%',\r\n    },\r\n    mainGridHeadItem: {\r\n        maxWidth: '100% !Important',\r\n    },\r\n    mainGridBodyItem: {\r\n        maxWidth: '100% !Important',\r\n    },\r\n    menuButtonContainerItem: {\r\n        maxWidth: '100% !Important',\r\n    },\r\n    menuButtonContainer: {\r\n        height: '100% !Important',\r\n    },\r\n    menuButtonGrid: {\r\n    },\r\n    menuDivButton: {\r\n        maxWidth: '100% !Important',\r\n        padding: '10px',\r\n    },\r\n    menuButton: {\r\n        minWidth: '55vw',\r\n        maxWidth: '55vw',\r\n    },\r\n    actionButton: {\r\n        minWidth: '40vw',\r\n        maxWidth: '40vw',\r\n    },\r\n    mainGridFooterItem: {\r\n        maxWidth: '100% !Important',\r\n    },\r\n    menuButtonContainerFooterLanguageButtons: {\r\n    },\r\n    aboutGridContainer: {\r\n        width: '100%',\r\n        height: '100%',\r\n        margin: 0,\r\n    },\r\n    fullMinWidth: {\r\n        minWidth: '100% !Important',\r\n        position: 'relative'\r\n    },\r\n    inputDiv: {\r\n        minWidth: '85% !Important',\r\n        maxWidth: '85% !Important',\r\n        position: 'absolute',\r\n        top: '50%',\r\n        left: '50%',\r\n        transform: 'translate(-50%, -50%)',\r\n        opacity: 1,\r\n    },\r\n    inputScrollableDiv: {\r\n        minWidth: '85% !Important',\r\n        maxWidth: '85% !Important',\r\n        height: '100%',\r\n        position: 'absolute',\r\n        top: '50%',\r\n        left: '50%',\r\n        transform: 'translate(-50%, -50%)',\r\n        opacity: 1,\r\n        //overflowY: 'auto',\r\n    },\r\n    chips: {\r\n        display: \"flex\",\r\n        flexWrap: \"wrap\"\r\n    },\r\n    chip: {\r\n        margin: 1\r\n    },\r\n    aboutGridItem: {\r\n        width: '100%',\r\n    },\r\n    mainPaperGridBodyItem: {\r\n        maxWidth: '100% !Important',\r\n    },\r\n    paper: {\r\n        height: '90%',\r\n        margin: theme.spacing(3, 2),\r\n        opacity: 0.9,\r\n    },\r\n    minMargin: {\r\n        margin: theme.spacing(0.5),\r\n    },\r\n    VKLoginDiv: {\r\n        position: 'absolute',\r\n        width: '15vw',\r\n        height: '15vw',\r\n    },\r\n    VKLoginButton: {\r\n        background: 'url(https://dressirovka70.ru/wp-content/uploads/2019/10/1200px-VK.com-logo.svg1_-1024x1024.png)',\r\n        boxShadow: '0px 3px 1px -2px rgba(0,0,0,0.2), 0px 2px 2px 0px rgba(0,0,0,0.14), 0px 1px 5px 0px rgba(0,0,0,0.12)',\r\n        backgroundSize: 'cover',\r\n        borderRadius: '25%',\r\n        width: '100%',\r\n        height: '100%',\r\n    },\r\n    \"@keyframes shine\": {\r\n        \"0%\": {\r\n            transform: 'scale(1)',\r\n            opacity: '1',\r\n        },\r\n        \"20%\": {\r\n            transform: 'scale(.9)',\r\n            opacity: '.8',\r\n        },\r\n        \"40%\": {\r\n            transform: 'scale(1)',\r\n            opacity: '.9',\r\n        },\r\n        \"60%\": {\r\n            transform: 'scale(.2)',\r\n            opacity: '.1',\r\n        },\r\n        \"80%\": {\r\n            transform: 'scale(.5)',\r\n            opacity: '.5',\r\n        },\r\n        \"100%\": {\r\n            transform: 'scale(.9)',\r\n            opacity: '.9',\r\n        },\r\n    },\r\n    \"@keyframes moveclouds\": {\r\n        '100%': {\r\n            left: '-100%',\r\n        },\r\n    },\r\n    \"@keyframes swinging\": {\r\n        '0%': {\r\n            transform: 'rotate(0)',\r\n        },\r\n        '10%': {\r\n            transform: 'rotate(12deg)',\r\n        },\r\n        '20%': {\r\n            transform: 'rotate(-10deg)',\r\n        },\r\n        '30%': {\r\n            transform: 'rotate(9deg)',\r\n        },\r\n        '40%': {\r\n            transform: 'rotate(-8deg)',\r\n        },\r\n        '50%': {\r\n            transform: 'rotate(7deg)',\r\n        },\r\n        '60%': {\r\n            transform: 'rotate(-6deg)',\r\n        },\r\n        '70%': {\r\n            transform: 'rotate(5deg)',\r\n        },\r\n        '80%': {\r\n            transform: 'rotate(-4deg)',\r\n        },\r\n        '90%': {\r\n            transform: 'rotate(3deg)',\r\n        },\r\n        '100%': {\r\n            transform: 'rotate(0)',\r\n        },\r\n    }\r\n}));","import axios from \"axios\";\r\n\r\n\r\nexport const instance = axios.create({\r\n    baseURL: 'https://ldserver.herokuapp.com',\r\n    timeout: 10000,\r\n    headers: { \"Access-Control-Allow-Origin\": \"*\" }\r\n});","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\n\r\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Typography from '@material-ui/core/Typography';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport Button from '@material-ui/core/Button';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Input from \"@material-ui/core/Input\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport MUIRichTextEditor from 'mui-rte';\r\nimport { convertToRaw } from 'draft-js';\r\n\r\nimport { MuiThemeProvider, createMuiTheme, useTheme, makeStyles } from '@material-ui/core/styles';\r\n\r\nimport FormatColorFillIcon from '@material-ui/icons/FormatColorFill';\r\nimport ErrorIcon from '@material-ui/icons/Error';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nimport { useStyles } from '../styles/Styles';\r\n\r\nimport { instance } from './Config';\r\n\r\nconst ITEM_HEIGHT = 48;\r\nconst ITEM_PADDING_TOP = 8;\r\nconst MenuProps = {\r\n    PaperProps: {\r\n        style: {\r\n            maxHeight: ITEM_HEIGHT * 5 + ITEM_PADDING_TOP,\r\n            width: 250\r\n        }\r\n    }\r\n};\r\n\r\nfunction getStyles(name, selectedLocations, theme) {\r\n    return {\r\n        fontWeight:\r\n            selectedLocations.indexOf(name) === -1\r\n                ? theme.typography.fontWeightSmall\r\n                : theme.typography.fontWeightMedium\r\n    };\r\n}\r\n\r\nconst useStyles1 = makeStyles(theme => ({\r\n    error: {\r\n        backgroundColor: theme.palette.error.dark,\r\n    },\r\n    icon: {\r\n        fontSize: 20,\r\n    },\r\n    iconVariant: {\r\n        opacity: 0.9,\r\n        marginRight: theme.spacing(1),\r\n    },\r\n    message: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n    },\r\n}));\r\n\r\nfunction MySnackbarContentWrapper(props) {\r\n    const classes = useStyles1();\r\n    const { className, message, onClose } = props;\r\n    const Icon = ErrorIcon;\r\n\r\n    return (\r\n        <SnackbarContent\r\n            className={clsx(classes.error, className)}\r\n            aria-describedby=\"client-snackbar\"\r\n            message={\r\n                <span id=\"client-snackbar\" className={classes.message}>\r\n                    <Icon className={clsx(classes.icon, classes.iconVariant)} />\r\n                    <Typography className={classes.mainGridContainer}\r\n                        align='center'\r\n                        variant='body2'>\r\n                        {message}\r\n                    </Typography>\r\n                </span>\r\n            }\r\n            action={[\r\n                <IconButton key=\"close\" aria-label=\"close\" color=\"inherit\" onClick={onClose}>\r\n                    <CloseIcon className={classes.icon} />\r\n                </IconButton>,\r\n            ]}\r\n        />\r\n    );\r\n}\r\n\r\nfunction AddDream(props) {\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const { lang, themeMode, history, clouds, stars, auth } = props;\r\n    const muiTheme = createMuiTheme(themeMode);\r\n\r\n    Object.assign(muiTheme, {\r\n        overrides: {\r\n            MUIRichTextEditor: {\r\n                root: {\r\n                    border: \"1px solid gray\",\r\n                    borderRadius: '4px',\r\n                    height: '100%',\r\n                    //Весь компонент\r\n                },\r\n                container: {\r\n                    height: '100%',\r\n                    margin: '0 !Important',\r\n                    //Без шапки\r\n                },\r\n                toolbar: {\r\n                    //textAlign: 'center',\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    justifyContent: 'center',\r\n                    height: '20%',\r\n                    minHeight: '48px',\r\n                    margin: '0 !Important',\r\n                    borderBottom: \"1px solid gray\",\r\n                    borderRadius: '4px',\r\n                },\r\n                placeHolder: {\r\n                },\r\n                editor: {\r\n                    height: '69%',\r\n                    width: '100%',\r\n                    position: 'relative',\r\n                    overflow: 'hidden',\r\n                    //Эдитор\r\n                },\r\n                editorContainer: {\r\n                    padding: \"18.5px 14px\",\r\n                    borderRadius: '4px',\r\n                    position: 'relative',\r\n                    boxSizing: 'border-box',\r\n                    maxHeight: '100%',\r\n                    overflow: 'auto',\r\n                    //Редактор\r\n                },\r\n            }\r\n        }\r\n    })\r\n    const [openSnackbar, setOpenSnackbar] = React.useState(false);\r\n    const [snackbarMessage, setSnackbarMessage] = React.useState('');\r\n    const [isLoading, setIsLoading] = React.useState(false);\r\n    const [titleText, setTitleText] = React.useState();\r\n    const [contentText, setContentText] = React.useState();\r\n    const [selectedLocations, setselectedLocations] = React.useState([]);\r\n    const [locations, setLocations] = React.useState({});\r\n\r\n    const handleChangeLocations = (event) => {\r\n        setselectedLocations(event.target.value);\r\n    };\r\n    const changeTitle = (event) => {\r\n        setTitleText(event.target.value);\r\n    };\r\n    const changeContent = (state) => {\r\n        const raw = convertToRaw(state.getCurrentContent())\r\n        setContentText(raw);\r\n    };\r\n\r\n    const savepost = () => {\r\n        setIsLoading(true);\r\n        let havErr = false;\r\n\r\n        if (typeof (titleText) !== 'undefined') {\r\n            if (titleText.length === 0) {\r\n                setSnackbarMessage(lang.currLang.errors.EmptyTitle);\r\n                havErr = true;\r\n            }\r\n        }\r\n        else {\r\n            setSnackbarMessage(lang.currLang.errors.EmptyTitle);\r\n            havErr = true;\r\n        }\r\n\r\n        if (typeof (contentText) !== 'undefined') {\r\n            if (contentText.blocks[0].text.length === 0) {\r\n                setSnackbarMessage(lang.currLang.errors.EmptyDream);\r\n                havErr = true;\r\n            }\r\n        }\r\n        else {\r\n            setSnackbarMessage(lang.currLang.errors.EmptyDream);\r\n            havErr = true;\r\n        }\r\n\r\n        if (havErr) {\r\n            setOpenSnackbar(true);\r\n            setIsLoading(false);\r\n        }\r\n        else {\r\n\r\n            let convert = JSON.stringify(contentText);\r\n\r\n            let postData = {\r\n                title: titleText,\r\n                content: convert,\r\n                create_user: auth.user.id,\r\n                post_type: 0,\r\n                nickname: auth.user.nickname,\r\n                tags: selectedLocations,\r\n            }\r\n\r\n            instance\r\n                .post('/actions/users/createpost', postData)\r\n                .then(res => {\r\n                    setIsLoading(false);\r\n                    history.push(\"/luciddreams\")\r\n                })\r\n                .catch(err => {\r\n                    setIsLoading(false);\r\n                });\r\n        }\r\n    };\r\n\r\n    const handleCloseSnackbar = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setOpenSnackbar(false);\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        instance.get(\"/gettags\")\r\n            .then(res => {\r\n                setLocations(res.data);\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            });\r\n    }, []);\r\n\r\n    return (\r\n        <MuiThemeProvider theme={muiTheme}>\r\n            <CssBaseline />\r\n            <div className={classes.AppDivDark}>\r\n                <div className={classes.AppDivLight} style={themeMode.palette.type === \"light\" ? { opacity: 1, } : { opacity: 0, }} />\r\n                {themeMode.palette.type === \"light\"\r\n                    ?\r\n                    <div className={classes.AppCloudsDiv} style={themeMode.palette.type === \"light\" ? { opacity: 1, } : { opacity: 0, }} >\r\n                        {clouds.clouds}\r\n                    </div>\r\n                    :\r\n                    <div className={classes.AppStarsDiv} style={themeMode.palette.type === \"light\" ? { opacity: 0, } : { opacity: 1, }} >\r\n                        {stars.stars}\r\n                    </div>\r\n                }\r\n            </div>\r\n\r\n            <div className={classes.root} id='rootDiv'>\r\n\r\n                <Grid className={classes.mainGridContainer}\r\n                    container\r\n                    direction=\"column\"\r\n                    justify=\"center\"\r\n                    alignItems=\"stretch\" >\r\n\r\n                    <Grid item xs={11} className={classes.mainGridBodyItem}>\r\n\r\n                        <Paper className={classes.paper}>\r\n\r\n                            <Grid className={classes.mainGridContainer}\r\n                                container\r\n                                direction=\"column\"\r\n                                justify=\"center\"\r\n                                alignItems=\"center\"\r\n                                spacing={2}\r\n                            >\r\n\r\n                                <Grid item xs={2} className={classes.fullMinWidth}>\r\n                                    <TextField className={classes.inputDiv}\r\n                                        required\r\n                                        id=\"outlined-required\"\r\n                                        label={lang.currLang.texts.title}\r\n                                        variant=\"outlined\"\r\n                                        onChange={(e) => { changeTitle(e) }}\r\n                                    />\r\n                                </Grid>\r\n\r\n                                <Grid item xs={6} className={classes.fullMinWidth} >\r\n\r\n                                    <div className={classes.inputScrollableDiv}>\r\n\r\n                                        <MUIRichTextEditor\r\n                                            controls={[\r\n                                                \"bold\",\r\n                                                \"italic\",\r\n                                                \"underline\",\r\n                                                \"strikethrough\",\r\n                                            ]}\r\n                                            onChange={changeContent}\r\n                                            label={lang.currLang.texts.content}\r\n                                            inlineToolbar={false}\r\n                                            customControls={[\r\n                                                {\r\n                                                    name: \"colorfill\",\r\n                                                    icon: <FormatColorFillIcon />,\r\n                                                    type: \"inline\",\r\n                                                    inlineStyle: {\r\n                                                        backgroundColor: \"yellow\",\r\n                                                        color: \"black\"\r\n                                                    }\r\n                                                }\r\n                                            ]}\r\n                                        />\r\n\r\n                                    </div>\r\n\r\n                                </Grid>\r\n\r\n                                <Grid item xs={4} className={classes.fullMinWidth} >\r\n                                    <FormControl className={classes.inputDiv}>\r\n                                        <InputLabel id=\"location-chip-label\">\r\n                                            {lang.currLang.texts.tags}\r\n                                        </InputLabel>\r\n                                        <Select\r\n                                            labelId=\"location-chip-label\"\r\n                                            id=\"location-chip\"\r\n                                            multiple\r\n                                            value={selectedLocations}\r\n                                            onChange={handleChangeLocations}\r\n                                            input={\r\n                                                <Input id=\"select-location-chip\" />\r\n                                            }\r\n                                            renderValue={selected =>\r\n                                                (\r\n                                                    <div className={classes.chips}>\r\n                                                        {selected.map(value => (\r\n                                                            <Chip\r\n                                                                avatar={\r\n                                                                    lang.currLang.current === \"Ru\"\r\n                                                                        ? < Avatar\r\n                                                                            alt={locations.find(locations => locations.name_rus === value).name_eng}\r\n                                                                            src={locations.find(locations => locations.name_rus === value).img_url}\r\n                                                                        />\r\n                                                                        : < Avatar\r\n                                                                            alt={locations.find(locations => locations.name_eng === value).name_eng}\r\n                                                                            src={locations.find(locations => locations.name_eng === value).img_url}\r\n                                                                        />\r\n                                                                }\r\n                                                                key={value}\r\n                                                                label={value}\r\n                                                                className={classes.chip}\r\n                                                            />\r\n                                                        ))}\r\n                                                    </div>\r\n                                                )\r\n                                            }\r\n                                            MenuProps={MenuProps}\r\n                                        >\r\n                                            {Object.keys(locations)\r\n                                                .map(item =>\r\n                                                    <MenuItem\r\n                                                        key={locations[item].id + ' chip'}\r\n                                                        value={\r\n                                                            lang.currLang.current === \"Ru\"\r\n                                                                ? locations[item].name_rus\r\n                                                                : locations[item].name_eng\r\n                                                        }\r\n                                                        style={getStyles(locations[item].name_eng, selectedLocations, theme)}\r\n                                                    >\r\n                                                        {lang.currLang.current === \"Ru\"\r\n                                                            ? locations[item].name_rus\r\n                                                            : locations[item].name_eng}\r\n                                                    </MenuItem>\r\n                                                )}\r\n                                        </Select>\r\n                                    </FormControl>\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                        </Paper>\r\n\r\n                    </Grid>\r\n\r\n                    <Grid item xs={1} className={classes.mainGridBodyItem} >\r\n\r\n                        {isLoading\r\n                            ? <LinearProgress />\r\n                            : <Grid\r\n                                container\r\n                                direction=\"row\"\r\n                                justify=\"space-evenly\"\r\n                                alignItems=\"center\"\r\n                            >\r\n\r\n                                <Grid item>\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        color=\"secondary\"\r\n                                        className={classes.actionButton}\r\n                                        onClick={() => { history.push(\"/luciddreams\") }}\r\n                                    >\r\n                                        {lang.currLang.buttons.close}\r\n                                    </Button>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        color=\"primary\"\r\n                                        className={classes.actionButton}\r\n                                        onClick={() => savepost()}\r\n                                    >\r\n                                        {lang.currLang.buttons.add}\r\n                                    </Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                        }\r\n                    </Grid>\r\n                </Grid>\r\n\r\n            </div>\r\n\r\n            <Snackbar\r\n                open={openSnackbar}\r\n                onClose={handleCloseSnackbar}\r\n                autoHideDuration={3000}>\r\n                <MySnackbarContentWrapper\r\n                    className={classes.margin}\r\n                    onClose={handleCloseSnackbar}\r\n                    variant='error'\r\n                    message={snackbarMessage}\r\n                />\r\n            </Snackbar>\r\n\r\n        </MuiThemeProvider >\r\n    );\r\n};\r\n\r\nAddDream.propTypes = {\r\n    themeMode: PropTypes.object.isRequired,\r\n    lang: PropTypes.object.isRequired,\r\n    clouds: PropTypes.object.isRequired,\r\n    stars: PropTypes.object.isRequired,\r\n    auth: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        themeMode: store.themeMode,\r\n        lang: store.lang,\r\n        clouds: store.clouds,\r\n        stars: store.stars,\r\n        auth: store.auth,\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        // setCurrLangAction: currLangState => dispatch(setCurrLang(currLangState)),\r\n        // setCloudsAction: cloudState => dispatch(setCloud(cloudState)),\r\n        // setStarsAction: starState => dispatch(setStar(starState)),\r\n        // setThemeModeAction: paletteState => dispatch(setThemeMode(paletteState)),\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(AddDream);","import React from 'react';\r\nimport clsx from \"clsx\";\r\nimport MUIRichTextEditor from 'mui-rte';\r\n\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport CardHeader from \"@material-ui/core/CardHeader\";\r\nimport Collapse from \"@material-ui/core/Collapse\";\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Card from \"@material-ui/core/Card\";\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Chip from '@material-ui/core/Chip';\r\n\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\r\n\r\nimport { useStyles } from '../../styles/Styles';\r\n\r\nexport default function DreamCard(props) {\r\n    const classes = useStyles();\r\n    const { post_title, create_date, post_content, post_type, tags, technics } = props.item;\r\n    const { lang } = props;\r\n    const [expanded, setExpanded] = React.useState(false);\r\n\r\n    const handleExpandClick = () => {\r\n        setExpanded(!expanded);\r\n    };\r\n\r\n    return (\r\n        <Grid item xs={12}\r\n            style={{\r\n                marginTop: '10px',\r\n                marginBottom: '10px',\r\n                width: '100%',\r\n                height: 'auto',\r\n                borderRadius: '4px',\r\n            }}>\r\n            <Card className={classes.card}>\r\n                <CardHeader\r\n                    action={\r\n                        <IconButton aria-label=\"settings\">\r\n                            <MoreVertIcon />\r\n                        </IconButton>\r\n                    }\r\n                    title={post_title}\r\n                    subheader={create_date}\r\n                />\r\n                <CardContent>\r\n                    <Chip variant=\"outlined\"\r\n                        label={post_type === 0\r\n                            ? lang.currLang.texts.Dream\r\n                            : lang.currLang.texts.Cdream\r\n                        } />\r\n\r\n                    <div className={classes.avatarRoot}>\r\n                        {tags.map((tag, key) =>\r\n                            tag[0]\r\n                                ? <Tooltip key={key}\r\n                                    disableFocusListener\r\n                                    disableTouchListener\r\n                                    title={\r\n                                        lang.currLang.current === \"Ru\"\r\n                                            ? tag[1]\r\n                                            : tag[2]\r\n                                    }\r\n                                >\r\n                                    <Avatar className={classes.smallAvatar}\r\n                                        alt=\"Remy Sharp\"\r\n                                        src={tag[3]}\r\n                                    />\r\n                                </Tooltip>\r\n                                : ''\r\n                        )}\r\n                    </div>\r\n\r\n                    <div className={classes.avatarRoot}>\r\n                        {technics.map((technic, key) =>\r\n                            technic[0]\r\n                                ? <Chip className={classes.smallChip}\r\n                                    key={key}\r\n                                    label={lang.currLang.current === \"Ru\"\r\n                                        ? technic[1]\r\n                                        : technic[2]}\r\n                                />\r\n                                : ''\r\n                        )}\r\n                    </div>\r\n                </CardContent>\r\n                <CardActions disableSpacing>\r\n                    <IconButton\r\n                        className={clsx(classes.expand, {\r\n                            [classes.expandOpen]: expanded\r\n                        })}\r\n                        onClick={handleExpandClick}\r\n                        aria-expanded={expanded}\r\n                        aria-label=\"show more\"\r\n                    >\r\n                        <ExpandMoreIcon />\r\n                    </IconButton>\r\n                </CardActions>\r\n                <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\r\n                    <CardContent>\r\n                        <div\r\n                            style={{\r\n                                backgroundColor: '#8080801f',\r\n                                borderRadius: '4px',\r\n                                padding: '4px',\r\n                            }}\r\n                        >\r\n                            <MUIRichTextEditor\r\n                                value={post_content.replace(/(:\"\\w+)(\")(\")/g, '$1\\\\$2$3')}\r\n                                readOnly={true}\r\n                                toolbar={false}\r\n                            />\r\n                        </div>\r\n                    </CardContent>\r\n                    <CardActions disableSpacing>\r\n                        <IconButton\r\n                            className={clsx(classes.expand, {\r\n                                [classes.expandOpen]: expanded\r\n                            })}\r\n                            onClick={handleExpandClick}\r\n                            aria-expanded={expanded}\r\n                            aria-label=\"show more\"\r\n                        >\r\n                            <ExpandMoreIcon />\r\n                        </IconButton>\r\n                    </CardActions>\r\n                </Collapse>\r\n            </Card>\r\n        </Grid>\r\n    );\r\n}","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Button from '@material-ui/core/Button';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\n\r\nimport DreamCard from './muiltiple/DreamCard';\r\nimport { useStyles } from '../styles/Styles';\r\nimport { instance } from './Config';\r\n\r\nfunction ViewDreams(props) {\r\n    const { lang, themeMode, history, clouds, stars, auth } = props;\r\n    const muiTheme = createMuiTheme(themeMode);\r\n    const classes = useStyles();\r\n    const [isLoading, setIsLoading] = React.useState(true);\r\n    const [dreams, setDreams] = React.useState([]);\r\n\r\n    React.useEffect(() => {\r\n        setIsLoading(true);\r\n        instance.post(\"/actions/users/getuserposts\", { id: auth.user.id })\r\n            .then(res => {\r\n                setDreams(res.data);\r\n                setIsLoading(false);\r\n            })\r\n            .catch(err => {\r\n                setIsLoading(false);\r\n            });\r\n    }, [auth.user.id]);\r\n\r\n    return (\r\n        <MuiThemeProvider theme={muiTheme}>\r\n            <CssBaseline />\r\n            <div className={classes.AppDivDark}>\r\n                <div className={classes.AppDivLight} style={themeMode.palette.type === \"light\" ? { opacity: 1, } : { opacity: 0, }} />\r\n                {themeMode.palette.type === \"light\"\r\n                    ?\r\n                    <div className={classes.AppCloudsDiv} style={themeMode.palette.type === \"light\" ? { opacity: 1, } : { opacity: 0, }} >\r\n                        {clouds.clouds}\r\n                    </div>\r\n                    :\r\n                    <div className={classes.AppStarsDiv} style={themeMode.palette.type === \"light\" ? { opacity: 0, } : { opacity: 1, }} >\r\n                        {stars.stars}\r\n                    </div>\r\n                }\r\n            </div>\r\n            <div className={classes.root}>\r\n                <Grid className={classes.mainGridContainer}\r\n                    container\r\n                    direction=\"column\"\r\n                    justify=\"center\"\r\n                    alignItems=\"stretch\" >\r\n                    <Grid item xs={11} zeroMinWidth className={classes.mainGridDreamsBodyItem}>\r\n                        {isLoading\r\n                            ? <CircularProgress />\r\n                            : <Container className={classes.mainGridDreamsBodyItemContainer}>\r\n                                <Paper className={classes.mainGridDreamsBodyItemContainerPaper}>\r\n                                    <Grid className={classes.mainGridDreamsContainer}\r\n                                        container\r\n                                        direction=\"column\"\r\n                                        justify=\"center\"\r\n                                        alignItems=\"stretch\"\r\n                                    >\r\n                                        {dreams.map((item, key) => (\r\n                                            <DreamCard\r\n                                                item={item}\r\n                                                key={key}\r\n                                                lang={lang}\r\n                                            />\r\n                                        ))}\r\n                                    </Grid>\r\n                                </Paper>\r\n                            </Container>\r\n                        }\r\n                    </Grid>\r\n                    <Grid item xs={1} zeroMinWidth className={classes.mainGridBodyItem}>\r\n                        <Grid\r\n                            container\r\n                            direction=\"row\"\r\n                            justify=\"space-evenly\"\r\n                            alignItems=\"center\"\r\n                            spacing={1}\r\n                        >\r\n                            <Grid item xs={6} align=\"center\">\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    color=\"secondary\"\r\n                                    className={classes.actionButton}\r\n                                    onClick={() => { history.push(\"/luciddreams\") }}\r\n                                >\r\n                                    {lang.currLang.buttons.close}\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid item xs={6} />\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </MuiThemeProvider >\r\n    );\r\n\r\n}\r\n\r\nViewDreams.propTypes = {\r\n    themeMode: PropTypes.object.isRequired,\r\n    lang: PropTypes.object.isRequired,\r\n    clouds: PropTypes.object.isRequired,\r\n    stars: PropTypes.object.isRequired,\r\n    auth: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        themeMode: store.themeMode,\r\n        lang: store.lang,\r\n        clouds: store.clouds,\r\n        stars: store.stars,\r\n        auth: store.auth,\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        // setCurrLangAction: currLangState => dispatch(setCurrLang(currLangState)),\r\n        // setCloudsAction: cloudState => dispatch(setCloud(cloudState)),\r\n        // setStarsAction: starState => dispatch(setStar(starState)),\r\n        // setThemeModeAction: paletteState => dispatch(setThemeMode(paletteState)),\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(ViewDreams);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\n\r\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Typography from '@material-ui/core/Typography';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport Button from '@material-ui/core/Button';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Input from \"@material-ui/core/Input\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nimport MUIRichTextEditor from 'mui-rte';\r\nimport { convertToRaw } from 'draft-js';\r\n\r\nimport Rating from \"@material-ui/lab/Rating\";\r\n\r\nimport { MuiThemeProvider, createMuiTheme, useTheme, makeStyles } from '@material-ui/core/styles';\r\n\r\nimport FormatColorFillIcon from '@material-ui/icons/FormatColorFill';\r\nimport ErrorIcon from '@material-ui/icons/Error';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nimport { useStyles } from '../styles/Styles';\r\n\r\nimport { instance } from './Config';\r\n\r\nconst ITEM_HEIGHT = 48;\r\nconst ITEM_PADDING_TOP = 8;\r\nconst MenuProps = {\r\n    PaperProps: {\r\n        style: {\r\n            maxHeight: ITEM_HEIGHT * 5 + ITEM_PADDING_TOP,\r\n            width: 250\r\n        }\r\n    }\r\n};\r\n\r\nfunction getStyles(name, selectedLocations, theme) {\r\n    return {\r\n        fontWeight:\r\n            selectedLocations.indexOf(name) === -1\r\n                ? theme.typography.fontWeightSmall\r\n                : theme.typography.fontWeightMedium\r\n    };\r\n}\r\n\r\nconst useStyles1 = makeStyles(theme => ({\r\n    error: {\r\n        backgroundColor: theme.palette.error.dark,\r\n    },\r\n    icon: {\r\n        fontSize: 20,\r\n    },\r\n    iconVariant: {\r\n        opacity: 0.9,\r\n        marginRight: theme.spacing(1),\r\n    },\r\n    message: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n    },\r\n}));\r\n\r\nfunction MySnackbarContentWrapper(props) {\r\n    const classes = useStyles1();\r\n    const { className, message, onClose } = props;\r\n    const Icon = ErrorIcon;\r\n\r\n    return (\r\n        <SnackbarContent\r\n            className={clsx(classes.error, className)}\r\n            aria-describedby=\"client-snackbar\"\r\n            message={\r\n                <span id=\"client-snackbar\" className={classes.message}>\r\n                    <Icon className={clsx(classes.icon, classes.iconVariant)} />\r\n                    <Typography className={classes.mainGridContainer}\r\n                        align='center'\r\n                        variant='body2'>\r\n                        {message}\r\n                    </Typography>\r\n                </span>\r\n            }\r\n            action={[\r\n                <IconButton key=\"close\" aria-label=\"close\" color=\"inherit\" onClick={onClose}>\r\n                    <CloseIcon className={classes.icon} />\r\n                </IconButton>,\r\n            ]}\r\n        />\r\n    );\r\n}\r\n\r\nfunction AddCDream(props) {\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const { lang, themeMode, history, clouds, stars, auth } = props;\r\n    const muiTheme = createMuiTheme(themeMode);\r\n\r\n    Object.assign(muiTheme, {\r\n        overrides: {\r\n            MUIRichTextEditor: {\r\n                root: {\r\n                    border: \"1px solid gray\",\r\n                    borderRadius: '4px',\r\n                    height: '100%',\r\n                    //Весь компонент\r\n                },\r\n                container: {\r\n                    height: '100%',\r\n                    margin: '0 !Important',\r\n                    //Без шапки\r\n                },\r\n                toolbar: {\r\n                    //textAlign: 'center',\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    justifyContent: 'center',\r\n                    height: '20%',\r\n                    minHeight: '48px',\r\n                    margin: '0 !Important',\r\n                    borderBottom: \"1px solid gray\",\r\n                    borderRadius: '4px',\r\n                },\r\n                placeHolder: {\r\n                },\r\n                editor: {\r\n                    height: '69%',\r\n                    width: '100%',\r\n                    position: 'relative',\r\n                    overflow: 'hidden',\r\n                    //Эдитор\r\n                },\r\n                editorContainer: {\r\n                    padding: \"18.5px 14px\",\r\n                    borderRadius: '4px',\r\n                    position: 'relative',\r\n                    boxSizing: 'border-box',\r\n                    maxHeight: '100%',\r\n                    overflow: 'auto',\r\n                    //Редактор\r\n                },\r\n            }\r\n        }\r\n    })\r\n    const [openSnackbar, setOpenSnackbar] = React.useState(false);\r\n    const [snackbarMessage, setSnackbarMessage] = React.useState('');\r\n    const [isLoading, setIsLoading] = React.useState(false);\r\n    const [titleText, setTitleText] = React.useState();\r\n    const [contentText, setContentText] = React.useState();\r\n    const [selectedLocations, setselectedLocations] = React.useState([]);\r\n    const [selectedTechnics, setselectedTechnics] = React.useState([]);\r\n    const [realisticsValue, setRealisticsValue] = React.useState(1);\r\n    const [locations, setLocations] = React.useState({});\r\n    const [technics, setTechnics] = React.useState({});\r\n\r\n    const handleChangeRealistics = (event, newValue) => {\r\n        setRealisticsValue(newValue);\r\n    };\r\n    const handleChangeLocations = (event) => {\r\n        setselectedLocations(event.target.value);\r\n    };\r\n    const handleChangeTechnics = (event) => {\r\n        setselectedTechnics(event.target.value);\r\n    };\r\n    const changeTitle = (event) => {\r\n        setTitleText(event.target.value);\r\n    };\r\n    const changeContent = (state) => {\r\n        const raw = convertToRaw(state.getCurrentContent())\r\n        setContentText(raw);\r\n    };\r\n\r\n    const savepost = () => {\r\n        setIsLoading(true);\r\n        let havErr = false;\r\n\r\n        if (typeof (titleText) !== 'undefined') {\r\n            if (titleText.length === 0) {\r\n                setSnackbarMessage(lang.currLang.errors.EmptyTitle);\r\n                havErr = true;\r\n            }\r\n        }\r\n        else {\r\n            setSnackbarMessage(lang.currLang.errors.EmptyTitle);\r\n            havErr = true;\r\n        }\r\n\r\n        if (typeof (contentText) !== 'undefined') {\r\n            if (contentText.blocks[0].text.length === 0) {\r\n                setSnackbarMessage(lang.currLang.errors.EmptyDream);\r\n                havErr = true;\r\n            }\r\n        }\r\n        else {\r\n            setSnackbarMessage(lang.currLang.errors.EmptyDream);\r\n            havErr = true;\r\n        }\r\n\r\n        if (havErr) {\r\n            setOpenSnackbar(true);\r\n            setIsLoading(false);\r\n        }\r\n        else {\r\n\r\n            let convert = JSON.stringify(contentText);\r\n\r\n            let postData = {\r\n                title: titleText,\r\n                content: convert,\r\n                create_user: auth.user.id,\r\n                rating: realisticsValue,\r\n                post_type: 1,\r\n                nickname: auth.user.nickname,\r\n                tags: selectedLocations,\r\n                technics: selectedTechnics\r\n            }\r\n\r\n            instance\r\n                .post('/actions/users/createpost', postData)\r\n                .then(res => {\r\n                    setIsLoading(false);\r\n                    history.push(\"/luciddreams\")\r\n                })\r\n                .catch(err => {\r\n                    setIsLoading(false);\r\n                });\r\n        }\r\n    };\r\n\r\n    const handleCloseSnackbar = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setOpenSnackbar(false);\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        instance.get(\"/gettags\")\r\n            .then(res => {\r\n                setLocations(res.data);\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            });\r\n        instance.get(\"/gettechnics\")\r\n            .then(res => {\r\n                setTechnics(res.data);\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            });\r\n    }, [auth.user.id]);\r\n\r\n    return (\r\n        <MuiThemeProvider theme={muiTheme}>\r\n            <CssBaseline />\r\n            <div className={classes.AppDivDark}>\r\n                <div className={classes.AppDivLight} style={themeMode.palette.type === \"light\" ? { opacity: 1, } : { opacity: 0, }} />\r\n                {themeMode.palette.type === \"light\"\r\n                    ?\r\n                    <div className={classes.AppCloudsDiv} style={themeMode.palette.type === \"light\" ? { opacity: 1, } : { opacity: 0, }} >\r\n                        {clouds.clouds}\r\n                    </div>\r\n                    :\r\n                    <div className={classes.AppStarsDiv} style={themeMode.palette.type === \"light\" ? { opacity: 0, } : { opacity: 1, }} >\r\n                        {stars.stars}\r\n                    </div>\r\n                }\r\n            </div>\r\n\r\n            <div className={classes.root} id='rootDiv'>\r\n\r\n                <Grid className={classes.mainGridContainer}\r\n                    container\r\n                    direction=\"column\"\r\n                    justify=\"center\"\r\n                    alignItems=\"stretch\" >\r\n\r\n                    <Grid item xs={11} className={classes.mainGridBodyItem}>\r\n\r\n                        <Paper className={classes.paper}>\r\n\r\n                            <Grid className={classes.mainGridContainer}\r\n                                container\r\n                                direction=\"column\"\r\n                                justify=\"center\"\r\n                                alignItems=\"center\"\r\n                                spacing={2}\r\n                            >\r\n\r\n                                <Grid item xs={2} className={classes.fullMinWidth}>\r\n                                    <TextField className={classes.inputDiv}\r\n                                        required\r\n                                        id=\"outlined-required\"\r\n                                        label={lang.currLang.texts.title}\r\n                                        variant=\"outlined\"\r\n                                        onChange={(e) => { changeTitle(e) }}\r\n                                    />\r\n                                </Grid>\r\n\r\n                                <Grid item xs={4} className={classes.fullMinWidth} >\r\n\r\n                                    <div className={classes.inputScrollableDiv}>\r\n\r\n                                        <MUIRichTextEditor\r\n                                            controls={[\r\n                                                \"bold\",\r\n                                                \"italic\",\r\n                                                \"underline\",\r\n                                                \"strikethrough\",\r\n                                                //\"highlight\",\r\n                                                \"colorfill\",\r\n                                                //\"media\",\r\n                                            ]}\r\n                                            onChange={changeContent}\r\n                                            label={lang.currLang.texts.content}\r\n                                            inlineToolbar={false}\r\n                                            customControls={[\r\n                                                {\r\n                                                    name: \"colorfill\",\r\n                                                    icon: <FormatColorFillIcon />,\r\n                                                    type: \"inline\",\r\n                                                    inlineStyle: {\r\n                                                        backgroundColor: \"yellow\",\r\n                                                        color: \"black\"\r\n                                                    }\r\n                                                }\r\n                                            ]}\r\n                                        />\r\n\r\n                                    </div>\r\n\r\n                                </Grid>\r\n\r\n                                <Grid item xs={2} className={classes.fullMinWidth} >\r\n                                    <FormControl className={classes.inputDiv}>\r\n                                        <InputLabel id=\"technics-chip-label\">\r\n                                            {lang.currLang.texts.technics}\r\n                                        </InputLabel>\r\n                                        <Select\r\n                                            labelId=\"technics-chip-label\"\r\n                                            id=\"technics-chip\"\r\n                                            multiple\r\n                                            value={selectedTechnics}\r\n                                            onChange={handleChangeTechnics}\r\n                                            input={\r\n                                                <Input id=\"select-technics-chip\" />\r\n                                            }\r\n                                            renderValue={selected =>\r\n                                                (\r\n                                                    <div className={classes.chips}>\r\n                                                        {selected.map(value => (\r\n                                                            <Chip\r\n                                                                size=\"small\"\r\n                                                                key={value}\r\n                                                                label={value}\r\n                                                                className={classes.chip}\r\n                                                            />\r\n                                                        ))}\r\n                                                    </div>\r\n                                                )\r\n                                            }\r\n                                            MenuProps={MenuProps}\r\n                                        >\r\n                                            {Object.keys(technics)\r\n                                                .map(item =>\r\n                                                    <MenuItem\r\n                                                        key={technics[item].id + ' chip'}\r\n                                                        value={\r\n                                                            lang.currLang.current === \"Ru\"\r\n                                                                ? technics[item].name_rus\r\n                                                                : technics[item].name_eng\r\n                                                        }\r\n                                                        style={getStyles(technics[item].name_eng, selectedTechnics, theme)}\r\n                                                    >\r\n                                                        {lang.currLang.current === \"Ru\"\r\n                                                            ? technics[item].name_rus\r\n                                                            : technics[item].name_eng}\r\n                                                    </MenuItem>\r\n                                                )}\r\n                                        </Select>\r\n                                    </FormControl>\r\n                                </Grid>\r\n\r\n                                <Grid item xs={2} className={classes.fullMinWidth} >\r\n                                    <FormControl className={classes.inputDiv}>\r\n                                        <InputLabel id=\"location-chip-label\">\r\n                                            {lang.currLang.texts.tags}\r\n                                        </InputLabel>\r\n                                        <Select\r\n                                            labelId=\"location-chip-label\"\r\n                                            id=\"location-chip\"\r\n                                            multiple\r\n                                            value={selectedLocations}\r\n                                            onChange={handleChangeLocations}\r\n                                            input={\r\n                                                <Input id=\"select-location-chip\" />\r\n                                            }\r\n                                            renderValue={selected =>\r\n                                                (\r\n                                                    <div className={classes.chips}>\r\n                                                        {selected.map(value => (\r\n                                                            <Chip\r\n                                                                avatar={\r\n                                                                    lang.currLang.current === \"Ru\"\r\n                                                                        ? < Avatar\r\n                                                                            alt={locations.find(locations => locations.name_rus === value).name_eng}\r\n                                                                            src={locations.find(locations => locations.name_rus === value).img_url}\r\n                                                                        />\r\n                                                                        : < Avatar\r\n                                                                            alt={locations.find(locations => locations.name_eng === value).name_eng}\r\n                                                                            src={locations.find(locations => locations.name_eng === value).img_url}\r\n                                                                        />\r\n                                                                }\r\n                                                                key={value}\r\n                                                                label={value}\r\n                                                                className={classes.chip}\r\n                                                            />\r\n                                                        ))}\r\n                                                    </div>\r\n                                                )\r\n                                            }\r\n                                            MenuProps={MenuProps}\r\n                                        >\r\n                                            {Object.keys(locations)\r\n                                                .map(item =>\r\n                                                    <MenuItem\r\n                                                        key={locations[item].id + ' chip'}\r\n                                                        value={\r\n                                                            lang.currLang.current === \"Ru\"\r\n                                                                ? locations[item].name_rus\r\n                                                                : locations[item].name_eng\r\n                                                        }\r\n                                                        style={getStyles(locations[item].name_eng, selectedLocations, theme)}\r\n                                                    >\r\n                                                        {lang.currLang.current === \"Ru\"\r\n                                                            ? locations[item].name_rus\r\n                                                            : locations[item].name_eng}\r\n                                                    </MenuItem>\r\n                                                )}\r\n                                        </Select>\r\n                                    </FormControl>\r\n                                </Grid>\r\n\r\n                                <Grid item xs={2} className={classes.fullMinWidth} >\r\n                                    <Box className={classes.inputDiv}\r\n                                        component=\"fieldset\"\r\n                                        borderColor=\"transparent\"\r\n                                    >\r\n                                        <Typography component=\"legend\">\r\n                                            {lang.currLang.texts.rating}\r\n                                        </Typography>\r\n                                        <div style={{ textAlign: 'center' }}>\r\n                                            <Rating name=\"simple-controlled\"\r\n                                                value={realisticsValue}\r\n                                                onChange={handleChangeRealistics}\r\n                                            />\r\n                                        </div>\r\n                                    </Box>\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                        </Paper>\r\n\r\n                    </Grid>\r\n\r\n                    <Grid item xs={1} className={classes.mainGridBodyItem} >\r\n\r\n                        {isLoading\r\n                            ? <LinearProgress />\r\n                            : <Grid\r\n                                container\r\n                                direction=\"row\"\r\n                                justify=\"space-evenly\"\r\n                                alignItems=\"center\"\r\n                            >\r\n\r\n                                <Grid item>\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        color=\"secondary\"\r\n                                        className={classes.actionButton}\r\n                                        onClick={() => { history.push(\"/luciddreams\") }}\r\n                                    >\r\n                                        {lang.currLang.buttons.close}\r\n                                    </Button>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        color=\"primary\"\r\n                                        className={classes.actionButton}\r\n                                        onClick={() => savepost()}\r\n                                    >\r\n                                        {lang.currLang.buttons.add}\r\n                                    </Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                        }\r\n                    </Grid>\r\n                </Grid>\r\n\r\n            </div>\r\n\r\n            <Snackbar\r\n                open={openSnackbar}\r\n                onClose={handleCloseSnackbar}\r\n                autoHideDuration={3000}>\r\n                <MySnackbarContentWrapper\r\n                    className={classes.margin}\r\n                    onClose={handleCloseSnackbar}\r\n                    variant='error'\r\n                    message={snackbarMessage}\r\n                />\r\n            </Snackbar>\r\n\r\n        </MuiThemeProvider >\r\n    );\r\n};\r\n\r\nAddCDream.propTypes = {\r\n    themeMode: PropTypes.object.isRequired,\r\n    lang: PropTypes.object.isRequired,\r\n    clouds: PropTypes.object.isRequired,\r\n    stars: PropTypes.object.isRequired,\r\n    auth: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        themeMode: store.themeMode,\r\n        lang: store.lang,\r\n        clouds: store.clouds,\r\n        stars: store.stars,\r\n        auth: store.auth,\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        // setCurrLangAction: currLangState => dispatch(setCurrLang(currLangState)),\r\n        // setCloudsAction: cloudState => dispatch(setCloud(cloudState)),\r\n        // setStarsAction: starState => dispatch(setStar(starState)),\r\n        // setThemeModeAction: paletteState => dispatch(setThemeMode(paletteState)),\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(AddCDream);","import { SET_LANG, SET_THEME_MODE } from '../actions/types';\r\n\r\nexport function setCloud(state) {\r\n\treturn {\r\n\t\ttype: state.type,\r\n\t\tcloudState: state.cloudState,\r\n\t}\r\n}\r\nexport function setStar(state) {\r\n\treturn {\r\n\t\ttype: state.type,\r\n\t\tstarState: state.starState,\r\n\t}\r\n}\r\nexport function setCurrLang(state) {\r\n\treturn {\r\n\t\ttype: SET_LANG,\r\n\t\tcurrLangState: state,\r\n\t}\r\n}\r\nexport function setThemeMode(state) {\r\n\treturn {\r\n\t\ttype: SET_THEME_MODE,\r\n\t\tthemeModeState: state,\r\n\t}\r\n}\r\nexport function setUserState(state) {\r\n\treturn {\r\n\t\ttype: state.type,\r\n\t\tpayload: state.payload\r\n\t}\r\n}","const words = {\r\n    current: 'Ru',\r\n    buttons: {\r\n        signIn: 'Вход',\r\n        signUp: 'Регистрация',\r\n        dreamJoirnal: 'Дневник снов',\r\n        addDream: 'Добавить сон',\r\n        addCDream: 'Добавить осознанный сон',\r\n        techniques: 'Техники',\r\n        adventures: 'Приключения',\r\n        close: 'Назад',\r\n        about: 'О нас',\r\n        cancel: 'Отмена',\r\n        add: 'Добавить',\r\n    },\r\n    texts: {\r\n        about: 'О нас О нас О нас О нас О нас О нас О нас О нас О нас О нас О нас О нас',\r\n        or: 'ИЛИ',\r\n        nickname: 'Отображаемое имя',\r\n        password: 'Пароль',\r\n        passwordAgain: 'Поторите пароль',\r\n        cancel: 'Отмена',\r\n        sucessRegistration: 'Вы успешно зарегистрировались',\r\n        hello: 'Привет, ',\r\n        changleLanguage: 'Сохранить изменение языка на ',\r\n        success: 'Успешно',\r\n        title: 'Заголовок',\r\n        content: 'Что снилось',\r\n        tags: 'Места',\r\n        technics: 'Техники',\r\n        rating: 'Реалистичность',\r\n        Dream: 'Обычный сон',\r\n        Cdream: 'Осознанный сон',\r\n    },\r\n    errors: {\r\n        emailLenght: 'Введите email',\r\n        nicknameLenght: 'Введите отображаемое имя',\r\n        passwordLenght: 'Введите пароль',\r\n        password2Lenght: 'Введите пароль',\r\n        passwordsCompare: 'Пароли не совпадают',\r\n        UserNotExist: 'Неверный email или пароль',\r\n        EmailIsNotValid: 'Введен некорректный email',\r\n        IncorrectPassword: 'Неверный email или пароль',\r\n        EmailIsBusy: 'Email занят',\r\n        PasswordLenght5Symbols: 'Минимальная длина пароля: 5 символов',\r\n        NotLogin: 'Вы не авторизированы',\r\n        EmptyTitle: 'Пустой заголовок',\r\n        EmptyDream: 'Пустое поле сна',\r\n    },\r\n};\r\n\r\nexport default words;","import React, { useEffect } from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\n\r\nimport SnackbarContent from \"@material-ui/core/SnackbarContent\";\r\nimport ButtonBase from '@material-ui/core/ButtonBase';\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport Button from '@material-ui/core/Button';\r\nimport Slide from \"@material-ui/core/Slide\";\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport { SET_CLOUD, SET_STAR, CLEAR_CLOUD, CLEAR_STAR } from \"../actions/types\";\r\n\r\nimport { setCloud, setStar, setCurrLang, setThemeMode } from '../actions/Actions';\r\nimport { useStyles, params, randomBetween, variantIcon } from '../styles/Styles';\r\nimport { instance } from './Config';\r\nimport { CheckTimeOut } from '../utils/CheckLoginTimeOut';\r\n\r\nimport { MuiThemeProvider, createMuiTheme, makeStyles } from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\n\r\nimport { amber, green } from '@material-ui/core/colors';\r\n\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\n\r\nimport RuDict from '../dictionary/ru';\r\nimport EnDict from '../dictionary/en';\r\n\r\nfunction TransitionDown(props) {\r\n    return <Slide {...props} direction=\"down\" />;\r\n}\r\n\r\nconst useStyles1 = makeStyles(theme => ({\r\n    success: {\r\n        backgroundColor: green[600],\r\n    },\r\n    error: {\r\n        backgroundColor: theme.palette.error.dark,\r\n    },\r\n    info: {\r\n        backgroundColor: theme.palette.primary.main,\r\n    },\r\n    warning: {\r\n        backgroundColor: amber[700],\r\n    },\r\n    icon: {\r\n        fontSize: 20,\r\n    },\r\n    iconVariant: {\r\n        opacity: 0.9,\r\n        marginRight: theme.spacing(1),\r\n    },\r\n    message: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n    },\r\n}));\r\n\r\nfunction SnackbarContentWrapper(props) {\r\n    const classes = useStyles1();\r\n    const { className, message, onClose, variant } = props;\r\n    const Icon = variantIcon[variant];\r\n\r\n    return (\r\n        <SnackbarContent\r\n            className={clsx(classes[variant], className)}\r\n            aria-describedby=\"message-snackbar\"\r\n            message={\r\n                <span id=\"message-snackbar\" className={classes.message}>\r\n                    <Icon className={clsx(classes.icon, classes.iconVariant)} />\r\n                    <Typography className={classes.mainGridContainer}\r\n                        align='center'\r\n                        variant='body2'>\r\n                        {message}\r\n                    </Typography>\r\n                </span>\r\n            }\r\n            action={[\r\n                <IconButton key=\"close\" aria-label=\"close\" color=\"inherit\" onClick={onClose}>\r\n                    <CloseIcon className={classes.icon} />\r\n                </IconButton>,\r\n            ]}\r\n        />\r\n    );\r\n}\r\n\r\nfunction MainPage(props) {\r\n    const classes = useStyles();\r\n    const { lang, clouds, stars, themeMode, auth } = props.store;\r\n    const muiTheme = createMuiTheme(themeMode);\r\n    const { setCurrLangAction, setCloud, setStar, setThemeModeAction, history } = props;\r\n    const [prevLanguage, setPrevLanguage] = React.useState(undefined);\r\n    const [openLangSnakbar, setOpenLangSnakbar] = React.useState(false);\r\n    const [openMessageSnackbar, setOpenMessageSnackbar] = React.useState(false);\r\n    const [langSnakbarMessage, setLangSnakbarMessage] = React.useState('');\r\n    const [transition, setTransition] = React.useState(undefined);\r\n    const [infoSnackbar, setInfoSnackbar] = React.useState({\r\n        variant: '',\r\n        message: '',\r\n    });\r\n\r\n    const switchMode = () => {\r\n        let newPaletteType = themeMode.palette.type === \"light\" ? \"dark\" : \"light\";\r\n        let primaryColor = themeMode.palette.type === \"light\" ? \"#f9a825\" : \"#3f51b5\";\r\n        let secondaryColor = themeMode.palette.type === \"light\" ? \"#f50057\" : \"#f50057\";\r\n        setThemeModeAction({\r\n            type: newPaletteType,\r\n            primary: { main: primaryColor },\r\n            secondary: { main: secondaryColor },\r\n        });\r\n    }\r\n\r\n    const onAstronautClick = () => {\r\n        alert('Тут должны перейти на страницу космонафта');\r\n    };\r\n\r\n    const onMapClick = () => {\r\n        alert('Тут должны перейти на страницу карты');\r\n    };\r\n\r\n    const changeLanguage = (language) => {\r\n        if (language !== lang.currLang.current) {\r\n            if (language === 'Ru') {\r\n                setPrevLanguage(lang.currLang.current);\r\n                setCurrLangAction(RuDict);\r\n                setLangSnakbarMessage(language);\r\n                setTransition(() => TransitionDown);\r\n                setOpenLangSnakbar(true);\r\n            }\r\n            if (lang.currLang.current !== 'En') {\r\n                setPrevLanguage(lang.currLang.current);\r\n                setCurrLangAction(EnDict);\r\n                setLangSnakbarMessage(language);\r\n                setTransition(() => TransitionDown);\r\n                setOpenLangSnakbar(true);\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleCloseLangSnakbar = () => {\r\n        switch (prevLanguage) {\r\n            case 'En':\r\n                setCurrLangAction(EnDict);\r\n                break;\r\n            case 'Ru':\r\n                setCurrLangAction(RuDict);\r\n                break;\r\n            default:\r\n                setCurrLangAction(EnDict);\r\n                break;\r\n        }\r\n        setOpenLangSnakbar(false);\r\n    };\r\n\r\n    const handleSaveLangSnakbar = () => {\r\n        let newLang;\r\n        switch (lang.currLang.current) {\r\n            case 'En':\r\n                newLang = 0;\r\n                break;\r\n            case 'Ru':\r\n                newLang = 1;\r\n                break;\r\n            default:\r\n                newLang = 0;\r\n                break;\r\n        }\r\n        let userid = props.store.auth.user.id;\r\n        let usernickname = props.store.auth.user.nickname;\r\n        let newUserData = {\r\n            language: newLang,\r\n            id: userid,\r\n            nickname: usernickname,\r\n        };\r\n\r\n        //Проверка на таймаут\r\n        let check = CheckTimeOut();\r\n\r\n        if (check) {\r\n            instance\r\n                .post('/actions/users/updateuserdata', newUserData)\r\n                .then(res => {\r\n                    let newInfoSnackbar = infoSnackbar;\r\n                    newInfoSnackbar = { ...newInfoSnackbar, variant: \"success\" };\r\n                    newInfoSnackbar = { ...newInfoSnackbar, message: lang.currLang.texts.success };\r\n                    setInfoSnackbar(newInfoSnackbar);\r\n                    setOpenMessageSnackbar(true);\r\n                    setOpenLangSnakbar(false);\r\n                })\r\n                .catch(err => {\r\n                    handleCloseLangSnakbar();\r\n                });\r\n\r\n        }\r\n        else {\r\n            let newInfoSnackbar = infoSnackbar;\r\n            newInfoSnackbar = { ...newInfoSnackbar, variant: \"error\" };\r\n            newInfoSnackbar = { ...newInfoSnackbar, message: lang.currLang.errors.NotLogin };\r\n            setInfoSnackbar(newInfoSnackbar);\r\n            setOpenMessageSnackbar(true);\r\n            handleCloseLangSnakbar();\r\n        }\r\n    };\r\n\r\n    const handleCloseMessageSnackbar = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setOpenMessageSnackbar(false);\r\n    };\r\n\r\n    useEffect(() => {\r\n        setStar({\r\n            type: CLEAR_STAR,\r\n            starState: '',\r\n        });\r\n        setCloud({\r\n            type: CLEAR_CLOUD,\r\n            cloudState: '',\r\n        });\r\n\r\n        for (let i = 0; i < params.amountStars; i++) {\r\n            let size = Math.round(Math.random() * 10) === 0 ? params.size.giant : randomBetween(params.size.min, params.size.max);\r\n            setStar({\r\n                type: SET_STAR,\r\n                starState: <div className={classes.AppStar}\r\n                    key={i}\r\n                    style={{\r\n                        left: randomBetween(0, 100) + \"%\",\r\n                        top: randomBetween(0, 100) + \"%\",\r\n                        width: size + \"px\",\r\n                        height: size + \"px\",\r\n                        boxShadow: \"0 0 \" + size + \"px \" + size / 2 + \"px #043668\",\r\n                        animationDuration: randomBetween(params.duration.min, params.duration.max) + \"s\",\r\n                    }}\r\n                />\r\n            });\r\n        }\r\n\r\n        for (let i = 0; i < params.amountClouds; i++) {\r\n            let left = Math.round(Math.random() * 50 + 90);\r\n            let top = Math.round(Math.random() * 100 / 100 * 90);\r\n            let scale = Math.random() * 1.5 - 0.5;\r\n            let opacity = Math.random() * 90 / 100;\r\n            let speed = Math.random() * 30 + 15;\r\n            setCloud({\r\n                type: SET_CLOUD,\r\n                cloudState: <div className={classes.AppCloud}\r\n                    key={i}\r\n                    style={{\r\n                        left: left + '%',\r\n                        top: top + '%',\r\n                        width: '400px',\r\n                        height: '100px',\r\n                        transform: 'scale(' + scale + ')',\r\n                        opacity: opacity,\r\n                        animationDuration: speed + 's',\r\n                    }} />\r\n            });\r\n        }\r\n\r\n        let id = {\r\n            id: auth.user.id,\r\n        };\r\n\r\n        instance\r\n            .post('/actions/users/getuserdata', id)\r\n            .then(res => {\r\n                res.data.language === 0 ? setCurrLangAction(EnDict) : setCurrLangAction(RuDict);\r\n            })\r\n            .catch(err => {\r\n                auth.user.language === 0 ? setCurrLangAction(EnDict) : setCurrLangAction(RuDict);\r\n            });\r\n\r\n\r\n\r\n        if (auth.user.times_mode === 0) {\r\n            setThemeModeAction({\r\n                type: \"dark\",\r\n                primary: { main: \"#f9a825\" },\r\n                secondary: { main: \"#f50057\" },\r\n            });\r\n        }\r\n        else {\r\n            setThemeModeAction({\r\n                type: \"light\",\r\n                primary: { main: \"#3f51b5\" },\r\n                secondary: { main: \"#f50057\" },\r\n            });\r\n        }\r\n\r\n    }, [classes, setCloud, setStar, setThemeModeAction, setCurrLangAction, auth.user.language, auth.user.times_mode, auth.user.id]);\r\n\r\n    return (\r\n        <MuiThemeProvider theme={muiTheme}>\r\n            <CssBaseline />\r\n\r\n            <Snackbar\r\n                anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }}\r\n                key={\"top, center\"}\r\n                open={openLangSnakbar}\r\n                TransitionComponent={transition}\r\n            >\r\n                <SnackbarContent\r\n                    aria-describedby=\"lang-snackbar\"\r\n                    message={\r\n                        <Typography className={classes.mainGridContainer}\r\n                            align='center'\r\n                            id=\"lang-snackbar\"\r\n                            variant='body2'>\r\n                            {lang.currLang.texts.changleLanguage + langSnakbarMessage + ' ?'}\r\n                        </Typography>\r\n                    }\r\n                    action={[\r\n                        <div key={\"lang-snackbar-buttons\"}>\r\n                            <IconButton\r\n                                key=\"save\"\r\n                                aria-label=\"save\"\r\n                                color=\"inherit\"\r\n                                onClick={handleSaveLangSnakbar}\r\n                            >\r\n                                <SaveIcon />\r\n                            </IconButton>\r\n                            <IconButton\r\n                                key=\"close\"\r\n                                aria-label=\"close\"\r\n                                color=\"inherit\"\r\n                                onClick={handleCloseLangSnakbar}\r\n                            >\r\n                                <CloseIcon />\r\n                            </IconButton>\r\n                        </div>\r\n                    ]}\r\n                />\r\n            </Snackbar>\r\n\r\n            <div className={classes.AppDivDark}>\r\n                <div className={classes.AppDivLight} style={themeMode.palette.type === \"light\" ? { opacity: 1, } : { opacity: 0, }} />\r\n                {themeMode.palette.type === \"light\"\r\n                    ?\r\n                    <div className={classes.AppCloudsDiv} style={themeMode.palette.type === \"light\" ? { opacity: 1, } : { opacity: 0, }} >\r\n                        {clouds.clouds}\r\n                    </div>\r\n                    :\r\n                    <div className={classes.AppStarsDiv} style={themeMode.palette.type === \"light\" ? { opacity: 0, } : { opacity: 1, }} >\r\n                        {stars.stars}\r\n                    </div>\r\n                }\r\n            </div>\r\n\r\n            <div className={classes.root} id='rootDiv'>\r\n\r\n                <div className={classes.mainPage}>\r\n\r\n                    <Grid className={classes.mainGridContainer}\r\n                        container\r\n                        direction=\"column\"\r\n                        justify=\"center\"\r\n                        alignItems=\"stretch\" >\r\n\r\n                        <Grid item xs={4} className={classes.mainGridHeadItem} >\r\n                            <Grid container className={classes.mainGridContainer}\r\n                                direction=\"row\"\r\n                                justify=\"space-around\"\r\n                                alignItems=\"stretch\" >\r\n\r\n                                <Grid item xs={4} >\r\n                                    <ButtonBase className={classes.AstronautButton}\r\n                                        type='button'\r\n                                        focusRipple\r\n                                        onClick={onAstronautClick}>\r\n                                        <div className={classes.AstronautDiv}>\r\n                                            <div className={classes.AstronautImg} style={themeMode.palette.type === \"light\" ? { filter: 'invert(0)', } : { filter: 'invert(1)', }} />\r\n                                        </div>\r\n                                    </ButtonBase>\r\n                                </Grid>\r\n\r\n                                <Grid item xs={4} >\r\n                                    <ButtonBase className={classes.image}\r\n                                        type='button'\r\n                                        focusRipple\r\n                                        onClick={switchMode}>\r\n                                        <div className={classes.SkyDiv}>\r\n                                            <div className={classes.SunSrc} style={themeMode.palette.type === \"dark\" ? { transform: 'translateY(36vw)' } : { transform: 'translateY(0)' }} />\r\n                                            <div className={classes.MoonSrc} style={themeMode.palette.type === \"dark\" ? { transform: 'translateY(0)' } : { transform: 'translateY(-36vw)' }} />\r\n                                        </div>\r\n                                    </ButtonBase>\r\n                                </Grid>\r\n                                <Grid item xs={4} >\r\n                                    <ButtonBase className={classes.MapButton}\r\n                                        type='button'\r\n                                        focusRipple\r\n                                        onClick={onMapClick}>\r\n                                        <div className={classes.MapDiv}>\r\n                                            <div className={classes.MapImg} style={themeMode.palette.type === \"light\" ? { filter: 'invert(0)', } : { filter: 'invert(1)', }} />\r\n                                        </div>\r\n                                    </ButtonBase>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={1} className={classes.mainGridHeadItem} >\r\n                            <Grid className={classes.mainGridContainer}\r\n                                container\r\n                                direction=\"column\"\r\n                                justify=\"center\"\r\n                                alignItems=\"stretch\" >\r\n                                <Grid item xs={12} className={classes.menuButtonContainerItem} >\r\n                                    <Typography className={classes.mainGridContainer}\r\n                                        align='center'\r\n                                        variant='h6'>\r\n                                        {lang.currLang.texts.hello + props.store.auth.user.nickname}\r\n                                    </Typography>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={6} className={classes.mainGridBodyItem} >\r\n\r\n                            <Grid className={classes.mainGridContainer}\r\n                                container\r\n                                direction=\"column\"\r\n                                justify=\"center\"\r\n                                alignItems=\"stretch\" >\r\n\r\n                                <Grid className={classes.menuButtonContainer}\r\n                                    container\r\n                                    direction=\"column\"\r\n                                    justify=\"center\"\r\n                                    alignItems=\"stretch\" >\r\n\r\n\r\n                                    <Grid item xs={12} className={classes.menuButtonContainerItem} >\r\n\r\n                                        <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                            <Button\r\n                                                variant=\"contained\"\r\n                                                color=\"primary\"\r\n                                                className={classes.menuButton}\r\n                                                onClick={() => {\r\n                                                    let check = CheckTimeOut();\r\n                                                    if (check) history.push(\"/dreams\");\r\n                                                    else history.push(\"/\");\r\n                                                }}\r\n                                            >\r\n                                                {lang.currLang.buttons.dreamJoirnal}\r\n                                            </Button>\r\n                                        </Grid>\r\n\r\n                                        <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                            <Button\r\n                                                variant=\"contained\"\r\n                                                color=\"primary\"\r\n                                                className={classes.menuButton}\r\n                                                onClick={() => {\r\n                                                    let check = CheckTimeOut();\r\n                                                    if (check) history.push(\"/adddream\");\r\n                                                    else history.push(\"/\");\r\n                                                }}\r\n                                            >\r\n                                                {lang.currLang.buttons.addDream}\r\n                                            </Button>\r\n                                        </Grid>\r\n\r\n                                        <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                            <Button\r\n                                                variant=\"contained\"\r\n                                                color=\"primary\"\r\n                                                className={classes.menuButton}\r\n                                                onClick={() => {\r\n                                                    let check = CheckTimeOut();\r\n                                                    if (check) history.push(\"/addcdream\");\r\n                                                    else history.push(\"/\");\r\n                                                }}\r\n                                            >\r\n                                                {lang.currLang.buttons.addCDream}\r\n                                            </Button>\r\n                                        </Grid>\r\n\r\n                                        <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                            <Button variant=\"contained\" color=\"primary\" className={classes.menuButton}>\r\n                                                {lang.currLang.buttons.techniques}\r\n                                            </Button>\r\n                                        </Grid>\r\n\r\n                                        <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                            <Button variant=\"contained\" color=\"primary\" className={classes.menuButton}>\r\n                                                {lang.currLang.buttons.adventures}\r\n                                            </Button>\r\n                                        </Grid>\r\n\r\n                                    </Grid>\r\n\r\n                                </Grid>\r\n\r\n                            </Grid>\r\n\r\n                        </Grid>\r\n\r\n                        <Grid item xs={1} className={classes.mainGridFooterItem} >\r\n\r\n                            <Grid className={classes.menuButtonContainerFooterLanguageButtons}\r\n                                container\r\n                                direction=\"row\"\r\n                                justify=\"center\"\r\n                                alignItems=\"center\" >\r\n                                <Grid item>\r\n                                    <Button onClick={() => { changeLanguage('Ru') }}>\r\n                                        RU\r\n                                    </Button>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Button onClick={() => { changeLanguage('En') }}>\r\n                                        EN\r\n                                    </Button>\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                        </Grid>\r\n\r\n                    </Grid>\r\n\r\n                </div>\r\n\r\n            </div>\r\n\r\n            <Snackbar\r\n                open={openMessageSnackbar}\r\n                onClose={handleCloseMessageSnackbar}\r\n                autoHideDuration={3000}>\r\n                <SnackbarContentWrapper\r\n                    className={classes.margin}\r\n                    onClose={handleCloseMessageSnackbar}\r\n                    variant={infoSnackbar.variant}\r\n                    message={infoSnackbar.message}\r\n                />\r\n            </Snackbar>\r\n\r\n        </MuiThemeProvider>\r\n    );\r\n};\r\n\r\n\r\n\r\nMainPage.propTypes = {\r\n    setCloud: PropTypes.func.isRequired,\r\n    setStar: PropTypes.func.isRequired,\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        store,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setCurrLangAction: currLangState => dispatch(setCurrLang(currLangState)),\r\n        setCloud: cloudState => dispatch(setCloud(cloudState)),\r\n        setStar: starState => dispatch(setStar(starState)),\r\n        setThemeModeAction: paletteState => dispatch(setThemeMode(paletteState)),\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(MainPage);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport jwt_decode from \"jwt-decode\";\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\n\r\nimport { setCurrLang, setUserState, setCloud, setStar, setThemeMode } from '../actions/Actions';\r\nimport { useStyles, params, randomBetween, variantIcon } from '../styles/Styles';\r\nimport setAuthToken from \"../utils/setAuthToken\";\r\nimport { instance } from './Config';\r\nimport { GET_ERRORS, SET_CURRENT_USER, SET_CLOUD, SET_STAR, CLEAR_CLOUD, CLEAR_STAR } from \"../actions/types\";\r\n\r\nimport RuDict from '../dictionary/ru';\r\nimport EnDict from '../dictionary/en';\r\n\r\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\r\nimport Visibility from '@material-ui/icons/Visibility';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nimport { MuiThemeProvider, createMuiTheme, makeStyles } from '@material-ui/core/styles';\r\n\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\n\r\nimport { mdiVk } from '@mdi/js';\r\nimport Icon from '@mdi/react';\r\n\r\nimport { amber, green } from '@material-ui/core/colors';\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nconst useStyles1 = makeStyles(theme => ({\r\n    success: {\r\n        backgroundColor: green[600],\r\n    },\r\n    error: {\r\n        backgroundColor: theme.palette.error.dark,\r\n    },\r\n    info: {\r\n        backgroundColor: theme.palette.primary.main,\r\n    },\r\n    warning: {\r\n        backgroundColor: amber[700],\r\n    },\r\n    icon: {\r\n        fontSize: 20,\r\n    },\r\n    iconVariant: {\r\n        opacity: 0.9,\r\n        marginRight: theme.spacing(1),\r\n    },\r\n    message: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n    },\r\n}));\r\n\r\nfunction MySnackbarContentWrapper(props) {\r\n    const classes = useStyles1();\r\n    const { className, message, onClose, variant } = props;\r\n    const Icon = variantIcon[variant];\r\n\r\n    return (\r\n        <SnackbarContent\r\n            className={clsx(classes[variant], className)}\r\n            aria-describedby=\"client-snackbar\"\r\n            message={\r\n                <span id=\"client-snackbar\" className={classes.message}>\r\n                    <Icon className={clsx(classes.icon, classes.iconVariant)} />\r\n                    <Typography className={classes.mainGridContainer}\r\n                        align='center'\r\n                        variant='body2'>\r\n                        {message}\r\n                    </Typography>\r\n                </span>\r\n            }\r\n            action={[\r\n                <IconButton key=\"close\" aria-label=\"close\" color=\"inherit\" onClick={onClose}>\r\n                    <CloseIcon className={classes.icon} />\r\n                </IconButton>,\r\n            ]}\r\n        />\r\n    );\r\n}\r\n\r\nfunction Sign(props) {\r\n    const classes = useStyles();\r\n    const { setCloud, setStar, setThemeMode, history } = props;\r\n    const { themeMode, lang, clouds, stars } = props.store;\r\n    const muiTheme = createMuiTheme(themeMode);\r\n\r\n    const [openSnackbar, setOpenSnackbar] = React.useState(false);\r\n\r\n    const [snackbarMessage, setSnackbarMessage] = React.useState('');\r\n\r\n    const [loginData, setLoginData] = React.useState({\r\n        email: '',\r\n        password: '',\r\n    });\r\n\r\n    const [registData, setRegistData] = React.useState({\r\n        email: '',\r\n        nickname: '',\r\n        password: '',\r\n        password2: '',\r\n    });\r\n\r\n    const [regFieldErrors, setRegFieldErrors] = React.useState({\r\n        emailErr: false,\r\n        emailErrText: '',\r\n        nicknameErr: false,\r\n        nicknameErrText: '',\r\n        passwordErr: false,\r\n        passwordErrText: '',\r\n        password2Err: false,\r\n        password2ErrText: '',\r\n    });\r\n\r\n    const [isLoading, setIsLoading] = React.useState(false);\r\n\r\n    const [showPassword, setShowPassword] = React.useState(false);\r\n\r\n    const [openLogin, setOpenLogin] = React.useState(false);\r\n\r\n    const [openRegist, setOpenRegist] = React.useState(false);\r\n\r\n    const [page, setPage] = React.useState({\r\n        mainPage: true,\r\n        aboutPage: false,\r\n    });\r\n\r\n    const handleMouseDownPassword = event => {\r\n        event.preventDefault();\r\n    };\r\n\r\n    const changeAuthLogin = (e) => {\r\n        let newLoginData = loginData;\r\n        newLoginData = { ...newLoginData, email: e.target.value };\r\n        setLoginData(newLoginData);\r\n    }\r\n\r\n    const changeAuthPassword = (e) => {\r\n        let newLoginData = loginData;\r\n        newLoginData = { ...newLoginData, password: e.target.value };\r\n        setLoginData(newLoginData);\r\n    }\r\n\r\n    const changeRegistLogin = (e) => {\r\n        let newRegFieldErrors = regFieldErrors;\r\n        newRegFieldErrors = { ...newRegFieldErrors, emailErr: false };\r\n        newRegFieldErrors = { ...newRegFieldErrors, emailErrText: '' };\r\n        setRegFieldErrors(newRegFieldErrors);\r\n\r\n        let newRegistData = registData;\r\n        newRegistData = { ...newRegistData, email: e.target.value };\r\n        setRegistData(newRegistData);\r\n    }\r\n\r\n    const changeRegistNickname = (e) => {\r\n        let newRegFieldErrors = regFieldErrors;\r\n        newRegFieldErrors = { ...newRegFieldErrors, nicknameErr: false };\r\n        newRegFieldErrors = { ...newRegFieldErrors, nicknameErrText: '' };\r\n        setRegFieldErrors(newRegFieldErrors);\r\n\r\n        let newRegistData = registData;\r\n        newRegistData = { ...newRegistData, nickname: e.target.value };\r\n        setRegistData(newRegistData);\r\n    }\r\n\r\n    const changeRegistPassword = (e) => {\r\n        let newRegFieldErrors = regFieldErrors;\r\n        newRegFieldErrors = { ...newRegFieldErrors, passwordErr: false };\r\n        newRegFieldErrors = { ...newRegFieldErrors, passwordErrText: '' };\r\n        newRegFieldErrors = { ...newRegFieldErrors, password2Err: false };\r\n        newRegFieldErrors = { ...newRegFieldErrors, password2ErrText: '' };\r\n        setRegFieldErrors(newRegFieldErrors);\r\n\r\n        let newRegistData = registData;\r\n        newRegistData = { ...newRegistData, password: e.target.value };\r\n        setRegistData(newRegistData);\r\n    }\r\n\r\n    const changeRegistPassword2 = (e) => {\r\n        let newRegFieldErrors = regFieldErrors;\r\n        newRegFieldErrors = { ...newRegFieldErrors, passwordErr: false };\r\n        newRegFieldErrors = { ...newRegFieldErrors, passwordErrText: '' };\r\n        newRegFieldErrors = { ...newRegFieldErrors, password2Err: false };\r\n        newRegFieldErrors = { ...newRegFieldErrors, password2ErrText: '' };\r\n        setRegFieldErrors(newRegFieldErrors);\r\n\r\n        let newRegistData = registData;\r\n        newRegistData = { ...newRegistData, password2: e.target.value };\r\n        setRegistData(newRegistData);\r\n    }\r\n\r\n    const singIn = () => {\r\n        instance\r\n            .post(\"/actions/users/login\", loginData)\r\n            .then(res => {\r\n                const { token } = res.data;\r\n                localStorage.setItem(\"jwtToken\", token);\r\n                setAuthToken(token);\r\n                const decoded = jwt_decode(token);\r\n                props.setUserState({\r\n                    type: SET_CURRENT_USER,\r\n                    payload: decoded\r\n                });\r\n                setIsLoading(false);\r\n                history.push(\"/luciddreams\");\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                if (err.response.data.email === 'UserNotExist') {\r\n                    setSnackbarMessage(lang.currLang.errors.UserNotExist);\r\n                }\r\n                if (err.response.data.email === 'EmailIsNotValid') {\r\n                    setSnackbarMessage(lang.currLang.errors.EmailIsNotValid);\r\n                }\r\n                if (err.response.data.passwordincorrect === 'IncorrectPassword') {\r\n                    setSnackbarMessage(lang.currLang.errors.IncorrectPassword);\r\n                }\r\n\r\n                setOpenSnackbar(true);\r\n                setIsLoading(false);\r\n            });\r\n    };\r\n\r\n    const singUp = () => {\r\n        let isErr = false;\r\n        let newRegFieldErrors = regFieldErrors;\r\n\r\n        if (registData.email.length === 0) {\r\n            newRegFieldErrors = { ...newRegFieldErrors, emailErr: true };\r\n            newRegFieldErrors = { ...newRegFieldErrors, emailErrText: lang.currLang.errors.emailLenght };\r\n            isErr = true;\r\n        }\r\n        if (registData.nickname.length === 0) {\r\n            newRegFieldErrors = { ...newRegFieldErrors, nicknameErr: true };\r\n            newRegFieldErrors = { ...newRegFieldErrors, nicknameErrText: lang.currLang.errors.nicknameLenght };\r\n            isErr = true;\r\n        }\r\n        if (registData.password.length === 0) {\r\n            newRegFieldErrors = { ...newRegFieldErrors, passwordErr: true };\r\n            newRegFieldErrors = { ...newRegFieldErrors, passwordErrText: lang.currLang.errors.passwordLenght };\r\n            isErr = true;\r\n        }\r\n        if (registData.password2.length === 0) {\r\n            newRegFieldErrors = { ...newRegFieldErrors, password2Err: true };\r\n            newRegFieldErrors = { ...newRegFieldErrors, password2ErrText: lang.currLang.errors.password2Lenght };\r\n            isErr = true;\r\n        }\r\n        if (registData.password !== registData.password2) {\r\n            newRegFieldErrors = { ...newRegFieldErrors, passwordErr: true };\r\n            newRegFieldErrors = { ...newRegFieldErrors, passwordErrText: lang.currLang.errors.passwordsCompare };\r\n            newRegFieldErrors = { ...newRegFieldErrors, password2Err: true };\r\n            newRegFieldErrors = { ...newRegFieldErrors, password2ErrText: lang.currLang.errors.passwordsCompare };\r\n            isErr = true;\r\n        }\r\n\r\n        if (isErr) {\r\n            setRegFieldErrors(newRegFieldErrors);\r\n            setIsLoading(false);\r\n        }\r\n        else {\r\n            instance\r\n                .post('/actions/users/register', registData)\r\n                .then(res => {\r\n                    //TODO нормальный popup\r\n                    alert(lang.currLang.texts.sucessRegistration);\r\n\r\n                    let newRegistData = registData;\r\n                    newRegistData = { ...newRegistData, email: '' };\r\n                    newRegistData = { ...newRegistData, nickname: '' };\r\n                    newRegistData = { ...newRegistData, password: '' };\r\n                    newRegistData = { ...newRegistData, password2: '' };\r\n                    setRegistData(newRegistData);\r\n\r\n                    click('closeRegist');\r\n                    click('openLogin');\r\n                    setIsLoading(false);\r\n                })\r\n                .catch(err => {\r\n                    props.setUserState({\r\n                        type: GET_ERRORS,\r\n                        payload: err.response.data\r\n                    });\r\n\r\n                    if (err.response.data.email === 'EmailIsBusy') {\r\n                        setSnackbarMessage(lang.currLang.errors.EmailIsBusy);\r\n                    }\r\n                    if (err.response.data.password === 'PasswordLenght5Symbols') {\r\n                        setSnackbarMessage(lang.currLang.errors.PasswordLenght5Symbols);\r\n                    }\r\n\r\n                    setOpenSnackbar(true);\r\n                    setIsLoading(false);\r\n                });\r\n        }\r\n    };\r\n\r\n    const click = (action) => {\r\n        let newPages = page;\r\n        switch (action) {\r\n            case 'useVk':\r\n                // window.VK.Auth.login(checkLoginState, 4194304);\r\n                // let loadItems = async () => {\r\n                //     const response = await fetch('http://10.203.117.137:3001/auth/vk', {\r\n                //         method: 'GET',\r\n                //         credentials: 'include',\r\n                //     });\r\n                //     const body = await response.json();\r\n\r\n                //     console.log(response);\r\n                // }\r\n                break;\r\n            case 'openLogin':\r\n                setOpenLogin(true);\r\n                break;\r\n            case 'openRegist':\r\n                setOpenRegist(true);\r\n                break;\r\n            case 'closeLogin':\r\n                setOpenLogin(false);\r\n                setShowPassword(false);\r\n                break;\r\n            case 'closeRegist':\r\n                setOpenRegist(false);\r\n                setShowPassword(false);\r\n                break;\r\n            case 'signIn':\r\n                setIsLoading(true);\r\n                singIn();\r\n                break;\r\n            case 'signUp':\r\n                setIsLoading(true);\r\n                singUp();\r\n                break;\r\n            case 'openAboutPage':\r\n                newPages = { ...newPages, aboutPage: true };\r\n                newPages = { ...newPages, mainPage: false };\r\n                setPage(newPages);\r\n                break;\r\n            case 'closeAboutPage':\r\n                newPages = { ...newPages, aboutPage: false };\r\n                newPages = { ...newPages, mainPage: true };\r\n                setPage(newPages);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    };\r\n\r\n    const handleCloseSnackbar = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setOpenSnackbar(false);\r\n    };\r\n\r\n    const changeLanguage = (language) => {\r\n        if (language === 'Ru') {\r\n            props.setCurrLang(RuDict);\r\n        }\r\n        else {\r\n            props.setCurrLang(EnDict);\r\n        }\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        setStar({\r\n            type: CLEAR_STAR,\r\n            starState: '',\r\n        });\r\n        setCloud({\r\n            type: CLEAR_CLOUD,\r\n            cloudState: '',\r\n        });\r\n        for (let i = 0; i < params.amountStars; i++) {\r\n            let size = Math.round(Math.random() * 10) === 0 ? params.size.giant : randomBetween(params.size.min, params.size.max);\r\n            setStar({\r\n                type: SET_STAR,\r\n                starState: <div className={classes.AppStar}\r\n                    key={i}\r\n                    style={{\r\n                        left: randomBetween(0, 100) + \"%\",\r\n                        top: randomBetween(0, 100) + \"%\",\r\n                        width: size + \"px\",\r\n                        height: size + \"px\",\r\n                        boxShadow: \"0 0 \" + size + \"px \" + size / 2 + \"px #043668\",\r\n                        animationDuration: randomBetween(params.duration.min, params.duration.max) + \"s\",\r\n                    }}\r\n                />\r\n            });\r\n        }\r\n        for (let i = 0; i < params.amountClouds; i++) {\r\n            let left = Math.round(Math.random() * 50 + 90);\r\n            let top = Math.round(Math.random() * 100 / 100 * 90);\r\n            let scale = Math.random() * 1.5 - 0.5;\r\n            let opacity = Math.random() * 90 / 100;\r\n            let speed = Math.random() * 30 + 15;\r\n            setCloud({\r\n                type: SET_CLOUD,\r\n                cloudState: <div className={classes.AppCloud}\r\n                    key={i}\r\n                    style={{\r\n                        left: left + '%',\r\n                        top: top + '%',\r\n                        width: '400px',\r\n                        height: '100px',\r\n                        transform: 'scale(' + scale + ')',\r\n                        opacity: opacity,\r\n                        animationDuration: speed + 's',\r\n                    }} />\r\n            });\r\n        }\r\n\r\n        if (new Date().getHours() > 15) {\r\n            setThemeMode({\r\n                type: \"dark\",\r\n                primary: { main: \"#f9a825\" },\r\n                secondary: { main: \"#f50057\" },\r\n                error: { main: \"#cc0000\" },\r\n            });\r\n        }\r\n        else {\r\n            setThemeMode({\r\n                type: \"light\",\r\n                primary: { main: \"#3f51b5\" },\r\n                secondary: { main: \"#f50057\" },\r\n                error: { main: \"#cc0000\" },\r\n            });\r\n        }\r\n    }, [classes, setCloud, setStar, setThemeMode]);\r\n\r\n    return (\r\n        <MuiThemeProvider theme={muiTheme}>\r\n            <CssBaseline />\r\n\r\n            <div className={classes.AppDivDark}>\r\n                <div className={classes.AppDivLight} style={themeMode.palette.type === \"light\" ? { opacity: 1, } : { opacity: 0, }} />\r\n                {themeMode.palette.type === \"light\" ?\r\n                    <div className={classes.AppCloudsDiv} style={themeMode.palette.type === \"light\" ? { opacity: 1, } : { opacity: 0, }} >\r\n                        {clouds.clouds}\r\n                    </div>\r\n                    :\r\n                    <div className={classes.AppStarsDiv} style={themeMode.palette.type === \"light\" ? { opacity: 0, } : { opacity: 1, }} >\r\n                        {stars.stars}\r\n                    </div>\r\n                }\r\n            </div>\r\n\r\n            <div className={classes.root} id='rootDiv'>\r\n\r\n                <div className={classes.mainPage}\r\n                    style={\r\n                        page.mainPage === true\r\n                            ? { transform: 'translateY(0%)' }\r\n                            : { transform: 'translateY(-100%)' }\r\n                    } >\r\n\r\n                    <Grid className={classes.mainGridContainer}\r\n                        container\r\n                        direction=\"column\"\r\n                        justify=\"center\"\r\n                        alignItems=\"stretch\" >\r\n\r\n                        <Grid item xs={11} className={classes.mainGridBodyItem} >\r\n\r\n                            <Grid className={classes.menuButtonContainer}\r\n                                container\r\n                                direction=\"column\"\r\n                                justify=\"center\"\r\n                                alignItems=\"stretch\" >\r\n\r\n                                <Grid item xs={3} />\r\n\r\n                                <Grid item xs={6} className={classes.menuButtonContainerItem}>\r\n\r\n                                    <Dialog\r\n                                        open={openLogin}\r\n                                        TransitionComponent={Transition}\r\n                                        keepMounted\r\n                                        aria-labelledby=\"alert-dialog-slide-title\"\r\n                                        aria-describedby=\"alert-dialog-slide-description\" >\r\n\r\n                                        <DialogTitle id=\"alert-dialog-slide-title\">\r\n                                            {lang.currLang.buttons.signIn}\r\n                                        </DialogTitle>\r\n\r\n                                        <DialogContent>\r\n\r\n                                            <Grid item xs={12} className={classes.menuButtonContainerItem}>\r\n\r\n                                                <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                                    <TextField\r\n                                                        className={classes.textField}\r\n                                                        id=\"email-field\"\r\n                                                        type=\"email\"\r\n                                                        label=\"Email\"\r\n                                                        onChange={(e) => { changeAuthLogin(e) }} />\r\n\r\n                                                </Grid>\r\n\r\n                                                <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                                    <TextField\r\n                                                        id=\"password-field\"\r\n                                                        className={classes.textField}\r\n                                                        type={showPassword ? 'text' : 'password'}\r\n                                                        label={lang.currLang.texts.password}\r\n                                                        onChange={(e) => { changeAuthPassword(e) }}\r\n                                                        InputProps={{\r\n                                                            endAdornment: (\r\n                                                                <InputAdornment position=\"end\">\r\n                                                                    <IconButton\r\n                                                                        tabIndex=\"-1\"\r\n                                                                        edge=\"end\"\r\n                                                                        aria-label=\"toggle password visibility\"\r\n                                                                        onClick={() => { showPassword ? setShowPassword(false) : setShowPassword(true) }}\r\n                                                                        onMouseDown={handleMouseDownPassword} >\r\n                                                                        {showPassword ? <VisibilityOff /> : <Visibility />}\r\n                                                                    </IconButton>\r\n                                                                </InputAdornment>\r\n                                                            ),\r\n                                                        }} />\r\n                                                </Grid>\r\n\r\n                                                <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                                    <Typography>\r\n                                                        {lang.currLang.texts.or}\r\n                                                    </Typography>\r\n                                                </Grid>\r\n\r\n                                                <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                                    <IconButton className={classes.button}\r\n                                                        onClick={() => { click('useVk') }}\r\n                                                        disabled={isLoading}>\r\n                                                        <Icon path={mdiVk} size={2} color={themeMode.palette.type === 'light' ? 'rgba(0, 0, 0, 0.54)' : 'rgba(255, 255, 255, 1)'} />\r\n                                                    </IconButton>\r\n                                                </Grid>\r\n\r\n                                            </Grid>\r\n\r\n                                            {isLoading\r\n                                                ? <LinearProgress /> :\r\n                                                ''}\r\n\r\n                                        </DialogContent>\r\n\r\n                                        {!isLoading\r\n                                            ?\r\n                                            <DialogActions>\r\n                                                <Button onClick={() => { click('closeLogin') }}\r\n                                                    color=\"secondary\"\r\n                                                    disabled={isLoading}>\r\n                                                    {lang.currLang.buttons.cancel}\r\n                                                </Button>\r\n\r\n                                                <Button onClick={() => { click('signIn') }}\r\n                                                    color=\"primary\"\r\n                                                    disabled={isLoading}>\r\n                                                    {lang.currLang.buttons.signIn}\r\n                                                </Button>\r\n\r\n                                            </DialogActions>\r\n                                            : ''}\r\n\r\n                                    </Dialog>\r\n\r\n                                    <Dialog\r\n                                        open={openRegist}\r\n                                        TransitionComponent={Transition}\r\n                                        keepMounted\r\n                                        aria-labelledby=\"alert-dialog-slide-title\"\r\n                                        aria-describedby=\"alert-dialog-slide-description\" >\r\n\r\n                                        <DialogTitle id=\"alert-dialog-slide-title\">\r\n                                            {lang.currLang.buttons.signUp}\r\n                                        </DialogTitle>\r\n\r\n                                        <DialogContent>\r\n\r\n                                            <Grid item xs={12} className={classes.menuButtonContainerItem}>\r\n\r\n                                                <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                                    <TextField\r\n                                                        error={regFieldErrors.emailErr}\r\n                                                        helperText={regFieldErrors.emailErrText}\r\n                                                        className={classes.textField}\r\n                                                        id=\"reg-email-field\"\r\n                                                        type=\"email\"\r\n                                                        label=\"Email\"\r\n                                                        onChange={(e) => { changeRegistLogin(e) }} />\r\n\r\n                                                </Grid>\r\n\r\n                                                <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                                    <TextField\r\n                                                        error={regFieldErrors.nicknameErr}\r\n                                                        helperText={regFieldErrors.nicknameErrText}\r\n                                                        className={classes.textField}\r\n                                                        id=\"reg-nickname-field\"\r\n                                                        type=\"text\"\r\n                                                        label={lang.currLang.texts.nickname}\r\n                                                        onChange={(e) => { changeRegistNickname(e) }} />\r\n                                                </Grid>\r\n\r\n                                                <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                                    <TextField\r\n                                                        error={regFieldErrors.passwordErr}\r\n                                                        helperText={regFieldErrors.passwordErrText}\r\n                                                        id=\"reg-password-field\"\r\n                                                        className={classes.textField}\r\n                                                        type={showPassword ? 'text' : 'password'}\r\n                                                        label={lang.currLang.texts.password}\r\n                                                        onChange={(e) => { changeRegistPassword(e) }}\r\n                                                        InputProps={{\r\n                                                            endAdornment: (\r\n                                                                <InputAdornment position=\"end\">\r\n                                                                    <IconButton\r\n                                                                        tabIndex=\"-1\"\r\n                                                                        edge=\"end\"\r\n                                                                        aria-label=\"toggle password visibility\"\r\n                                                                        onClick={() => { showPassword ? setShowPassword(false) : setShowPassword(true) }}\r\n                                                                        onMouseDown={handleMouseDownPassword} >\r\n                                                                        {showPassword ? <VisibilityOff /> : <Visibility />}\r\n                                                                    </IconButton>\r\n                                                                </InputAdornment>\r\n                                                            ),\r\n                                                        }} />\r\n                                                </Grid>\r\n\r\n                                                <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                                    <TextField\r\n                                                        error={regFieldErrors.password2Err}\r\n                                                        helperText={regFieldErrors.password2ErrText}\r\n                                                        id=\"reg-password2-field\"\r\n                                                        className={classes.textField}\r\n                                                        type={showPassword ? 'text' : 'password'}\r\n                                                        label={lang.currLang.texts.passwordAgain}\r\n                                                        onChange={(e) => { changeRegistPassword2(e) }}\r\n                                                        InputProps={{\r\n                                                            endAdornment: (\r\n                                                                <InputAdornment position=\"end\">\r\n                                                                    <IconButton\r\n                                                                        tabIndex=\"-1\"\r\n                                                                        edge=\"end\"\r\n                                                                        aria-label=\"toggle password visibility\"\r\n                                                                        onClick={() => { showPassword ? setShowPassword(false) : setShowPassword(true) }}\r\n                                                                        onMouseDown={handleMouseDownPassword} >\r\n                                                                        {showPassword ? <VisibilityOff /> : <Visibility />}\r\n                                                                    </IconButton>\r\n                                                                </InputAdornment>\r\n                                                            ),\r\n                                                        }} />\r\n                                                </Grid>\r\n\r\n                                            </Grid>\r\n\r\n                                            {isLoading\r\n                                                ? <LinearProgress />\r\n                                                : ''}\r\n\r\n                                        </DialogContent>\r\n                                        {!isLoading\r\n                                            ?\r\n                                            <DialogActions>\r\n                                                <Button onClick={() => { click('closeRegist') }}\r\n                                                    color=\"secondary\"\r\n                                                    disabled={isLoading}>\r\n                                                    {lang.currLang.buttons.cancel}\r\n                                                </Button>\r\n                                                <Button onClick={() => { click('signUp') }}\r\n                                                    color=\"primary\"\r\n                                                    disabled={isLoading}>\r\n                                                    {lang.currLang.buttons.signUp}\r\n                                                </Button>\r\n                                            </DialogActions>\r\n                                            : ''}\r\n                                    </Dialog>\r\n\r\n                                    <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                        <Button variant=\"contained\" color=\"primary\" className={classes.menuButton} onClick={() => { click('openLogin') }}>\r\n                                            {lang.currLang.buttons.signIn}\r\n                                        </Button>\r\n                                    </Grid>\r\n\r\n                                    <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                        <Button variant=\"contained\" color=\"primary\" className={classes.menuButton} onClick={() => { click('openRegist') }}>\r\n                                            {lang.currLang.buttons.signUp}\r\n                                        </Button>\r\n                                    </Grid>\r\n\r\n                                    <Grid item xs={2} className={classes.menuDivButton} align=\"center\"></Grid>\r\n\r\n                                    <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                        <Button variant=\"contained\"\r\n                                            color=\"primary\"\r\n                                            className={classes.menuButton}\r\n                                            onClick={() => (click('openAboutPage'))} >\r\n                                            {lang.currLang.buttons.about}\r\n                                        </Button>\r\n                                    </Grid>\r\n\r\n                                </Grid>\r\n\r\n                                <Grid item xs={3} />\r\n\r\n                            </Grid>\r\n\r\n                        </Grid>\r\n\r\n                        <Grid item xs={1} className={classes.mainGridFooterItem} >\r\n\r\n                            <Grid className={classes.menuButtonContainerFooterLanguageButtons}\r\n                                container\r\n                                direction=\"row\"\r\n                                justify=\"center\"\r\n                                alignItems=\"center\" >\r\n                                <Grid item>\r\n                                    <Button onClick={() => { changeLanguage('Ru') }}>\r\n                                        RU\r\n                                    </Button>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Button onClick={() => { changeLanguage('En') }}>\r\n                                        EN\r\n                                    </Button>\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                        </Grid>\r\n\r\n                    </Grid>\r\n\r\n                </div >\r\n\r\n                <div className={classes.aboutPage} style={page.aboutPage === true ? { transform: 'translateY(-100%)' } : { transform: 'translateY(0%)' }} >\r\n\r\n                    <Grid className={classes.aboutGridContainer}\r\n                        container\r\n                        direction=\"column\"\r\n                        justify=\"center\"\r\n                        alignItems=\"stretch\"\r\n                        spacing={5} >\r\n\r\n                        <Grid item\r\n                            className={classes.aboutGridItem}\r\n                            align='center'>\r\n\r\n                            <Paper className={classes.aboutPaper}>\r\n                                <Typography>\r\n                                    {lang.currLang.texts.about}\r\n                                </Typography>\r\n                            </Paper>\r\n\r\n                        </Grid>\r\n\r\n                        <Grid item\r\n                            className={classes.aboutGridItem}\r\n                            align='center'>\r\n\r\n                            <Button variant=\"contained\"\r\n                                color=\"primary\"\r\n                                className={classes.menuButton}\r\n                                onClick={() => (click('closeAboutPage'))} >\r\n                                {lang.currLang.buttons.close}\r\n                            </Button>\r\n\r\n                        </Grid>\r\n\r\n                    </Grid>\r\n                </div>\r\n            </div >\r\n\r\n            <Snackbar\r\n                open={openSnackbar}\r\n                onClose={handleCloseSnackbar}\r\n                autoHideDuration={3000}>\r\n                <MySnackbarContentWrapper\r\n                    className={classes.margin}\r\n                    onClose={handleCloseSnackbar}\r\n                    variant='error'\r\n                    message={snackbarMessage}\r\n                />\r\n            </Snackbar>\r\n\r\n        </MuiThemeProvider>\r\n    )\r\n}\r\n\r\nSign.propTypes = {\r\n    setCurrLang: PropTypes.func.isRequired,\r\n    setUserState: PropTypes.func.isRequired,\r\n    setCloud: PropTypes.func.isRequired,\r\n    setThemeMode: PropTypes.func.isRequired,\r\n    lang: PropTypes.object.isRequired,\r\n    auth: PropTypes.object.isRequired,\r\n    errors: PropTypes.object.isRequired,\r\n    clouds: PropTypes.object.isRequired,\r\n    stars: PropTypes.object.isRequired,\r\n}\r\n\r\nMySnackbarContentWrapper.propTypes = {\r\n    className: PropTypes.string,\r\n    message: PropTypes.string,\r\n    onClose: PropTypes.func,\r\n    variant: PropTypes.oneOf(['error', 'info', 'success', 'warning']).isRequired,\r\n};\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        store,\r\n        lang: store.lang,\r\n        auth: store.auth,\r\n        errors: store.errors,\r\n        clouds: store.clouds,\r\n        stars: store.stars,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setCurrLang: currLangState => dispatch(setCurrLang(currLangState)),\r\n        setUserState: State => dispatch(setUserState(State)),\r\n        setCloud: cloudState => dispatch(setCloud(cloudState)),\r\n        setStar: starState => dispatch(setStar(starState)),\r\n        setThemeMode: paletteState => dispatch(setThemeMode(paletteState)),\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Sign);","import React from 'react';\r\nimport { Router, Route, Switch } from \"react-router-dom\";\r\nimport { Provider } from \"react-redux\";\r\n\r\nimport './App.css';\r\n\r\nimport history from '../history';\r\nimport { store } from \"../store\";\r\nimport { CheckTimeOut } from '../utils/CheckLoginTimeOut';\r\nimport setAuthToken from \"../utils/setAuthToken\";\r\nimport { SET_CURRENT_USER } from \"../actions/types\"\r\nimport PrivateRoute from \"../components/PrivateRoute\";\r\n\r\nimport AddDream from './AddDream';\r\nimport ViewDreams from './ViewDreams';\r\nimport AddCDream from './AddCDream';\r\nimport MainPage from \"./MainPage\";\r\nimport Sign from './Sign';\r\n\r\nconst App = () => {\r\n\r\n    let check = CheckTimeOut();\r\n    if (!check) {\r\n        localStorage.removeItem(\"jwtToken\");\r\n        setAuthToken(false);\r\n        store.dispatch({\r\n            type: SET_CURRENT_USER,\r\n            payload: null\r\n        });\r\n        history.push(\"/\");\r\n    }\r\n    else {\r\n        history.push(\"/luciddreams\");\r\n    }\r\n    \r\n    return (\r\n        <Provider store={store}>\r\n            <Router history={history}>\r\n                <Route exact path=\"/\" component={Sign} />\r\n                <Switch>\r\n                    <PrivateRoute exact path=\"/luciddreams\" component={MainPage} />\r\n                    <PrivateRoute exact path=\"/addcdream\" component={AddCDream} />\r\n                    <PrivateRoute exact path=\"/adddream\" component={AddDream} />\r\n                    <PrivateRoute exact path=\"/dreams\" component={ViewDreams} />\r\n                </Switch>\r\n            </Router>\r\n        </Provider>\r\n    );\r\n};\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <div id='global'\r\n        style={{\r\n            overflow: 'auto',\r\n            height: '100%',\r\n            position: 'relative',\r\n        }}\r\n    >\r\n        <App />\r\n    </div>\r\n    , document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n\r\n"],"sourceRoot":""}