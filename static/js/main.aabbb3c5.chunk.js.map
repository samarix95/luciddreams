{"version":3,"sources":["img/map.png","img/sun.png","img/moon.png","img/astronaut.png","img/cloud.svg","history.js","actions/types.js","dictionary/en.js","reducers/currLang.js","reducers/cloud.js","reducers/star.js","reducers/themeMode.js","reducers/authReducer.js","reducers/errorReducer.js","reducers/snackbarReducer.js","reducers/index.js","store.js","utils/setAuthToken.js","utils/CheckLoginTimeOut.js","actions/Actions.js","components/PrivateRoute.js","components/muiltiple/MapCell.jsx","styles/Styles.js","components/DreamMap.jsx","components/Config.js","functions.js","components/AddDream.jsx","components/AddCDream.jsx","components/AddTechnics.jsx","components/muiltiple/DreamCard.jsx","components/ViewDreams.jsx","dictionary/ru.js","components/MainPage.jsx","components/Sign.js","components/muiltiple/TechnicCard.jsx","components/Technics.jsx","Routes.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","createBrowserHistory","GET_ERRORS","SET_CURRENT_USER","SET_CLOUD","CLEAR_CLOUD","SET_STAR","CLEAR_STAR","SET_LANG","SET_THEME_MODE","SET_SNACKBAR_MODE","words","current","buttons","signIn","signUp","dreamJoirnal","addDream","addCDream","techniques","adventures","close","about","cancel","add","Edit","Delete","Save","texts","or","nickname","password","passwordAgain","sucessRegistration","hello","changleLanguage","success","title","description","content","tags","technics","rating","Dream","Cdream","NoDreams","pickDate","pickTime","TapToShow","Public","Publish","Unpublish","PublicAlert","PublicText","PublicDescription","UnpublicAlert","UnpublicText","UnpublicDescription","DeleteAlert","DeleteText","errors","emailLenght","nicknameLenght","passwordLenght","password2Lenght","passwordsCompare","UserNotExist","EmailIsNotValid","IncorrectPassword","EmailIsBusy","PasswordLenght5Symbols","NotLogin","EmptyTitle","EmptyDescription","EmptyDream","NoChanges","CantDeletePost","initialState","currLang","EnDict","clouds","stars","palette","type","primary","main","secondary","error","isempty","require","isAuthenticated","user","loading","snackbar","open","variant","message","rootReducer","combineReducers","lang","state","action","currLangState","cloudState","starState","themeMode","auth","payload","middleware","thunk","store","createStore","applyMiddleware","setAuthToken","token","axios","defaults","headers","common","CheckTimeOut","localStorage","jwtToken","decoded","jwt_decode","dispatch","currentTime","Date","now","exp","setCurrLang","setSnackbar","connect","Component","component","rest","render","props","to","MapCell","i","j","cellHeight","cellWidth","url","color","style","height","minWidth","maxWidth","border","transition","backgroundImage","backgroundSize","backgroundColor","onClick","alert","params","amountStars","amountClouds","size","min","max","giant","duration","variantIcon","CheckCircleIcon","warning","WarningIcon","ErrorIcon","info","InfoIcon","randomBetween","a","b","Math","random","useStyles","makeStyles","theme","SwipeableViews","position","media","iconCenter","display","margin","dreamCardDiv","marginTop","marginBottom","width","borderRadius","divDreamsNotFoundImg","background","divDreamsNotFound","left","transform","textAlign","contentPaper","text","padding","pickerGridContainer","div85width","top","ratingGridContainer","pickers","avatarRoot","verySmallAvatar","spacing","smallAvatar","smallChip","centerCircularProgress","mainGridDreamsBodyItemContainer","paddingTop","boxSizing","maxHeight","overflow","mainGridDreamsBodyItemContainerPaper","opacity","mainGridDreamsBodyItem","mainGridDreamsContainer","card","expand","marginLeft","transitions","create","shortest","expandOpen","textField","root","flexGrow","window","innerHeight","mainPage","aboutPage","AppDivDark","zIndex","AppDivLight","AppStarsDiv","AppCloudsDiv","AppStar","filter","animation","AppCloud","backgroundRepeat","CloudSvg","image","SkyDiv","MoonSrc","MoonImg","SunSrc","SunImg","AstronautButton","AstronautDiv","AstronautImg","MapButton","MapDiv","MapImg","mainGridContainer","mainGridHeadItem","mainGridBodyItem","menuButtonContainerItem","menuButtonContainer","menuButtonGrid","menuDivButton","menuButton","actionButton","mainGridFooterItem","menuButtonContainerFooterLanguageButtons","aboutGridContainer","fullMinWidth","inputDiv","inputScrollableDiv","chips","flexWrap","noWrap","chip","aboutGridItem","mainPaperGridBodyItem","paper","minMargin","VKLoginDiv","VKLoginButton","boxShadow","JSONtable","0","1","2","history","classes","muiTheme","createMuiTheme","React","useState","setcellHeight","setcellWidth","CssBaseline","className","Grid","container","direction","justify","alignItems","item","xs","zeroMinWidth","Container","table","Object","keys","forEach","row","rows","col","push","key","createTable","Fab","aria-label","align","Button","instance","baseURL","timeout","compare","obj1","obj2","every","hasOwnProperty","defaultTags","assign","overrides","MUIRichTextEditor","toolbar","justifyContent","minHeight","borderBottom","placeHolder","editor","editorContainer","isEditMode","setIsEditMode","isLoading","setIsLoading","titleText","setTitleText","selectedDate","setSelectedDate","contentText","setContentText","prevContentText","setPrevContentText","selectedLocations","setselectedLocations","locations","setLocations","handleDateChange","date","useEffect","get","then","res","data","catch","err","console","log","location","defaultData","post_title","dream_date","post_content","id","Number","name_rus","name_eng","img_url","Paper","TextField","required","value","label","onChange","e","target","utils","DateFnsUtils","locale","ruLocale","format","KeyboardButtonProps","ampm","currCont","getCurrentContent","convert","convertToRaw","JSON","stringify","inlineToolbar","controls","customControls","name","icon","inlineStyle","length","Autocomplete","multiple","options","getOptionLabel","option","Chip","avatar","Avatar","src","defaultValue","map","event","handleChangeLocations","filterSelectedOptions","renderInput","fullWidth","LinearProgress","havErr","errorMessage","parse","blocks","hasChanges","tagChanges","postData","post_id","getTime","dreamDate","toLocaleString","timeZone","deleteTags","item1","some","item2","addTags","remove","post","create_user","post_type","savepost","defaultTechnics","selectedTechnics","setselectedTechnics","realisticsValue","setRealisticsValue","setTechnics","tech","handleChangeTechnics","Typography","Rating","newValue","techChanges","deleteTech","addTech","setValue","titleRu","titleEn","descriptionRu","descriptionEn","technicsData","setTechnicsData","fileldsErr","setFileldsErr","changeData","field","newTechnicsData","newFileldsErr","Tabs","centered","indicatorColor","textColor","Tab","animateHeight","axis","index","onChangeIndex","role","multiline","isError","save","is_public","expanded","setExpanded","anchorEl","setAnchorEl","openAlert","setOpenAlert","publicChecked","setPublicChecked","header","body","commit","alertTexts","setAlertTexts","dateOfDream","getDate","getMonth","getFullYear","getHours","getMinutes","slice","srcContent","toString","jsonPparse","convertfromraw","convertFromRaw","text_content","EditorState","createWithContent","getPlainText","closeMenu","clickMenu","newAlertTexts","checked","pathname","loadPosts","newPublic","Dialog","onClose","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","DialogActions","autoFocus","Menu","keepMounted","Boolean","MenuItem","ListItemIcon","FormControlLabel","control","Checkbox","fontSize","Card","raised","CardHeader","Tooltip","disableFocusListener","disableTouchListener","subheader","IconButton","currentTarget","CardContent","technic","tag","CardActions","disableSpacing","clsx","aria-expanded","Collapse","in","unmountOnExit","readOnly","dreams","setDreams","useCallback","CircularProgress","disableShrink","TransitionDown","Slide","setCurrLangAction","setTheme","undefined","prevLanguage","setPrevLanguage","openLangSnakbar","setOpenLangSnakbar","langSnakbarMessage","setLangSnakbarMessage","setTransition","changeLanguage","language","RuDict","handleCloseLangSnakbar","times_mode","Snackbar","anchorOrigin","vertical","horizontal","TransitionComponent","SnackbarContent","newLang","newUserData","ButtonBase","focusRipple","newPaletteType","primaryColor","secondaryColor","Transition","forwardRef","ref","setUserState","State","email","loginData","setLoginData","password2","registData","setRegistData","emailErr","emailErrText","nicknameErr","nicknameErrText","passwordErr","passwordErrText","password2Err","password2ErrText","regFieldErrors","setRegFieldErrors","showPassword","setShowPassword","openLogin","setOpenLogin","openRegist","setOpenRegist","page","setPage","handleMouseDownPassword","preventDefault","singUp","isErr","newRegFieldErrors","newRegistData","click","response","newPages","setItem","passwordincorrect","onBlur","newLoginData","changeAuthLogin","changeAuthPassword","InputProps","endAdornment","InputAdornment","tabIndex","edge","onMouseDown","button","disabled","path","mdiVk","helperText","changeRegistLogin","changeRegistNickname","changeRegistPassword","changeRegistPassword2","aboutPaper","actions","loadTechnics","CardActionArea","CardMedia","gutterBottom","roles","useStyles1","green","dark","amber","iconVariant","marginRight","MySnackbarContentWrapper","Icon","openSnackbar","setOpenSnackbar","openSnackbarVariant","setOpenSnackbarVariant","snackbarMessage","setSnackbarMessage","handleCloseSnackbar","reason","autoHideDuration","exact","Sign","DreamMap","MainPage","ViewDreams","AddDream","AddCDream","Technics","AddTechnics","check","removeItem","round","animationDuration","scale","speed","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.aabbb3c5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/map.71ce46a8.png\";","module.exports = __webpack_public_path__ + \"static/media/sun.4f817e2f.png\";","module.exports = __webpack_public_path__ + \"static/media/moon.ca0fb531.png\";","module.exports = __webpack_public_path__ + \"static/media/astronaut.7219d35a.png\";","module.exports = __webpack_public_path__ + \"static/media/cloud.7fb181bd.svg\";","import { createBrowserHistory } from \"history\";\r\n\r\nexport default createBrowserHistory();","export const GET_ERRORS = \"GET_ERRORS\";\r\nexport const USER_LOADING = \"USER_LOADING\";\r\nexport const SET_CURRENT_USER = \"SET_CURRENT_USER\";\r\n\r\nexport const SET_CLOUD = 'SET_CLOUD';\r\nexport const CLEAR_CLOUD = 'CLEAR_CLOUD';\r\n\r\nexport const SET_STAR = 'SET_STAR';\r\nexport const CLEAR_STAR = 'CLEAR_STAR';\r\n\r\nexport const SET_LANG = 'SET_LANG';\r\nexport const SET_THEME_MODE = 'SET_THEME_MODE';\r\n\r\nexport const SET_SNACKBAR_MODE = 'SET_SNACKBAR_MODE';","const words = {\r\n    current: 'En',\r\n    buttons : {\r\n        signIn: 'Sign in',\r\n        signUp: 'Sign up',\r\n        dreamJoirnal: 'Dream joirnal',\r\n        addDream: 'Add dream',\r\n        addCDream: 'Add C-dream',\r\n        techniques: 'Techniques',\r\n        adventures: 'Adventures',\r\n        close: 'Back',\r\n        about: 'About us',\r\n        cancel: 'Cancel',\r\n        add: 'Add',\r\n        Edit: 'Edit',\r\n        Delete: 'Delete',\r\n        Save: 'Save',\r\n    },\r\n    texts: {\r\n        about: 'About us About us About us About us About us About us About us About us About us About us ',\r\n        or: 'OR',\r\n        nickname: 'Nickname',\r\n        password: 'Password',\r\n        passwordAgain: 'Password again',\r\n        cancel: 'Cancel',\r\n        sucessRegistration: 'You are sign up successful',\r\n        hello: 'Hello, ',\r\n        changleLanguage: 'Save change language to ',\r\n        success: 'Success',\r\n        title: 'Title',\r\n        description: 'Description',\r\n        content: \"What's a dream\",\r\n        tags: 'Locations',\r\n        technics: 'Technics',\r\n        rating: 'Realistics',\r\n        Dream: 'Regular dream',\r\n        Cdream: 'C-dream',\r\n        NoDreams: \"You don't have dreams\",\r\n        pickDate: \"Date\",\r\n        pickTime: \"Time\",\r\n        TapToShow: \"Tap on text to show highlights\",\r\n        Public: \"Public\",\r\n        Publish: \"Unpublish\",\r\n        Unpublish: \"Publish\",\r\n        PublicAlert: \"Are you sure you want to public the dream?\",\r\n        PublicText: \"After public your friends can read this dream.\",\r\n        PublicDescription: \"Your friends can read this dream\",\r\n        UnpublicAlert: \"Are you sure you want to unpublic the dream?\",\r\n        UnpublicText: \"After unpublic your friends can't read this dream.\",\r\n        UnpublicDescription: \"Your friends can't read this dream\",\r\n        DeleteAlert: \"Are you sure you want to remove?\",\r\n        DeleteText: \"You can't restore data.\",\r\n    },\r\n    errors: {\r\n        emailLenght: 'Email must not be empty',\r\n        nicknameLenght: 'Nickname must not be empty',\r\n        passwordLenght: 'Password must not be empty',\r\n        password2Lenght: 'Password must not be empty',\r\n        passwordsCompare: 'Passwords not equal',\r\n        UserNotExist: 'Invalid email or password',\r\n        EmailIsNotValid: 'Invalid email',\r\n        IncorrectPassword: 'Invalid email or password',\r\n        EmailIsBusy: 'Email is busy',\r\n        PasswordLenght5Symbols: 'Minimum password length: 5 symbols',\r\n        NotLogin: 'You not loggin in',\r\n        EmptyTitle: 'Title must not be empty',\r\n        EmptyDescription: 'Description must not be empty',\r\n        EmptyDream: 'Dream must not be empty',\r\n        NoChanges: 'No changes',\r\n        CantDeletePost: 'Error deleting dream',\r\n    },\r\n};\r\n\r\nexport default words;","import { SET_LANG } from '../actions/types';\r\nimport EnDict from '../dictionary/en';\r\n\r\nconst initialState = {\r\n    currLang: EnDict,\r\n}\r\n\r\nexport function currLangReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case SET_LANG:\r\n            return { ...state, currLang: action.currLangState }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}","import { SET_CLOUD, CLEAR_CLOUD } from '../actions/types';\r\n\r\nconst initialState = {\r\n\tclouds: [],\r\n}\r\n\r\nexport function cloudsReducer(state = initialState, action) {\r\n\tswitch (action.type) {\r\n\t\tcase SET_CLOUD:\r\n\t\t\treturn {\r\n\t\t\t\t...state, clouds: [...state.clouds, action.cloudState]\r\n\t\t\t}\r\n\t\tcase CLEAR_CLOUD:\r\n\t\t\treturn {\r\n\t\t\t\t...state, clouds: []\r\n\t\t\t}\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n}","import { SET_STAR, CLEAR_STAR } from '../actions/types';\r\n\r\nconst initialState = {\r\n\tstars: [],\r\n}\r\n\r\nexport function starsReducer(state = initialState, action) {\r\n\tswitch (action.type) {\r\n\t\tcase SET_STAR:\r\n\t\t\treturn {\r\n\t\t\t\t...state, stars: [...state.stars, action.starState]\r\n\t\t\t}\r\n\t\tcase CLEAR_STAR:\r\n\t\t\treturn {\r\n\t\t\t\t...state, stars: []\r\n\t\t\t}\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n}","import { SET_THEME_MODE } from '../actions/types';\r\n\r\nconst initialState = {\r\n    palette: {\r\n        type: \"dark\",\r\n        primary: { main: \"#f9a825\" },\r\n        secondary: { main: \"#f50057\" },\r\n        error: { main: \"#cc0000\" },\r\n    },\r\n}\r\n\r\nexport function themeReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case SET_THEME_MODE:\r\n            return { ...state, palette: action.palette }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}","import { SET_CURRENT_USER, USER_LOADING } from \"../actions/types\";\r\n\r\nconst isempty = require(\"is-empty\");\r\n\r\nconst initialState = {\r\n    isAuthenticated: false,\r\n    user: {},\r\n    loading: false\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case SET_CURRENT_USER:\r\n            return {\r\n                ...state,\r\n                isAuthenticated: !isempty(action.payload),\r\n                user: action.payload\r\n            };\r\n        case USER_LOADING:\r\n            return {\r\n                ...state,\r\n                loading: true\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}","import { GET_ERRORS } from \"../actions/types\";\r\nconst initialState = {};\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case GET_ERRORS:\r\n            return action.payload;\r\n        default:\r\n            return state;\r\n    }\r\n}","import { SET_SNACKBAR_MODE } from '../actions/types';\r\n\r\nconst initialState = {\r\n    snackbar: {\r\n        open: false,\r\n        variant: '',\r\n        message: '',\r\n    },\r\n}\r\n\r\nexport function snackbarReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case SET_SNACKBAR_MODE:\r\n            return { ...state, snackbar: action.snackbar }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}","import { combineReducers } from 'redux';\r\nimport { currLangReducer } from './currLang';\r\nimport { cloudsReducer } from './cloud';\r\nimport { starsReducer } from './star';\r\nimport { themeReducer } from './themeMode';\r\nimport authReducer from './authReducer';\r\nimport errorReducer from './errorReducer';\r\nimport { snackbarReducer } from './snackbarReducer';\r\n\r\nexport const rootReducer = combineReducers({\r\n    lang: currLangReducer,\r\n    clouds: cloudsReducer,\r\n    stars: starsReducer,\r\n    themeMode: themeReducer,\r\n    auth: authReducer,\r\n    errors: errorReducer,\r\n    snackbar: snackbarReducer,\r\n});","import { createStore, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { rootReducer } from './reducers';\r\n\r\nconst middleware = [thunk];\r\n\r\nexport const store = createStore(\r\n    rootReducer,\r\n    {},\r\n    applyMiddleware(...middleware)\r\n);","import axios from \"axios\";\r\n\r\nconst setAuthToken = token => {\r\n    if (token) {\r\n        // Apply authorization token to every request if logged in\r\n        axios.defaults.headers.common[\"Authorization\"] = token;\r\n    }\r\n    else {\r\n        // Delete auth header\r\n        delete axios.defaults.headers.common[\"Authorization\"];\r\n    }\r\n};\r\n\r\nexport default setAuthToken;","import jwt_decode from \"jwt-decode\";\r\n\r\nimport { store } from \"../store\";\r\nimport setAuthToken from \"../utils/setAuthToken\";\r\nimport { SET_CURRENT_USER } from \"../actions/types\"\r\n\r\nexport function CheckTimeOut() {\r\n    if (localStorage.jwtToken) {\r\n        const token = localStorage.jwtToken;\r\n        setAuthToken(token);\r\n        const decoded = jwt_decode(token);\r\n        store.dispatch({\r\n            type: SET_CURRENT_USER,\r\n            payload: decoded\r\n        });\r\n\r\n        const currentTime = Date.now() / 1000; // to get in milliseconds\r\n        if (decoded.exp < currentTime) {\r\n            return false;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }\r\n}","import { SET_LANG } from '../actions/types';\r\n\r\nexport function setCloud(state) {\r\n\treturn {\r\n\t\ttype: state.type,\r\n\t\tcloudState: state.cloudState,\r\n\t}\r\n}\r\nexport function setStar(state) {\r\n\treturn {\r\n\t\ttype: state.type,\r\n\t\tstarState: state.starState,\r\n\t}\r\n}\r\nexport function setCurrLang(state) {\r\n\treturn {\r\n\t\ttype: SET_LANG,\r\n\t\tcurrLangState: state,\r\n\t}\r\n}\r\nexport function setTheme(state) {\r\n\treturn {\r\n\t\ttype: state.type,\r\n\t\tpalette: state.palette,\r\n\t}\r\n}\r\nexport function setUserState(state) {\r\n\treturn {\r\n\t\ttype: state.type,\r\n\t\tpayload: state.payload,\r\n\t}\r\n}\r\nexport function setSnackbar(state) {\r\n\treturn {\r\n\t\ttype: state.type,\r\n\t\tsnackbar: state.snackbar,\r\n\t}\r\n}","import React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst PrivateRoute = ({ component: Component, auth, ...rest }) => (\r\n    <Route\r\n        {...rest}\r\n        render={props =>\r\n            auth.isAuthenticated === true\r\n                ? <Component {...props} />\r\n                : <Redirect to=\"/\" />\r\n        }\r\n    />\r\n);\r\n\r\nPrivateRoute.propTypes = {\r\n    auth: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    auth: state.auth\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps\r\n)(PrivateRoute);","import React from 'react';\r\n\r\nexport default function MapCell(props) {\r\n    const { i, j, cellHeight, cellWidth, url, color } = props;\r\n    return (\r\n        <td style={{\r\n            height: cellHeight + 'px',\r\n            minWidth: cellWidth + 'px',\r\n            maxWidth: cellWidth + 'px',\r\n            border: '1px black solid',\r\n            transition: \"all 0.3s linear\",\r\n            backgroundImage: 'url(' + url + ')',\r\n            backgroundSize: 'contain',\r\n            backgroundColor: color,\r\n        }}\r\n            onClick={() => { alert(i + ' ' + j) }}\r\n        />\r\n    )\r\n}","import { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\nimport WarningIcon from '@material-ui/icons/Warning';\r\nimport ErrorIcon from '@material-ui/icons/Error';\r\nimport InfoIcon from '@material-ui/icons/Info';\r\n\r\nimport MapImg from '../img/map.png';\r\nimport SunImg from '../img/sun.png';\r\nimport MoonImg from '../img/moon.png';\r\nimport AstronautImg from '../img/astronaut.png';\r\nimport CloudSvg from '../img/cloud.svg';\r\n\r\nexport const params = {\r\n    amountStars: 25,\r\n    amountClouds: 5,\r\n    size: {\r\n        min: 1,\r\n        max: 5,\r\n        giant: 9\r\n    },\r\n    duration: {\r\n        min: 5,\r\n        max: 25,\r\n    }\r\n}\r\n\r\nexport const variantIcon = {\r\n    success: CheckCircleIcon,\r\n    warning: WarningIcon,\r\n    error: ErrorIcon,\r\n    info: InfoIcon,\r\n};\r\n\r\nexport function randomBetween(a, b) {\r\n    return (a + (Math.random() * (b - a)));\r\n}\r\n\r\nexport const useStyles = makeStyles(theme => ({\r\n    SwipeableViews: {\r\n        position: 'relative',\r\n        height: '90%',\r\n        '& .react-swipeable-view-container': {\r\n            height: '100% !Important',\r\n        },\r\n    },\r\n    media: {\r\n        height: 140,\r\n    },\r\n    iconCenter: {\r\n        display: \"block\",\r\n        margin: \"auto\"\r\n    },\r\n    dreamCardDiv: {\r\n        marginTop: '15px',\r\n        marginBottom: '15px',\r\n        width: '100%',\r\n        height: 'auto',\r\n        borderRadius: '4px',\r\n    },\r\n    divDreamsNotFoundImg: {\r\n        background: \"url('https://static.thenounproject.com/png/603669-200.png') no-repeat center\",\r\n    },\r\n    divDreamsNotFound: {\r\n        position: \"relative\",\r\n        left: \"50%\",\r\n        transform: \"translateX(-50%)\",\r\n        width: 200,\r\n        height: 100,\r\n        textAlign: \"center\",\r\n    },\r\n    contentPaper: {\r\n        backgroundColor: theme.palette.text.main,\r\n        padding: 10,\r\n    },\r\n    pickerGridContainer: {\r\n        position: \"relative\",\r\n        width: \"85%\",\r\n        left: \"50%\",\r\n        transform: \"translateX(-50%)\",\r\n        marginBottom: \"5px\",\r\n    },\r\n    div85width: {\r\n        position: \"relative\",\r\n        width: \"85%\",\r\n        top: \"65%\",\r\n        left: \"50%\",\r\n        transform: \"translate(-50%, -50%)\",\r\n    },\r\n    ratingGridContainer: {\r\n        position: \"relative\",\r\n        width: \"100%\",\r\n        top: \"65%\",\r\n        left: \"50%\",\r\n        transform: \"translate(-50%, -50%)\",\r\n    },\r\n    pickers: {\r\n        position: \"relative\",\r\n        width: \"90%\",\r\n        left: \"50%\",\r\n        transform: \"translateX(-50%)\",\r\n    },\r\n    avatarRoot: {\r\n        textAlign: 'center',\r\n        width: '100%',\r\n    },\r\n    verySmallAvatar: {\r\n        margin: theme.spacing(1),\r\n        width: theme.spacing(3),\r\n        height: theme.spacing(3),\r\n        display: 'inline-flex !Important',\r\n    },\r\n    smallAvatar: {\r\n        margin: theme.spacing(0.5),\r\n        width: theme.spacing(5),\r\n        height: theme.spacing(5),\r\n        display: 'inline-flex !Important',\r\n    },\r\n    smallChip: {\r\n        margin: theme.spacing(0.5),\r\n    },\r\n    centerCircularProgress: {\r\n        position: 'relative',\r\n        top: '50%',\r\n        left: '50%',\r\n    },\r\n    mainGridDreamsBodyItemContainer: {\r\n        paddingTop: '16px',\r\n        position: 'absolute',\r\n        boxSizing: 'border-box',\r\n        maxHeight: '90%',\r\n        overflow: 'auto',\r\n        borderRadius: '4px',\r\n    },\r\n    mainGridDreamsBodyItemContainerPaper: {\r\n        height: '100%',\r\n        opacity: 0.9,\r\n    },\r\n    mainGridDreamsBodyItem: {\r\n        overflow: 'hidden',\r\n    },\r\n    mainGridDreamsContainer: {\r\n        height: '100%',\r\n        position: 'relative',\r\n        width: '90%',\r\n        left: '50%',\r\n        transform: 'translateX(-50%)',\r\n    },\r\n    card: {\r\n        maxWidth: '100%',\r\n        height: '100%',\r\n    },\r\n    expand: {\r\n        transform: \"rotate(0deg)\",\r\n        marginLeft: \"auto\",\r\n        transition: theme.transitions.create(\"transform\", {\r\n            duration: theme.transitions.duration.shortest\r\n        })\r\n    },\r\n    expandOpen: {\r\n        transform: \"rotate(180deg)\"\r\n    },\r\n    textField: {\r\n        width: '100%',\r\n    },\r\n    margin: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    root: {\r\n        flexGrow: 1,\r\n        position: 'relative',\r\n        width: '100%',\r\n        height: window.innerHeight - 1,\r\n        overflow: 'hidden',\r\n    },\r\n    mainPage: {\r\n        top: 0,\r\n        left: 0,\r\n        position: 'absolute',\r\n        transition: 'all 0.3s linear',\r\n        width: '100%',\r\n        height: '100%',\r\n    },\r\n    aboutPage: {\r\n        position: 'absolute',\r\n        transition: 'all 0.3s linear',\r\n        top: '100%',\r\n        width: '100%',\r\n        height: '100%',\r\n    },\r\n    AppDivDark: {\r\n        position: 'fixed',\r\n        background: 'radial-gradient(ellipse at center, rgba(8, 25, 42, 1) 20%, rgba(1, 4, 6, 1) 100%)',\r\n        opacity: 1,\r\n        margin: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        zIndex: -3,\r\n    },\r\n    AppDivLight: {\r\n        position: 'absolute',\r\n        background: 'radial-gradient(ellipse at center, rgba(207, 225, 237, 1) 20%, rgba(127, 170, 202, 1) 100%)',\r\n        transition: 'opacity 0.5s linear',\r\n        margin: 0,\r\n        opacity: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        zIndex: -3,\r\n    },\r\n    AppStarsDiv: {\r\n        transition: 'opacity 0.5s linear',\r\n        opacity: 0,\r\n        position: 'absolute',\r\n        width: '100%',\r\n        height: '100%',\r\n        overflow: 'hidden',\r\n        zIndex: -2,\r\n    },\r\n    AppCloudsDiv: {\r\n        transition: 'opacity 0.5s linear',\r\n        opacity: 0,\r\n        position: 'absolute',\r\n        width: '100%',\r\n        height: '100%',\r\n        overflow: 'hidden',\r\n        zIndex: -2,\r\n    },\r\n    AppStar: {\r\n        borderRadius: '100%',\r\n        position: 'absolute',\r\n        background: 'radial-gradient(ellipse at center, rgba(177, 198, 219, 1) 2%, rgba(5, 63, 118, 1) 100%)',\r\n        filter: 'blur(1px)',\r\n        animation: '$shine infinite alternate',\r\n        zIndex: -1,\r\n    },\r\n    AppCloud: {\r\n        position: 'absolute',\r\n        backgroundRepeat: 'no-repeat',\r\n        backgroundImage: 'url(' + CloudSvg + ')',\r\n        animation: '$moveclouds infinite linear',\r\n        zIndex: -1,\r\n    },\r\n    image: {\r\n        position: 'relative',\r\n        left: '50%',\r\n        top: '25%',\r\n        transform: 'translate(-50%, -25%)',\r\n        width: '35vw !important',\r\n        height: '35vw',\r\n        borderRadius: '50%',\r\n    },\r\n    SkyDiv: {\r\n        position: 'absolute',\r\n        borderRadius: '50%',\r\n        top: 0,\r\n        left: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        overflow: 'hidden',\r\n    },\r\n    MoonSrc: {\r\n        backgroundSize: 'cover',\r\n        background: 'url(' + MoonImg + ')',\r\n        backgroundRepeat: 'no-repeat',\r\n        position: 'absolute',\r\n        top: 0,\r\n        left: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        transition: 'all 0.3s linear',\r\n    },\r\n    SunSrc: {\r\n        backgroundSize: 'cover',\r\n        background: 'url(' + SunImg + ')',\r\n        backgroundRepeat: 'no-repeat',\r\n        position: 'absolute',\r\n        top: 0,\r\n        left: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        transition: 'all 0.3s linear',\r\n    },\r\n    AstronautButton: {\r\n        position: 'relative',\r\n        left: '50%',\r\n        top: '50%',\r\n        transform: 'translate(-50%, -50%)',\r\n        width: '25vw !important',\r\n        height: '25vw',\r\n        borderRadius: '50%',\r\n    },\r\n    AstronautDiv: {\r\n        position: 'absolute',\r\n        borderRadius: '50%',\r\n        top: 0,\r\n        left: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        overflow: 'hidden',\r\n        animation: '$swinging 30s infinite linear',\r\n    },\r\n    AstronautImg: {\r\n        backgroundSize: 'cover',\r\n        background: 'url(' + AstronautImg + ')',\r\n        backgroundRepeat: 'no-repeat',\r\n        position: 'absolute',\r\n        top: 0,\r\n        left: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        transition: 'filter 0.5s linear',\r\n    },\r\n    MapButton: {\r\n        position: 'relative',\r\n        left: '50%',\r\n        top: '50%',\r\n        transform: 'translate(-50%, -50%)',\r\n        width: '25vw !important',\r\n        height: '25vw',\r\n        borderRadius: '10%',\r\n    },\r\n    MapDiv: {\r\n        position: 'absolute',\r\n        top: 0,\r\n        left: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        overflow: 'hidden',\r\n        animation: '$swinging 30s infinite linear',\r\n    },\r\n    MapImg: {\r\n        backgroundSize: 'cover',\r\n        background: 'url(' + MapImg + ')',\r\n        backgroundRepeat: 'no-repeat',\r\n        position: 'absolute',\r\n        top: 0,\r\n        left: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        transition: 'filter 0.5s linear',\r\n    },\r\n    mainGridContainer: {\r\n        height: '100%',\r\n    },\r\n    mainGridHeadItem: {\r\n        maxWidth: '100% !Important',\r\n    },\r\n    mainGridBodyItem: {\r\n        maxWidth: '100% !Important',\r\n        position: 'relative',\r\n    },\r\n    menuButtonContainerItem: {\r\n        maxWidth: '100% !Important',\r\n    },\r\n    menuButtonContainer: {\r\n        height: '100% !Important',\r\n    },\r\n    menuButtonGrid: {\r\n    },\r\n    menuDivButton: {\r\n        maxWidth: '100% !Important',\r\n        padding: '10px',\r\n    },\r\n    menuButton: {\r\n        minWidth: '55vw',\r\n        maxWidth: '55vw',\r\n    },\r\n    actionButton: {\r\n        minWidth: '40vw',\r\n        maxWidth: '40vw',\r\n    },\r\n    mainGridFooterItem: {\r\n        maxWidth: '100% !Important',\r\n    },\r\n    menuButtonContainerFooterLanguageButtons: {\r\n    },\r\n    aboutGridContainer: {\r\n        width: '100%',\r\n        height: '100%',\r\n        margin: 0,\r\n    },\r\n    fullMinWidth: {\r\n        minWidth: '100% !Important',\r\n        position: 'relative'\r\n    },\r\n    inputDiv: {\r\n        minWidth: '85% !Important',\r\n        maxWidth: '85% !Important',\r\n        position: 'absolute',\r\n        top: '50%',\r\n        left: '50%',\r\n        transform: 'translate(-50%, -50%)',\r\n        opacity: 1,\r\n    },\r\n    inputScrollableDiv: {\r\n        minWidth: '85% !Important',\r\n        maxWidth: '85% !Important',\r\n        height: '100%',\r\n        position: 'absolute',\r\n        top: '50%',\r\n        left: '50%',\r\n        transform: 'translate(-50%, -50%)',\r\n        opacity: 1,\r\n    },\r\n    chips: {\r\n        display: \"flex\",\r\n        flexWrap: \"wrap\",\r\n    },\r\n    noWrap: {\r\n        flexWrap: 'nowrap',\r\n    },\r\n    chip: {\r\n        margin: 1\r\n    },\r\n    aboutGridItem: {\r\n        width: '100%',\r\n    },\r\n    mainPaperGridBodyItem: {\r\n        maxWidth: '100% !Important',\r\n    },\r\n    paper: {\r\n        height: '90%',\r\n        margin: theme.spacing(3, 2),\r\n        opacity: 0.9,\r\n    },\r\n    minMargin: {\r\n        margin: theme.spacing(0.5),\r\n    },\r\n    VKLoginDiv: {\r\n        position: 'absolute',\r\n        width: '15vw',\r\n        height: '15vw',\r\n    },\r\n    VKLoginButton: {\r\n        background: 'url(https://dressirovka70.ru/wp-content/uploads/2019/10/1200px-VK.com-logo.svg1_-1024x1024.png)',\r\n        boxShadow: '0px 3px 1px -2px rgba(0,0,0,0.2), 0px 2px 2px 0px rgba(0,0,0,0.14), 0px 1px 5px 0px rgba(0,0,0,0.12)',\r\n        backgroundSize: 'cover',\r\n        borderRadius: '25%',\r\n        width: '100%',\r\n        height: '100%',\r\n    },\r\n    \"@keyframes shine\": {\r\n        \"0%\": {\r\n            transform: 'scale(1)',\r\n            opacity: '1',\r\n        },\r\n        \"20%\": {\r\n            transform: 'scale(.9)',\r\n            opacity: '.8',\r\n        },\r\n        \"40%\": {\r\n            transform: 'scale(1)',\r\n            opacity: '.9',\r\n        },\r\n        \"60%\": {\r\n            transform: 'scale(.2)',\r\n            opacity: '.1',\r\n        },\r\n        \"80%\": {\r\n            transform: 'scale(.5)',\r\n            opacity: '.5',\r\n        },\r\n        \"100%\": {\r\n            transform: 'scale(.9)',\r\n            opacity: '.9',\r\n        },\r\n    },\r\n    \"@keyframes moveclouds\": {\r\n        '100%': {\r\n            left: '-100%',\r\n        },\r\n    },\r\n    \"@keyframes swinging\": {\r\n        '0%': {\r\n            transform: 'rotate(0)',\r\n        },\r\n        '10%': {\r\n            transform: 'rotate(12deg)',\r\n        },\r\n        '20%': {\r\n            transform: 'rotate(-10deg)',\r\n        },\r\n        '30%': {\r\n            transform: 'rotate(9deg)',\r\n        },\r\n        '40%': {\r\n            transform: 'rotate(-8deg)',\r\n        },\r\n        '50%': {\r\n            transform: 'rotate(7deg)',\r\n        },\r\n        '60%': {\r\n            transform: 'rotate(-6deg)',\r\n        },\r\n        '70%': {\r\n            transform: 'rotate(5deg)',\r\n        },\r\n        '80%': {\r\n            transform: 'rotate(-4deg)',\r\n        },\r\n        '90%': {\r\n            transform: 'rotate(3deg)',\r\n        },\r\n        '100%': {\r\n            transform: 'rotate(0)',\r\n        },\r\n    }\r\n}));","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Container from '@material-ui/core/Container';\r\nimport Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Fab from '@material-ui/core/Fab';\r\n\r\nimport RemoveIcon from '@material-ui/icons/Remove';\r\nimport AddIcon from '@material-ui/icons/Add';\r\n\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\nimport MapCell from './muiltiple/MapCell';\r\nimport { useStyles } from '../styles/Styles';\r\n\r\nconst JSONtable = {\r\n    0: {\r\n        0: {\r\n            color: \"#666699\",\r\n            url: \"https://static.thenounproject.com/png/100391-200.png\",\r\n        },\r\n        1: {\r\n            color: \"#cc9900\",\r\n            url: \"https://www.restchurch.com/wp-content/uploads/2017/08/homegroup.png\",\r\n        },\r\n        2: {\r\n            color: \"#669900\",\r\n            url: \"https://static.thenounproject.com/png/1821512-200.png\",\r\n        }\r\n    },\r\n    1: {\r\n        0: {\r\n            color: \"#666699\",\r\n            url: \"https://static.thenounproject.com/png/100391-200.png\",\r\n        },\r\n        1: {\r\n            color: \"#3399ff\",\r\n            url: \"https://static.thenounproject.com/png/1685737-200.png\",\r\n        },\r\n        2: {\r\n            color: \"#666699\",\r\n            url: \"https://static.thenounproject.com/png/100391-200.png\",\r\n        }\r\n    },\r\n    2: {\r\n        0: {\r\n            color: \"#666699\",\r\n            url: \"https://static.thenounproject.com/png/100391-200.png\",\r\n        },\r\n        1: {\r\n            color: \"#666699\",\r\n            url: \"https://static.thenounproject.com/png/100391-200.png\",\r\n        },\r\n        2: {\r\n            color: \"#666699\",\r\n            url: \"https://static.thenounproject.com/png/100391-200.png\",\r\n        }\r\n    },\r\n};\r\n\r\nfunction DreamMap(props) {\r\n    const { lang, themeMode, history } = props;\r\n    const classes = useStyles();\r\n    const muiTheme = createMuiTheme(themeMode);\r\n    const [cellHeight, setcellHeight] = React.useState(25);\r\n    const [cellWidth, setcellWidth] = React.useState(25);\r\n\r\n    const sizeUp = () => {\r\n        setcellHeight(cellHeight + 5);\r\n        setcellWidth(cellWidth + 5);\r\n    };\r\n\r\n    const sizeDown = () => {\r\n        setcellHeight(cellHeight - 5);\r\n        setcellWidth(cellWidth - 5);\r\n    };\r\n\r\n    const createTable = () => {\r\n        let table = [];\r\n        let i = 0;\r\n        let j = 0;\r\n\r\n        Object.keys(JSONtable).forEach(row => {\r\n            let rows = [];\r\n            Object.keys(JSONtable[row]).forEach(col => {\r\n                rows.push(\r\n                    <MapCell key={'cell' + i + j}\r\n                        i={i}\r\n                        j={j}\r\n                        cellHeight={cellHeight}\r\n                        cellWidth={cellWidth}\r\n                        url={JSONtable[row][col].url}\r\n                        color={JSONtable[row][col].color}\r\n                    />\r\n                );\r\n                i++;\r\n            })\r\n            table.push(\r\n                <tr key={'row' + j} >\r\n                    {rows}\r\n                </tr>\r\n            );\r\n            j++;\r\n            i = 0;\r\n        });\r\n\r\n        return table;\r\n    }\r\n\r\n    return (\r\n        <MuiThemeProvider theme={muiTheme}>\r\n            <CssBaseline />\r\n            <div className={classes.root}>\r\n                <Grid className={classes.mainGridContainer}\r\n                    container\r\n                    direction=\"column\"\r\n                    justify=\"center\"\r\n                    alignItems=\"stretch\" >\r\n                    <Grid item xs={10} zeroMinWidth className={classes.mainGridDreamsBodyItem}>\r\n                        <Container\r\n                            style={{\r\n                                paddingTop: '16px',\r\n                                height: '83%',\r\n                                width: '100%',\r\n                                position: 'absolute',\r\n                            }}\r\n                        >\r\n                            <div\r\n                                style={{\r\n                                    position: 'relative',\r\n                                    height: '100%',\r\n                                    width: '100%',\r\n                                    overflow: 'auto',\r\n                                    borderRadius: '4px',\r\n                                }}\r\n                            >\r\n                                <table\r\n                                    style={{\r\n                                        margin: '0 auto',\r\n                                        backgroundColor: 'rgb(196, 188, 78, 0.75)',\r\n                                    }}\r\n                                >\r\n                                    <tbody>\r\n                                        {createTable()}\r\n                                    </tbody>\r\n                                </table>\r\n                            </div>\r\n                        </Container>\r\n                    </Grid>\r\n                    <Grid item xs={1} zeroMinWidth className={classes.mainGridBodyItem}>\r\n                        <div\r\n                            style={{\r\n                                position: 'absolute',\r\n                                left: '50%',\r\n                                top: '50%',\r\n                                transform: 'translate(-50%, -50%)',\r\n                            }}\r\n                        >\r\n                            <Fab\r\n                                size=\"small\"\r\n                                color=\"primary\"\r\n                                aria-label=\"add\"\r\n                                onClick={() => { sizeUp() }}\r\n                            >\r\n                                <AddIcon />\r\n                            </Fab>\r\n                            <Fab\r\n                                size=\"small\"\r\n                                color=\"primary\"\r\n                                aria-label=\"add\"\r\n                                onClick={() => { sizeDown() }}\r\n                            >\r\n                                <RemoveIcon />\r\n                            </Fab>\r\n                        </div>\r\n                    </Grid>\r\n                    <Grid item xs={1} zeroMinWidth className={classes.mainGridBodyItem}>\r\n                        <Grid\r\n                            container\r\n                            direction=\"row\"\r\n                            justify=\"space-evenly\"\r\n                            alignItems=\"center\"\r\n                        >\r\n                            <Grid item xs={6} align=\"center\">\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    color=\"secondary\"\r\n                                    className={classes.actionButton}\r\n                                    onClick={() => { history.push(\"/luciddreams\") }}\r\n                                >\r\n                                    {lang.currLang.buttons.close}\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid item xs={6} />\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </MuiThemeProvider >\r\n    )\r\n}\r\n\r\nDreamMap.propTypes = {\r\n    themeMode: PropTypes.object.isRequired,\r\n    lang: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        themeMode: store.themeMode,\r\n        lang: store.lang,\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(DreamMap);","import axios from \"axios\";\r\n\r\n\r\nexport const instance = axios.create({\r\n    baseURL: 'https://ldserver.herokuapp.com',\r\n    timeout: 10000,\r\n    headers: { \"Access-Control-Allow-Origin\": \"*\" }\r\n});","export function compare(obj1, obj2) {\r\n    if (!Object.keys(obj2).every(key => obj1.hasOwnProperty(key))) {\r\n        return false;\r\n    }\r\n    return Object.keys(obj1).every(function (key) {\r\n        if (typeof obj1[key] == \"object\") {\r\n            return compare(obj1[key], obj2[key]);\r\n        }\r\n        else {\r\n            return obj1[key] === obj2[key];\r\n        }\r\n    });\r\n}","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport ruLocale from \"date-fns/locale/ru\";\r\nimport enLocale from \"date-fns/locale/ru\";\r\n\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Button from '@material-ui/core/Button';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\n\r\nimport MUIRichTextEditor from 'mui-rte';\r\nimport { convertToRaw } from 'draft-js';\r\n\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\n\r\nimport { MuiPickersUtilsProvider, KeyboardTimePicker, KeyboardDatePicker } from '@material-ui/pickers';\r\n\r\nimport FormatColorFillIcon from '@material-ui/icons/FormatColorFill';\r\n\r\nimport { useStyles } from '../styles/Styles';\r\nimport { setSnackbar } from '../actions/Actions';\r\nimport { SET_SNACKBAR_MODE } from \"../actions/types\";\r\n\r\nimport { instance } from './Config';\r\n\r\nimport { compare } from '../functions';\r\n\r\nlet defaultTags = [];\r\n\r\nfunction AddDream(props) {\r\n    const classes = useStyles();\r\n    const { lang, themeMode, history, auth, setSnackbar } = props;\r\n    const muiTheme = createMuiTheme(themeMode);\r\n    Object.assign(muiTheme, {\r\n        overrides: {\r\n            MUIRichTextEditor: {\r\n                root: {\r\n                    border: \"1px solid gray\",\r\n                    borderRadius: '4px',\r\n                    height: '100%',\r\n                    //Весь компонент\r\n                },\r\n                container: {\r\n                    height: '100%',\r\n                    margin: '0 !Important',\r\n                    //Без шапки\r\n                },\r\n                toolbar: {\r\n                    //textAlign: 'center',\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    justifyContent: 'center',\r\n                    height: '20%',\r\n                    minHeight: '48px',\r\n                    margin: '0 !Important',\r\n                    borderBottom: \"1px solid gray\",\r\n                    borderRadius: '4px',\r\n                },\r\n                placeHolder: {\r\n                    height: '72%',\r\n                },\r\n                editor: {\r\n                    height: '72%',\r\n                    width: '100%',\r\n                    position: 'relative',\r\n                    overflow: 'hidden',\r\n                    //Эдитор\r\n                },\r\n                editorContainer: {\r\n                    margin: '0 !Important',\r\n                    padding: \"0px 14px\",\r\n                    borderRadius: '4px',\r\n                    position: 'relative',\r\n                    boxSizing: 'border-box',\r\n                    maxHeight: '100%',\r\n                    overflow: 'auto',\r\n                    //Редактор\r\n                },\r\n            }\r\n        }\r\n    })\r\n    const [isEditMode, setIsEditMode] = React.useState(false);\r\n    const [isLoading, setIsLoading] = React.useState(false);\r\n    const [titleText, setTitleText] = React.useState('');\r\n    const [selectedDate, setSelectedDate] = React.useState(new Date());\r\n    const [contentText, setContentText] = React.useState();\r\n    const [prevContentText, setPrevContentText] = React.useState();\r\n    const [selectedLocations, setselectedLocations] = React.useState([]);\r\n    const [locations, setLocations] = React.useState({});\r\n\r\n    const handleChangeLocations = (event, value) => {\r\n        setselectedLocations(value);\r\n    };\r\n\r\n    const changeTitle = (event) => {\r\n        setTitleText(event.target.value);\r\n    };\r\n\r\n    const handleDateChange = date => {\r\n        setSelectedDate(date);\r\n    };\r\n\r\n    const changeContent = (state) => {\r\n        const currCont = state.getCurrentContent();\r\n        const convert = convertToRaw(currCont);\r\n        const content = JSON.stringify(convert);\r\n        if (prevContentText !== content) {\r\n            setPrevContentText(content);\r\n        }\r\n    };\r\n\r\n    const savepost = () => {\r\n        setIsLoading(true);\r\n        let havErr = false;\r\n        let errorMessage = '';\r\n        if (typeof (titleText) !== 'undefined') {\r\n            if (titleText.length === 0) {\r\n                errorMessage = lang.currLang.errors.EmptyTitle;\r\n                havErr = true;\r\n            }\r\n        }\r\n        else {\r\n            errorMessage = lang.currLang.errors.EmptyTitle;\r\n            havErr = true;\r\n        }\r\n\r\n        if (typeof (prevContentText) !== 'undefined') {\r\n            if (JSON.parse(prevContentText).blocks[0].text.length === 0) {\r\n                errorMessage = lang.currLang.errors.EmptyDream;\r\n                havErr = true;\r\n            }\r\n        }\r\n        else {\r\n            errorMessage = lang.currLang.errors.EmptyDream;\r\n            havErr = true;\r\n        }\r\n\r\n        if (havErr) {\r\n            setSnackbar({\r\n                type: SET_SNACKBAR_MODE,\r\n                snackbar: {\r\n                    open: true,\r\n                    variant: 'error',\r\n                    message: errorMessage,\r\n                },\r\n            });\r\n            setIsLoading(false);\r\n        }\r\n        else {\r\n            if (isEditMode) {\r\n                let hasChanges = false;\r\n                let tagChanges = false;\r\n                let postData = {\r\n                    post_id: props.location.defaultData.post_id,\r\n                };\r\n\r\n                if (props.location.defaultData.post_title !== titleText) {\r\n                    postData.title = titleText;\r\n                    hasChanges = true;\r\n                }\r\n\r\n                if (props.location.defaultData.dream_date.getTime() !== selectedDate.getTime()) {\r\n                    postData.dreamDate = selectedDate.toLocaleString(\"ru-RU\", { timeZone: 'Europe/London' });\r\n                    hasChanges = true;\r\n                }\r\n\r\n                if (props.location.defaultData.post_content !== prevContentText) {\r\n                    postData.content = prevContentText;\r\n                    hasChanges = true;\r\n                }\r\n\r\n                if (defaultTags.length === selectedLocations.length) {\r\n                    if (!compare(defaultTags, selectedLocations)) {\r\n                        hasChanges = true;\r\n                        tagChanges = true;\r\n                    }\r\n                }\r\n                else {\r\n                    hasChanges = true;\r\n                    tagChanges = true;\r\n                }\r\n\r\n                if (hasChanges) {\r\n                    if (tagChanges) {\r\n                        let deleteTags = defaultTags.filter(item1 =>\r\n                            !selectedLocations.some(item2 => (\r\n                                item2.id === item1.id)\r\n                            )\r\n                        );\r\n                        let addTags = selectedLocations.filter(item1 =>\r\n                            !defaultTags.some(item2 => (\r\n                                item2.id === item1.id)\r\n                            )\r\n                        );\r\n                        if (addTags.length > 0) {\r\n                            let add = {};\r\n                            addTags.map((item, key) => (\r\n                                add[key] = item\r\n                            ));\r\n                            postData.tags = { ...postData.tags, add: add };\r\n                        }\r\n                        if (deleteTags.length > 0) {\r\n                            let remove = {};\r\n                            deleteTags.map((item, key) => (\r\n                                remove[key] = item\r\n                            ));\r\n                            postData.tags = { ...postData.tags, remove: remove };\r\n                        }\r\n                    }\r\n                    instance\r\n                        .post('/actions/users/updatepost', postData)\r\n                        .then(res => {\r\n                            setIsLoading(false);\r\n                            setSnackbar({\r\n                                type: SET_SNACKBAR_MODE,\r\n                                snackbar: {\r\n                                    open: true,\r\n                                    variant: 'success',\r\n                                    message: lang.currLang.texts.success,\r\n                                },\r\n                            });\r\n                            history.push(\"/dreams\")\r\n                        })\r\n                        .catch(err => {\r\n                            console.log(err);\r\n                            setIsLoading(false);\r\n                        });\r\n                }\r\n                else {\r\n                    setSnackbar({\r\n                        type: SET_SNACKBAR_MODE,\r\n                        snackbar: {\r\n                            open: true,\r\n                            variant: 'error',\r\n                            message: lang.currLang.errors.NoChanges,\r\n                        },\r\n                    });\r\n                    setIsLoading(false);\r\n                }\r\n            }\r\n            else {\r\n                let postData = {\r\n                    title: titleText,\r\n                    dreamDate: selectedDate.toLocaleString(\"ru-RU\", { timeZone: 'Europe/London' }),\r\n                    content: prevContentText,\r\n                    create_user: auth.user.id,\r\n                    post_type: 0,\r\n                    nickname: auth.user.nickname,\r\n                    tags: selectedLocations,\r\n                }\r\n                instance\r\n                    .post('/actions/users/createpost', postData)\r\n                    .then(res => {\r\n                        setIsLoading(false);\r\n                        setSnackbar({\r\n                            type: SET_SNACKBAR_MODE,\r\n                            snackbar: {\r\n                                open: true,\r\n                                variant: 'success',\r\n                                message: lang.currLang.texts.success,\r\n                            },\r\n                        });\r\n                        history.push(\"/luciddreams\")\r\n                    })\r\n                    .catch(err => {\r\n                        setIsLoading(false);\r\n                    });\r\n            }\r\n        }\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        defaultTags = [];\r\n        instance.get(\"/gettags\")\r\n            .then(res => {\r\n                setLocations(res.data);\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            });\r\n\r\n        if (typeof (props.location.defaultData) !== 'undefined') {\r\n            setIsEditMode(true);\r\n            const { post_title, dream_date, post_content, tags } = props.location.defaultData;\r\n            setTitleText(post_title);\r\n            setSelectedDate(dream_date);\r\n            setContentText(post_content);\r\n            setPrevContentText(post_content);\r\n            if (typeof tags[0][0] === 'string') {\r\n                tags.forEach(item => {\r\n                    let location = {};\r\n                    location.id = Number(item[0]);\r\n                    location.name_rus = item[1];\r\n                    location.name_eng = item[2];\r\n                    location.img_url = item[3];\r\n                    defaultTags.push(location);\r\n                });\r\n                setselectedLocations(defaultTags);\r\n            }\r\n        }\r\n    }, [props.location.defaultData, lang.currLang]);\r\n\r\n    return (\r\n        <MuiThemeProvider theme={muiTheme}>\r\n            <CssBaseline />\r\n            <div className={classes.root} >\r\n                <Grid className={classes.mainGridContainer}\r\n                    container\r\n                    direction=\"column\"\r\n                    justify=\"center\"\r\n                    alignItems=\"stretch\" >\r\n                    <Grid item xs={11} className={classes.mainGridBodyItem}>\r\n                        <Paper className={classes.paper}>\r\n                            <Grid container\r\n                                className={classes.mainGridContainer}\r\n                                direction=\"column\"\r\n                                justify=\"center\"\r\n                                alignItems=\"center\"\r\n                            >\r\n                                <Grid item xs={2} className={classes.fullMinWidth} >\r\n                                    <TextField className={classes.inputDiv}\r\n                                        required\r\n                                        id=\"outlined-required\"\r\n                                        value={titleText}\r\n                                        label={lang.currLang.texts.title}\r\n                                        variant=\"outlined\"\r\n                                        onChange={(e) => { changeTitle(e) }}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={2} className={classes.fullMinWidth} >\r\n                                    <MuiPickersUtilsProvider utils={DateFnsUtils}\r\n                                        locale={lang.currLang.current === \"Ru\"\r\n                                            ? ruLocale\r\n                                            : enLocale}\r\n                                    >\r\n                                        <Grid className={classes.pickerGridContainer}\r\n                                            container\r\n                                            direction=\"row\"\r\n                                            justify=\"center\"\r\n                                            alignItems=\"stretch\" >\r\n                                            <Grid item xs={7} >\r\n                                                <KeyboardDatePicker className={classes.pickers}\r\n                                                    id=\"date-picker-dialog\"\r\n                                                    label={lang.currLang.texts.pickDate}\r\n                                                    format=\"dd.MM.yyyy\"\r\n                                                    value={selectedDate}\r\n                                                    onChange={handleDateChange}\r\n                                                    KeyboardButtonProps={{\r\n                                                        'aria-label': 'change date',\r\n                                                    }}\r\n                                                />\r\n                                            </Grid>\r\n                                            <Grid item xs={5} >\r\n                                                <KeyboardTimePicker className={classes.pickers}\r\n                                                    id=\"time-picker\"\r\n                                                    label={lang.currLang.texts.pickTime}\r\n                                                    value={selectedDate}\r\n                                                    onChange={handleDateChange}\r\n                                                    ampm={false}\r\n                                                    KeyboardButtonProps={{\r\n                                                        'aria-label': 'change time',\r\n                                                    }}\r\n                                                />\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </MuiPickersUtilsProvider>\r\n                                </Grid>\r\n                                <Grid item xs={5} className={classes.fullMinWidth} >\r\n\r\n                                    <div className={classes.inputScrollableDiv}>\r\n\r\n                                        <MUIRichTextEditor\r\n                                            value={contentText}\r\n                                            onChange={changeContent}\r\n                                            label={lang.currLang.texts.content}\r\n                                            inlineToolbar={false}\r\n                                            controls={[\r\n                                                \"bold\",\r\n                                                \"italic\",\r\n                                                \"underline\",\r\n                                                \"strikethrough\",\r\n                                                \"colorfill\",\r\n                                            ]}\r\n                                            customControls={[\r\n                                                {\r\n                                                    name: \"colorfill\",\r\n                                                    icon: <FormatColorFillIcon />,\r\n                                                    type: \"inline\",\r\n                                                    inlineStyle: {\r\n                                                        backgroundColor: \"yellow\",\r\n                                                        color: \"black\"\r\n                                                    }\r\n                                                }\r\n                                            ]}\r\n                                        />\r\n\r\n                                    </div>\r\n\r\n                                </Grid>\r\n                                <Grid item xs={3} className={classes.fullMinWidth} >\r\n                                    {locations.length\r\n                                        ? <Autocomplete\r\n                                            multiple\r\n                                            className={classes.inputDiv}\r\n                                            id=\"tags-outlined\"\r\n                                            size=\"small\"\r\n                                            options={locations}\r\n                                            getOptionLabel={option => (\r\n                                                <Chip\r\n                                                    size=\"small\"\r\n                                                    className={classes.chip}\r\n                                                    avatar={\r\n                                                        <Avatar src={option.img_url} />\r\n                                                    }\r\n                                                    label={\r\n                                                        lang.currLang.current === \"Ru\"\r\n                                                            ? option.name_rus\r\n                                                            : option.name_eng\r\n                                                    }\r\n                                                />\r\n                                            )}\r\n                                            defaultValue={\r\n                                                defaultTags.map(item => {\r\n                                                    return locations[item.id - 1];\r\n                                                })}\r\n                                            onChange={(event, value) => handleChangeLocations(event, value)}\r\n                                            filterSelectedOptions\r\n                                            renderInput={params => (\r\n                                                <TextField\r\n                                                    {...params}\r\n                                                    label={lang.currLang.texts.tags}\r\n                                                    fullWidth\r\n                                                />\r\n                                            )}\r\n                                        />\r\n                                        : <div className={classes.inputDiv}>\r\n                                            <LinearProgress />\r\n                                        </div>\r\n                                    }\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Paper>\r\n                    </Grid>\r\n                    <Grid item xs={1} className={classes.mainGridBodyItem} >\r\n                        {isLoading\r\n                            ? <LinearProgress />\r\n                            : <Grid\r\n                                container\r\n                                direction=\"row\"\r\n                                justify=\"space-evenly\"\r\n                                alignItems=\"center\"\r\n                            >\r\n                                <Grid item>\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        color=\"secondary\"\r\n                                        className={classes.actionButton}\r\n                                        onClick={() => {\r\n                                            isEditMode\r\n                                                ? history.push(\"/dreams\")\r\n                                                : history.push(\"/luciddreams\")\r\n                                        }}\r\n                                    >\r\n                                        {lang.currLang.buttons.close}\r\n                                    </Button>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        color=\"primary\"\r\n                                        className={classes.actionButton}\r\n                                        onClick={() => savepost()}\r\n                                    >\r\n                                        {isEditMode\r\n                                            ? lang.currLang.buttons.Save\r\n                                            : lang.currLang.buttons.add\r\n                                        }\r\n                                    </Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                        }\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </MuiThemeProvider >\r\n    );\r\n};\r\n\r\nAddDream.propTypes = {\r\n    setSnackbar: PropTypes.func.isRequired,\r\n    themeMode: PropTypes.object.isRequired,\r\n    lang: PropTypes.object.isRequired,\r\n    auth: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        themeMode: store.themeMode,\r\n        lang: store.lang,\r\n        auth: store.auth,\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setSnackbar: snackbar => dispatch(setSnackbar(snackbar)),\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(AddDream);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport ruLocale from \"date-fns/locale/ru\";\r\nimport enLocale from \"date-fns/locale/ru\";\r\n\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Button from '@material-ui/core/Button';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\n\r\nimport MUIRichTextEditor from 'mui-rte';\r\nimport { convertToRaw } from 'draft-js';\r\n\r\nimport Rating from \"@material-ui/lab/Rating\";\r\n\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\n\r\nimport { MuiPickersUtilsProvider, KeyboardTimePicker, KeyboardDatePicker } from '@material-ui/pickers';\r\n\r\nimport FormatColorFillIcon from '@material-ui/icons/FormatColorFill';\r\n\r\nimport { useStyles } from '../styles/Styles';\r\nimport { SET_SNACKBAR_MODE } from \"../actions/types\";\r\nimport { setSnackbar } from '../actions/Actions';\r\n\r\nimport { instance } from './Config';\r\n\r\nimport { compare } from '../functions';\r\n\r\nlet defaultTechnics = [];\r\nlet defaultTags = [];\r\n\r\nfunction AddCDream(props) {\r\n    const classes = useStyles();\r\n    const { lang, themeMode, history, auth, setSnackbar } = props;\r\n    const muiTheme = createMuiTheme(themeMode);\r\n    Object.assign(muiTheme, {\r\n        overrides: {\r\n            MUIRichTextEditor: {\r\n                root: {\r\n                    border: \"1px solid gray\",\r\n                    borderRadius: '4px',\r\n                    height: '100%',\r\n                    //Весь компонент\r\n                },\r\n                container: {\r\n                    height: '100%',\r\n                    margin: '0 !Important',\r\n                    //Без шапки\r\n                },\r\n                toolbar: {\r\n                    //textAlign: 'center',\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    justifyContent: 'center',\r\n                    height: '20%',\r\n                    minHeight: '48px',\r\n                    margin: '0 !Important',\r\n                    borderBottom: \"1px solid gray\",\r\n                    borderRadius: '4px',\r\n                },\r\n                placeHolder: {\r\n                    height: '72%',\r\n                },\r\n                editor: {\r\n                    height: '72%',\r\n                    width: '100%',\r\n                    position: 'relative',\r\n                    overflow: 'hidden',\r\n                    //Эдитор\r\n                },\r\n                editorContainer: {\r\n                    margin: '0 !Important',\r\n                    padding: \"0px 14px\",\r\n                    borderRadius: '4px',\r\n                    position: 'relative',\r\n                    boxSizing: 'border-box',\r\n                    maxHeight: '100%',\r\n                    overflow: 'auto',\r\n                    //Редактор\r\n                },\r\n            }\r\n        }\r\n    })\r\n    const [isEditMode, setIsEditMode] = React.useState(false);\r\n    const [isLoading, setIsLoading] = React.useState(false);\r\n    const [titleText, setTitleText] = React.useState('');\r\n    const [selectedDate, setSelectedDate] = React.useState(new Date());\r\n    const [contentText, setContentText] = React.useState();\r\n    const [prevContentText, setPrevContentText] = React.useState();\r\n    const [selectedLocations, setselectedLocations] = React.useState([]);\r\n    const [selectedTechnics, setselectedTechnics] = React.useState([]);\r\n    const [realisticsValue, setRealisticsValue] = React.useState(1);\r\n    const [locations, setLocations] = React.useState({});\r\n    const [technics, setTechnics] = React.useState({});\r\n\r\n    const handleChangeRealistics = (event, newValue) => {\r\n        setRealisticsValue(newValue);\r\n    };\r\n\r\n    const handleChangeLocations = (event, value) => {\r\n        setselectedLocations(value);\r\n    };\r\n\r\n    const handleChangeTechnics = (event, value) => {\r\n        setselectedTechnics(value);\r\n    };\r\n\r\n    const blurTitle = (event) => {\r\n        setTitleText(event.target.value);\r\n    };\r\n\r\n    const handleDateChange = date => {\r\n        setSelectedDate(date);\r\n    };\r\n\r\n    const changeContent = (state) => {\r\n        const currCont = state.getCurrentContent();\r\n        const convert = convertToRaw(currCont);\r\n        const content = JSON.stringify(convert);\r\n        if (prevContentText !== content) {\r\n            setPrevContentText(content);\r\n        }\r\n    };\r\n\r\n    const savepost = () => {\r\n        setIsLoading(true);\r\n        let havErr = false;\r\n        let errorMessage = '';\r\n        if (typeof (titleText) !== 'undefined') {\r\n            if (titleText.length === 0) {\r\n                errorMessage = lang.currLang.errors.EmptyTitle;\r\n                havErr = true;\r\n            }\r\n        }\r\n        else {\r\n            errorMessage = lang.currLang.errors.EmptyTitle;\r\n            havErr = true;\r\n        }\r\n        if (typeof (prevContentText) !== 'undefined') {\r\n            if (JSON.parse(prevContentText).blocks[0].text.length === 0) {\r\n                errorMessage = lang.currLang.errors.EmptyDream;\r\n                havErr = true;\r\n            }\r\n        }\r\n        else {\r\n            errorMessage = lang.currLang.errors.EmptyDream;\r\n            havErr = true;\r\n        }\r\n        if (havErr) {\r\n            setSnackbar({\r\n                type: SET_SNACKBAR_MODE,\r\n                snackbar: {\r\n                    open: true,\r\n                    variant: 'error',\r\n                    message: errorMessage,\r\n                },\r\n            });\r\n            setIsLoading(false);\r\n        }\r\n        else {\r\n            if (isEditMode) {\r\n                let hasChanges = false;\r\n                let tagChanges = false;\r\n                let techChanges = false;\r\n                let postData = {\r\n                    post_id: props.location.defaultData.post_id,\r\n                };\r\n\r\n                if (props.location.defaultData.post_title !== titleText) {\r\n                    postData.title = titleText;\r\n                    hasChanges = true;\r\n                }\r\n\r\n                if (props.location.defaultData.dream_date.getTime() !== selectedDate.getTime()) {\r\n                    postData.dreamDate = selectedDate.toLocaleString(\"ru-RU\", { timeZone: 'Europe/London' });\r\n                    hasChanges = true;\r\n                }\r\n\r\n                if (props.location.defaultData.post_content !== prevContentText) {\r\n                    postData.content = prevContentText;\r\n                    hasChanges = true;\r\n                }\r\n\r\n                if (props.location.defaultData.rating !== realisticsValue) {\r\n                    postData.rating = realisticsValue;\r\n                    hasChanges = true;\r\n                }\r\n\r\n                if (defaultTechnics.length === selectedTechnics.length) {\r\n                    if (!compare(defaultTechnics, selectedTechnics)) {\r\n                        hasChanges = true;\r\n                        techChanges = true;\r\n                    }\r\n                }\r\n                else {\r\n                    hasChanges = true;\r\n                    techChanges = true;\r\n                }\r\n\r\n                if (defaultTags.length === selectedLocations.length) {\r\n                    if (!compare(defaultTags, selectedLocations)) {\r\n                        hasChanges = true;\r\n                        tagChanges = true;\r\n                    }\r\n                }\r\n                else {\r\n                    hasChanges = true;\r\n                    tagChanges = true;\r\n                }\r\n\r\n                if (hasChanges) {\r\n                    if (tagChanges) {\r\n                        let deleteTags = defaultTags.filter(item1 =>\r\n                            !selectedLocations.some(item2 => (\r\n                                item2.id === item1.id)\r\n                            )\r\n                        );\r\n                        let addTags = selectedLocations.filter(item1 =>\r\n                            !defaultTags.some(item2 => (\r\n                                item2.id === item1.id)\r\n                            )\r\n                        );\r\n                        if (addTags.length > 0) {\r\n                            let add = {};\r\n                            addTags.map((item, key) => (\r\n                                add[key] = item\r\n                            ));\r\n                            postData.tags = { ...postData.tags, add: add };\r\n                        }\r\n                        if (deleteTags.length > 0) {\r\n                            let remove = {};\r\n                            deleteTags.map((item, key) => (\r\n                                remove[key] = item\r\n                            ));\r\n                            postData.tags = { ...postData.tags, remove: remove };\r\n                        }\r\n                    }\r\n                    if (techChanges) {\r\n                        let deleteTech = defaultTechnics.filter(item1 =>\r\n                            !selectedTechnics.some(item2 => (\r\n                                item2.id === item1.id)\r\n                            )\r\n                        );\r\n                        let addTech = selectedTechnics.filter(item1 =>\r\n                            !defaultTechnics.some(item2 => (\r\n                                item2.id === item1.id)\r\n                            )\r\n                        );\r\n                        if (addTech.length > 0) {\r\n                            let add = {};\r\n                            addTech.map((item, key) => (\r\n                                add[key] = item\r\n                            ));\r\n                            postData.technics = { ...postData.technics, add: add };\r\n                        }\r\n                        if (deleteTech.length > 0) {\r\n                            let remove = {};\r\n                            deleteTech.map((item, key) => (\r\n                                remove[key] = item\r\n                            ));\r\n                            postData.technics = { ...postData.technics, remove: remove };\r\n                        }\r\n                    }\r\n                    instance\r\n                        .post('/actions/users/updatepost', postData)\r\n                        .then(res => {\r\n                            setIsLoading(false);\r\n                            setSnackbar({\r\n                                type: SET_SNACKBAR_MODE,\r\n                                snackbar: {\r\n                                    open: true,\r\n                                    variant: 'success',\r\n                                    message: lang.currLang.texts.success,\r\n                                },\r\n                            });\r\n                            history.push(\"/dreams\")\r\n                        })\r\n                        .catch(err => {\r\n                            console.log(err);\r\n                            setIsLoading(false);\r\n                        });\r\n                }\r\n                else {\r\n                    setSnackbar({\r\n                        type: SET_SNACKBAR_MODE,\r\n                        snackbar: {\r\n                            open: true,\r\n                            variant: 'error',\r\n                            message: lang.currLang.errors.NoChanges,\r\n                        },\r\n                    });\r\n                    setIsLoading(false);\r\n                }\r\n            }\r\n            else {\r\n                let postData = {\r\n                    title: titleText,\r\n                    dreamDate: selectedDate.toLocaleString(\"ru-RU\", { timeZone: 'Europe/London' }),\r\n                    content: prevContentText,\r\n                    create_user: auth.user.id,\r\n                    rating: realisticsValue,\r\n                    post_type: 1,\r\n                    nickname: auth.user.nickname,\r\n                    tags: selectedLocations,\r\n                    technics: selectedTechnics\r\n                }\r\n\r\n                instance\r\n                    .post('/actions/users/createpost', postData)\r\n                    .then(res => {\r\n                        setIsLoading(false);\r\n                        setSnackbar({\r\n                            type: SET_SNACKBAR_MODE,\r\n                            snackbar: {\r\n                                open: true,\r\n                                variant: 'success',\r\n                                message: lang.currLang.texts.success,\r\n                            },\r\n                        });\r\n                        history.push(\"/luciddreams\")\r\n                    })\r\n                    .catch(err => {\r\n                        setIsLoading(false);\r\n                    });\r\n            }\r\n        }\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        defaultTechnics = [];\r\n        defaultTags = [];\r\n        instance.get(\"/gettags\")\r\n            .then(res => {\r\n                setLocations(res.data);\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            });\r\n        instance.get(\"/gettechnics\")\r\n            .then(res => {\r\n                setTechnics(res.data);\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            });\r\n\r\n        if (typeof (props.location.defaultData) !== 'undefined') {\r\n            setIsEditMode(true);\r\n            defaultTechnics = [];\r\n            defaultTags = [];\r\n            const { post_title, dream_date, post_content, technics, tags, rating } = props.location.defaultData;\r\n            setTitleText(post_title);\r\n            setSelectedDate(dream_date);\r\n            setContentText(post_content);\r\n            setPrevContentText(post_content);\r\n\r\n            if (typeof tags[0][0] === 'string') {\r\n                tags.forEach(item => {\r\n                    let location = {};\r\n                    location.id = Number(item[0]);\r\n                    location.name_rus = item[1];\r\n                    location.name_eng = item[2];\r\n                    location.img_url = item[3];\r\n                    defaultTags.push(location);\r\n                });\r\n                setselectedLocations(defaultTags);\r\n            }\r\n\r\n            if (typeof technics[0][0] === 'string') {\r\n                technics.forEach(item => {\r\n                    let tech = {};\r\n                    tech.id = Number(item[0]);\r\n                    tech.name_rus = item[1];\r\n                    tech.name_eng = item[2];\r\n                    defaultTechnics.push(tech);\r\n                });\r\n                setselectedTechnics(defaultTechnics);\r\n            }\r\n\r\n            setRealisticsValue(rating);\r\n        }\r\n    }, [props.location.defaultData, lang.currLang]);\r\n\r\n    return (\r\n        <MuiThemeProvider theme={muiTheme}>\r\n            <CssBaseline />\r\n            <div className={classes.root} >\r\n                <Grid className={classes.mainGridContainer}\r\n                    container\r\n                    direction=\"column\"\r\n                    justify=\"center\"\r\n                    alignItems=\"stretch\" >\r\n                    <Grid item xs={11} className={classes.mainGridBodyItem}>\r\n                        <Paper className={classes.paper}>\r\n                            <Grid className={`${classes.mainGridContainer} ${classes.noWrap}`}\r\n                                container\r\n                                direction=\"column\"\r\n                                justify=\"center\"\r\n                                alignItems=\"center\"\r\n                            >\r\n                                <Grid item xs={2} className={classes.fullMinWidth} >\r\n                                    <TextField className={classes.inputDiv}\r\n                                        required\r\n                                        id=\"outlined-required\"\r\n                                        value={titleText}\r\n                                        label={lang.currLang.texts.title}\r\n                                        variant=\"outlined\"\r\n                                        onChange={(e) => { blurTitle(e) }}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={1} className={classes.fullMinWidth} >\r\n                                    <MuiPickersUtilsProvider utils={DateFnsUtils}\r\n                                        locale={lang.currLang.current === \"Ru\"\r\n                                            ? ruLocale\r\n                                            : enLocale}\r\n                                    >\r\n                                        <Grid className={classes.pickerGridContainer}\r\n                                            container\r\n                                            direction=\"row\"\r\n                                            justify=\"center\"\r\n                                            alignItems=\"stretch\" >\r\n                                            <Grid item xs={7} >\r\n                                                <KeyboardDatePicker className={classes.pickers}\r\n                                                    id=\"date-picker-dialog\"\r\n                                                    label={lang.currLang.texts.pickDate}\r\n                                                    format=\"dd.MM.yyyy\"\r\n                                                    value={selectedDate}\r\n                                                    onChange={handleDateChange}\r\n                                                    KeyboardButtonProps={{\r\n                                                        'aria-label': 'change date',\r\n                                                    }}\r\n                                                />\r\n                                            </Grid>\r\n                                            <Grid item xs={5} >\r\n                                                <KeyboardTimePicker className={classes.pickers}\r\n                                                    id=\"time-picker\"\r\n                                                    label={lang.currLang.texts.pickTime}\r\n                                                    value={selectedDate}\r\n                                                    onChange={handleDateChange}\r\n                                                    ampm={false}\r\n                                                    KeyboardButtonProps={{\r\n                                                        'aria-label': 'change time',\r\n                                                    }}\r\n                                                />\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </MuiPickersUtilsProvider>\r\n                                </Grid>\r\n                                <Grid item xs={4} className={classes.fullMinWidth} >\r\n                                    <div className={classes.inputScrollableDiv}>\r\n                                        <MUIRichTextEditor\r\n                                            value={contentText}\r\n                                            onChange={changeContent}\r\n                                            label={lang.currLang.texts.content}\r\n                                            inlineToolbar={false}\r\n                                            controls={[\r\n                                                \"bold\",\r\n                                                \"italic\",\r\n                                                \"underline\",\r\n                                                \"strikethrough\",\r\n                                                \"colorfill\",\r\n                                            ]}\r\n                                            customControls={[\r\n                                                {\r\n                                                    name: \"colorfill\",\r\n                                                    icon: <FormatColorFillIcon />,\r\n                                                    type: \"inline\",\r\n                                                    inlineStyle: {\r\n                                                        backgroundColor: \"yellow\",\r\n                                                        color: \"black\"\r\n                                                    }\r\n                                                }\r\n                                            ]}\r\n                                        />\r\n                                    </div>\r\n                                </Grid>\r\n                                <Grid item xs={2} className={classes.fullMinWidth} >\r\n                                    {technics.length\r\n                                        ? <Autocomplete\r\n                                            multiple\r\n                                            className={classes.inputDiv}\r\n                                            id=\"technics-outlined\"\r\n                                            size=\"small\"\r\n                                            options={technics}\r\n                                            getOptionLabel={option => (\r\n                                                <Chip\r\n                                                    size=\"small\"\r\n                                                    className={classes.chip}\r\n                                                    label={\r\n                                                        lang.currLang.current === \"Ru\"\r\n                                                            ? option.name_rus\r\n                                                            : option.name_eng\r\n                                                    }\r\n                                                />\r\n                                            )}\r\n                                            defaultValue={\r\n                                                defaultTechnics.map(item => {\r\n                                                    return technics[item.id - 1];\r\n                                                })}\r\n                                            onChange={(event, value) => handleChangeTechnics(event, value)}\r\n                                            filterSelectedOptions\r\n                                            renderInput={params => (\r\n                                                <TextField\r\n                                                    {...params}\r\n                                                    label={lang.currLang.texts.technics}\r\n                                                    fullWidth\r\n                                                />\r\n                                            )}\r\n                                        />\r\n                                        : <div className={classes.inputDiv}>\r\n                                            <LinearProgress />\r\n                                        </div>\r\n                                    }\r\n                                </Grid>\r\n                                <Grid item xs={2} className={classes.fullMinWidth} >\r\n                                    {locations.length\r\n                                        ? <Autocomplete\r\n                                            multiple\r\n                                            className={classes.inputDiv}\r\n                                            id=\"tags-outlined\"\r\n                                            size=\"small\"\r\n                                            options={locations}\r\n                                            getOptionLabel={option => (\r\n                                                <Chip\r\n                                                    size=\"small\"\r\n                                                    className={classes.chip}\r\n                                                    avatar={\r\n                                                        <Avatar src={option.img_url} />\r\n                                                    }\r\n                                                    label={\r\n                                                        lang.currLang.current === \"Ru\"\r\n                                                            ? option.name_rus\r\n                                                            : option.name_eng\r\n                                                    }\r\n                                                />\r\n                                            )}\r\n                                            defaultValue={\r\n                                                defaultTags.map(item => {\r\n                                                    return locations[item.id - 1];\r\n                                                })}\r\n                                            onChange={(event, value) => handleChangeLocations(event, value)}\r\n                                            filterSelectedOptions\r\n                                            renderInput={params => (\r\n                                                <TextField\r\n                                                    {...params}\r\n                                                    label={lang.currLang.texts.tags}\r\n                                                    fullWidth\r\n                                                />\r\n                                            )}\r\n                                        />\r\n                                        : <div className={classes.inputDiv}>\r\n                                            <LinearProgress />\r\n                                        </div>\r\n                                    }\r\n                                </Grid>\r\n                                <Grid item xs={1} className={classes.fullMinWidth} >\r\n                                    <div className={classes.div85width}>\r\n                                        <Grid className={classes.ratingGridContainer}\r\n                                            container\r\n                                            direction=\"row\"\r\n                                            justify=\"center\"\r\n                                            alignItems=\"stretch\" >\r\n                                            <Grid item xs={6}>\r\n                                                <Typography component=\"legend\">\r\n                                                    {lang.currLang.texts.rating} :\r\n                                                </Typography>\r\n                                            </Grid>\r\n                                            <Grid item xs={6}>\r\n                                                <Rating name=\"simple-controlled\"\r\n                                                    value={realisticsValue}\r\n                                                    onChange={handleChangeRealistics}\r\n                                                />\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </div>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Paper>\r\n                    </Grid>\r\n                    <Grid item xs={1} className={classes.mainGridBodyItem} >\r\n                        {isLoading\r\n                            ? <LinearProgress />\r\n                            : <Grid\r\n                                container\r\n                                direction=\"row\"\r\n                                justify=\"space-evenly\"\r\n                                alignItems=\"center\"\r\n                            >\r\n                                <Grid item>\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        color=\"secondary\"\r\n                                        className={classes.actionButton}\r\n                                        onClick={() => {\r\n                                            isEditMode\r\n                                                ? history.push(\"/dreams\")\r\n                                                : history.push(\"/luciddreams\")\r\n                                        }}\r\n                                    >\r\n                                        {lang.currLang.buttons.close}\r\n                                    </Button>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        color=\"primary\"\r\n                                        className={classes.actionButton}\r\n                                        onClick={() => savepost()}\r\n                                    >\r\n                                        {isEditMode\r\n                                            ? lang.currLang.buttons.Save\r\n                                            : lang.currLang.buttons.add\r\n                                        }\r\n                                    </Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                        }\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </MuiThemeProvider >\r\n    );\r\n};\r\n\r\nAddCDream.propTypes = {\r\n    setSnackbar: PropTypes.func.isRequired,\r\n    themeMode: PropTypes.object.isRequired,\r\n    lang: PropTypes.object.isRequired,\r\n    auth: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        themeMode: store.themeMode,\r\n        lang: store.lang,\r\n        auth: store.auth,\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setSnackbar: snackbar => dispatch(setSnackbar(snackbar)),\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(AddCDream);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport SwipeableViews from \"react-swipeable-views\";\r\n\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from '@material-ui/core/Button';\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Tab from \"@material-ui/core/Tab\";\r\n\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\n\r\nimport { useStyles } from '../styles/Styles';\r\nimport { setSnackbar } from '../actions/Actions';\r\nimport { SET_SNACKBAR_MODE } from \"../actions/types\";\r\n\r\nfunction AddTechnics(props) {\r\n    const classes = useStyles();\r\n    const { lang, themeMode, history, setSnackbar } = props;\r\n    const muiTheme = createMuiTheme(themeMode);\r\n    const [isEditMode, setIsEditMode] = React.useState(false);\r\n    const [value, setValue] = React.useState(0);\r\n    const [technicsData, setTechnicsData] = React.useState({\r\n        titleRu: '',\r\n        titleEn: '',\r\n        descriptionRu: '',\r\n        descriptionEn: '',\r\n    });\r\n    const [fileldsErr, setFileldsErr] = React.useState({\r\n        titleRu: false,\r\n        titleEn: false,\r\n        descriptionRu: false,\r\n        descriptionEn: false,\r\n    });\r\n\r\n    const changeData = (event, field) => {\r\n        let newTechnicsData = technicsData;\r\n        let newFileldsErr = fileldsErr;\r\n        switch (field) {\r\n            case 'title-ru':\r\n                newTechnicsData = { ...newTechnicsData, titleRu: event.target.value };\r\n                if (newFileldsErr.titleRu) {\r\n                    newFileldsErr = { ...newFileldsErr, titleRu: false };\r\n                    setFileldsErr(newFileldsErr);\r\n                }\r\n                break;\r\n            case 'title-en':\r\n                newTechnicsData = { ...newTechnicsData, titleEn: event.target.value };\r\n                if (newFileldsErr.titleEn) {\r\n                    newFileldsErr = { ...newFileldsErr, titleEn: false };\r\n                    setFileldsErr(newFileldsErr);\r\n                }\r\n                break;\r\n            case 'description-ru':\r\n                newTechnicsData = { ...newTechnicsData, descriptionRu: event.target.value };\r\n                if (newFileldsErr.descriptionRu) {\r\n                    newFileldsErr = { ...newFileldsErr, descriptionRu: false };\r\n                    setFileldsErr(newFileldsErr);\r\n                }\r\n                break;\r\n            case 'description-en':\r\n                newTechnicsData = { ...newTechnicsData, descriptionEn: event.target.value };\r\n                if (newFileldsErr.descriptionEn) {\r\n                    newFileldsErr = { ...newFileldsErr, descriptionEn: false };\r\n                    setFileldsErr(newFileldsErr);\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        setTechnicsData(newTechnicsData);\r\n    };\r\n\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue);\r\n    };\r\n\r\n    const handleChangeIndex = index => {\r\n        setValue(index);\r\n    };\r\n\r\n    const save = () => {\r\n        let isError = false;\r\n        let errorMessage = '';\r\n        let newFileldsErr = fileldsErr;\r\n        if (technicsData.titleRu.length === 0) {\r\n            isError = true;\r\n            errorMessage = lang.currLang.errors.EmptyTitle;\r\n            newFileldsErr = { ...newFileldsErr, titleRu: true };\r\n            setValue(0);\r\n        }\r\n        if (technicsData.titleEn.length === 0 && !isError) {\r\n            isError = true;\r\n            errorMessage = lang.currLang.errors.EmptyTitle;\r\n            newFileldsErr = { ...newFileldsErr, titleEn: true };\r\n            setValue(1);\r\n        }\r\n        if (technicsData.descriptionRu.length === 0 && !isError) {\r\n            isError = true;\r\n            errorMessage = lang.currLang.errors.EmptyDescription;\r\n            newFileldsErr = { ...newFileldsErr, descriptionRu: true };\r\n            setValue(0);\r\n        }\r\n        if (technicsData.descriptionEn.length === 0 && !isError) {\r\n            isError = true;\r\n            errorMessage = lang.currLang.errors.EmptyDescription;\r\n            newFileldsErr = { ...newFileldsErr, descriptionEn: true };\r\n            setValue(1);\r\n        }\r\n\r\n        if (isError) {\r\n            setFileldsErr(newFileldsErr);\r\n            setSnackbar({\r\n                type: SET_SNACKBAR_MODE,\r\n                snackbar: {\r\n                    open: true,\r\n                    variant: 'error',\r\n                    message: errorMessage,\r\n                },\r\n            });\r\n        }\r\n        else {\r\n            console.log(technicsData);\r\n        }\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        if (typeof (props.location.defaultData) !== 'undefined') {\r\n            setIsEditMode(true);\r\n            const { name_rus, name_eng } = props.location.defaultData.item;\r\n            let newTechnicsData = {};\r\n            newTechnicsData = { ...newTechnicsData, titleRu: name_rus };\r\n            newTechnicsData = { ...newTechnicsData, titleEn: name_eng };\r\n            setTechnicsData(newTechnicsData);\r\n        }\r\n    }, [props.location.defaultData]);\r\n\r\n    return (\r\n        <MuiThemeProvider theme={muiTheme}>\r\n            <CssBaseline />\r\n            <div className={classes.root} >\r\n                <Grid className={classes.mainGridContainer}\r\n                    container\r\n                    direction=\"column\"\r\n                    justify=\"center\"\r\n                    alignItems=\"stretch\" >\r\n                    <Grid item xs={11} className={classes.mainGridBodyItem}>\r\n                        <Paper className={classes.paper}>\r\n                            <Paper style={{\r\n                                position: 'relative',\r\n                                height: '10%',\r\n                            }}>\r\n                                <Tabs\r\n                                    centered\r\n                                    value={value}\r\n                                    onChange={handleChange}\r\n                                    indicatorColor=\"primary\"\r\n                                    textColor=\"primary\"\r\n                                >\r\n                                    <Tab label=\"RU\" />\r\n                                    <Tab label=\"EN\" />\r\n                                </Tabs>\r\n                            </Paper>\r\n                            <SwipeableViews className={classes.SwipeableViews}\r\n                                animateHeight\r\n                                axis={muiTheme.direction === \"rtl\" ? \"x-reverse\" : \"x\"}\r\n                                index={value}\r\n                                onChangeIndex={handleChangeIndex}\r\n                            >\r\n                                <Grid container\r\n                                    className={classes.mainGridContainer}\r\n                                    direction=\"column\"\r\n                                    justify=\"center\"\r\n                                    alignItems=\"center\"\r\n                                    role=\"tabpanel\"\r\n                                >\r\n                                    <Grid item xs={2} className={classes.fullMinWidth} >\r\n                                        <TextField className={classes.inputDiv}\r\n                                            error={fileldsErr.titleRu}\r\n                                            required\r\n                                            id=\"title-ru\"\r\n                                            value={technicsData.titleRu}\r\n                                            label={lang.currLang.texts.title}\r\n                                            variant=\"outlined\"\r\n                                            onChange={(e) => { changeData(e, 'title-ru') }}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item xs={10} className={classes.fullMinWidth} >\r\n                                        <TextField className={classes.inputDiv}\r\n                                            error={fileldsErr.descriptionRu}\r\n                                            required\r\n                                            id=\"description-ru\"\r\n                                            multiline\r\n                                            rows=\"5\"\r\n                                            value={technicsData.descriptionRu}\r\n                                            label={lang.currLang.texts.description}\r\n                                            variant=\"outlined\"\r\n                                            onChange={(e) => { changeData(e, 'description-ru') }}\r\n                                        />\r\n                                    </Grid>\r\n                                </Grid>\r\n                                <Grid container\r\n                                    className={classes.mainGridContainer}\r\n                                    direction=\"column\"\r\n                                    justify=\"center\"\r\n                                    alignItems=\"center\"\r\n                                    role=\"tabpanel\"\r\n                                >\r\n                                    <Grid item xs={2} className={classes.fullMinWidth} >\r\n                                        <TextField className={classes.inputDiv}\r\n                                            error={fileldsErr.titleEn}\r\n                                            required\r\n                                            id=\"title-en\"\r\n                                            value={technicsData.titleEn}\r\n                                            label={lang.currLang.texts.title}\r\n                                            variant=\"outlined\"\r\n                                            onChange={(e) => { changeData(e, 'title-en') }}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item xs={10} className={classes.fullMinWidth} >\r\n                                        <TextField className={classes.inputDiv}\r\n                                            error={fileldsErr.descriptionEn}\r\n                                            required\r\n                                            id=\"description-en\"\r\n                                            multiline\r\n                                            rows=\"5\"\r\n                                            value={technicsData.descriptionEn}\r\n                                            label={lang.currLang.texts.description}\r\n                                            variant=\"outlined\"\r\n                                            onChange={(e) => { changeData(e, 'description-en') }}\r\n                                        />\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </SwipeableViews>\r\n                        </Paper>\r\n                    </Grid>\r\n                    <Grid item xs={1} zeroMinWidth className={classes.mainGridBodyItem}>\r\n                        <Grid container\r\n                            direction=\"row\"\r\n                            justify=\"space-evenly\"\r\n                            alignItems=\"center\"\r\n                        >\r\n                            <Grid item>\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    color=\"secondary\"\r\n                                    className={classes.actionButton}\r\n                                    onClick={() => { history.push(\"/technics\") }}\r\n                                >\r\n                                    {lang.currLang.buttons.close}\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    className={classes.actionButton}\r\n                                    onClick={() => save()}\r\n                                >\r\n                                    {isEditMode\r\n                                        ? lang.currLang.buttons.Save\r\n                                        : lang.currLang.buttons.add\r\n                                    }\r\n                                </Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </MuiThemeProvider>\r\n    )\r\n}\r\n\r\nAddTechnics.propTypes = {\r\n    setSnackbar: PropTypes.func.isRequired,\r\n    themeMode: PropTypes.object.isRequired,\r\n    lang: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        themeMode: store.themeMode,\r\n        lang: store.lang,\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setSnackbar: snackbar => dispatch(setSnackbar(snackbar)),\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(AddTechnics);","import React from 'react';\r\nimport clsx from \"clsx\";\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport MUIRichTextEditor from 'mui-rte';\r\nimport { EditorState, convertFromRaw } from 'draft-js';\r\n\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport CardHeader from \"@material-ui/core/CardHeader\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Collapse from \"@material-ui/core/Collapse\";\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Button from '@material-ui/core/Button';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Card from \"@material-ui/core/Card\";\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport Menu from '@material-ui/core/Menu';\r\n\r\nimport Rating from \"@material-ui/lab/Rating\";\r\n\r\nimport FormatColorFillIcon from '@material-ui/icons/FormatColorFill';\r\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport Visibility from '@material-ui/icons/Visibility';\r\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\n\r\nimport { useStyles } from '../../styles/Styles';\r\n\r\nimport { instance } from '../Config';\r\n\r\nimport { SET_SNACKBAR_MODE } from \"../../actions/types\";\r\nimport { setSnackbar } from '../../actions/Actions';\r\n\r\nfunction DreamCard(props) {\r\n    const classes = useStyles();\r\n    const { post_id, post_title, post_content, post_type, tags, technics, rating, dream_date, is_public } = props.item;\r\n    const { lang, palette, history, setSnackbar } = props;\r\n    const [expanded, setExpanded] = React.useState(false);\r\n    const [anchorEl, setAnchorEl] = React.useState(null);\r\n    const [openAlert, setOpenAlert] = React.useState(false);\r\n    const [publicChecked, setPublicChecked] = React.useState(false);\r\n    const [alertTexts, setAlertTexts] = React.useState({\r\n        header: '',\r\n        body: '',\r\n        commit: '',\r\n        action: '',\r\n    });\r\n\r\n    const dateOfDream = new Date(dream_date).getDate() + '.' + (new Date(dream_date).getMonth() + 1) + '.' + new Date(dream_date).getFullYear() + ' ' + new Date(dream_date).getHours() + ':' + (\"0\" + new Date(dream_date).getMinutes()).slice(-2);\r\n    const srcContent = post_content.toString();\r\n    const jsonPparse = JSON.parse(srcContent);\r\n    const convertfromraw = convertFromRaw(jsonPparse);\r\n    const text_content = EditorState.createWithContent(convertfromraw).getCurrentContent().getPlainText('');\r\n\r\n    React.useEffect(() => {\r\n        is_public === 1\r\n            ? setPublicChecked(true)\r\n            : setPublicChecked(false);\r\n    }, [is_public]);\r\n\r\n    const openMenu = event => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const closeMenu = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    const clickMenu = (action, event) => {\r\n        let newAlertTexts = alertTexts;\r\n        switch (action) {\r\n            case 'public':\r\n                if (event.target.checked) {\r\n                    newAlertTexts = { ...newAlertTexts, header: lang.currLang.texts.PublicAlert };\r\n                    newAlertTexts = { ...newAlertTexts, body: lang.currLang.texts.PublicText };\r\n                    newAlertTexts = { ...newAlertTexts, commit: lang.currLang.texts.Publish };\r\n                    newAlertTexts = { ...newAlertTexts, action: 'publicOk' };\r\n                    setAlertTexts(newAlertTexts);\r\n                }\r\n                else {\r\n                    newAlertTexts = { ...newAlertTexts, header: lang.currLang.texts.UnpublicAlert };\r\n                    newAlertTexts = { ...newAlertTexts, body: lang.currLang.texts.UnpublicText };\r\n                    newAlertTexts = { ...newAlertTexts, commit: lang.currLang.texts.Unpublish };\r\n                    newAlertTexts = { ...newAlertTexts, action: 'publicOk' };\r\n                    setAlertTexts(newAlertTexts);\r\n                }\r\n                setOpenAlert(true);\r\n                closeMenu();\r\n                break;\r\n\r\n            case 'edit':\r\n                closeMenu();\r\n                if (post_type === 0) {\r\n                    history.push({\r\n                        pathname: \"/addregulardream\",\r\n                        defaultData: {\r\n                            post_id: post_id,\r\n                            post_title: post_title,\r\n                            dream_date: new Date(dream_date),\r\n                            post_content: post_content,\r\n                            tags: tags,\r\n                        }\r\n                    });\r\n                }\r\n                else if (post_type === 1) {\r\n                    history.push({\r\n                        pathname: \"/addcdream\",\r\n                        defaultData: {\r\n                            post_id: post_id,\r\n                            post_title: post_title,\r\n                            dream_date: new Date(dream_date),\r\n                            post_content: post_content,\r\n                            tags: tags,\r\n                            technics: technics,\r\n                            rating: rating,\r\n                        }\r\n                    });\r\n                }\r\n                break;\r\n\r\n            case 'delete':\r\n                newAlertTexts = { ...newAlertTexts, header: lang.currLang.texts.DeleteAlert };\r\n                newAlertTexts = { ...newAlertTexts, body: lang.currLang.texts.DeleteText };\r\n                newAlertTexts = { ...newAlertTexts, commit: lang.currLang.buttons.Delete };\r\n                newAlertTexts = { ...newAlertTexts, action: 'deleteOk' };\r\n                setAlertTexts(newAlertTexts);\r\n                closeMenu();\r\n                setOpenAlert(true);\r\n                break;\r\n\r\n            case 'closeAlert':\r\n                setOpenAlert(false);\r\n                break;\r\n\r\n            case 'deleteOk':\r\n                const postData = {\r\n                    post_id: post_id\r\n                };\r\n                instance\r\n                    .post('/actions/users/deletepost', postData)\r\n                    .then(res => {\r\n                        closeMenu();\r\n                        setSnackbar({\r\n                            type: SET_SNACKBAR_MODE,\r\n                            snackbar: {\r\n                                open: true,\r\n                                variant: 'success',\r\n                                message: lang.currLang.texts.success,\r\n                            },\r\n                        });\r\n                        setOpenAlert(false);\r\n                        props.loadPosts();\r\n                    })\r\n                    .catch(err => {\r\n                        setSnackbar({\r\n                            type: SET_SNACKBAR_MODE,\r\n                            snackbar: {\r\n                                open: true,\r\n                                variant: 'error',\r\n                                message: lang.currLang.texts.CantDeletePost,\r\n                            },\r\n                        });\r\n                        closeMenu();\r\n                        setOpenAlert(false);\r\n                    });\r\n                break;\r\n\r\n            case 'publicOk':\r\n                closeMenu();\r\n                setOpenAlert(false);\r\n                if (publicChecked) {\r\n                    const postData = {\r\n                        post_id: post_id,\r\n                        newPublic: 0\r\n                    };\r\n                    instance\r\n                        .post('/actions/users/updatepost', postData)\r\n                        .then(res => {\r\n                            setPublicChecked(false);\r\n                            setSnackbar({\r\n                                type: SET_SNACKBAR_MODE,\r\n                                snackbar: {\r\n                                    open: true,\r\n                                    variant: 'success',\r\n                                    message: lang.currLang.texts.success,\r\n                                },\r\n                            });\r\n                        })\r\n                        .catch(err => {\r\n                            setPublicChecked(true);\r\n                        });\r\n                }\r\n                else {\r\n                    const postData = {\r\n                        post_id: post_id,\r\n                        newPublic: 1,\r\n                    };\r\n                    instance\r\n                        .post('/actions/users/updatepost', postData)\r\n                        .then(res => {\r\n                            setPublicChecked(true);\r\n                            setSnackbar({\r\n                                type: SET_SNACKBAR_MODE,\r\n                                snackbar: {\r\n                                    open: true,\r\n                                    variant: 'success',\r\n                                    message: lang.currLang.texts.success,\r\n                                },\r\n                            });\r\n                        })\r\n                        .catch(err => {\r\n                            setPublicChecked(false);\r\n                        });\r\n                }\r\n                break;\r\n\r\n            default:\r\n                console.log('Command not found');\r\n                break;\r\n        }\r\n    };\r\n\r\n    const handleExpandClick = () => {\r\n        setExpanded(!expanded);\r\n    };\r\n\r\n    return (\r\n        <Grid item xs={12} className={classes.dreamCardDiv}>\r\n            <Dialog open={openAlert}\r\n                onClose={() => clickMenu('closeAlert')}\r\n                aria-labelledby=\"alert-dialog-title\"\r\n                aria-describedby=\"alert-dialog-description\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-title\" >\r\n                    {alertTexts.header}\r\n                </DialogTitle>\r\n                <DialogContent >\r\n                    <DialogContentText id=\"alert-dialog-description\" >\r\n                        {alertTexts.body}\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => clickMenu('closeAlert')}\r\n                        color=\"secondary\">\r\n                        {lang.currLang.buttons.cancel}\r\n                    </Button>\r\n                    <Button onClick={() => clickMenu(alertTexts.action)}\r\n                        color=\"primary\" autoFocus>\r\n                        {alertTexts.commit}\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Menu id=\"simple-menu\"\r\n                anchorEl={anchorEl}\r\n                keepMounted\r\n                open={Boolean(anchorEl)}\r\n                onClose={closeMenu}>\r\n\r\n                <MenuItem >\r\n                    <ListItemIcon>\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Checkbox\r\n                                    onChange={(e) => clickMenu('public', e)}\r\n                                    checked={publicChecked}\r\n                                    value=\"checkedB\"\r\n                                    color=\"primary\"\r\n                                />\r\n                            }\r\n                        />\r\n                    </ListItemIcon>\r\n                    {lang.currLang.texts.Public}\r\n                </MenuItem>\r\n\r\n                <MenuItem onClick={() => clickMenu('edit')}>\r\n                    <ListItemIcon>\r\n                        <EditIcon fontSize=\"small\" />\r\n                    </ListItemIcon>\r\n                    {lang.currLang.buttons.Edit}\r\n                </MenuItem>\r\n\r\n                <MenuItem onClick={() => clickMenu('delete')}>\r\n                    <ListItemIcon>\r\n                        <EditIcon fontSize=\"small\" />\r\n                    </ListItemIcon>\r\n                    {lang.currLang.buttons.Delete}\r\n                </MenuItem>\r\n\r\n            </Menu>\r\n\r\n            <Card raised={true}\r\n                className={classes.card}>\r\n                <CardHeader\r\n                    title={\r\n                        <Grid container\r\n                            direction=\"row\"\r\n                            justify=\"flex-start\"\r\n                            alignItems=\"center\"\r\n                        >\r\n                            <Grid item xs={10} >\r\n                                <Typography variant='h6'>\r\n                                    {post_title}\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid item xs={2} >\r\n                                <Tooltip\r\n                                    disableFocusListener\r\n                                    disableTouchListener\r\n                                    title={publicChecked\r\n                                        ? lang.currLang.texts.PublicDescription\r\n                                        : lang.currLang.texts.UnpublicDescription\r\n                                    }\r\n                                >\r\n                                    {publicChecked\r\n                                        ? <Visibility className={classes.iconCenter} />\r\n                                        : <VisibilityOff className={classes.iconCenter} />\r\n                                    }\r\n                                </Tooltip>\r\n                            </Grid>\r\n                        </Grid>\r\n                    }\r\n                    subheader={dateOfDream}\r\n                    action={\r\n                        <IconButton\r\n                            aria-label=\"settings\"\r\n                            onClick={(e) => openMenu(e)}\r\n                        >\r\n                            <MoreVertIcon />\r\n                        </IconButton>\r\n                    }\r\n                />\r\n                <CardContent>\r\n                    <div className={classes.avatarRoot}>\r\n                        <Chip variant=\"outlined\"\r\n                            label={\r\n                                post_type === 0\r\n                                    ? lang.currLang.texts.Dream\r\n                                    : lang.currLang.texts.Cdream\r\n                            }\r\n                        />\r\n                        {technics.map((technic, key) =>\r\n                            technic[0]\r\n                                ? <Chip className={classes.smallChip}\r\n                                    key={key}\r\n                                    label={lang.currLang.current === \"Ru\"\r\n                                        ? technic[1]\r\n                                        : technic[2]}\r\n                                />\r\n                                : ''\r\n                        )}\r\n                    </div>\r\n                    <div className={classes.avatarRoot}>\r\n                        {tags.map((tag, key) =>\r\n                            tag[0]\r\n                                ? <Tooltip key={key}\r\n                                    disableFocusListener\r\n                                    disableTouchListener\r\n                                    title={\r\n                                        lang.currLang.current === \"Ru\"\r\n                                            ? tag[1]\r\n                                            : tag[2]\r\n                                    }\r\n                                >\r\n                                    <Avatar className={classes.smallAvatar}\r\n                                        src={tag[3]}\r\n                                        style={palette.type === 'dark'\r\n                                            ? {\r\n                                                filter: 'invert(1)',\r\n                                            }\r\n                                            : {}}\r\n                                    />\r\n                                </Tooltip>\r\n                                : ''\r\n                        )}\r\n                    </div>\r\n                </CardContent>\r\n                <CardActions disableSpacing={true}>\r\n                    <Typography\r\n                        noWrap={expanded\r\n                            ? false\r\n                            : true\r\n                        }\r\n                        variant='body2'\r\n                        style={{\r\n                            padding: '12px',\r\n                        }}\r\n                    >\r\n                        {expanded\r\n                            ? lang.currLang.texts.TapToShow\r\n                            : text_content\r\n                        }\r\n                    </Typography>\r\n\r\n                    <IconButton\r\n                        className={clsx(classes.expand, {\r\n                            [classes.expandOpen]: expanded\r\n                        })}\r\n                        onClick={handleExpandClick}\r\n                        aria-expanded={expanded}\r\n                        aria-label=\"show more\"\r\n                    >\r\n                        <ExpandMoreIcon />\r\n                    </IconButton>\r\n                </CardActions>\r\n                <Collapse in={expanded}\r\n                    timeout=\"auto\"\r\n                    unmountOnExit >\r\n                    <CardContent>\r\n                        <Paper className={classes.contentPaper}>\r\n                            <MUIRichTextEditor\r\n                                controls={[\r\n                                    \"bold\",\r\n                                    \"italic\",\r\n                                    \"underline\",\r\n                                    \"strikethrough\",\r\n                                    \"colorfill\",\r\n                                ]}\r\n                                customControls={[\r\n                                    {\r\n                                        name: \"colorfill\",\r\n                                        icon: <FormatColorFillIcon />,\r\n                                        type: \"inline\",\r\n                                        inlineStyle: {\r\n                                            backgroundColor: \"yellow\",\r\n                                            color: \"black\"\r\n                                        }\r\n                                    }\r\n                                ]}\r\n                                readOnly={true}\r\n                                toolbar={false}\r\n                                value={post_content}\r\n                            />\r\n                        </Paper>\r\n                        {post_type === 0\r\n                            ? ''\r\n                            :\r\n                            <Grid container\r\n                                style={{\r\n                                    paddingTop: '10px',\r\n                                }}\r\n                                direction=\"row\"\r\n                                justify=\"center\"\r\n                                alignItems=\"stretch\" >\r\n                                <Grid item xs={6}>\r\n                                    <Typography component=\"legend\" variant='body2'>\r\n                                        {lang.currLang.texts.rating}:\r\n                                    </Typography>\r\n                                </Grid>\r\n                                <Grid item xs={6}>\r\n                                    <Rating name=\"simple-controlled\"\r\n                                        value={rating}\r\n                                        readOnly\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n                        }\r\n                    </CardContent>\r\n                </Collapse>\r\n            </Card>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nDreamCard.propTypes = {\r\n    setSnackbar: PropTypes.func.isRequired,\r\n    lang: PropTypes.object.isRequired,\r\n    palette: PropTypes.object.isRequired,\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        lang: store.lang,\r\n        palette: store.themeMode.palette,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setSnackbar: snackbar => dispatch(setSnackbar(snackbar)),\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(DreamCard);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Button from '@material-ui/core/Button';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\n\r\nimport DreamCard from './muiltiple/DreamCard';\r\nimport { useStyles } from '../styles/Styles';\r\nimport { instance } from './Config';\r\n\r\nfunction ViewDreams(props) {\r\n    const { lang, themeMode, history, auth } = props;\r\n    const muiTheme = createMuiTheme(themeMode);\r\n    const classes = useStyles();\r\n    const [isLoading, setIsLoading] = React.useState(true);\r\n    const [dreams, setDreams] = React.useState([]);\r\n\r\n    const loadPosts = React.useCallback(() => {\r\n        setIsLoading(true);\r\n        instance.post(\"/actions/users/getuserposts\", { id: auth.user.id })\r\n            .then(res => {\r\n                setDreams(res.data);\r\n                setIsLoading(false);\r\n            })\r\n            .catch(err => {\r\n                setIsLoading(false);\r\n            });\r\n    }, [auth.user.id]);\r\n\r\n    React.useEffect(() => {\r\n        loadPosts();\r\n    }, [loadPosts]);\r\n\r\n    return (\r\n        <MuiThemeProvider theme={muiTheme}>\r\n            <CssBaseline />\r\n            <div className={classes.root}>\r\n                <Grid className={classes.mainGridContainer}\r\n                    container\r\n                    direction=\"column\"\r\n                    justify=\"center\"\r\n                    alignItems=\"stretch\" >\r\n                    <Grid item xs={11} zeroMinWidth className={classes.mainGridDreamsBodyItem}>\r\n                        {isLoading\r\n                            ? <div className={classes.centerCircularProgress}>\r\n                                <CircularProgress disableShrink />\r\n                            </div>\r\n                            : <Container className={classes.mainGridDreamsBodyItemContainer}>\r\n                                <Paper className={classes.mainGridDreamsBodyItemContainerPaper}>\r\n                                    {dreams.length !== 0\r\n                                        ? <Grid className={classes.mainGridDreamsContainer}\r\n                                            container\r\n                                            direction=\"column\"\r\n                                            justify=\"center\"\r\n                                            alignItems=\"stretch\"\r\n                                        >\r\n                                            {dreams.map((item, key) => (\r\n                                                <DreamCard\r\n                                                    item={item}\r\n                                                    key={key}\r\n                                                    history={history}\r\n                                                    loadPosts={loadPosts}\r\n                                                />\r\n                                            ))}\r\n                                        </Grid>\r\n                                        :\r\n                                        <div>\r\n                                            <div className={classes.divDreamsNotFound} />\r\n                                            <div className={`${classes.divDreamsNotFound} ${classes.divDreamsNotFoundImg}`} />\r\n                                            <div className={classes.divDreamsNotFound}>\r\n                                                <Typography>\r\n                                                    {lang.currLang.texts.NoDreams}\r\n                                                </Typography>\r\n                                            </div>\r\n                                        </div>\r\n                                    }\r\n                                </Paper>\r\n                            </Container>\r\n                        }\r\n                    </Grid>\r\n                    <Grid item xs={1} zeroMinWidth className={classes.mainGridBodyItem}>\r\n                        <Grid\r\n                            container\r\n                            direction=\"row\"\r\n                            justify=\"space-evenly\"\r\n                            alignItems=\"center\"\r\n                            spacing={1}\r\n                        >\r\n                            <Grid item xs={6} align=\"center\">\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    color=\"secondary\"\r\n                                    className={classes.actionButton}\r\n                                    onClick={() => { history.push(\"/luciddreams\") }}\r\n                                >\r\n                                    {lang.currLang.buttons.close}\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid item xs={6} />\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </MuiThemeProvider >\r\n    );\r\n}\r\n\r\nViewDreams.propTypes = {\r\n    themeMode: PropTypes.object.isRequired,\r\n    lang: PropTypes.object.isRequired,\r\n    auth: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        themeMode: store.themeMode,\r\n        lang: store.lang,\r\n        auth: store.auth,\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(ViewDreams);","const words = {\r\n    current: 'Ru',\r\n    buttons: {\r\n        signIn: 'Вход',\r\n        signUp: 'Регистрация',\r\n        dreamJoirnal: 'Дневник снов',\r\n        addDream: 'Добавить сон',\r\n        addCDream: 'Добавить осозн. сон',\r\n        techniques: 'Техники',\r\n        adventures: 'Приключения',\r\n        close: 'Назад',\r\n        about: 'О нас',\r\n        cancel: 'Отмена',\r\n        add: 'Добавить',\r\n        Edit: 'Изменить',\r\n        Delete: 'Удалить',\r\n        Save: 'Сохранить',\r\n    },\r\n    texts: {\r\n        about: 'О нас О нас О нас О нас О нас О нас О нас О нас О нас О нас О нас О нас',\r\n        or: 'ИЛИ',\r\n        nickname: 'Отображаемое имя',\r\n        password: 'Пароль',\r\n        passwordAgain: 'Поторите пароль',\r\n        cancel: 'Отмена',\r\n        sucessRegistration: 'Вы успешно зарегистрировались',\r\n        hello: 'Привет, ',\r\n        changleLanguage: 'Сохранить изменение языка на ',\r\n        success: 'Успешно',\r\n        title: 'Заголовок',\r\n        description: 'Описание',\r\n        content: 'Что снилось',\r\n        tags: 'Места',\r\n        technics: 'Техники',\r\n        rating: 'Реалистичность',\r\n        Dream: 'Обычный сон',\r\n        Cdream: 'ОC',\r\n        NoDreams: \"У вас нет снов\",\r\n        pickDate: \"Дата\",\r\n        pickTime: \"Время\",\r\n        TapToShow: \"Нажмите на текст, чтобы отобразить подсвечивание\",\r\n        Public: \"Опубликовано\",\r\n        Publish: \"Опубликовать\",\r\n        Unpublish: \"Скрыть\",\r\n        PublicAlert: \"Вы точно хотите опубликовать сон?\",\r\n        PublicText: \"После публикации ваши друзья смогут прочитать этот сон.\",\r\n        PublicDescription: \"Ваши друзья могут прочитать этот сон\",\r\n        UnpublicAlert: \"Вы точно хотите скрыть сон?\",\r\n        UnpublicText: \"После скрытия ваши друзья не смогут прочитать этот сон.\",\r\n        UnpublicDescription: \"Ваши друзья не могут прочитать этот сон\",\r\n        DeleteAlert: \"Вы точно хотите удалить?\",\r\n        DeleteText: \"После удаления запись не получится восстановить.\",\r\n    },\r\n    errors: {\r\n        emailLenght: 'Введите email',\r\n        nicknameLenght: 'Введите отображаемое имя',\r\n        passwordLenght: 'Введите пароль',\r\n        password2Lenght: 'Введите пароль',\r\n        passwordsCompare: 'Пароли не совпадают',\r\n        UserNotExist: 'Неверный email или пароль',\r\n        EmailIsNotValid: 'Введен некорректный email',\r\n        IncorrectPassword: 'Неверный email или пароль',\r\n        EmailIsBusy: 'Email занят',\r\n        PasswordLenght5Symbols: 'Длина пароля - больше 5 символов',\r\n        NotLogin: 'Вы не авторизированы',\r\n        EmptyTitle: 'Пустой заголовок',\r\n        EmptyDescription: 'Пустое описание',\r\n        EmptyDream: 'Пустое поле сна',\r\n        NoChanges: 'Нет изменений',\r\n        CantDeletePost: 'Ошибка удаления сна',\r\n    },\r\n};\r\n\r\nexport default words;","import React from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport SnackbarContent from \"@material-ui/core/SnackbarContent\";\r\nimport ButtonBase from '@material-ui/core/ButtonBase';\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport Button from '@material-ui/core/Button';\r\nimport Slide from \"@material-ui/core/Slide\";\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport { SET_THEME_MODE, SET_SNACKBAR_MODE } from \"../actions/types\";\r\n\r\nimport { setCurrLang, setTheme, setSnackbar } from '../actions/Actions';\r\nimport { useStyles } from '../styles/Styles';\r\nimport { instance } from './Config';\r\nimport { CheckTimeOut } from '../utils/CheckLoginTimeOut';\r\n\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\n\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\n\r\nimport RuDict from '../dictionary/ru';\r\nimport EnDict from '../dictionary/en';\r\n\r\nfunction TransitionDown(props) {\r\n    return <Slide {...props} direction=\"down\" />;\r\n}\r\n\r\nfunction MainPage(props) {\r\n    const classes = useStyles();\r\n    const { lang, themeMode, auth, history, setCurrLangAction, setTheme, setSnackbar } = props;\r\n    const muiTheme = createMuiTheme(themeMode);\r\n    const [prevLanguage, setPrevLanguage] = React.useState(undefined);\r\n    const [openLangSnakbar, setOpenLangSnakbar] = React.useState(false);\r\n    const [langSnakbarMessage, setLangSnakbarMessage] = React.useState('');\r\n    const [transition, setTransition] = React.useState(undefined);\r\n\r\n    const switchMode = () => {\r\n        let newPaletteType = themeMode.palette.type === \"light\" ? \"dark\" : \"light\";\r\n        let primaryColor = themeMode.palette.type === \"light\" ? \"#f9a825\" : \"#3f51b5\";\r\n        let secondaryColor = themeMode.palette.type === \"light\" ? \"#f50057\" : \"#f50057\";\r\n        setTheme({\r\n            type: SET_THEME_MODE,\r\n            palette: {\r\n                type: newPaletteType,\r\n                primary: { main: primaryColor },\r\n                secondary: { main: secondaryColor },\r\n            }\r\n        });\r\n    };\r\n\r\n    const onAstronautClick = () => {\r\n        alert('Тут должны перейти на страницу космонафта');\r\n    };\r\n\r\n    const onMapClick = () => {\r\n        let check = CheckTimeOut();\r\n        if (check) history.push(\"/dreammap\");\r\n        else history.push(\"/\");\r\n    };\r\n\r\n    const changeLanguage = (language) => {\r\n        if (language !== lang.currLang.current) {\r\n            if (language === 'Ru') {\r\n                setPrevLanguage(lang.currLang.current);\r\n                setCurrLangAction(RuDict);\r\n                setLangSnakbarMessage(language);\r\n                setTransition(() => TransitionDown);\r\n                setOpenLangSnakbar(true);\r\n            }\r\n            if (lang.currLang.current !== 'En') {\r\n                setPrevLanguage(lang.currLang.current);\r\n                setCurrLangAction(EnDict);\r\n                setLangSnakbarMessage(language);\r\n                setTransition(() => TransitionDown);\r\n                setOpenLangSnakbar(true);\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleCloseLangSnakbar = () => {\r\n        switch (prevLanguage) {\r\n            case 'En':\r\n                setCurrLangAction(EnDict);\r\n                break;\r\n            case 'Ru':\r\n                setCurrLangAction(RuDict);\r\n                break;\r\n            default:\r\n                setCurrLangAction(EnDict);\r\n                break;\r\n        }\r\n        setOpenLangSnakbar(false);\r\n    };\r\n\r\n    const handleSaveLangSnakbar = () => {\r\n        let newLang;\r\n        switch (lang.currLang.current) {\r\n            case 'En':\r\n                newLang = 0;\r\n                break;\r\n            case 'Ru':\r\n                newLang = 1;\r\n                break;\r\n            default:\r\n                newLang = 0;\r\n                break;\r\n        }\r\n        let userid = auth.user.id;\r\n        let usernickname = auth.user.nickname;\r\n        let newUserData = {\r\n            language: newLang,\r\n            id: userid,\r\n            nickname: usernickname,\r\n        };\r\n        //Проверка на таймаут\r\n        let check = CheckTimeOut();\r\n        if (check) {\r\n            instance\r\n                .post('/actions/users/updateuserdata', newUserData)\r\n                .then(res => {\r\n                    setSnackbar({\r\n                        type: SET_SNACKBAR_MODE,\r\n                        snackbar: {\r\n                            open: true,\r\n                            variant: 'success',\r\n                            message: lang.currLang.texts.success,\r\n                        },\r\n                    });\r\n                    setOpenLangSnakbar(false);\r\n                })\r\n                .catch(err => {\r\n                    handleCloseLangSnakbar();\r\n                });\r\n\r\n        }\r\n        else {\r\n            setSnackbar({\r\n                type: SET_SNACKBAR_MODE,\r\n                snackbar: {\r\n                    open: true,\r\n                    variant: 'error',\r\n                    message: lang.currLang.errors.NotLogin,\r\n                },\r\n            });\r\n            handleCloseLangSnakbar();\r\n        }\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        let id = {\r\n            id: auth.user.id,\r\n        };\r\n        instance\r\n            .post('/actions/users/getuserdata', id)\r\n            .then(res => {\r\n                res.data.language === 0 ? setCurrLangAction(EnDict) : setCurrLangAction(RuDict);\r\n            })\r\n            .catch(err => {\r\n                auth.user.language === 0 ? setCurrLangAction(EnDict) : setCurrLangAction(RuDict);\r\n            });\r\n        // if (auth.user.times_mode === 0) {\r\n        //     setTheme({\r\n        //         type: SET_THEME_MODE,\r\n        //         palette: {\r\n        //             type: \"dark\",\r\n        //             primary: { main: \"#f9a825\" },\r\n        //             secondary: { main: \"#f50057\" },\r\n        //         }\r\n        //     });\r\n        // }\r\n        // else {\r\n        //     setTheme({\r\n        //         type: SET_THEME_MODE,\r\n        //         palette: {\r\n        //             type: \"light\",\r\n        //             primary: { main: \"#3f51b5\" },\r\n        //             secondary: { main: \"#f50057\" },\r\n        //         }\r\n        //     });\r\n        // }\r\n    }, [classes, setTheme, setCurrLangAction, auth.user.language, auth.user.times_mode, auth.user.id]);\r\n\r\n    return (\r\n        <MuiThemeProvider theme={muiTheme}>\r\n            <CssBaseline />\r\n\r\n            <Snackbar\r\n                anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }}\r\n                key={\"top, center\"}\r\n                open={openLangSnakbar}\r\n                TransitionComponent={transition}\r\n            >\r\n                <SnackbarContent\r\n                    aria-describedby=\"lang-snackbar\"\r\n                    message={\r\n                        <Typography className={classes.mainGridContainer}\r\n                            align='center'\r\n                            id=\"lang-snackbar\"\r\n                            variant='body2'>\r\n                            {lang.currLang.texts.changleLanguage + langSnakbarMessage + ' ?'}\r\n                        </Typography>\r\n                    }\r\n                    action={[\r\n                        <div key={\"lang-snackbar-buttons\"}>\r\n                            <IconButton\r\n                                key=\"save\"\r\n                                aria-label=\"save\"\r\n                                color=\"inherit\"\r\n                                onClick={handleSaveLangSnakbar}\r\n                            >\r\n                                <SaveIcon />\r\n                            </IconButton>\r\n                            <IconButton\r\n                                key=\"close\"\r\n                                aria-label=\"close\"\r\n                                color=\"inherit\"\r\n                                onClick={handleCloseLangSnakbar}\r\n                            >\r\n                                <CloseIcon />\r\n                            </IconButton>\r\n                        </div>\r\n                    ]}\r\n                />\r\n            </Snackbar>\r\n\r\n            <div className={classes.root}>\r\n                <div className={classes.mainPage}>\r\n                    <Grid className={classes.mainGridContainer}\r\n                        container\r\n                        direction=\"column\"\r\n                        justify=\"center\"\r\n                        alignItems=\"stretch\"\r\n                    >\r\n                        <Grid item xs={4} className={classes.mainGridHeadItem} >\r\n                            <Grid container className={classes.mainGridContainer}\r\n                                direction=\"row\"\r\n                                justify=\"space-around\"\r\n                                alignItems=\"stretch\"\r\n                            >\r\n                                <Grid item xs={4} >\r\n                                    <ButtonBase className={classes.AstronautButton}\r\n                                        type='button'\r\n                                        focusRipple\r\n                                        onClick={onAstronautClick}>\r\n                                        <div className={classes.AstronautDiv}>\r\n                                            <div className={classes.AstronautImg} style={themeMode.palette.type === \"light\" ? { filter: 'invert(0)', } : { filter: 'invert(1)', }} />\r\n                                        </div>\r\n                                    </ButtonBase>\r\n                                </Grid>\r\n                                <Grid item xs={4} >\r\n                                    <ButtonBase className={classes.image}\r\n                                        type='button'\r\n                                        focusRipple\r\n                                        onClick={switchMode}>\r\n                                        <div className={classes.SkyDiv}>\r\n                                            <div className={classes.SunSrc} style={themeMode.palette.type === \"dark\" ? { transform: 'translateY(36vw)' } : { transform: 'translateY(0)' }} />\r\n                                            <div className={classes.MoonSrc} style={themeMode.palette.type === \"dark\" ? { transform: 'translateY(0)' } : { transform: 'translateY(-36vw)' }} />\r\n                                        </div>\r\n                                    </ButtonBase>\r\n                                </Grid>\r\n                                <Grid item xs={4} >\r\n                                    <ButtonBase className={classes.MapButton}\r\n                                        type='button'\r\n                                        focusRipple\r\n                                        onClick={onMapClick}>\r\n                                        <div className={classes.MapDiv}>\r\n                                            <div className={classes.MapImg} style={themeMode.palette.type === \"light\" ? { filter: 'invert(0)', } : { filter: 'invert(1)', }} />\r\n                                        </div>\r\n                                    </ButtonBase>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item xs={1} className={classes.mainGridHeadItem} >\r\n                            <Grid className={classes.mainGridContainer}\r\n                                container\r\n                                direction=\"column\"\r\n                                justify=\"center\"\r\n                                alignItems=\"stretch\" >\r\n                                <Grid item xs={12} className={classes.menuButtonContainerItem} >\r\n                                    <Typography className={classes.mainGridContainer}\r\n                                        align='center'\r\n                                        variant='h6'>\r\n                                        {lang.currLang.texts.hello + auth.user.nickname}\r\n                                    </Typography>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item xs={6} className={classes.mainGridBodyItem} >\r\n                            <Grid className={classes.mainGridContainer}\r\n                                container\r\n                                direction=\"column\"\r\n                                justify=\"center\"\r\n                                alignItems=\"stretch\"\r\n                            >\r\n                                <Grid className={classes.menuButtonContainer}\r\n                                    container\r\n                                    direction=\"column\"\r\n                                    justify=\"center\"\r\n                                    alignItems=\"stretch\"\r\n                                >\r\n                                    <Grid item xs={12} className={classes.menuButtonContainerItem} >\r\n                                        <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                            <Button\r\n                                                variant=\"contained\"\r\n                                                color=\"primary\"\r\n                                                className={classes.menuButton}\r\n                                                onClick={() => {\r\n                                                    let check = CheckTimeOut();\r\n                                                    if (check) history.push(\"/dreams\");\r\n                                                    else history.push(\"/\");\r\n                                                }}\r\n                                            >\r\n                                                {lang.currLang.buttons.dreamJoirnal}\r\n                                            </Button>\r\n                                        </Grid>\r\n                                        <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                            <Button\r\n                                                variant=\"contained\"\r\n                                                color=\"primary\"\r\n                                                className={classes.menuButton}\r\n                                                onClick={() => {\r\n                                                    let check = CheckTimeOut();\r\n                                                    if (check) history.push(\"/addregulardream\");\r\n                                                    else history.push(\"/\");\r\n                                                }}\r\n                                            >\r\n                                                {lang.currLang.buttons.addDream}\r\n                                            </Button>\r\n                                        </Grid>\r\n                                        <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                            <Button\r\n                                                variant=\"contained\"\r\n                                                color=\"primary\"\r\n                                                className={classes.menuButton}\r\n                                                onClick={() => {\r\n                                                    let check = CheckTimeOut();\r\n                                                    if (check) history.push(\"/addcdream\");\r\n                                                    else history.push(\"/\");\r\n                                                }}\r\n                                            >\r\n                                                {lang.currLang.buttons.addCDream}\r\n                                            </Button>\r\n                                        </Grid>\r\n                                        <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                            <Button\r\n                                                variant=\"contained\"\r\n                                                color=\"primary\"\r\n                                                className={classes.menuButton}\r\n                                                onClick={() => {\r\n                                                    let check = CheckTimeOut();\r\n                                                    if (check) history.push(\"/technics\");\r\n                                                    else history.push(\"/\");\r\n                                                }}\r\n                                            >\r\n                                                {lang.currLang.buttons.techniques}\r\n                                            </Button>\r\n                                        </Grid>\r\n                                        <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                            <Button variant=\"contained\" color=\"primary\" className={classes.menuButton}>\r\n                                                {lang.currLang.buttons.adventures}\r\n                                            </Button>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item xs={1} className={classes.mainGridFooterItem} >\r\n                            <Grid className={classes.menuButtonContainerFooterLanguageButtons}\r\n                                container\r\n                                direction=\"row\"\r\n                                justify=\"center\"\r\n                                alignItems=\"center\" >\r\n                                <Grid item>\r\n                                    <Button onClick={() => { changeLanguage('Ru') }}>\r\n                                        RU\r\n                                    </Button>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Button onClick={() => { changeLanguage('En') }}>\r\n                                        EN\r\n                                    </Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </div>\r\n            </div>\r\n        </MuiThemeProvider>\r\n    );\r\n};\r\n\r\nMainPage.propTypes = {\r\n    setCurrLangAction: PropTypes.func.isRequired,\r\n    setTheme: PropTypes.func.isRequired,\r\n    setSnackbar: PropTypes.func.isRequired,\r\n    lang: PropTypes.object.isRequired,\r\n    themeMode: PropTypes.object.isRequired,\r\n    auth: PropTypes.object.isRequired,\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        lang: store.lang,\r\n        themeMode: store.themeMode,\r\n        auth: store.auth,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setCurrLangAction: currLangState => dispatch(setCurrLang(currLangState)),\r\n        setTheme: palette => dispatch(setTheme(palette)),\r\n        setSnackbar: snackbar => dispatch(setSnackbar(snackbar)),\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(MainPage);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport jwt_decode from \"jwt-decode\";\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { GET_ERRORS, SET_CURRENT_USER, SET_SNACKBAR_MODE } from \"../actions/types\";\r\nimport { setCurrLang, setUserState, setSnackbar } from '../actions/Actions';\r\nimport { useStyles } from '../styles/Styles';\r\nimport setAuthToken from \"../utils/setAuthToken\";\r\nimport { instance } from './Config';\r\n\r\nimport RuDict from '../dictionary/ru';\r\nimport EnDict from '../dictionary/en';\r\n\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\r\nimport Visibility from '@material-ui/icons/Visibility';\r\n\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\n\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\n\r\nimport { mdiVk } from '@mdi/js';\r\nimport Icon from '@mdi/react';\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nfunction Sign(props) {\r\n    const classes = useStyles();\r\n    const { history, themeMode, lang, setUserState, setSnackbar, setCurrLang } = props;\r\n    const muiTheme = createMuiTheme(themeMode);\r\n    const [loginData, setLoginData] = React.useState({\r\n        email: '',\r\n        password: '',\r\n    });\r\n    const [registData, setRegistData] = React.useState({\r\n        email: '',\r\n        nickname: '',\r\n        password: '',\r\n        password2: '',\r\n    });\r\n    const [regFieldErrors, setRegFieldErrors] = React.useState({\r\n        emailErr: false,\r\n        emailErrText: '',\r\n        nicknameErr: false,\r\n        nicknameErrText: '',\r\n        passwordErr: false,\r\n        passwordErrText: '',\r\n        password2Err: false,\r\n        password2ErrText: '',\r\n    });\r\n    const [isLoading, setIsLoading] = React.useState(false);\r\n    const [showPassword, setShowPassword] = React.useState(false);\r\n    const [openLogin, setOpenLogin] = React.useState(false);\r\n    const [openRegist, setOpenRegist] = React.useState(false);\r\n    const [page, setPage] = React.useState({\r\n        mainPage: true,\r\n        aboutPage: false,\r\n    });\r\n\r\n    const handleMouseDownPassword = event => {\r\n        event.preventDefault();\r\n    };\r\n    const changeAuthLogin = (e) => {\r\n        let newLoginData = loginData;\r\n        newLoginData = { ...newLoginData, email: e.target.value };\r\n        setLoginData(newLoginData);\r\n    };\r\n    const changeAuthPassword = (e) => {\r\n        let newLoginData = loginData;\r\n        newLoginData = { ...newLoginData, password: e.target.value };\r\n        setLoginData(newLoginData);\r\n    };\r\n    const changeRegistLogin = (e) => {\r\n        let newRegFieldErrors = regFieldErrors;\r\n        newRegFieldErrors = { ...newRegFieldErrors, emailErr: false };\r\n        newRegFieldErrors = { ...newRegFieldErrors, emailErrText: '' };\r\n        setRegFieldErrors(newRegFieldErrors);\r\n\r\n        let newRegistData = registData;\r\n        newRegistData = { ...newRegistData, email: e.target.value };\r\n        setRegistData(newRegistData);\r\n    };\r\n    const changeRegistNickname = (e) => {\r\n        let newRegFieldErrors = regFieldErrors;\r\n        newRegFieldErrors = { ...newRegFieldErrors, nicknameErr: false };\r\n        newRegFieldErrors = { ...newRegFieldErrors, nicknameErrText: '' };\r\n        setRegFieldErrors(newRegFieldErrors);\r\n\r\n        let newRegistData = registData;\r\n        newRegistData = { ...newRegistData, nickname: e.target.value };\r\n        setRegistData(newRegistData);\r\n    };\r\n    const changeRegistPassword = (e) => {\r\n        let newRegFieldErrors = regFieldErrors;\r\n        newRegFieldErrors = { ...newRegFieldErrors, passwordErr: false };\r\n        newRegFieldErrors = { ...newRegFieldErrors, passwordErrText: '' };\r\n        newRegFieldErrors = { ...newRegFieldErrors, password2Err: false };\r\n        newRegFieldErrors = { ...newRegFieldErrors, password2ErrText: '' };\r\n        setRegFieldErrors(newRegFieldErrors);\r\n\r\n        let newRegistData = registData;\r\n        newRegistData = { ...newRegistData, password: e.target.value };\r\n        setRegistData(newRegistData);\r\n    };\r\n    const changeRegistPassword2 = (e) => {\r\n        let newRegFieldErrors = regFieldErrors;\r\n        newRegFieldErrors = { ...newRegFieldErrors, passwordErr: false };\r\n        newRegFieldErrors = { ...newRegFieldErrors, passwordErrText: '' };\r\n        newRegFieldErrors = { ...newRegFieldErrors, password2Err: false };\r\n        newRegFieldErrors = { ...newRegFieldErrors, password2ErrText: '' };\r\n        setRegFieldErrors(newRegFieldErrors);\r\n        let newRegistData = registData;\r\n        newRegistData = { ...newRegistData, password2: e.target.value };\r\n        setRegistData(newRegistData);\r\n    };\r\n    const singIn = () => {\r\n        instance\r\n            .post(\"/actions/users/login\", loginData)\r\n            .then(res => {\r\n                const { token } = res.data;\r\n                localStorage.setItem(\"jwtToken\", token);\r\n                setAuthToken(token);\r\n                const decoded = jwt_decode(token);\r\n                setUserState({\r\n                    type: SET_CURRENT_USER,\r\n                    payload: decoded\r\n                });\r\n                setIsLoading(false);\r\n                history.push(\"/luciddreams\");\r\n            })\r\n            .catch(err => {\r\n                //console.log(err);\r\n                let errorMessage = '';\r\n                if (err.response.data.email === 'UserNotExist') {\r\n                    errorMessage = lang.currLang.errors.UserNotExist;\r\n                }\r\n                if (err.response.data.email === 'EmailIsNotValid') {\r\n                    errorMessage = lang.currLang.errors.EmailIsNotValid;\r\n                }\r\n                if (err.response.data.passwordincorrect === 'IncorrectPassword') {\r\n                    errorMessage = lang.currLang.errors.IncorrectPassword;\r\n                }\r\n                setSnackbar({\r\n                    type: SET_SNACKBAR_MODE,\r\n                    snackbar: {\r\n                        open: true,\r\n                        variant: 'error',\r\n                        message: errorMessage,\r\n                    },\r\n                });\r\n                setIsLoading(false);\r\n            });\r\n    };\r\n    const singUp = () => {\r\n        let isErr = false;\r\n        let newRegFieldErrors = regFieldErrors;\r\n        if (registData.email.length === 0) {\r\n            newRegFieldErrors = { ...newRegFieldErrors, emailErr: true };\r\n            newRegFieldErrors = { ...newRegFieldErrors, emailErrText: lang.currLang.errors.emailLenght };\r\n            isErr = true;\r\n        }\r\n        if (registData.nickname.length === 0) {\r\n            newRegFieldErrors = { ...newRegFieldErrors, nicknameErr: true };\r\n            newRegFieldErrors = { ...newRegFieldErrors, nicknameErrText: lang.currLang.errors.nicknameLenght };\r\n            isErr = true;\r\n        }\r\n        if (registData.password.length === 0) {\r\n            newRegFieldErrors = { ...newRegFieldErrors, passwordErr: true };\r\n            newRegFieldErrors = { ...newRegFieldErrors, passwordErrText: lang.currLang.errors.passwordLenght };\r\n            isErr = true;\r\n        }\r\n        if (registData.password2.length === 0) {\r\n            newRegFieldErrors = { ...newRegFieldErrors, password2Err: true };\r\n            newRegFieldErrors = { ...newRegFieldErrors, password2ErrText: lang.currLang.errors.password2Lenght };\r\n            isErr = true;\r\n        }\r\n        if (registData.password !== registData.password2) {\r\n            newRegFieldErrors = { ...newRegFieldErrors, passwordErr: true };\r\n            newRegFieldErrors = { ...newRegFieldErrors, passwordErrText: lang.currLang.errors.passwordsCompare };\r\n            newRegFieldErrors = { ...newRegFieldErrors, password2Err: true };\r\n            newRegFieldErrors = { ...newRegFieldErrors, password2ErrText: lang.currLang.errors.passwordsCompare };\r\n            isErr = true;\r\n        }\r\n        if (isErr) {\r\n            setRegFieldErrors(newRegFieldErrors);\r\n            setIsLoading(false);\r\n        }\r\n        else {\r\n            instance\r\n                .post('/actions/users/register', registData)\r\n                .then(res => {\r\n                    setSnackbar({\r\n                        type: SET_SNACKBAR_MODE,\r\n                        snackbar: {\r\n                            open: true,\r\n                            variant: 'success',\r\n                            message: lang.currLang.texts.sucessRegistration,\r\n                        },\r\n                    });\r\n                    let newRegistData = registData;\r\n                    newRegistData = { ...newRegistData, email: '' };\r\n                    newRegistData = { ...newRegistData, nickname: '' };\r\n                    newRegistData = { ...newRegistData, password: '' };\r\n                    newRegistData = { ...newRegistData, password2: '' };\r\n                    setRegistData(newRegistData);\r\n                    click('closeRegist');\r\n                    click('openLogin');\r\n                    setIsLoading(false);\r\n                })\r\n                .catch(err => {\r\n                    let errorMessage = '';\r\n                    setUserState({\r\n                        type: GET_ERRORS,\r\n                        payload: err.response.data\r\n                    });\r\n                    if (err.response.data.email === 'EmailIsBusy') {\r\n                        errorMessage = lang.currLang.errors.EmailIsBusy;\r\n                    }\r\n                    if (err.response.data.password === 'PasswordLenght5Symbols') {\r\n                        errorMessage = lang.currLang.errors.PasswordLenght5Symbols;\r\n                    }\r\n                    setSnackbar({\r\n                        type: SET_SNACKBAR_MODE,\r\n                        snackbar: {\r\n                            open: true,\r\n                            variant: 'error',\r\n                            message: errorMessage,\r\n                        },\r\n                    });\r\n                    setIsLoading(false);\r\n                });\r\n        }\r\n    };\r\n    const click = (action) => {\r\n        let newPages = page;\r\n        switch (action) {\r\n            case 'useVk':\r\n                // window.VK.Auth.login(checkLoginState, 4194304);\r\n                // let loadItems = async () => {\r\n                //     const response = await fetch('http://10.203.117.137:3001/auth/vk', {\r\n                //         method: 'GET',\r\n                //         credentials: 'include',\r\n                //     });\r\n                //     const body = await response.json();\r\n\r\n                //     console.log(response);\r\n                // }\r\n                break;\r\n            case 'openLogin':\r\n                setOpenLogin(true);\r\n                break;\r\n            case 'openRegist':\r\n                setOpenRegist(true);\r\n                break;\r\n            case 'closeLogin':\r\n                setOpenLogin(false);\r\n                setShowPassword(false);\r\n                break;\r\n            case 'closeRegist':\r\n                setOpenRegist(false);\r\n                setShowPassword(false);\r\n                break;\r\n            case 'signIn':\r\n                setIsLoading(true);\r\n                singIn();\r\n                break;\r\n            case 'signUp':\r\n                setIsLoading(true);\r\n                singUp();\r\n                break;\r\n            case 'openAboutPage':\r\n                newPages = { ...newPages, aboutPage: true };\r\n                newPages = { ...newPages, mainPage: false };\r\n                setPage(newPages);\r\n                break;\r\n            case 'closeAboutPage':\r\n                newPages = { ...newPages, aboutPage: false };\r\n                newPages = { ...newPages, mainPage: true };\r\n                setPage(newPages);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    };\r\n    const changeLanguage = (language) => {\r\n        if (language === 'Ru') {\r\n            setCurrLang(RuDict);\r\n        }\r\n        else {\r\n            setCurrLang(EnDict);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <MuiThemeProvider theme={muiTheme}>\r\n            <CssBaseline />\r\n\r\n            <div className={classes.root} id='rootDiv'>\r\n\r\n                <div className={classes.mainPage}\r\n                    style={\r\n                        page.mainPage === true\r\n                            ? { transform: 'translateY(0%)' }\r\n                            : { transform: 'translateY(-100%)' }\r\n                    } >\r\n                    <Grid className={classes.mainGridContainer}\r\n                        container\r\n                        direction=\"column\"\r\n                        justify=\"center\"\r\n                        alignItems=\"stretch\"\r\n                    >\r\n                        <Grid item xs={11} className={classes.mainGridBodyItem} >\r\n                            <Grid className={classes.menuButtonContainer}\r\n                                container\r\n                                direction=\"column\"\r\n                                justify=\"center\"\r\n                                alignItems=\"stretch\" >\r\n                                <Grid item xs={3} />\r\n                                <Grid item xs={6} className={classes.menuButtonContainerItem}>\r\n                                    <Dialog\r\n                                        open={openLogin}\r\n                                        TransitionComponent={Transition}\r\n                                        keepMounted\r\n                                        aria-labelledby=\"alert-dialog-slide-title\"\r\n                                        aria-describedby=\"alert-dialog-slide-description\"\r\n                                    >\r\n                                        <DialogTitle id=\"alert-dialog-slide-title\">\r\n                                            {lang.currLang.buttons.signIn}\r\n                                        </DialogTitle>\r\n                                        <DialogContent>\r\n                                            <Grid item xs={12} className={classes.menuButtonContainerItem}>\r\n                                                <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                                    <TextField\r\n                                                        className={classes.textField}\r\n                                                        id=\"email-field\"\r\n                                                        type=\"email\"\r\n                                                        label=\"Email\"\r\n                                                        onBlur={(e) => { changeAuthLogin(e) }} />\r\n                                                </Grid>\r\n                                                <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                                    <TextField\r\n                                                        id=\"password-field\"\r\n                                                        className={classes.textField}\r\n                                                        type={showPassword ? 'text' : 'password'}\r\n                                                        label={lang.currLang.texts.password}\r\n                                                        onBlur={(e) => { changeAuthPassword(e) }}\r\n                                                        InputProps={{\r\n                                                            endAdornment: (\r\n                                                                <InputAdornment position=\"end\">\r\n                                                                    <IconButton\r\n                                                                        tabIndex=\"-1\"\r\n                                                                        edge=\"end\"\r\n                                                                        aria-label=\"toggle password visibility\"\r\n                                                                        onClick={() => { showPassword ? setShowPassword(false) : setShowPassword(true) }}\r\n                                                                        onMouseDown={handleMouseDownPassword} >\r\n                                                                        {showPassword ? <VisibilityOff /> : <Visibility />}\r\n                                                                    </IconButton>\r\n                                                                </InputAdornment>\r\n                                                            ),\r\n                                                        }} />\r\n                                                </Grid>\r\n                                                <Grid item xs={2} className={classes.menuDivButton}\r\n                                                    align=\"center\"\r\n                                                >\r\n                                                    <Typography>\r\n                                                        {lang.currLang.texts.or}\r\n                                                    </Typography>\r\n                                                </Grid>\r\n                                                <Grid item xs={2} className={classes.menuDivButton}\r\n                                                    align=\"center\"\r\n                                                >\r\n                                                    <IconButton className={classes.button}\r\n                                                        onClick={() => { click('useVk') }}\r\n                                                        disabled={isLoading}>\r\n                                                        <Icon path={mdiVk} size={2} color={themeMode.palette.type === 'light' ? 'rgba(0, 0, 0, 0.54)' : 'rgba(255, 255, 255, 1)'} />\r\n                                                    </IconButton>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                            {isLoading\r\n                                                ? <LinearProgress /> :\r\n                                                ''}\r\n                                        </DialogContent>\r\n                                        {!isLoading\r\n                                            ?\r\n                                            <DialogActions>\r\n                                                <Button onClick={() => { click('closeLogin') }}\r\n                                                    color=\"secondary\"\r\n                                                    disabled={isLoading}>\r\n                                                    {lang.currLang.buttons.cancel}\r\n                                                </Button>\r\n                                                <Button onClick={() => { click('signIn') }}\r\n                                                    color=\"primary\"\r\n                                                    disabled={isLoading}>\r\n                                                    {lang.currLang.buttons.signIn}\r\n                                                </Button>\r\n                                            </DialogActions>\r\n                                            : ''}\r\n                                    </Dialog>\r\n                                    <Dialog\r\n                                        open={openRegist}\r\n                                        TransitionComponent={Transition}\r\n                                        keepMounted\r\n                                        aria-labelledby=\"alert-dialog-slide-title\"\r\n                                        aria-describedby=\"alert-dialog-slide-description\"\r\n                                    >\r\n                                        <DialogTitle id=\"alert-dialog-slide-title\">\r\n                                            {lang.currLang.buttons.signUp}\r\n                                        </DialogTitle>\r\n                                        <DialogContent>\r\n                                            <Grid item xs={12} className={classes.menuButtonContainerItem}>\r\n                                                <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                                    <TextField\r\n                                                        error={regFieldErrors.emailErr}\r\n                                                        helperText={regFieldErrors.emailErrText}\r\n                                                        className={classes.textField}\r\n                                                        id=\"reg-email-field\"\r\n                                                        type=\"email\"\r\n                                                        label=\"Email\"\r\n                                                        onBlur={(e) => { changeRegistLogin(e) }} />\r\n                                                </Grid>\r\n                                                <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                                    <TextField\r\n                                                        error={regFieldErrors.nicknameErr}\r\n                                                        helperText={regFieldErrors.nicknameErrText}\r\n                                                        className={classes.textField}\r\n                                                        id=\"reg-nickname-field\"\r\n                                                        type=\"text\"\r\n                                                        label={lang.currLang.texts.nickname}\r\n                                                        onBlur={(e) => { changeRegistNickname(e) }} />\r\n                                                </Grid>\r\n                                                <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                                    <TextField\r\n                                                        error={regFieldErrors.passwordErr}\r\n                                                        helperText={regFieldErrors.passwordErrText}\r\n                                                        id=\"reg-password-field\"\r\n                                                        className={classes.textField}\r\n                                                        type={showPassword ? 'text' : 'password'}\r\n                                                        label={lang.currLang.texts.password}\r\n                                                        onBlur={(e) => { changeRegistPassword(e) }}\r\n                                                        InputProps={{\r\n                                                            endAdornment: (\r\n                                                                <InputAdornment position=\"end\">\r\n                                                                    <IconButton\r\n                                                                        tabIndex=\"-1\"\r\n                                                                        edge=\"end\"\r\n                                                                        aria-label=\"toggle password visibility\"\r\n                                                                        onClick={() => { showPassword ? setShowPassword(false) : setShowPassword(true) }}\r\n                                                                        onMouseDown={handleMouseDownPassword} >\r\n                                                                        {showPassword ? <VisibilityOff /> : <Visibility />}\r\n                                                                    </IconButton>\r\n                                                                </InputAdornment>\r\n                                                            ),\r\n                                                        }} />\r\n                                                </Grid>\r\n                                                <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                                    <TextField\r\n                                                        error={regFieldErrors.password2Err}\r\n                                                        helperText={regFieldErrors.password2ErrText}\r\n                                                        id=\"reg-password2-field\"\r\n                                                        className={classes.textField}\r\n                                                        type={showPassword ? 'text' : 'password'}\r\n                                                        label={lang.currLang.texts.passwordAgain}\r\n                                                        onBlur={(e) => { changeRegistPassword2(e) }}\r\n                                                        InputProps={{\r\n                                                            endAdornment: (\r\n                                                                <InputAdornment position=\"end\">\r\n                                                                    <IconButton\r\n                                                                        tabIndex=\"-1\"\r\n                                                                        edge=\"end\"\r\n                                                                        aria-label=\"toggle password visibility\"\r\n                                                                        onClick={() => { showPassword ? setShowPassword(false) : setShowPassword(true) }}\r\n                                                                        onMouseDown={handleMouseDownPassword} >\r\n                                                                        {showPassword ? <VisibilityOff /> : <Visibility />}\r\n                                                                    </IconButton>\r\n                                                                </InputAdornment>\r\n                                                            ),\r\n                                                        }} />\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                            {isLoading\r\n                                                ? <LinearProgress />\r\n                                                : ''}\r\n\r\n                                        </DialogContent>\r\n                                        {!isLoading\r\n                                            ?\r\n                                            <DialogActions>\r\n                                                <Button onClick={() => { click('closeRegist') }}\r\n                                                    color=\"secondary\"\r\n                                                    disabled={isLoading}>\r\n                                                    {lang.currLang.buttons.cancel}\r\n                                                </Button>\r\n                                                <Button onClick={() => { click('signUp') }}\r\n                                                    color=\"primary\"\r\n                                                    disabled={isLoading}>\r\n                                                    {lang.currLang.buttons.signUp}\r\n                                                </Button>\r\n                                            </DialogActions>\r\n                                            : ''}\r\n                                    </Dialog>\r\n                                    <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                        <Button variant=\"contained\" color=\"primary\" className={classes.menuButton} onClick={() => { click('openLogin') }}>\r\n                                            {lang.currLang.buttons.signIn}\r\n                                        </Button>\r\n                                    </Grid>\r\n                                    <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                        <Button variant=\"contained\" color=\"primary\" className={classes.menuButton} onClick={() => { click('openRegist') }}>\r\n                                            {lang.currLang.buttons.signUp}\r\n                                        </Button>\r\n                                    </Grid>\r\n                                    <Grid item xs={2} className={classes.menuDivButton} align=\"center\" />\r\n                                    <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                        <Button variant=\"contained\"\r\n                                            color=\"primary\"\r\n                                            className={classes.menuButton}\r\n                                            onClick={() => (click('openAboutPage'))} >\r\n                                            {lang.currLang.buttons.about}\r\n                                        </Button>\r\n                                    </Grid>\r\n                                </Grid>\r\n                                <Grid item xs={3} />\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item xs={1} className={classes.mainGridFooterItem} >\r\n                            <Grid className={classes.menuButtonContainerFooterLanguageButtons}\r\n                                container\r\n                                direction=\"row\"\r\n                                justify=\"center\"\r\n                                alignItems=\"center\" >\r\n                                <Grid item>\r\n                                    <Button onClick={() => { changeLanguage('Ru') }}>\r\n                                        RU\r\n                                    </Button>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Button onClick={() => { changeLanguage('En') }}>\r\n                                        EN\r\n                                    </Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </div >\r\n\r\n                <div className={classes.aboutPage}\r\n                    style={page.aboutPage === true\r\n                        ? { transform: 'translateY(-100%)' }\r\n                        : { transform: 'translateY(0%)' }\r\n                    }\r\n                >\r\n                    <Grid className={classes.aboutGridContainer}\r\n                        container\r\n                        direction=\"column\"\r\n                        justify=\"center\"\r\n                        alignItems=\"stretch\"\r\n                        spacing={5} >\r\n                        <Grid item\r\n                            className={classes.aboutGridItem}\r\n                            align='center'>\r\n                            <Paper className={classes.aboutPaper}>\r\n                                <Typography>\r\n                                    {lang.currLang.texts.about}\r\n                                </Typography>\r\n                            </Paper>\r\n                        </Grid>\r\n                        <Grid item\r\n                            className={classes.aboutGridItem}\r\n                            align='center'>\r\n                            <Button variant=\"contained\"\r\n                                color=\"primary\"\r\n                                className={classes.menuButton}\r\n                                onClick={() => (click('closeAboutPage'))} >\r\n                                {lang.currLang.buttons.close}\r\n                            </Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                </div>\r\n            </div >\r\n        </MuiThemeProvider>\r\n    )\r\n}\r\n\r\nSign.propTypes = {\r\n    setCurrLang: PropTypes.func.isRequired,\r\n    setUserState: PropTypes.func.isRequired,\r\n    setSnackbar: PropTypes.func.isRequired,\r\n    themeMode: PropTypes.object.isRequired,\r\n    lang: PropTypes.object.isRequired,\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        themeMode: store.themeMode,\r\n        lang: store.lang,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setCurrLang: currLangState => dispatch(setCurrLang(currLangState)),\r\n        setUserState: State => dispatch(setUserState(State)),\r\n        setSnackbar: snackbar => dispatch(setSnackbar(snackbar)),\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Sign);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Card from '@material-ui/core/Card';\r\n\r\nimport { useStyles } from '../../styles/Styles';\r\nimport { setSnackbar } from '../../actions/Actions';\r\n\r\nfunction TechnicCard(props) {\r\n    const { item, lang, auth, history } = props;\r\n    const classes = useStyles();\r\n    const [openAlert, setOpenAlert] = React.useState(false);\r\n    const [alertTexts, setAlertTexts] = React.useState({\r\n        header: '',\r\n        body: '',\r\n        commit: '',\r\n        action: '',\r\n    });\r\n    const actions = (action) => {\r\n        switch (action) {\r\n            case 'edit':\r\n                history.push({\r\n                    pathname: \"/addtechnics\",\r\n                    defaultData: {\r\n                        item: item,\r\n                    }\r\n                });\r\n                break;\r\n            case 'delete':\r\n                let newAlertTexts = alertTexts;\r\n                newAlertTexts = { ...newAlertTexts, header: lang.currLang.texts.DeleteAlert };\r\n                newAlertTexts = { ...newAlertTexts, body: lang.currLang.texts.DeleteText };\r\n                newAlertTexts = { ...newAlertTexts, commit: lang.currLang.buttons.Delete };\r\n                newAlertTexts = { ...newAlertTexts, action: 'deleteOk' };\r\n                setAlertTexts(newAlertTexts);\r\n                setOpenAlert(true);\r\n                break;\r\n            case 'deleteOk':\r\n                setOpenAlert(false);\r\n                props.loadTechnics();\r\n                break;\r\n            case 'closeAlert':\r\n                setOpenAlert(false);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Grid item xs={12} className={classes.dreamCardDiv} >\r\n            <Dialog open={openAlert}\r\n                onClose={() => actions('closeAlert')}\r\n                aria-labelledby=\"alert-dialog-title\"\r\n                aria-describedby=\"alert-dialog-description\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-title\" >\r\n                    {alertTexts.header}\r\n                </DialogTitle>\r\n                <DialogContent >\r\n                    <DialogContentText id=\"alert-dialog-description\" >\r\n                        {alertTexts.body}\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => actions('closeAlert')}\r\n                        color=\"secondary\">\r\n                        {lang.currLang.buttons.cancel}\r\n                    </Button>\r\n                    <Button onClick={() => actions(alertTexts.action)}\r\n                        color=\"primary\" autoFocus>\r\n                        {alertTexts.commit}\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n            <Card raised={true} className={classes.card}>\r\n                <CardActionArea>\r\n                    <CardMedia className={classes.media}\r\n                        image=\"https://4.bp.blogspot.com/-imM00o7SslA/V8NXohT8AmI/AAAAAAAAFOM/F7h1SZjMaCU4mJ6PlwUlx7tpePjVJWlcACLcB/s1600/Cockpit%2B2.png\"\r\n                    />\r\n                    <CardContent>\r\n                        <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                            {lang.currLang.current === \"Ru\"\r\n                                ? item.name_rus\r\n                                : item.name_eng\r\n                            }\r\n                        </Typography>\r\n                        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                            Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging\r\n                            across all continents except Antarctica\r\n                        </Typography>\r\n                    </CardContent>\r\n                </CardActionArea>\r\n                {auth.user.roles < 2 //0 - admin; 1 - moderator\r\n                    ? <CardActions>\r\n                        <Button size=\"small\" color=\"secondary\" onClick={() => { actions('delete') }}>\r\n                            {lang.currLang.buttons.Delete}\r\n                        </Button>\r\n                        <Button size=\"small\" color=\"primary\" onClick={() => { actions('edit') }}>\r\n                            {lang.currLang.buttons.Edit}\r\n                        </Button>\r\n                    </CardActions>\r\n                    : ''\r\n                }\r\n            </Card>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nTechnicCard.propTypes = {\r\n    setSnackbar: PropTypes.func.isRequired,\r\n    lang: PropTypes.object.isRequired,\r\n    palette: PropTypes.object.isRequired,\r\n    auth: PropTypes.object.isRequired,\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        lang: store.lang,\r\n        palette: store.themeMode.palette,\r\n        auth: store.auth,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setSnackbar: snackbar => dispatch(setSnackbar(snackbar)),\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(TechnicCard);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Container from '@material-ui/core/Container';\r\nimport Button from '@material-ui/core/Button';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\n\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\n\r\nimport { CheckTimeOut } from '../utils/CheckLoginTimeOut';\r\nimport TechnicCard from './muiltiple/TechnicCard';\r\nimport { useStyles } from '../styles/Styles';\r\nimport { instance } from './Config';\r\n\r\nfunction Technics(props) {\r\n    const { lang, themeMode, history, auth } = props;\r\n    const muiTheme = createMuiTheme(themeMode);\r\n    const classes = useStyles();\r\n\r\n    const [isLoading, setIsLoading] = React.useState(true);\r\n    const [technics, setTechnics] = React.useState([]);\r\n\r\n    const loadTechnics = React.useCallback(() => {\r\n        setIsLoading(true);\r\n        instance.get(\"/gettechnics\")\r\n            .then(res => {\r\n                setTechnics(res.data);\r\n                setIsLoading(false);\r\n            })\r\n            .catch(err => {\r\n                setIsLoading(false);\r\n            });\r\n    }, []);\r\n\r\n    React.useEffect(() => {\r\n        loadTechnics();\r\n    }, [loadTechnics]);\r\n\r\n    return (\r\n        <MuiThemeProvider theme={muiTheme}>\r\n            <CssBaseline />\r\n            <div className={classes.root}>\r\n                <Grid className={classes.mainGridContainer}\r\n                    container\r\n                    direction=\"column\"\r\n                    justify=\"center\"\r\n                    alignItems=\"stretch\"\r\n                >\r\n                    <Grid item xs={11} zeroMinWidth className={classes.mainGridDreamsBodyItem}>\r\n                        {isLoading\r\n                            ? <div className={classes.centerCircularProgress}>\r\n                                <CircularProgress disableShrink />\r\n                            </div>\r\n                            : <Container className={classes.mainGridDreamsBodyItemContainer}>\r\n                                <Paper className={classes.mainGridDreamsBodyItemContainerPaper}>\r\n                                    <Grid className={classes.mainGridDreamsContainer}\r\n                                        container\r\n                                        direction=\"column\"\r\n                                        justify=\"center\"\r\n                                        alignItems=\"stretch\"\r\n                                    >\r\n                                        {technics.map((item, key) => (\r\n                                            <TechnicCard key={key}\r\n                                                item={item}\r\n                                                loadTechnics={loadTechnics}\r\n                                                history={history}\r\n                                            />\r\n                                        ))}\r\n                                    </Grid>\r\n                                </Paper>\r\n                            </Container>\r\n                        }\r\n                    </Grid>\r\n                    <Grid item xs={1} zeroMinWidth className={classes.mainGridBodyItem}>\r\n                        <Grid container\r\n                            direction=\"row\"\r\n                            justify=\"space-evenly\"\r\n                            alignItems=\"center\"\r\n                        >\r\n                            <Grid item>\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    color=\"secondary\"\r\n                                    className={classes.actionButton}\r\n                                    onClick={() => { history.push(\"/luciddreams\") }}\r\n                                >\r\n                                    {lang.currLang.buttons.close}\r\n                                </Button>\r\n                            </Grid>\r\n                            {auth.user.roles < 2 //0 - admin; 1 - moderator\r\n                                ? <Grid item>\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        color=\"primary\"\r\n                                        className={classes.actionButton}\r\n                                        onClick={() => {\r\n                                            let check = CheckTimeOut();\r\n                                            if (check) history.push(\"/addtechnics\");\r\n                                            else history.push(\"/\");\r\n                                        }}\r\n                                    >\r\n                                        {lang.currLang.buttons.add}\r\n                                    </Button>\r\n                                </Grid>\r\n                                : <Grid item xs={6} />\r\n                            }\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </MuiThemeProvider >\r\n    );\r\n}\r\n\r\nTechnics.propTypes = {\r\n    themeMode: PropTypes.object.isRequired,\r\n    lang: PropTypes.object.isRequired,\r\n    auth: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        themeMode: store.themeMode,\r\n        lang: store.lang,\r\n        auth: store.auth,\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Technics);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport { Route, Switch } from \"react-router-dom\";\r\n\r\nimport { SET_SNACKBAR_MODE } from \"./actions/types\";\r\nimport { setSnackbar } from './actions/Actions';\r\n\r\nimport PrivateRoute from \"./components/PrivateRoute\";\r\n\r\nimport DreamMap from './components/DreamMap';\r\nimport AddDream from './components/AddDream';\r\nimport AddCDream from './components/AddCDream';\r\nimport AddTechnics from './components/AddTechnics';\r\nimport ViewDreams from './components/ViewDreams';\r\nimport MainPage from \"./components/MainPage\";\r\nimport Sign from './components/Sign';\r\nimport Technics from './components/Technics';\r\n\r\nimport { useStyles, variantIcon } from './styles/Styles';\r\n\r\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { amber, green } from '@material-ui/core/colors';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nconst useStyles1 = makeStyles(theme => ({\r\n    success: {\r\n        backgroundColor: green[600],\r\n    },\r\n    error: {\r\n        backgroundColor: theme.palette.error.dark,\r\n    },\r\n    info: {\r\n        backgroundColor: theme.palette.primary.main,\r\n    },\r\n    warning: {\r\n        backgroundColor: amber[700],\r\n    },\r\n    icon: {\r\n        fontSize: 20,\r\n    },\r\n    iconVariant: {\r\n        opacity: 0.9,\r\n        marginRight: theme.spacing(1),\r\n    },\r\n    message: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n    },\r\n}));\r\n\r\nfunction MySnackbarContentWrapper(props) {\r\n    const classes = useStyles1();\r\n    const { className, message, onClose, variant } = props;\r\n    const Icon = variantIcon[variant];\r\n    return (\r\n        <SnackbarContent\r\n            className={clsx(classes[variant], className)}\r\n            aria-describedby=\"client-snackbar\"\r\n            message={\r\n                <span id=\"client-snackbar\" className={classes.message}>\r\n                    <Icon className={clsx(classes.icon, classes.iconVariant)} />\r\n                    <Typography className={classes.mainGridContainer}\r\n                        align='center'\r\n                        variant='body2'>\r\n                        {message}\r\n                    </Typography>\r\n                </span>\r\n            }\r\n            action={[\r\n                <IconButton key=\"close\"\r\n                    aria-label=\"close\"\r\n                    color=\"inherit\"\r\n                    onClick={onClose}\r\n                >\r\n                    <CloseIcon className={classes.icon} />\r\n                </IconButton>,\r\n            ]}\r\n        />\r\n    );\r\n}\r\n\r\nfunction Routes(props) {\r\n    const classes = useStyles();\r\n    const { open, variant, message } = props;\r\n    const [openSnackbar, setOpenSnackbar] = React.useState(false);\r\n    const [openSnackbarVariant, setOpenSnackbarVariant] = React.useState('');\r\n    const [snackbarMessage, setSnackbarMessage] = React.useState('');\r\n\r\n    const handleCloseSnackbar = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setOpenSnackbar(false);\r\n        props.setSnackbar({\r\n            type: SET_SNACKBAR_MODE,\r\n            snackbar: {\r\n                open: false,\r\n                variant: openSnackbarVariant,\r\n                message: snackbarMessage,\r\n            },\r\n        });\r\n    };\r\n    React.useEffect(() => {\r\n        setOpenSnackbarVariant(variant);\r\n        setSnackbarMessage(message);\r\n        setOpenSnackbar(open);\r\n    }, [open, variant, message]);\r\n\r\n    return (\r\n        <div>\r\n            <Snackbar\r\n                open={openSnackbar}\r\n                onClose={handleCloseSnackbar}\r\n                autoHideDuration={3000}>\r\n                <MySnackbarContentWrapper\r\n                    className={classes.margin}\r\n                    onClose={handleCloseSnackbar}\r\n                    variant={openSnackbarVariant}\r\n                    message={snackbarMessage}\r\n                />\r\n            </Snackbar>\r\n            <Route exact path=\"/\" component={Sign} />\r\n            <Switch>\r\n                <PrivateRoute exact path=\"/dreammap\" component={DreamMap} />\r\n                <PrivateRoute exact path=\"/luciddreams\" component={MainPage} />\r\n                <PrivateRoute exact path=\"/dreams\" component={ViewDreams} />\r\n                <PrivateRoute exact path=\"/addregulardream\" component={AddDream} />\r\n                <PrivateRoute exact path=\"/addcdream\" component={AddCDream} />\r\n                <PrivateRoute exact path=\"/technics\" component={Technics} />\r\n                <PrivateRoute exact path=\"/addtechnics\" component={AddTechnics} />\r\n            </Switch>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nRoutes.propTypes = {\r\n    open: PropTypes.bool.isRequired,\r\n    variant: PropTypes.string.isRequired,\r\n    message: PropTypes.string.isRequired,\r\n    setSnackbar: PropTypes.func.isRequired,\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        open: store.snackbar.snackbar.open,\r\n        variant: store.snackbar.snackbar.variant,\r\n        message: store.snackbar.snackbar.message,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setSnackbar: snackbar => dispatch(setSnackbar(snackbar)),\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Routes);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { Router } from \"react-router-dom\";\r\nimport './App.css';\r\n\r\nimport history from '../history';\r\nimport { store } from \"../store\";\r\nimport { CheckTimeOut } from '../utils/CheckLoginTimeOut';\r\nimport setAuthToken from \"../utils/setAuthToken\";\r\nimport { SET_CURRENT_USER, SET_THEME_MODE } from \"../actions/types\";\r\n\r\nimport Routes from '../Routes';\r\n\r\nimport { useStyles, params, randomBetween } from '../styles/Styles';\r\n\r\nlet check = CheckTimeOut();\r\nlet stars = [];\r\nlet clouds = [];\r\n\r\nif (!check) {\r\n    localStorage.removeItem(\"jwtToken\");\r\n    setAuthToken(false);\r\n    store.dispatch({\r\n        type: SET_CURRENT_USER,\r\n        payload: null\r\n    });\r\n    history.push(\"/\");\r\n}\r\nelse {\r\n    history.push(\"/luciddreams\");\r\n}\r\n\r\nif (new Date().getHours() >= 16 || (new Date().getHours() >= 0 && new Date().getHours() < 6)) {\r\n    store.dispatch({\r\n        type: SET_THEME_MODE,\r\n        palette: {\r\n            type: \"dark\",\r\n            primary: { main: \"#f9a825\" },\r\n            secondary: { main: \"#f50057\" },\r\n            error: { main: \"#cc0000\" },\r\n        }\r\n    });\r\n}\r\nelse {\r\n    store.dispatch({\r\n        type: SET_THEME_MODE,\r\n        palette: {\r\n            type: \"light\",\r\n            primary: { main: \"#3f51b5\" },\r\n            secondary: { main: \"#f50057\" },\r\n            error: { main: \"#cc0000\" },\r\n        }\r\n    });\r\n}\r\n\r\nfunction App(props) {\r\n    const { type } = props;\r\n    const classes = useStyles();\r\n    stars = [];\r\n    clouds = [];\r\n    for (let i = 0; i < params.amountStars; i++) {\r\n        let size = Math.round(Math.random() * 10) === 0\r\n            ? params.size.giant\r\n            : randomBetween(params.size.min, params.size.max);\r\n        stars.push(\r\n            <div\r\n                className={classes.AppStar}\r\n                key={i + 'AppStar'}\r\n                style={{\r\n                    left: randomBetween(0, 100) + \"%\",\r\n                    top: randomBetween(0, 100) + \"%\",\r\n                    width: size + \"px\",\r\n                    height: size + \"px\",\r\n                    boxShadow: \"0 0 \" + size + \"px \" + size / 2 + \"px #043668\",\r\n                    animationDuration: randomBetween(params.duration.min, params.duration.max) + \"s\",\r\n                }}\r\n            />\r\n        );\r\n    }\r\n\r\n    for (let i = 0; i < params.amountClouds; i++) {\r\n        let left = Math.round(Math.random() * 50 + 90);\r\n        let top = Math.round(Math.random() * 100 / 100 * 90);\r\n        let scale = Math.random() * 1.5 - 0.5;\r\n        let opacity = Math.random() * 90 / 100;\r\n        let speed = Math.random() * 30 + 15;\r\n        clouds.push(\r\n            <div className={classes.AppCloud}\r\n                key={i + 'AppCloud'}\r\n                style={{\r\n                    left: left + '%',\r\n                    top: top + '%',\r\n                    width: '400px',\r\n                    height: '100px',\r\n                    transform: 'scale(' + scale + ')',\r\n                    opacity: opacity,\r\n                    animationDuration: speed + 's',\r\n                }}\r\n            />\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Router history={history}>\r\n            <div className={classes.AppDivDark}>\r\n                <div className={classes.AppDivLight}\r\n                    style={type === \"light\"\r\n                        ? { opacity: 1, }\r\n                        : { opacity: 0, }}\r\n                />\r\n                {type === \"light\"\r\n                    ?\r\n                    <div className={classes.AppCloudsDiv}\r\n                        style={type === \"light\"\r\n                            ? { opacity: 1, }\r\n                            : { opacity: 0, }}\r\n                    >\r\n                        {clouds}\r\n                    </div>\r\n                    :\r\n                    <div className={classes.AppStarsDiv}\r\n                        style={type === \"light\"\r\n                            ? { opacity: 0, }\r\n                            : { opacity: 1, }}\r\n                    >\r\n                        {stars}\r\n                    </div>\r\n                }\r\n            </div>\r\n            <Routes />\r\n        </Router>\r\n    );\r\n};\r\n\r\nApp.propTypes = {\r\n    type: PropTypes.string.isRequired,\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        type: store.themeMode.palette.type,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from \"./store\";\r\n\r\nReactDOM.render(\r\n    <div id='global' >\r\n        <Provider store={store}>\r\n            <App />\r\n        </Provider>\r\n    </div>\r\n    , document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n\r\n"],"sourceRoot":""}