{"version":3,"sources":["img/map.png","img/sun.png","img/moon.png","img/astronaut.png","img/cloud.svg","history.js","actions/types.js","dictionary/en.js","reducers/currLang.js","reducers/cloud.js","reducers/star.js","reducers/themeMode.js","reducers/authReducer.js","reducers/errorReducer.js","reducers/snackbarReducer.js","reducers/index.js","store.js","utils/setAuthToken.js","utils/CheckLoginTimeOut.js","actions/Actions.js","components/PrivateRoute.js","styles/Styles.js","components/Config.js","functions.js","components/AddDream.jsx","components/AddCDream.jsx","components/muiltiple/DreamCard.jsx","components/ViewDreams.jsx","dictionary/ru.js","components/MainPage.jsx","components/Sign.js","Routes.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","createBrowserHistory","GET_ERRORS","SET_CURRENT_USER","SET_CLOUD","CLEAR_CLOUD","SET_STAR","CLEAR_STAR","SET_LANG","SET_THEME_MODE","SET_SNACKBAR_MODE","words","current","buttons","signIn","signUp","dreamJoirnal","addDream","addCDream","techniques","adventures","close","about","cancel","add","Edit","Delete","Save","texts","or","nickname","password","passwordAgain","sucessRegistration","hello","changleLanguage","success","title","content","tags","technics","rating","Dream","Cdream","NoDreams","pickDate","pickTime","TapToShow","Public","Publish","Unpublish","PublicAlert","PublicText","PublicDescription","UnpublicAlert","UnpublicText","UnpublicDescription","DeleteAlert","DeleteText","errors","emailLenght","nicknameLenght","passwordLenght","password2Lenght","passwordsCompare","UserNotExist","EmailIsNotValid","IncorrectPassword","EmailIsBusy","PasswordLenght5Symbols","NotLogin","EmptyTitle","EmptyDream","NoChanges","initialState","currLang","EnDict","clouds","stars","palette","type","primary","main","secondary","error","isempty","require","isAuthenticated","user","loading","snackbar","open","variant","message","rootReducer","combineReducers","lang","state","action","currLangState","cloudState","starState","themeMode","auth","payload","middleware","thunk","store","createStore","applyMiddleware","setAuthToken","token","axios","defaults","headers","common","CheckTimeOut","localStorage","jwtToken","decoded","jwt_decode","dispatch","currentTime","Date","now","exp","setCurrLang","setSnackbar","connect","Component","component","rest","render","props","to","params","amountStars","amountClouds","size","min","max","giant","duration","variantIcon","CheckCircleIcon","warning","WarningIcon","ErrorIcon","info","InfoIcon","randomBetween","a","b","Math","random","useStyles","makeStyles","theme","contentPaper","backgroundColor","text","padding","pickerGridContainer","position","width","left","transform","marginBottom","div85width","top","ratingGridContainer","pickers","avatarRoot","textAlign","smallAvatar","margin","spacing","height","display","smallChip","centerCircularProgress","mainGridDreamsBodyItemContainer","boxSizing","maxHeight","overflow","borderRadius","mainGridDreamsBodyItemContainerPaper","opacity","mainGridDreamsBodyItem","mainGridDreamsContainer","card","maxWidth","expand","marginLeft","transition","transitions","create","shortest","expandOpen","textField","root","flexGrow","window","innerHeight","mainPage","aboutPage","AppDivDark","background","zIndex","AppDivLight","AppStarsDiv","AppCloudsDiv","AppStar","filter","animation","AppCloud","backgroundRepeat","backgroundImage","CloudSvg","image","SkyDiv","MoonSrc","backgroundSize","MoonImg","SunSrc","SunImg","AstronautButton","AstronautDiv","AstronautImg","MapButton","MapDiv","MapImg","mainGridContainer","mainGridHeadItem","mainGridBodyItem","menuButtonContainerItem","menuButtonContainer","menuButtonGrid","menuDivButton","menuButton","minWidth","actionButton","mainGridFooterItem","menuButtonContainerFooterLanguageButtons","aboutGridContainer","fullMinWidth","inputDiv","inputScrollableDiv","chips","flexWrap","chip","aboutGridItem","mainPaperGridBodyItem","paper","minMargin","VKLoginDiv","VKLoginButton","boxShadow","instance","baseURL","timeout","areArraysEqualSets","a1","a2","superSet","i","length","e","MenuProps","PaperProps","style","ITEM_HEIGHT","getStyles","name","selectedLocations","fontWeight","indexOf","typography","fontWeightSmall","fontWeightMedium","defaultTags","classes","useTheme","history","muiTheme","createMuiTheme","Object","assign","overrides","MUIRichTextEditor","border","container","toolbar","alignItems","justifyContent","minHeight","borderBottom","placeHolder","editor","editorContainer","React","useState","isEditMode","setIsEditMode","isLoading","setIsLoading","titleText","setTitleText","selectedDate","setSelectedDate","contentText","setContentText","prevContentText","setPrevContentText","setselectedLocations","locations","setLocations","handleDateChange","date","useEffect","get","then","res","data","catch","err","console","log","location","defaultData","post_title","dream_date","post_content","map","item","push","CssBaseline","className","Grid","direction","justify","xs","Paper","TextField","required","id","value","label","onChange","target","utils","DateFnsUtils","locale","ruLocale","format","KeyboardButtonProps","ampm","currCont","getCurrentContent","convert","convertToRaw","JSON","stringify","inlineToolbar","controls","customControls","icon","inlineStyle","color","FormControl","InputLabel","Select","labelId","multiple","event","input","Input","renderValue","selected","Chip","avatar","Avatar","alt","find","name_rus","name_eng","src","img_url","key","keys","MenuItem","LinearProgress","Button","onClick","havErr","errorMessage","parse","blocks","hasChanges","postData","post_id","getTime","dreamDate","toLocaleString","timeZone","deleteTags","item1","some","item2","addTags","remove","post","create_user","post_type","savepost","defaultTechnics","selectedTechnics","setselectedTechnics","realisticsValue","setRealisticsValue","setTechnics","Typography","Rating","newValue","deleteTechnics","addTechnics","DreamCard","is_public","expanded","setExpanded","anchorEl","setAnchorEl","openAlert","setOpenAlert","publicChecked","setPublicChecked","header","body","commit","alertTexts","setAlertTexts","dateOfDream","getDate","getMonth","getFullYear","getHours","getMinutes","slice","srcContent","toString","jsonPparse","convertfromraw","convertFromRaw","text_content","EditorState","createWithContent","getPlainText","closeMenu","clickMenu","newAlertTexts","checked","pathname","loadPosts","alert","newPublic","marginTop","Dialog","onClose","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","DialogActions","autoFocus","Menu","keepMounted","Boolean","ListItemIcon","FormControlLabel","control","Checkbox","fontSize","Card","raised","CardHeader","subheader","IconButton","aria-label","currentTarget","CardContent","Tooltip","disableFocusListener","disableTouchListener","technic","tag","CardActions","disableSpacing","noWrap","clsx","aria-expanded","Collapse","in","unmountOnExit","readOnly","paddingTop","dreams","setDreams","useCallback","zeroMinWidth","CircularProgress","disableShrink","Container","align","TransitionDown","Slide","setCurrLangAction","setTheme","undefined","prevLanguage","setPrevLanguage","openLangSnakbar","setOpenLangSnakbar","langSnakbarMessage","setLangSnakbarMessage","setTransition","changeLanguage","language","RuDict","handleCloseLangSnakbar","times_mode","Snackbar","anchorOrigin","vertical","horizontal","TransitionComponent","SnackbarContent","newLang","newUserData","ButtonBase","focusRipple","newPaletteType","primaryColor","secondaryColor","Transition","forwardRef","ref","setUserState","State","email","loginData","setLoginData","password2","registData","setRegistData","emailErr","emailErrText","nicknameErr","nicknameErrText","passwordErr","passwordErrText","password2Err","password2ErrText","regFieldErrors","setRegFieldErrors","showPassword","setShowPassword","openLogin","setOpenLogin","openRegist","setOpenRegist","page","setPage","handleMouseDownPassword","preventDefault","singUp","isErr","newRegFieldErrors","newRegistData","click","response","newPages","setItem","passwordincorrect","onBlur","newLoginData","changeAuthLogin","changeAuthPassword","InputProps","endAdornment","InputAdornment","tabIndex","edge","onMouseDown","button","disabled","path","mdiVk","helperText","changeRegistLogin","changeRegistNickname","changeRegistPassword","changeRegistPassword2","aboutPaper","useStyles1","green","dark","amber","iconVariant","marginRight","MySnackbarContentWrapper","Icon","openSnackbar","setOpenSnackbar","openSnackbarVariant","setOpenSnackbarVariant","snackbarMessage","setSnackbarMessage","handleCloseSnackbar","reason","autoHideDuration","exact","Sign","MainPage","ViewDreams","AddDream","AddCDream","check","removeItem","round","animationDuration","scale","speed","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.afd04aa4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/map.71ce46a8.png\";","module.exports = __webpack_public_path__ + \"static/media/sun.4f817e2f.png\";","module.exports = __webpack_public_path__ + \"static/media/moon.ca0fb531.png\";","module.exports = __webpack_public_path__ + \"static/media/astronaut.7219d35a.png\";","module.exports = __webpack_public_path__ + \"static/media/cloud.7fb181bd.svg\";","import { createBrowserHistory } from \"history\";\r\n\r\nexport default createBrowserHistory();","export const GET_ERRORS = \"GET_ERRORS\";\r\nexport const USER_LOADING = \"USER_LOADING\";\r\nexport const SET_CURRENT_USER = \"SET_CURRENT_USER\";\r\n\r\nexport const SET_CLOUD = 'SET_CLOUD';\r\nexport const CLEAR_CLOUD = 'CLEAR_CLOUD';\r\n\r\nexport const SET_STAR = 'SET_STAR';\r\nexport const CLEAR_STAR = 'CLEAR_STAR';\r\n\r\nexport const SET_LANG = 'SET_LANG';\r\nexport const SET_THEME_MODE = 'SET_THEME_MODE';\r\n\r\nexport const SET_SNACKBAR_MODE = 'SET_SNACKBAR_MODE';","const words = {\r\n    current: 'En',\r\n    buttons : {\r\n        signIn: 'Sign in',\r\n        signUp: 'Sign up',\r\n        dreamJoirnal: 'Dream joirnal',\r\n        addDream: 'Add dream',\r\n        addCDream: 'Add C-dream',\r\n        techniques: 'Techniques',\r\n        adventures: 'Adventures',\r\n        close: 'Back',\r\n        about: 'About us',\r\n        cancel: 'Cancel',\r\n        add: 'Add',\r\n        Edit: 'Edit',\r\n        Delete: 'Delete',\r\n        Save: 'Save',\r\n    },\r\n    texts: {\r\n        about: 'About us About us About us About us About us About us About us About us About us About us ',\r\n        or: 'OR',\r\n        nickname: 'Nickname',\r\n        password: 'Password',\r\n        passwordAgain: 'Password again',\r\n        cancel: 'Cancel',\r\n        sucessRegistration: 'You are sign up successful',\r\n        hello: 'Hello, ',\r\n        changleLanguage: 'Save change language to ',\r\n        success: 'Success',\r\n        title: 'Title',\r\n        content: \"What's a dream\",\r\n        tags: 'Locations',\r\n        technics: 'Technics',\r\n        rating: 'Realistics',\r\n        Dream: 'Regular dream',\r\n        Cdream: 'C-dream',\r\n        NoDreams: \"You don't have dreams\",\r\n        pickDate: \"Date\",\r\n        pickTime: \"Time\",\r\n        TapToShow: \"Tap on text to show highlights\",\r\n        Public: \"Public\",\r\n        Publish: \"Unpublish\",\r\n        Unpublish: \"Publish\",\r\n        PublicAlert: \"Are you sure you want to public the dream?\",\r\n        PublicText: \"After public your friends can read this dream.\",\r\n        PublicDescription: \"Your friends can read this dream\",\r\n        UnpublicAlert: \"Are you sure you want to unpublic the dream?\",\r\n        UnpublicText: \"After unpublic your friends can't read this dream.\",\r\n        UnpublicDescription: \"Your friends can't read this dream\",\r\n        DeleteAlert: \"Are you sure you want to remove the dream?\",\r\n        DeleteText: \"You can't restore dream. Never.\",\r\n    },\r\n    errors: {\r\n        emailLenght: 'Email must not be empty',\r\n        nicknameLenght: 'Nickname must not be empty',\r\n        passwordLenght: 'Password must not be empty',\r\n        password2Lenght: 'Password must not be empty',\r\n        passwordsCompare: 'Passwords not equal',\r\n        UserNotExist: 'Invalid email or password',\r\n        EmailIsNotValid: 'Invalid email',\r\n        IncorrectPassword: 'Invalid email or password',\r\n        EmailIsBusy: 'Email is busy',\r\n        PasswordLenght5Symbols: 'Minimum password length: 5 symbols',\r\n        NotLogin: 'You not loggin in',\r\n        EmptyTitle: 'Title must not be empty',\r\n        EmptyDream: 'Dream must not be empty',\r\n        NoChanges: 'No changes',\r\n    },\r\n};\r\n\r\nexport default words;","import { SET_LANG } from '../actions/types';\r\nimport EnDict from '../dictionary/en';\r\n\r\nconst initialState = {\r\n    currLang: EnDict,\r\n}\r\n\r\nexport function currLangReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case SET_LANG:\r\n            return { ...state, currLang: action.currLangState }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}","import { SET_CLOUD, CLEAR_CLOUD } from '../actions/types';\r\n\r\nconst initialState = {\r\n\tclouds: [],\r\n}\r\n\r\nexport function cloudsReducer(state = initialState, action) {\r\n\tswitch (action.type) {\r\n\t\tcase SET_CLOUD:\r\n\t\t\treturn {\r\n\t\t\t\t...state, clouds: [...state.clouds, action.cloudState]\r\n\t\t\t}\r\n\t\tcase CLEAR_CLOUD:\r\n\t\t\treturn {\r\n\t\t\t\t...state, clouds: []\r\n\t\t\t}\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n}","import { SET_STAR, CLEAR_STAR } from '../actions/types';\r\n\r\nconst initialState = {\r\n\tstars: [],\r\n}\r\n\r\nexport function starsReducer(state = initialState, action) {\r\n\tswitch (action.type) {\r\n\t\tcase SET_STAR:\r\n\t\t\treturn {\r\n\t\t\t\t...state, stars: [...state.stars, action.starState]\r\n\t\t\t}\r\n\t\tcase CLEAR_STAR:\r\n\t\t\treturn {\r\n\t\t\t\t...state, stars: []\r\n\t\t\t}\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n}","import { SET_THEME_MODE } from '../actions/types';\r\n\r\nconst initialState = {\r\n    palette: {\r\n        type: \"dark\",\r\n        primary: { main: \"#f9a825\" },\r\n        secondary: { main: \"#f50057\" },\r\n        error: { main: \"#cc0000\" },\r\n    },\r\n}\r\n\r\nexport function themeReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case SET_THEME_MODE:\r\n            return { ...state, palette: action.palette }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}","import { SET_CURRENT_USER, USER_LOADING } from \"../actions/types\";\r\n\r\nconst isempty = require(\"is-empty\");\r\n\r\nconst initialState = {\r\n    isAuthenticated: false,\r\n    user: {},\r\n    loading: false\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case SET_CURRENT_USER:\r\n            return {\r\n                ...state,\r\n                isAuthenticated: !isempty(action.payload),\r\n                user: action.payload\r\n            };\r\n        case USER_LOADING:\r\n            return {\r\n                ...state,\r\n                loading: true\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}","import { GET_ERRORS } from \"../actions/types\";\r\nconst initialState = {};\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case GET_ERRORS:\r\n            return action.payload;\r\n        default:\r\n            return state;\r\n    }\r\n}","import { SET_SNACKBAR_MODE } from '../actions/types';\r\n\r\nconst initialState = {\r\n    snackbar: {\r\n        open: false,\r\n        variant: '',\r\n        message: '',\r\n    },\r\n}\r\n\r\nexport function snackbarReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case SET_SNACKBAR_MODE:\r\n            return { ...state, snackbar: action.snackbar }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}","import { combineReducers } from 'redux';\r\nimport { currLangReducer } from './currLang';\r\nimport { cloudsReducer } from './cloud';\r\nimport { starsReducer } from './star';\r\nimport { themeReducer } from './themeMode';\r\nimport authReducer from './authReducer';\r\nimport errorReducer from './errorReducer';\r\nimport { snackbarReducer } from './snackbarReducer';\r\n\r\nexport const rootReducer = combineReducers({\r\n    lang: currLangReducer,\r\n    clouds: cloudsReducer,\r\n    stars: starsReducer,\r\n    themeMode: themeReducer,\r\n    auth: authReducer,\r\n    errors: errorReducer,\r\n    snackbar: snackbarReducer,\r\n});","import { createStore, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { rootReducer } from './reducers';\r\n\r\nconst middleware = [thunk];\r\n\r\nexport const store = createStore(\r\n    rootReducer,\r\n    {},\r\n    applyMiddleware(...middleware)\r\n);","import axios from \"axios\";\r\n\r\nconst setAuthToken = token => {\r\n    if (token) {\r\n        // Apply authorization token to every request if logged in\r\n        axios.defaults.headers.common[\"Authorization\"] = token;\r\n    }\r\n    else {\r\n        // Delete auth header\r\n        delete axios.defaults.headers.common[\"Authorization\"];\r\n    }\r\n};\r\n\r\nexport default setAuthToken;","import jwt_decode from \"jwt-decode\";\r\n\r\nimport { store } from \"../store\";\r\nimport setAuthToken from \"../utils/setAuthToken\";\r\nimport { SET_CURRENT_USER } from \"../actions/types\"\r\n\r\nexport function CheckTimeOut() {\r\n    if (localStorage.jwtToken) {\r\n        const token = localStorage.jwtToken;\r\n        setAuthToken(token);\r\n        const decoded = jwt_decode(token);\r\n        store.dispatch({\r\n            type: SET_CURRENT_USER,\r\n            payload: decoded\r\n        });\r\n\r\n        const currentTime = Date.now() / 1000; // to get in milliseconds\r\n        if (decoded.exp < currentTime) {\r\n            return false;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }\r\n}","import { SET_LANG } from '../actions/types';\r\n\r\nexport function setCloud(state) {\r\n\treturn {\r\n\t\ttype: state.type,\r\n\t\tcloudState: state.cloudState,\r\n\t}\r\n}\r\nexport function setStar(state) {\r\n\treturn {\r\n\t\ttype: state.type,\r\n\t\tstarState: state.starState,\r\n\t}\r\n}\r\nexport function setCurrLang(state) {\r\n\treturn {\r\n\t\ttype: SET_LANG,\r\n\t\tcurrLangState: state,\r\n\t}\r\n}\r\nexport function setTheme(state) {\r\n\treturn {\r\n\t\ttype: state.type,\r\n\t\tpalette: state.palette,\r\n\t}\r\n}\r\nexport function setUserState(state) {\r\n\treturn {\r\n\t\ttype: state.type,\r\n\t\tpayload: state.payload,\r\n\t}\r\n}\r\nexport function setSnackbar(state) {\r\n\treturn {\r\n\t\ttype: state.type,\r\n\t\tsnackbar: state.snackbar,\r\n\t}\r\n}","import React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst PrivateRoute = ({ component: Component, auth, ...rest }) => (\r\n    <Route\r\n        {...rest}\r\n        render={props =>\r\n            auth.isAuthenticated === true\r\n                ? <Component {...props} />\r\n                : <Redirect to=\"/\" />\r\n        }\r\n    />\r\n);\r\n\r\nPrivateRoute.propTypes = {\r\n    auth: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    auth: state.auth\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps\r\n)(PrivateRoute);","import { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\nimport WarningIcon from '@material-ui/icons/Warning';\r\nimport ErrorIcon from '@material-ui/icons/Error';\r\nimport InfoIcon from '@material-ui/icons/Info';\r\n\r\nimport MapImg from '../img/map.png';\r\nimport SunImg from '../img/sun.png';\r\nimport MoonImg from '../img/moon.png';\r\nimport AstronautImg from '../img/astronaut.png';\r\nimport CloudSvg from '../img/cloud.svg';\r\n\r\nexport const params = {\r\n    amountStars: 25,\r\n    amountClouds: 5,\r\n    size: {\r\n        min: 1,\r\n        max: 5,\r\n        giant: 9\r\n    },\r\n    duration: {\r\n        min: 5,\r\n        max: 25,\r\n    }\r\n}\r\n\r\nexport const variantIcon = {\r\n    success: CheckCircleIcon,\r\n    warning: WarningIcon,\r\n    error: ErrorIcon,\r\n    info: InfoIcon,\r\n};\r\n\r\nexport function randomBetween(a, b) {\r\n    return (a + (Math.random() * (b - a)));\r\n}\r\n\r\nexport const useStyles = makeStyles(theme => ({\r\n    contentPaper: {\r\n        backgroundColor: theme.palette.text.main,\r\n        padding: 10,\r\n    },\r\n    pickerGridContainer: {\r\n        position: \"relative\",\r\n        width: \"85%\",\r\n        left: \"50%\",\r\n        transform: \"translateX(-50%)\",\r\n        marginBottom: \"5px\",\r\n    },\r\n    div85width: {\r\n        position: \"relative\",\r\n        width: \"85%\",\r\n        top: \"65%\",\r\n        left: \"50%\",\r\n        transform: \"translate(-50%, -50%)\",\r\n    },\r\n    ratingGridContainer: {\r\n        position: \"relative\",\r\n        width: \"100%\",\r\n        top: \"65%\",\r\n        left: \"50%\",\r\n        transform: \"translate(-50%, -50%)\",\r\n    },\r\n    pickers: {\r\n        position: \"relative\",\r\n        width: \"90%\",\r\n        left: \"50%\",\r\n        transform: \"translateX(-50%)\",\r\n    },\r\n    avatarRoot: {\r\n        // display: \"flex\",\r\n        // flexWrap: \"wrap\",\r\n        // overflow: 'auto',\r\n        textAlign: 'center',\r\n        width: '100%',\r\n    },\r\n    smallAvatar: {\r\n        margin: theme.spacing(0.5),\r\n        width: theme.spacing(5),\r\n        height: theme.spacing(5),\r\n        display: 'inline-block',\r\n    },\r\n    smallChip: {\r\n        margin: theme.spacing(0.5),\r\n    },\r\n    centerCircularProgress: {\r\n        position: 'relative',\r\n        top: '50%',\r\n        left: '50%',\r\n    },\r\n    mainGridDreamsBodyItemContainer: {\r\n        position: 'absolute',\r\n        boxSizing: 'border-box',\r\n        maxHeight: '90%',\r\n        overflow: 'auto',\r\n        borderRadius: '4px',\r\n    },\r\n    mainGridDreamsBodyItemContainerPaper: {\r\n        height: '100%',\r\n        opacity: 0.9,\r\n    },\r\n    mainGridDreamsBodyItem: {\r\n        overflow: 'hidden',\r\n    },\r\n    mainGridDreamsContainer: {\r\n        height: '100%',\r\n        position: 'relative',\r\n        width: '90%',\r\n        left: '50%',\r\n        transform: 'translateX(-50%)',\r\n    },\r\n    card: {\r\n        maxWidth: '100%',\r\n        height: '100%',\r\n    },\r\n    expand: {\r\n        transform: \"rotate(0deg)\",\r\n        marginLeft: \"auto\",\r\n        transition: theme.transitions.create(\"transform\", {\r\n            duration: theme.transitions.duration.shortest\r\n        })\r\n    },\r\n    expandOpen: {\r\n        transform: \"rotate(180deg)\"\r\n    },\r\n    textField: {\r\n        width: '100%',\r\n    },\r\n    margin: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    root: {\r\n        flexGrow: 1,\r\n        position: 'relative',\r\n        width: '100%',\r\n        height: window.innerHeight - 1,\r\n        overflow: 'hidden',\r\n    },\r\n    mainPage: {\r\n        top: 0,\r\n        left: 0,\r\n        position: 'absolute',\r\n        transition: 'all 0.3s linear',\r\n        width: '100%',\r\n        height: '100%',\r\n    },\r\n    aboutPage: {\r\n        position: 'absolute',\r\n        transition: 'all 0.3s linear',\r\n        top: '100%',\r\n        width: '100%',\r\n        height: '100%',\r\n    },\r\n    AppDivDark: {\r\n        position: 'fixed',\r\n        background: 'radial-gradient(ellipse at center, rgba(8, 25, 42, 1) 20%, rgba(1, 4, 6, 1) 100%)',\r\n        opacity: 1,\r\n        margin: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        zIndex: -3,\r\n    },\r\n    AppDivLight: {\r\n        position: 'absolute',\r\n        background: 'radial-gradient(ellipse at center, rgba(207, 225, 237, 1) 20%, rgba(127, 170, 202, 1) 100%)',\r\n        transition: 'opacity 0.5s linear',\r\n        margin: 0,\r\n        opacity: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        zIndex: -3,\r\n    },\r\n    AppStarsDiv: {\r\n        transition: 'opacity 0.5s linear',\r\n        opacity: 0,\r\n        position: 'absolute',\r\n        width: '100%',\r\n        height: '100%',\r\n        overflow: 'hidden',\r\n        zIndex: -2,\r\n    },\r\n    AppCloudsDiv: {\r\n        transition: 'opacity 0.5s linear',\r\n        opacity: 0,\r\n        position: 'absolute',\r\n        width: '100%',\r\n        height: '100%',\r\n        overflow: 'hidden',\r\n        zIndex: -2,\r\n    },\r\n    AppStar: {\r\n        borderRadius: '100%',\r\n        position: 'absolute',\r\n        background: 'radial-gradient(ellipse at center, rgba(177, 198, 219, 1) 2%, rgba(5, 63, 118, 1) 100%)',\r\n        filter: 'blur(1px)',\r\n        animation: '$shine infinite alternate',\r\n        zIndex: -1,\r\n    },\r\n    AppCloud: {\r\n        position: 'absolute',\r\n        backgroundRepeat: 'no-repeat',\r\n        //backgroundImage: 'url(https://www.turbotobias.dk/wp-content/uploads/2019/03/White-cloud-type3.svg)',\r\n        backgroundImage: 'url(' + CloudSvg + ')',\r\n        animation: '$moveclouds infinite linear',\r\n        zIndex: -1,\r\n    },\r\n    image: {\r\n        position: 'relative',\r\n        left: '50%',\r\n        top: '25%',\r\n        transform: 'translate(-50%, -25%)',\r\n        width: '35vw !important',\r\n        height: '35vw',\r\n        borderRadius: '50%',\r\n    },\r\n    SkyDiv: {\r\n        position: 'absolute',\r\n        borderRadius: '50%',\r\n        top: 0,\r\n        left: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        overflow: 'hidden',\r\n    },\r\n    MoonSrc: {\r\n        backgroundSize: 'cover',\r\n        background: 'url(' + MoonImg + ')',\r\n        backgroundRepeat: 'no-repeat',\r\n        position: 'absolute',\r\n        top: 0,\r\n        left: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        transition: 'all 0.3s linear',\r\n    },\r\n    SunSrc: {\r\n        backgroundSize: 'cover',\r\n        background: 'url(' + SunImg + ')',\r\n        backgroundRepeat: 'no-repeat',\r\n        position: 'absolute',\r\n        top: 0,\r\n        left: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        transition: 'all 0.3s linear',\r\n    },\r\n    AstronautButton: {\r\n        position: 'relative',\r\n        left: '50%',\r\n        top: '50%',\r\n        transform: 'translate(-50%, -50%)',\r\n        width: '25vw !important',\r\n        height: '25vw',\r\n        borderRadius: '50%',\r\n    },\r\n    AstronautDiv: {\r\n        position: 'absolute',\r\n        borderRadius: '50%',\r\n        top: 0,\r\n        left: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        overflow: 'hidden',\r\n        animation: '$swinging 30s infinite linear',\r\n    },\r\n    AstronautImg: {\r\n        backgroundSize: 'cover',\r\n        background: 'url(' + AstronautImg + ')',\r\n        backgroundRepeat: 'no-repeat',\r\n        position: 'absolute',\r\n        top: 0,\r\n        left: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        transition: 'filter 0.5s linear',\r\n    },\r\n    MapButton: {\r\n        position: 'relative',\r\n        left: '50%',\r\n        top: '50%',\r\n        transform: 'translate(-50%, -50%)',\r\n        width: '25vw !important',\r\n        height: '25vw',\r\n        borderRadius: '10%',\r\n    },\r\n    MapDiv: {\r\n        position: 'absolute',\r\n        top: 0,\r\n        left: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        overflow: 'hidden',\r\n        animation: '$swinging 30s infinite linear',\r\n    },\r\n    MapImg: {\r\n        backgroundSize: 'cover',\r\n        background: 'url(' + MapImg + ')',\r\n        backgroundRepeat: 'no-repeat',\r\n        position: 'absolute',\r\n        top: 0,\r\n        left: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        transition: 'filter 0.5s linear',\r\n    },\r\n    mainGridContainer: {\r\n        height: '100%',\r\n    },\r\n    mainGridHeadItem: {\r\n        maxWidth: '100% !Important',\r\n    },\r\n    mainGridBodyItem: {\r\n        maxWidth: '100% !Important',\r\n    },\r\n    menuButtonContainerItem: {\r\n        maxWidth: '100% !Important',\r\n    },\r\n    menuButtonContainer: {\r\n        height: '100% !Important',\r\n    },\r\n    menuButtonGrid: {\r\n    },\r\n    menuDivButton: {\r\n        maxWidth: '100% !Important',\r\n        padding: '10px',\r\n    },\r\n    menuButton: {\r\n        minWidth: '55vw',\r\n        maxWidth: '55vw',\r\n    },\r\n    actionButton: {\r\n        minWidth: '40vw',\r\n        maxWidth: '40vw',\r\n    },\r\n    mainGridFooterItem: {\r\n        maxWidth: '100% !Important',\r\n    },\r\n    menuButtonContainerFooterLanguageButtons: {\r\n    },\r\n    aboutGridContainer: {\r\n        width: '100%',\r\n        height: '100%',\r\n        margin: 0,\r\n    },\r\n    fullMinWidth: {\r\n        minWidth: '100% !Important',\r\n        position: 'relative'\r\n    },\r\n    inputDiv: {\r\n        minWidth: '85% !Important',\r\n        maxWidth: '85% !Important',\r\n        position: 'absolute',\r\n        top: '50%',\r\n        left: '50%',\r\n        transform: 'translate(-50%, -50%)',\r\n        opacity: 1,\r\n    },\r\n    inputScrollableDiv: {\r\n        minWidth: '85% !Important',\r\n        maxWidth: '85% !Important',\r\n        height: '100%',\r\n        position: 'absolute',\r\n        top: '50%',\r\n        left: '50%',\r\n        transform: 'translate(-50%, -50%)',\r\n        opacity: 1,\r\n        //overflowY: 'auto',\r\n    },\r\n    chips: {\r\n        display: \"flex\",\r\n        flexWrap: \"wrap\"\r\n    },\r\n    chip: {\r\n        margin: 1\r\n    },\r\n    aboutGridItem: {\r\n        width: '100%',\r\n    },\r\n    mainPaperGridBodyItem: {\r\n        maxWidth: '100% !Important',\r\n    },\r\n    paper: {\r\n        height: '90%',\r\n        margin: theme.spacing(3, 2),\r\n        opacity: 0.9,\r\n    },\r\n    minMargin: {\r\n        margin: theme.spacing(0.5),\r\n    },\r\n    VKLoginDiv: {\r\n        position: 'absolute',\r\n        width: '15vw',\r\n        height: '15vw',\r\n    },\r\n    VKLoginButton: {\r\n        background: 'url(https://dressirovka70.ru/wp-content/uploads/2019/10/1200px-VK.com-logo.svg1_-1024x1024.png)',\r\n        boxShadow: '0px 3px 1px -2px rgba(0,0,0,0.2), 0px 2px 2px 0px rgba(0,0,0,0.14), 0px 1px 5px 0px rgba(0,0,0,0.12)',\r\n        backgroundSize: 'cover',\r\n        borderRadius: '25%',\r\n        width: '100%',\r\n        height: '100%',\r\n    },\r\n    \"@keyframes shine\": {\r\n        \"0%\": {\r\n            transform: 'scale(1)',\r\n            opacity: '1',\r\n        },\r\n        \"20%\": {\r\n            transform: 'scale(.9)',\r\n            opacity: '.8',\r\n        },\r\n        \"40%\": {\r\n            transform: 'scale(1)',\r\n            opacity: '.9',\r\n        },\r\n        \"60%\": {\r\n            transform: 'scale(.2)',\r\n            opacity: '.1',\r\n        },\r\n        \"80%\": {\r\n            transform: 'scale(.5)',\r\n            opacity: '.5',\r\n        },\r\n        \"100%\": {\r\n            transform: 'scale(.9)',\r\n            opacity: '.9',\r\n        },\r\n    },\r\n    \"@keyframes moveclouds\": {\r\n        '100%': {\r\n            left: '-100%',\r\n        },\r\n    },\r\n    \"@keyframes swinging\": {\r\n        '0%': {\r\n            transform: 'rotate(0)',\r\n        },\r\n        '10%': {\r\n            transform: 'rotate(12deg)',\r\n        },\r\n        '20%': {\r\n            transform: 'rotate(-10deg)',\r\n        },\r\n        '30%': {\r\n            transform: 'rotate(9deg)',\r\n        },\r\n        '40%': {\r\n            transform: 'rotate(-8deg)',\r\n        },\r\n        '50%': {\r\n            transform: 'rotate(7deg)',\r\n        },\r\n        '60%': {\r\n            transform: 'rotate(-6deg)',\r\n        },\r\n        '70%': {\r\n            transform: 'rotate(5deg)',\r\n        },\r\n        '80%': {\r\n            transform: 'rotate(-4deg)',\r\n        },\r\n        '90%': {\r\n            transform: 'rotate(3deg)',\r\n        },\r\n        '100%': {\r\n            transform: 'rotate(0)',\r\n        },\r\n    }\r\n}));","import axios from \"axios\";\r\n\r\n\r\nexport const instance = axios.create({\r\n    baseURL: 'https://ldserver.herokuapp.com',\r\n    timeout: 10000,\r\n    headers: { \"Access-Control-Allow-Origin\": \"*\" }\r\n});","export function areArraysEqualSets(a1, a2) {\r\n    let superSet = {};\r\n    for (let i = 0; i < a1.length; i++) {\r\n        const e = a1[i] + typeof a1[i];\r\n        superSet[e] = 1;\r\n    }\r\n    for (let i = 0; i < a2.length; i++) {\r\n        const e = a2[i] + typeof a2[i];\r\n        if (!superSet[e]) {\r\n            return false;\r\n        }\r\n        superSet[e] = 2;\r\n    }\r\n    for (let e in superSet) {\r\n        if (superSet[e] === 1) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport ruLocale from \"date-fns/locale/ru\";\r\nimport enLocale from \"date-fns/locale/ru\";\r\n\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport TextField from '@material-ui/core/TextField';\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport Button from '@material-ui/core/Button';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Input from \"@material-ui/core/Input\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport MUIRichTextEditor from 'mui-rte';\r\nimport { convertToRaw } from 'draft-js';\r\n\r\nimport { MuiThemeProvider, createMuiTheme, useTheme } from '@material-ui/core/styles';\r\n\r\nimport { MuiPickersUtilsProvider, KeyboardTimePicker, KeyboardDatePicker } from '@material-ui/pickers';\r\n\r\nimport FormatColorFillIcon from '@material-ui/icons/FormatColorFill';\r\n\r\nimport { useStyles } from '../styles/Styles';\r\nimport { setSnackbar } from '../actions/Actions';\r\nimport { SET_SNACKBAR_MODE } from \"../actions/types\";\r\n\r\nimport { instance } from './Config';\r\n\r\nimport { areArraysEqualSets } from '../functions';\r\n\r\nconst ITEM_HEIGHT = 48;\r\nconst ITEM_PADDING_TOP = 8;\r\nconst MenuProps = {\r\n    PaperProps: {\r\n        style: {\r\n            maxHeight: ITEM_HEIGHT * 5 + ITEM_PADDING_TOP,\r\n            width: 250\r\n        }\r\n    }\r\n};\r\n\r\nfunction getStyles(name, selectedLocations, theme) {\r\n    return {\r\n        fontWeight:\r\n            selectedLocations.indexOf(name) === -1\r\n                ? theme.typography.fontWeightSmall\r\n                : theme.typography.fontWeightMedium\r\n    };\r\n}\r\n\r\nlet defaultTags = [];\r\n\r\nfunction AddDream(props) {\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const { lang, themeMode, history, auth, setSnackbar } = props;\r\n    const muiTheme = createMuiTheme(themeMode);\r\n    Object.assign(muiTheme, {\r\n        overrides: {\r\n            MUIRichTextEditor: {\r\n                root: {\r\n                    border: \"1px solid gray\",\r\n                    borderRadius: '4px',\r\n                    height: '100%',\r\n                    //Весь компонент\r\n                },\r\n                container: {\r\n                    height: '100%',\r\n                    margin: '0 !Important',\r\n                    //Без шапки\r\n                },\r\n                toolbar: {\r\n                    //textAlign: 'center',\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    justifyContent: 'center',\r\n                    height: '20%',\r\n                    minHeight: '48px',\r\n                    margin: '0 !Important',\r\n                    borderBottom: \"1px solid gray\",\r\n                    borderRadius: '4px',\r\n                },\r\n                placeHolder: {\r\n                },\r\n                editor: {\r\n                    height: '69%',\r\n                    width: '100%',\r\n                    position: 'relative',\r\n                    overflow: 'hidden',\r\n                    //Эдитор\r\n                },\r\n                editorContainer: {\r\n                    padding: \"18.5px 14px\",\r\n                    borderRadius: '4px',\r\n                    position: 'relative',\r\n                    boxSizing: 'border-box',\r\n                    maxHeight: '100%',\r\n                    overflow: 'auto',\r\n                    //Редактор\r\n                },\r\n            }\r\n        }\r\n    })\r\n    const [isEditMode, setIsEditMode] = React.useState(false);\r\n    const [isLoading, setIsLoading] = React.useState(false);\r\n    const [titleText, setTitleText] = React.useState('');\r\n    const [selectedDate, setSelectedDate] = React.useState(new Date());\r\n    const [contentText, setContentText] = React.useState();\r\n    const [prevContentText, setPrevContentText] = React.useState();\r\n    const [selectedLocations, setselectedLocations] = React.useState([]);\r\n    const [locations, setLocations] = React.useState({});\r\n\r\n    const handleChangeLocations = (event) => {\r\n        setselectedLocations(event.target.value);\r\n    };\r\n\r\n    const changeTitle = (event) => {\r\n        setTitleText(event.target.value);\r\n    };\r\n\r\n    const handleDateChange = date => {\r\n        setSelectedDate(date);\r\n    };\r\n\r\n    const changeContent = (state) => {\r\n        const currCont = state.getCurrentContent();\r\n        const convert = convertToRaw(currCont);\r\n        const content = JSON.stringify(convert);\r\n        if (prevContentText !== content) {\r\n            setPrevContentText(content);\r\n        }\r\n    };\r\n\r\n    const savepost = () => {\r\n        setIsLoading(true);\r\n        let havErr = false;\r\n        let errorMessage = '';\r\n        if (typeof (titleText) !== 'undefined') {\r\n            if (titleText.length === 0) {\r\n                errorMessage = lang.currLang.errors.EmptyTitle;\r\n                havErr = true;\r\n            }\r\n        }\r\n        else {\r\n            errorMessage = lang.currLang.errors.EmptyTitle;\r\n            havErr = true;\r\n        }\r\n\r\n        if (typeof (prevContentText) !== 'undefined') {\r\n            if (JSON.parse(prevContentText).blocks[0].text.length === 0) {\r\n                errorMessage = lang.currLang.errors.EmptyDream;\r\n                havErr = true;\r\n            }\r\n        }\r\n        else {\r\n            errorMessage = lang.currLang.errors.EmptyDream;\r\n            havErr = true;\r\n        }\r\n\r\n        if (havErr) {\r\n            setSnackbar({\r\n                type: SET_SNACKBAR_MODE,\r\n                snackbar: {\r\n                    open: true,\r\n                    variant: 'error',\r\n                    message: errorMessage,\r\n                },\r\n            });\r\n            setIsLoading(false);\r\n        }\r\n        else {\r\n            if (isEditMode) {\r\n                let hasChanges = false;\r\n                let postData = {\r\n                    post_id: props.location.defaultData.post_id,\r\n                };\r\n\r\n                if (props.location.defaultData.post_title !== titleText) {\r\n                    postData.title = titleText;\r\n                    hasChanges = true;\r\n                }\r\n\r\n                if (props.location.defaultData.dream_date.getTime() !== selectedDate.getTime()) {\r\n                    postData.dreamDate = selectedDate.toLocaleString(\"ru-RU\", { timeZone: 'Europe/London' });\r\n                    hasChanges = true;\r\n                }\r\n\r\n                if (props.location.defaultData.post_content !== prevContentText) {\r\n                    postData.content = prevContentText;\r\n                    hasChanges = true;\r\n                }\r\n\r\n                if (!areArraysEqualSets(defaultTags, selectedLocations)) {\r\n                    hasChanges = true;\r\n                    let deleteTags = defaultTags.filter(item1 =>\r\n                        !selectedLocations.some(item2 => (\r\n                            item2 === item1)\r\n                        )\r\n                    );\r\n                    let addTags = selectedLocations.filter(item1 =>\r\n                        !defaultTags.some(item2 => (\r\n                            item2 === item1)\r\n                        )\r\n                    );\r\n                    if (addTags.length > 0) {\r\n                        let add = {};\r\n                        addTags.map((item, key) => (\r\n                            add[key] = item\r\n                        ));\r\n                        postData.tags = { ...postData.tags, add: add };\r\n                    }\r\n                    if (deleteTags.length > 0) {\r\n                        let remove = {};\r\n                        deleteTags.map((item, key) => (\r\n                            remove[key] = item\r\n                        ));\r\n                        postData.tags = { ...postData.tags, remove: remove };\r\n                    }\r\n                }\r\n\r\n                if (hasChanges) {\r\n                    instance\r\n                        .post('/actions/users/updatepost', postData)\r\n                        .then(res => {\r\n                            setIsLoading(false);\r\n                            history.push(\"/dreams\")\r\n                        })\r\n                        .catch(err => {\r\n                            console.log(err);\r\n                            setIsLoading(false);\r\n                        });\r\n                }\r\n                else {\r\n                    setSnackbar({\r\n                        type: SET_SNACKBAR_MODE,\r\n                        snackbar: {\r\n                            open: true,\r\n                            variant: 'error',\r\n                            message: lang.currLang.errors.NoChanges,\r\n                        },\r\n                    });\r\n                    setIsLoading(false);\r\n                }\r\n            }\r\n            else {\r\n                let postData = {\r\n                    title: titleText,\r\n                    dreamDate: selectedDate.toLocaleString(\"ru-RU\", { timeZone: 'Europe/London' }),\r\n                    content: prevContentText,\r\n                    create_user: auth.user.id,\r\n                    post_type: 0,\r\n                    nickname: auth.user.nickname,\r\n                    tags: selectedLocations,\r\n                }\r\n                instance\r\n                    .post('/actions/users/createpost', postData)\r\n                    .then(res => {\r\n                        setIsLoading(false);\r\n                        history.push(\"/luciddreams\")\r\n                    })\r\n                    .catch(err => {\r\n                        setIsLoading(false);\r\n                    });\r\n            }\r\n        }\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        instance.get(\"/gettags\")\r\n            .then(res => {\r\n                setLocations(res.data);\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            });\r\n\r\n        if (typeof (props.location.defaultData) !== 'undefined') {\r\n            setIsEditMode(true);\r\n            defaultTags = [];\r\n            const { post_title, dream_date, post_content, tags } = props.location.defaultData;\r\n            setTitleText(post_title);\r\n            setSelectedDate(dream_date);\r\n            setContentText(post_content);\r\n            setPrevContentText(post_content);\r\n\r\n            if (typeof tags[0][0] === 'string') {\r\n                lang.currLang.current === \"Ru\"\r\n                    ? tags.map(item => defaultTags.push(item[1]))\r\n                    : tags.map(item => defaultTags.push(item[2]));\r\n                setselectedLocations(defaultTags);\r\n            }\r\n        }\r\n    }, [props.location.defaultData, lang.currLang]);\r\n\r\n    return (\r\n        <MuiThemeProvider theme={muiTheme}>\r\n            <CssBaseline />\r\n            <div className={classes.root} >\r\n                <Grid className={classes.mainGridContainer}\r\n                    container\r\n                    direction=\"column\"\r\n                    justify=\"center\"\r\n                    alignItems=\"stretch\" >\r\n                    <Grid item xs={11} className={classes.mainGridBodyItem}>\r\n                        <Paper className={classes.paper}>\r\n                            <Grid container\r\n                                className={classes.mainGridContainer}\r\n                                direction=\"column\"\r\n                                justify=\"center\"\r\n                                alignItems=\"center\"\r\n                            >\r\n                                <Grid item xs={2} className={classes.fullMinWidth} >\r\n                                    <TextField className={classes.inputDiv}\r\n                                        required\r\n                                        id=\"outlined-required\"\r\n                                        value={titleText}\r\n                                        label={lang.currLang.texts.title}\r\n                                        variant=\"outlined\"\r\n                                        onChange={(e) => { changeTitle(e) }}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={2} className={classes.fullMinWidth} >\r\n                                    <MuiPickersUtilsProvider utils={DateFnsUtils}\r\n                                        locale={lang.currLang.current === \"Ru\"\r\n                                            ? ruLocale\r\n                                            : enLocale}\r\n                                    >\r\n                                        <Grid className={classes.pickerGridContainer}\r\n                                            container\r\n                                            direction=\"row\"\r\n                                            justify=\"center\"\r\n                                            alignItems=\"stretch\" >\r\n                                            <Grid item xs={7} >\r\n                                                <KeyboardDatePicker className={classes.pickers}\r\n                                                    id=\"date-picker-dialog\"\r\n                                                    label={lang.currLang.texts.pickDate}\r\n                                                    format=\"dd.MM.yyyy\"\r\n                                                    value={selectedDate}\r\n                                                    onChange={handleDateChange}\r\n                                                    KeyboardButtonProps={{\r\n                                                        'aria-label': 'change date',\r\n                                                    }}\r\n                                                />\r\n                                            </Grid>\r\n                                            <Grid item xs={5} >\r\n                                                <KeyboardTimePicker className={classes.pickers}\r\n                                                    id=\"time-picker\"\r\n                                                    label={lang.currLang.texts.pickTime}\r\n                                                    value={selectedDate}\r\n                                                    onChange={handleDateChange}\r\n                                                    ampm={false}\r\n                                                    KeyboardButtonProps={{\r\n                                                        'aria-label': 'change time',\r\n                                                    }}\r\n                                                />\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </MuiPickersUtilsProvider>\r\n                                </Grid>\r\n                                <Grid item xs={5} className={classes.fullMinWidth} >\r\n\r\n                                    <div className={classes.inputScrollableDiv}>\r\n\r\n                                        <MUIRichTextEditor\r\n                                            value={contentText}\r\n                                            onChange={changeContent}\r\n                                            label={lang.currLang.texts.content}\r\n                                            inlineToolbar={false}\r\n                                            controls={[\r\n                                                \"bold\",\r\n                                                \"italic\",\r\n                                                \"underline\",\r\n                                                \"strikethrough\",\r\n                                                \"colorfill\",\r\n                                            ]}\r\n                                            customControls={[\r\n                                                {\r\n                                                    name: \"colorfill\",\r\n                                                    icon: <FormatColorFillIcon />,\r\n                                                    type: \"inline\",\r\n                                                    inlineStyle: {\r\n                                                        backgroundColor: \"yellow\",\r\n                                                        color: \"black\"\r\n                                                    }\r\n                                                }\r\n                                            ]}\r\n                                        />\r\n\r\n                                    </div>\r\n\r\n                                </Grid>\r\n                                <Grid item xs={3} className={classes.fullMinWidth} >\r\n                                    <FormControl className={classes.inputDiv}>\r\n                                        <InputLabel id=\"location-chip-label\">\r\n                                            {lang.currLang.texts.tags}\r\n                                        </InputLabel>\r\n                                        <Select\r\n                                            labelId=\"location-chip-label\"\r\n                                            id=\"location-chip\"\r\n                                            multiple\r\n                                            value={selectedLocations}\r\n                                            onChange={handleChangeLocations}\r\n                                            input={\r\n                                                <Input id=\"select-location-chip\" />\r\n                                            }\r\n                                            renderValue={selected =>\r\n                                                (\r\n                                                    <div className={classes.chips}>\r\n                                                        {selected.map(value => (\r\n                                                            <Chip\r\n                                                                size=\"small\"\r\n                                                                avatar={\r\n                                                                    locations.length\r\n                                                                        ? lang.currLang.current === \"Ru\"\r\n                                                                            ? < Avatar\r\n                                                                                alt={locations.find(locations => locations.name_rus === value).name_eng}\r\n                                                                                src={locations.find(locations => locations.name_rus === value).img_url}\r\n                                                                            />\r\n                                                                            : < Avatar\r\n                                                                                alt={locations.find(locations => locations.name_eng === value).name_eng}\r\n                                                                                src={locations.find(locations => locations.name_eng === value).img_url}\r\n                                                                            />\r\n                                                                        : null\r\n                                                                }\r\n                                                                key={value}\r\n                                                                label={value}\r\n                                                                className={classes.chip}\r\n                                                            />\r\n                                                        ))}\r\n                                                    </div>\r\n                                                )\r\n                                            }\r\n                                            MenuProps={MenuProps}\r\n                                        >\r\n                                            {Object.keys(locations)\r\n                                                .map(item =>\r\n                                                    <MenuItem\r\n                                                        key={locations[item].id + ' chip'}\r\n                                                        value={\r\n                                                            lang.currLang.current === \"Ru\"\r\n                                                                ? locations[item].name_rus\r\n                                                                : locations[item].name_eng\r\n                                                        }\r\n                                                        style={getStyles(locations[item].name_eng, selectedLocations, theme)}\r\n                                                    >\r\n                                                        {lang.currLang.current === \"Ru\"\r\n                                                            ? locations[item].name_rus\r\n                                                            : locations[item].name_eng}\r\n                                                    </MenuItem>\r\n                                                )}\r\n                                        </Select>\r\n                                    </FormControl>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Paper>\r\n                    </Grid>\r\n                    <Grid item xs={1} className={classes.mainGridBodyItem} >\r\n\r\n                        {isLoading\r\n                            ? <LinearProgress />\r\n                            : <Grid\r\n                                container\r\n                                direction=\"row\"\r\n                                justify=\"space-evenly\"\r\n                                alignItems=\"center\"\r\n                            >\r\n\r\n                                <Grid item>\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        color=\"secondary\"\r\n                                        className={classes.actionButton}\r\n                                        onClick={() => {\r\n                                            isEditMode\r\n                                                ? history.push(\"/dreams\")\r\n                                                : history.push(\"/luciddreams\")\r\n                                        }}\r\n                                    >\r\n                                        {lang.currLang.buttons.close}\r\n                                    </Button>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        color=\"primary\"\r\n                                        className={classes.actionButton}\r\n                                        onClick={() => savepost()}\r\n                                    >\r\n                                        {isEditMode\r\n                                            ? lang.currLang.buttons.Save\r\n                                            : lang.currLang.buttons.add\r\n                                        }\r\n                                    </Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                        }\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </MuiThemeProvider >\r\n    );\r\n};\r\n\r\nAddDream.propTypes = {\r\n    setSnackbar: PropTypes.func.isRequired,\r\n    themeMode: PropTypes.object.isRequired,\r\n    lang: PropTypes.object.isRequired,\r\n    auth: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        themeMode: store.themeMode,\r\n        lang: store.lang,\r\n        auth: store.auth,\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setSnackbar: snackbar => dispatch(setSnackbar(snackbar)),\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(AddDream);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport ruLocale from \"date-fns/locale/ru\";\r\nimport enLocale from \"date-fns/locale/ru\";\r\n\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Typography from '@material-ui/core/Typography';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport Button from '@material-ui/core/Button';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Input from \"@material-ui/core/Input\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport MUIRichTextEditor from 'mui-rte';\r\nimport { convertToRaw } from 'draft-js';\r\n\r\nimport Rating from \"@material-ui/lab/Rating\";\r\n\r\nimport { MuiThemeProvider, createMuiTheme, useTheme } from '@material-ui/core/styles';\r\n\r\nimport { MuiPickersUtilsProvider, KeyboardTimePicker, KeyboardDatePicker } from '@material-ui/pickers';\r\n\r\nimport FormatColorFillIcon from '@material-ui/icons/FormatColorFill';\r\n\r\nimport { useStyles } from '../styles/Styles';\r\nimport { SET_SNACKBAR_MODE } from \"../actions/types\";\r\nimport { setSnackbar } from '../actions/Actions';\r\n\r\nimport { instance } from './Config';\r\n\r\nimport { areArraysEqualSets } from '../functions';\r\n\r\nconst ITEM_HEIGHT = 48;\r\nconst ITEM_PADDING_TOP = 8;\r\nconst MenuProps = {\r\n    PaperProps: {\r\n        style: {\r\n            maxHeight: ITEM_HEIGHT * 5 + ITEM_PADDING_TOP,\r\n            width: 250\r\n        }\r\n    }\r\n};\r\n\r\nfunction getStyles(name, selectedLocations, theme) {\r\n    return {\r\n        fontWeight:\r\n            selectedLocations.indexOf(name) === -1\r\n                ? theme.typography.fontWeightSmall\r\n                : theme.typography.fontWeightMedium\r\n    };\r\n}\r\n\r\nlet defaultTechnics = [];\r\nlet defaultTags = [];\r\n\r\nfunction AddCDream(props) {\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const { lang, themeMode, history, auth, setSnackbar } = props;\r\n    const muiTheme = createMuiTheme(themeMode);\r\n    Object.assign(muiTheme, {\r\n        overrides: {\r\n            MUIRichTextEditor: {\r\n                root: {\r\n                    border: \"1px solid gray\",\r\n                    borderRadius: '4px',\r\n                    height: '100%',\r\n                    //Весь компонент\r\n                },\r\n                container: {\r\n                    height: '100%',\r\n                    margin: '0 !Important',\r\n                    //Без шапки\r\n                },\r\n                toolbar: {\r\n                    //textAlign: 'center',\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    justifyContent: 'center',\r\n                    height: '20%',\r\n                    minHeight: '48px',\r\n                    margin: '0 !Important',\r\n                    borderBottom: \"1px solid gray\",\r\n                    borderRadius: '4px',\r\n                },\r\n                placeHolder: {\r\n                },\r\n                editor: {\r\n                    height: '69%',\r\n                    width: '100%',\r\n                    position: 'relative',\r\n                    overflow: 'hidden',\r\n                    //Эдитор\r\n                },\r\n                editorContainer: {\r\n                    padding: \"18.5px 14px\",\r\n                    borderRadius: '4px',\r\n                    position: 'relative',\r\n                    boxSizing: 'border-box',\r\n                    maxHeight: '100%',\r\n                    overflow: 'auto',\r\n                    //Редактор\r\n                },\r\n            }\r\n        }\r\n    })\r\n    const [isEditMode, setIsEditMode] = React.useState(false);\r\n    const [isLoading, setIsLoading] = React.useState(false);\r\n    const [titleText, setTitleText] = React.useState('');\r\n    const [selectedDate, setSelectedDate] = React.useState(new Date());\r\n    const [contentText, setContentText] = React.useState();\r\n    const [prevContentText, setPrevContentText] = React.useState();\r\n    const [selectedLocations, setselectedLocations] = React.useState([]);\r\n    const [selectedTechnics, setselectedTechnics] = React.useState([]);\r\n    const [realisticsValue, setRealisticsValue] = React.useState(1);\r\n    const [locations, setLocations] = React.useState({});\r\n    const [technics, setTechnics] = React.useState({});\r\n\r\n    const handleChangeRealistics = (event, newValue) => {\r\n        setRealisticsValue(newValue);\r\n    };\r\n\r\n    const handleChangeLocations = (event) => {\r\n        setselectedLocations(event.target.value);\r\n    };\r\n\r\n    const handleChangeTechnics = (event) => {\r\n        setselectedTechnics(event.target.value);\r\n    };\r\n\r\n    const blurTitle = (event) => {\r\n        setTitleText(event.target.value);\r\n    };\r\n\r\n    const handleDateChange = date => {\r\n        setSelectedDate(date);\r\n    };\r\n\r\n    const changeContent = (state) => {\r\n        const currCont = state.getCurrentContent();\r\n        const convert = convertToRaw(currCont);\r\n        const content = JSON.stringify(convert);\r\n        if (prevContentText !== content) {\r\n            setPrevContentText(content);\r\n        }\r\n    };\r\n\r\n    const savepost = () => {\r\n        setIsLoading(true);\r\n        let havErr = false;\r\n        let errorMessage = '';\r\n        if (typeof (titleText) !== 'undefined') {\r\n            if (titleText.length === 0) {\r\n                errorMessage = lang.currLang.errors.EmptyTitle;\r\n                havErr = true;\r\n            }\r\n        }\r\n        else {\r\n            errorMessage = lang.currLang.errors.EmptyTitle;\r\n            havErr = true;\r\n        }\r\n        if (typeof (prevContentText) !== 'undefined') {\r\n            if (JSON.parse(prevContentText).blocks[0].text.length === 0) {\r\n                errorMessage = lang.currLang.errors.EmptyDream;\r\n                havErr = true;\r\n            }\r\n        }\r\n        else {\r\n            errorMessage = lang.currLang.errors.EmptyDream;\r\n            havErr = true;\r\n        }\r\n        if (havErr) {\r\n            setSnackbar({\r\n                type: SET_SNACKBAR_MODE,\r\n                snackbar: {\r\n                    open: true,\r\n                    variant: 'error',\r\n                    message: errorMessage,\r\n                },\r\n            });\r\n            setIsLoading(false);\r\n        }\r\n        else {\r\n            if (isEditMode) {\r\n                let hasChanges = false;\r\n                let postData = {\r\n                    post_id: props.location.defaultData.post_id,\r\n                };\r\n\r\n                if (props.location.defaultData.post_title !== titleText) {\r\n                    postData.title = titleText;\r\n                    hasChanges = true;\r\n                }\r\n\r\n                if (props.location.defaultData.dream_date.getTime() !== selectedDate.getTime()) {\r\n                    postData.dreamDate = selectedDate.toLocaleString(\"ru-RU\", { timeZone: 'Europe/London' });\r\n                    hasChanges = true;\r\n                }\r\n\r\n                if (props.location.defaultData.post_content !== prevContentText) {\r\n                    postData.content = prevContentText;\r\n                    hasChanges = true;\r\n                }\r\n\r\n                if (props.location.defaultData.rating !== realisticsValue) {\r\n                    postData.rating = realisticsValue;\r\n                    hasChanges = true;\r\n                }\r\n\r\n                if (!areArraysEqualSets(defaultTechnics, selectedTechnics)) {\r\n                    hasChanges = true;\r\n                    let deleteTechnics = defaultTechnics.filter(item1 =>\r\n                        !selectedTechnics.some(item2 => (\r\n                            item2 === item1)\r\n                        )\r\n                    );\r\n                    let addTechnics = selectedTechnics.filter(item1 =>\r\n                        !defaultTechnics.some(item2 => (\r\n                            item2 === item1)\r\n                        )\r\n                    );\r\n                    if (addTechnics.length > 0) {\r\n                        let add = {};\r\n                        addTechnics.map((item, key) => (\r\n                            add[key] = item\r\n                        ));\r\n                        postData.technics = { ...postData.technics, add: add };\r\n                    }\r\n                    if (deleteTechnics.length > 0) {\r\n                        let remove = {};\r\n                        deleteTechnics.map((item, key) => (\r\n                            remove[key] = item\r\n                        ));\r\n                        postData.technics = { ...postData.technics, remove: remove };\r\n                    }\r\n                }\r\n\r\n                if (!areArraysEqualSets(defaultTags, selectedLocations)) {\r\n                    hasChanges = true;\r\n                    let deleteTags = defaultTags.filter(item1 =>\r\n                        !selectedLocations.some(item2 => (\r\n                            item2 === item1)\r\n                        )\r\n                    );\r\n                    let addTags = selectedLocations.filter(item1 =>\r\n                        !defaultTags.some(item2 => (\r\n                            item2 === item1)\r\n                        )\r\n                    );\r\n                    if (addTags.length > 0) {\r\n                        let add = {};\r\n                        addTags.map((item, key) => (\r\n                            add[key] = item\r\n                        ));\r\n                        postData.tags = { ...postData.tags, add: add };\r\n                    }\r\n                    if (deleteTags.length > 0) {\r\n                        let remove = {};\r\n                        deleteTags.map((item, key) => (\r\n                            remove[key] = item\r\n                        ));\r\n                        postData.tags = { ...postData.tags, remove: remove };\r\n                    }\r\n                }\r\n\r\n                if (hasChanges) {\r\n                    instance\r\n                        .post('/actions/users/updatepost', postData)\r\n                        .then(res => {\r\n                            setIsLoading(false);\r\n                            history.push(\"/dreams\")\r\n                        })\r\n                        .catch(err => {\r\n                            console.log(err);\r\n                            setIsLoading(false);\r\n                        });\r\n                }\r\n                else {\r\n                    setSnackbar({\r\n                        type: SET_SNACKBAR_MODE,\r\n                        snackbar: {\r\n                            open: true,\r\n                            variant: 'error',\r\n                            message: lang.currLang.errors.NoChanges,\r\n                        },\r\n                    });\r\n                    setIsLoading(false);\r\n                }\r\n            }\r\n            else {\r\n                let postData = {\r\n                    title: titleText,\r\n                    dreamDate: selectedDate.toLocaleString(\"ru-RU\", { timeZone: 'Europe/London' }),\r\n                    content: prevContentText,\r\n                    create_user: auth.user.id,\r\n                    rating: realisticsValue,\r\n                    post_type: 1,\r\n                    nickname: auth.user.nickname,\r\n                    tags: selectedLocations,\r\n                    technics: selectedTechnics\r\n                }\r\n\r\n                instance\r\n                    .post('/actions/users/createpost', postData)\r\n                    .then(res => {\r\n                        setIsLoading(false);\r\n                        history.push(\"/luciddreams\")\r\n                    })\r\n                    .catch(err => {\r\n                        setIsLoading(false);\r\n                    });\r\n            }\r\n        }\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        instance.get(\"/gettags\")\r\n            .then(res => {\r\n                setLocations(res.data);\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            });\r\n        instance.get(\"/gettechnics\")\r\n            .then(res => {\r\n                setTechnics(res.data);\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            });\r\n\r\n        if (typeof (props.location.defaultData) !== 'undefined') {\r\n            setIsEditMode(true);\r\n            defaultTechnics = [];\r\n            defaultTags = [];\r\n            const { post_title, dream_date, post_content, technics, tags, rating } = props.location.defaultData;\r\n            setTitleText(post_title);\r\n            setSelectedDate(dream_date);\r\n            setContentText(post_content);\r\n            setPrevContentText(post_content);\r\n\r\n            if (typeof tags[0][0] === 'string') {\r\n                lang.currLang.current === \"Ru\"\r\n                    ? tags.map(item => defaultTags.push(item[1]))\r\n                    : tags.map(item => defaultTags.push(item[2]));\r\n                setselectedLocations(defaultTags);\r\n            }\r\n\r\n            if (typeof technics[0][0] === 'string') {\r\n                lang.currLang.current === \"Ru\"\r\n                    ? technics.map(item => defaultTechnics.push(item[1]))\r\n                    : technics.map(item => defaultTechnics.push(item[2]));\r\n                setselectedTechnics(defaultTechnics);\r\n            }\r\n\r\n            setRealisticsValue(rating);\r\n        }\r\n    }, [props.location.defaultData, lang.currLang]);\r\n\r\n    return (\r\n        <MuiThemeProvider theme={muiTheme}>\r\n            <CssBaseline />\r\n            <div className={classes.root} >\r\n                <Grid className={classes.mainGridContainer}\r\n                    container\r\n                    direction=\"column\"\r\n                    justify=\"center\"\r\n                    alignItems=\"stretch\" >\r\n                    <Grid item xs={11} className={classes.mainGridBodyItem}>\r\n                        <Paper className={classes.paper}>\r\n                            <Grid className={classes.mainGridContainer}\r\n                                style={{ flexWrap: 'nowrap' }}\r\n                                container\r\n                                direction=\"column\"\r\n                                justify=\"center\"\r\n                                alignItems=\"center\"\r\n                            >\r\n                                <Grid item xs={2} className={classes.fullMinWidth} >\r\n                                    <TextField className={classes.inputDiv}\r\n                                        required\r\n                                        id=\"outlined-required\"\r\n                                        value={titleText}\r\n                                        label={lang.currLang.texts.title}\r\n                                        variant=\"outlined\"\r\n                                        onChange={(e) => { blurTitle(e) }}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={1} className={classes.fullMinWidth} >\r\n                                    <MuiPickersUtilsProvider utils={DateFnsUtils}\r\n                                        locale={lang.currLang.current === \"Ru\"\r\n                                            ? ruLocale\r\n                                            : enLocale}\r\n                                    >\r\n                                        <Grid className={classes.pickerGridContainer}\r\n                                            container\r\n                                            direction=\"row\"\r\n                                            justify=\"center\"\r\n                                            alignItems=\"stretch\" >\r\n                                            <Grid item xs={7} >\r\n                                                <KeyboardDatePicker className={classes.pickers}\r\n                                                    id=\"date-picker-dialog\"\r\n                                                    label={lang.currLang.texts.pickDate}\r\n                                                    format=\"dd.MM.yyyy\"\r\n                                                    value={selectedDate}\r\n                                                    onChange={handleDateChange}\r\n                                                    KeyboardButtonProps={{\r\n                                                        'aria-label': 'change date',\r\n                                                    }}\r\n                                                />\r\n                                            </Grid>\r\n                                            <Grid item xs={5} >\r\n                                                <KeyboardTimePicker className={classes.pickers}\r\n                                                    id=\"time-picker\"\r\n                                                    label={lang.currLang.texts.pickTime}\r\n                                                    value={selectedDate}\r\n                                                    onChange={handleDateChange}\r\n                                                    ampm={false}\r\n                                                    KeyboardButtonProps={{\r\n                                                        'aria-label': 'change time',\r\n                                                    }}\r\n                                                />\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </MuiPickersUtilsProvider>\r\n                                </Grid>\r\n                                <Grid item xs={4} className={classes.fullMinWidth} >\r\n                                    <div className={classes.inputScrollableDiv}>\r\n                                        <MUIRichTextEditor\r\n                                            value={contentText}\r\n                                            onChange={changeContent}\r\n                                            label={lang.currLang.texts.content}\r\n                                            inlineToolbar={false}\r\n                                            controls={[\r\n                                                \"bold\",\r\n                                                \"italic\",\r\n                                                \"underline\",\r\n                                                \"strikethrough\",\r\n                                                \"colorfill\",\r\n                                            ]}\r\n                                            customControls={[\r\n                                                {\r\n                                                    name: \"colorfill\",\r\n                                                    icon: <FormatColorFillIcon />,\r\n                                                    type: \"inline\",\r\n                                                    inlineStyle: {\r\n                                                        backgroundColor: \"yellow\",\r\n                                                        color: \"black\"\r\n                                                    }\r\n                                                }\r\n                                            ]}\r\n                                        />\r\n                                    </div>\r\n                                </Grid>\r\n                                <Grid item xs={2} className={classes.fullMinWidth} >\r\n                                    <FormControl className={classes.inputDiv}>\r\n                                        <InputLabel id=\"technics-chip-label\">\r\n                                            {lang.currLang.texts.technics}\r\n                                        </InputLabel>\r\n                                        <Select\r\n                                            labelId=\"technics-chip-label\"\r\n                                            id=\"technics-chip\"\r\n                                            multiple\r\n                                            value={selectedTechnics}\r\n                                            onChange={handleChangeTechnics}\r\n                                            input={\r\n                                                <Input id=\"select-technics-chip\" />\r\n                                            }\r\n                                            renderValue={selected =>\r\n                                                (\r\n                                                    <div className={classes.chips}>\r\n                                                        {selected.map(value => (\r\n                                                            <Chip\r\n                                                                size=\"small\"\r\n                                                                key={value}\r\n                                                                label={value}\r\n                                                                className={classes.chip}\r\n                                                            />\r\n                                                        ))}\r\n                                                    </div>\r\n                                                )\r\n                                            }\r\n                                            MenuProps={MenuProps}\r\n                                        >\r\n                                            {Object.keys(technics)\r\n                                                .map(item =>\r\n                                                    <MenuItem\r\n                                                        key={technics[item].id + ' chip'}\r\n                                                        value={\r\n                                                            lang.currLang.current === \"Ru\"\r\n                                                                ? technics[item].name_rus\r\n                                                                : technics[item].name_eng\r\n                                                        }\r\n                                                        style={getStyles(technics[item].name_eng, selectedTechnics, theme)}\r\n                                                    >\r\n                                                        {lang.currLang.current === \"Ru\"\r\n                                                            ? technics[item].name_rus\r\n                                                            : technics[item].name_eng}\r\n                                                    </MenuItem>\r\n                                                )}\r\n                                        </Select>\r\n                                    </FormControl>\r\n                                </Grid>\r\n                                <Grid item xs={2} className={classes.fullMinWidth} >\r\n                                    <FormControl className={classes.inputDiv}>\r\n                                        <InputLabel id=\"location-chip-label\">\r\n                                            {lang.currLang.texts.tags}\r\n                                        </InputLabel>\r\n                                        <Select\r\n                                            labelId=\"location-chip-label\"\r\n                                            id=\"location-chip\"\r\n                                            multiple\r\n                                            value={selectedLocations}\r\n                                            onChange={handleChangeLocations}\r\n                                            input={\r\n                                                <Input id=\"select-location-chip\" />\r\n                                            }\r\n                                            renderValue={selected =>\r\n                                                (\r\n                                                    <div className={classes.chips}>\r\n                                                        {selected.map(value => (\r\n                                                            <Chip\r\n                                                                size=\"small\"\r\n                                                                avatar={\r\n                                                                    locations.length\r\n                                                                        ? lang.currLang.current === \"Ru\"\r\n                                                                            ? < Avatar\r\n                                                                                alt={locations.find(locations => locations.name_rus === value).name_eng}\r\n                                                                                src={locations.find(locations => locations.name_rus === value).img_url}\r\n                                                                            />\r\n                                                                            : < Avatar\r\n                                                                                alt={locations.find(locations => locations.name_eng === value).name_eng}\r\n                                                                                src={locations.find(locations => locations.name_eng === value).img_url}\r\n                                                                            />\r\n                                                                        : null\r\n                                                                }\r\n\r\n                                                                key={value}\r\n                                                                label={value}\r\n                                                                className={classes.chip}\r\n                                                            />\r\n                                                        ))}\r\n                                                    </div>\r\n                                                )\r\n                                            }\r\n                                            MenuProps={MenuProps}\r\n                                        >\r\n                                            {Object.keys(locations)\r\n                                                .map(item =>\r\n                                                    <MenuItem\r\n                                                        key={locations[item].id + ' chip'}\r\n                                                        value={\r\n                                                            lang.currLang.current === \"Ru\"\r\n                                                                ? locations[item].name_rus\r\n                                                                : locations[item].name_eng\r\n                                                        }\r\n                                                        style={getStyles(locations[item].name_eng, selectedLocations, theme)}\r\n                                                    >\r\n                                                        {lang.currLang.current === \"Ru\"\r\n                                                            ? locations[item].name_rus\r\n                                                            : locations[item].name_eng}\r\n                                                    </MenuItem>\r\n                                                )}\r\n                                        </Select>\r\n                                    </FormControl>\r\n                                </Grid>\r\n                                <Grid item xs={1} className={classes.fullMinWidth} >\r\n                                    <div className={classes.div85width}>\r\n                                        <Grid className={classes.ratingGridContainer}\r\n                                            container\r\n                                            direction=\"row\"\r\n                                            justify=\"center\"\r\n                                            alignItems=\"stretch\" >\r\n                                            <Grid item xs={6}>\r\n                                                <Typography component=\"legend\">\r\n                                                    {lang.currLang.texts.rating} :\r\n                                                </Typography>\r\n                                            </Grid>\r\n                                            <Grid item xs={6}>\r\n                                                <Rating name=\"simple-controlled\"\r\n                                                    value={realisticsValue}\r\n                                                    onChange={handleChangeRealistics}\r\n                                                />\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </div>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Paper>\r\n                    </Grid>\r\n                    <Grid item xs={1} className={classes.mainGridBodyItem} >\r\n                        {isLoading\r\n                            ? <LinearProgress />\r\n                            : <Grid\r\n                                container\r\n                                direction=\"row\"\r\n                                justify=\"space-evenly\"\r\n                                alignItems=\"center\"\r\n                            >\r\n                                <Grid item>\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        color=\"secondary\"\r\n                                        className={classes.actionButton}\r\n                                        onClick={() => {\r\n                                            isEditMode\r\n                                                ? history.push(\"/dreams\")\r\n                                                : history.push(\"/luciddreams\")\r\n                                        }}\r\n                                    >\r\n                                        {lang.currLang.buttons.close}\r\n                                    </Button>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        color=\"primary\"\r\n                                        className={classes.actionButton}\r\n                                        onClick={() => savepost()}\r\n                                    >\r\n                                        {isEditMode\r\n                                            ? lang.currLang.buttons.Save\r\n                                            : lang.currLang.buttons.add\r\n                                        }\r\n                                    </Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                        }\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </MuiThemeProvider >\r\n    );\r\n};\r\n\r\nAddCDream.propTypes = {\r\n    setSnackbar: PropTypes.func.isRequired,\r\n    themeMode: PropTypes.object.isRequired,\r\n    lang: PropTypes.object.isRequired,\r\n    auth: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        themeMode: store.themeMode,\r\n        lang: store.lang,\r\n        auth: store.auth,\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setSnackbar: snackbar => dispatch(setSnackbar(snackbar)),\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(AddCDream);","import React from 'react';\r\nimport clsx from \"clsx\";\r\nimport MUIRichTextEditor from 'mui-rte';\r\nimport { EditorState, convertFromRaw } from 'draft-js';\r\n\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport CardHeader from \"@material-ui/core/CardHeader\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Collapse from \"@material-ui/core/Collapse\";\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Button from '@material-ui/core/Button';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Card from \"@material-ui/core/Card\";\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport Menu from '@material-ui/core/Menu';\r\n\r\nimport Rating from \"@material-ui/lab/Rating\";\r\n\r\nimport FormatColorFillIcon from '@material-ui/icons/FormatColorFill';\r\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport Visibility from '@material-ui/icons/Visibility';\r\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\n\r\nimport { useStyles } from '../../styles/Styles';\r\n\r\nimport { instance } from '../Config';\r\n\r\nexport default function DreamCard(props) {\r\n    const classes = useStyles();\r\n    const { post_id, post_title, post_content, post_type, tags, technics, rating, dream_date, is_public } = props.item;\r\n    const { lang, palette, history } = props;\r\n    const [expanded, setExpanded] = React.useState(false);\r\n    const [anchorEl, setAnchorEl] = React.useState(null);\r\n    const [openAlert, setOpenAlert] = React.useState(false);\r\n    const [publicChecked, setPublicChecked] = React.useState(false);\r\n    const [alertTexts, setAlertTexts] = React.useState({\r\n        header: '',\r\n        body: '',\r\n        commit: '',\r\n        action: '',\r\n    });\r\n\r\n    const dateOfDream = new Date(dream_date).getDate() + '.' + (new Date(dream_date).getMonth() + 1) + '.' + new Date(dream_date).getFullYear() + ' ' + new Date(dream_date).getHours() + ':' + (\"0\" + new Date(dream_date).getMinutes()).slice(-2);\r\n    const srcContent = post_content.toString();\r\n    const jsonPparse = JSON.parse(srcContent);\r\n    const convertfromraw = convertFromRaw(jsonPparse);\r\n    const text_content = EditorState.createWithContent(convertfromraw).getCurrentContent().getPlainText('');\r\n\r\n    React.useEffect(() => {\r\n        is_public === 1\r\n            ? setPublicChecked(true)\r\n            : setPublicChecked(false);\r\n    }, [is_public]);\r\n\r\n    const openMenu = event => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const closeMenu = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    const clickMenu = (action, event) => {\r\n        let newAlertTexts = alertTexts;\r\n        switch (action) {\r\n            case 'public':\r\n                if (event.target.checked) {\r\n                    newAlertTexts = { ...newAlertTexts, header: lang.currLang.texts.PublicAlert };\r\n                    newAlertTexts = { ...newAlertTexts, body: lang.currLang.texts.PublicText };\r\n                    newAlertTexts = { ...newAlertTexts, commit: lang.currLang.texts.Publish };\r\n                    newAlertTexts = { ...newAlertTexts, action: 'publicOk' };\r\n                    setAlertTexts(newAlertTexts);\r\n                }\r\n                else {\r\n                    newAlertTexts = { ...newAlertTexts, header: lang.currLang.texts.UnpublicAlert };\r\n                    newAlertTexts = { ...newAlertTexts, body: lang.currLang.texts.UnpublicText };\r\n                    newAlertTexts = { ...newAlertTexts, commit: lang.currLang.texts.Unpublish };\r\n                    newAlertTexts = { ...newAlertTexts, action: 'publicOk' };\r\n                    setAlertTexts(newAlertTexts);\r\n                }\r\n                setOpenAlert(true);\r\n                closeMenu();\r\n                break;\r\n\r\n            case 'edit':\r\n                closeMenu();\r\n                if (post_type === 0) {\r\n                    history.push({\r\n                        pathname: \"/addregulardream\",\r\n                        defaultData: {\r\n                            post_id: post_id,\r\n                            post_title: post_title,\r\n                            dream_date: new Date(dream_date),\r\n                            post_content: post_content,\r\n                            tags: tags,\r\n                        }\r\n                    });\r\n                }\r\n                else if (post_type === 1) {\r\n                    history.push({\r\n                        pathname: \"/addcdream\",\r\n                        defaultData: {\r\n                            post_id: post_id,\r\n                            post_title: post_title,\r\n                            dream_date: new Date(dream_date),\r\n                            post_content: post_content,\r\n                            tags: tags,\r\n                            technics: technics,\r\n                            rating: rating,\r\n                        }\r\n                    });\r\n                }\r\n                break;\r\n\r\n            case 'delete':\r\n                newAlertTexts = { ...newAlertTexts, header: lang.currLang.texts.DeleteAlert };\r\n                newAlertTexts = { ...newAlertTexts, body: lang.currLang.texts.DeleteText };\r\n                newAlertTexts = { ...newAlertTexts, commit: lang.currLang.buttons.Delete };\r\n                newAlertTexts = { ...newAlertTexts, action: 'deleteOk' };\r\n                setAlertTexts(newAlertTexts);\r\n                closeMenu();\r\n                setOpenAlert(true);\r\n                break;\r\n\r\n            case 'closeAlert':\r\n                setOpenAlert(false);\r\n                break;\r\n\r\n            case 'deleteOk':\r\n                const postData = {\r\n                    post_id: post_id\r\n                };\r\n                instance\r\n                    .post('/actions/users/deletepost', postData)\r\n                    .then(res => {\r\n                        //TODO ADD LOADER\r\n                        closeMenu();\r\n                        setOpenAlert(false);\r\n                        props.loadPosts();\r\n                    })\r\n                    .catch(err => {\r\n                        alert('Cant delete post!');\r\n                        closeMenu();\r\n                        setOpenAlert(false);\r\n                    });\r\n                break;\r\n\r\n            case 'publicOk':\r\n                closeMenu();\r\n                setOpenAlert(false);\r\n                if (publicChecked) {\r\n                    const postData = {\r\n                        post_id: post_id,\r\n                        newPublic: 0\r\n                    };\r\n                    instance\r\n                        .post('/actions/users/updatepost', postData)\r\n                        .then(res => {\r\n                            setPublicChecked(false);\r\n                        })\r\n                        .catch(err => {\r\n                            setPublicChecked(true);\r\n                        });\r\n                }\r\n                else {\r\n                    const postData = {\r\n                        post_id: post_id,\r\n                        newPublic: 1,\r\n                    };\r\n                    instance\r\n                        .post('/actions/users/updatepost', postData)\r\n                        .then(res => {\r\n                            setPublicChecked(true);\r\n                        })\r\n                        .catch(err => {\r\n                            setPublicChecked(false);\r\n                        });\r\n                }\r\n                break;\r\n\r\n            default:\r\n                console.log('Command not found');\r\n                break;\r\n        }\r\n    };\r\n\r\n    const handleExpandClick = () => {\r\n        setExpanded(!expanded);\r\n    };\r\n\r\n    return (\r\n        <Grid item xs={12}\r\n            style={{\r\n                marginTop: '15px',\r\n                marginBottom: '15px',\r\n                width: '100%',\r\n                height: 'auto',\r\n                borderRadius: '4px',\r\n            }}>\r\n\r\n            <Dialog\r\n                open={openAlert}\r\n                onClose={() => clickMenu('closeAlert')}\r\n                aria-labelledby=\"alert-dialog-title\"\r\n                aria-describedby=\"alert-dialog-description\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-title\" >\r\n                    {alertTexts.header}\r\n                </DialogTitle>\r\n                <DialogContent >\r\n                    <DialogContentText id=\"alert-dialog-description\" >\r\n                        {alertTexts.body}\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => clickMenu('closeAlert')}\r\n                        color=\"secondary\">\r\n                        {lang.currLang.buttons.cancel}\r\n                    </Button>\r\n                    <Button onClick={() => clickMenu(alertTexts.action)}\r\n                        color=\"primary\" autoFocus>\r\n                        {alertTexts.commit}\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Menu id=\"simple-menu\"\r\n                anchorEl={anchorEl}\r\n                keepMounted\r\n                open={Boolean(anchorEl)}\r\n                onClose={closeMenu}>\r\n\r\n                <MenuItem >\r\n                    <ListItemIcon>\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Checkbox\r\n                                    onChange={(e) => clickMenu('public', e)}\r\n                                    checked={publicChecked}\r\n                                    value=\"checkedB\"\r\n                                    color=\"primary\"\r\n                                />\r\n                            }\r\n                        />\r\n                    </ListItemIcon>\r\n                    {lang.currLang.texts.Public}\r\n                </MenuItem>\r\n\r\n                <MenuItem onClick={() => clickMenu('edit')}>\r\n                    <ListItemIcon>\r\n                        <EditIcon fontSize=\"small\" />\r\n                    </ListItemIcon>\r\n                    {lang.currLang.buttons.Edit}\r\n                </MenuItem>\r\n\r\n                <MenuItem onClick={() => clickMenu('delete')}>\r\n                    <ListItemIcon>\r\n                        <EditIcon fontSize=\"small\" />\r\n                    </ListItemIcon>\r\n                    {lang.currLang.buttons.Delete}\r\n                </MenuItem>\r\n\r\n            </Menu>\r\n\r\n            <Card raised={false}\r\n                className={classes.card}>\r\n                <CardHeader\r\n                    title={post_title}\r\n                    subheader={dateOfDream}\r\n                    action={\r\n                        <IconButton\r\n                            aria-label=\"settings\"\r\n                            onClick={(e) => openMenu(e)}\r\n                        >\r\n                            <MoreVertIcon />\r\n                        </IconButton>\r\n                    }\r\n                />\r\n                <CardContent>\r\n                    <div className={classes.avatarRoot}>\r\n                        <div style={{ padding: '12px', }}>\r\n                            {publicChecked\r\n                                ? <Tooltip\r\n                                    disableFocusListener\r\n                                    disableTouchListener\r\n                                    title={lang.currLang.texts.PublicDescription}\r\n                                >\r\n                                    <Visibility />\r\n                                </Tooltip>\r\n                                : <Tooltip\r\n                                    disableFocusListener\r\n                                    disableTouchListener\r\n                                    title={lang.currLang.texts.UnpublicDescription}\r\n                                >\r\n                                    <VisibilityOff />\r\n                                </Tooltip>\r\n                            }\r\n                        </div>\r\n                        <Chip variant=\"outlined\"\r\n                            label={\r\n                                post_type === 0\r\n                                    ? lang.currLang.texts.Dream\r\n                                    : lang.currLang.texts.Cdream\r\n                            }\r\n                        />\r\n                        {technics.map((technic, key) =>\r\n                            technic[0]\r\n                                ? <Chip className={classes.smallChip}\r\n                                    key={key}\r\n                                    label={lang.currLang.current === \"Ru\"\r\n                                        ? technic[1]\r\n                                        : technic[2]}\r\n                                />\r\n                                : ''\r\n                        )}\r\n                    </div>\r\n                    <div className={classes.avatarRoot}>\r\n                        {tags.map((tag, key) =>\r\n                            tag[0]\r\n                                ? <Tooltip key={key}\r\n                                    disableFocusListener\r\n                                    disableTouchListener\r\n                                    title={\r\n                                        lang.currLang.current === \"Ru\"\r\n                                            ? tag[1]\r\n                                            : tag[2]\r\n                                    }\r\n                                >\r\n                                    <Avatar className={classes.smallAvatar}\r\n                                        alt=\"Remy Sharp\"\r\n                                        src={tag[3]}\r\n                                        style={palette.type === 'dark'\r\n                                            ? {\r\n                                                filter: 'invert(1)',\r\n                                            }\r\n                                            : {\r\n\r\n                                            }}\r\n                                    />\r\n                                </Tooltip>\r\n                                : ''\r\n                        )}\r\n                    </div>\r\n                </CardContent>\r\n                <CardActions disableSpacing={true}>\r\n                    <Typography\r\n                        noWrap={expanded\r\n                            ? false\r\n                            : true\r\n                        }\r\n                        variant='body2'\r\n                        style={{ padding: '12px', }}\r\n                    >\r\n                        {expanded\r\n                            ? lang.currLang.texts.TapToShow\r\n                            : text_content\r\n                        }\r\n                    </Typography>\r\n\r\n                    <IconButton\r\n                        className={clsx(classes.expand, {\r\n                            [classes.expandOpen]: expanded\r\n                        })}\r\n                        onClick={handleExpandClick}\r\n                        aria-expanded={expanded}\r\n                        aria-label=\"show more\"\r\n                    >\r\n                        <ExpandMoreIcon />\r\n                    </IconButton>\r\n                </CardActions>\r\n                <Collapse in={expanded}\r\n                    timeout=\"auto\"\r\n                    unmountOnExit >\r\n                    <CardContent>\r\n                        <Paper className={classes.contentPaper}>\r\n                            <MUIRichTextEditor\r\n                                controls={[\r\n                                    \"bold\",\r\n                                    \"italic\",\r\n                                    \"underline\",\r\n                                    \"strikethrough\",\r\n                                    \"colorfill\",\r\n                                ]}\r\n                                customControls={[\r\n                                    {\r\n                                        name: \"colorfill\",\r\n                                        icon: <FormatColorFillIcon />,\r\n                                        type: \"inline\",\r\n                                        inlineStyle: {\r\n                                            backgroundColor: \"yellow\",\r\n                                            color: \"black\"\r\n                                        }\r\n                                    }\r\n                                ]}\r\n                                readOnly={true}\r\n                                toolbar={false}\r\n                                value={post_content}\r\n                            />\r\n                        </Paper>\r\n                        {post_type === 0\r\n                            ? ''\r\n                            :\r\n                            <Grid style={{ paddingTop: '10px', }}\r\n                                container\r\n                                direction=\"row\"\r\n                                justify=\"center\"\r\n                                alignItems=\"stretch\" >\r\n                                <Grid item xs={6}>\r\n                                    <Typography component=\"legend\" variant='body2'>\r\n                                        {lang.currLang.texts.rating}:\r\n                                    </Typography>\r\n                                </Grid>\r\n                                <Grid item xs={6}>\r\n                                    <Rating name=\"simple-controlled\"\r\n                                        value={rating}\r\n                                        readOnly\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n                        }\r\n                    </CardContent>\r\n                </Collapse>\r\n            </Card>\r\n        </Grid>\r\n    );\r\n}","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Button from '@material-ui/core/Button';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\n\r\nimport DreamCard from './muiltiple/DreamCard';\r\nimport { useStyles } from '../styles/Styles';\r\nimport { instance } from './Config';\r\n\r\nfunction ViewDreams(props) {\r\n    const { lang, themeMode, history, auth } = props;\r\n    const muiTheme = createMuiTheme(themeMode);\r\n    const classes = useStyles();\r\n    const [isLoading, setIsLoading] = React.useState(true);\r\n    const [dreams, setDreams] = React.useState([]);\r\n\r\n    const loadPosts = React.useCallback(() => {\r\n        setIsLoading(true);\r\n        instance.post(\"/actions/users/getuserposts\", { id: auth.user.id })\r\n            .then(res => {\r\n                setDreams(res.data);\r\n                setIsLoading(false);\r\n            })\r\n            .catch(err => {\r\n                setIsLoading(false);\r\n            });\r\n    }, [auth.user.id]);\r\n\r\n    React.useEffect(() => {\r\n        loadPosts();\r\n    }, [loadPosts]);\r\n\r\n    return (\r\n        <MuiThemeProvider theme={muiTheme}>\r\n            <CssBaseline />\r\n            <div className={classes.root}>\r\n                <Grid className={classes.mainGridContainer}\r\n                    container\r\n                    direction=\"column\"\r\n                    justify=\"center\"\r\n                    alignItems=\"stretch\" >\r\n                    <Grid item xs={11} zeroMinWidth className={classes.mainGridDreamsBodyItem}>\r\n                        {isLoading\r\n                            ? <div className={classes.centerCircularProgress}>\r\n                                <CircularProgress disableShrink />\r\n                            </div>\r\n                            : <Container className={classes.mainGridDreamsBodyItemContainer}>\r\n                                <Paper className={classes.mainGridDreamsBodyItemContainerPaper}>\r\n                                    {dreams.length !== 0\r\n                                        ? <Grid className={classes.mainGridDreamsContainer}\r\n                                            container\r\n                                            direction=\"column\"\r\n                                            justify=\"center\"\r\n                                            alignItems=\"stretch\"\r\n                                        >\r\n                                            {dreams.map((item, key) => (\r\n                                                <DreamCard\r\n                                                    item={item}\r\n                                                    key={key}\r\n                                                    lang={lang}\r\n                                                    palette={themeMode.palette}\r\n                                                    history={history}\r\n                                                    loadPosts={loadPosts}\r\n                                                />\r\n                                            ))}\r\n                                        </Grid>\r\n                                        :\r\n                                        <div>\r\n                                            <div\r\n                                                style={{\r\n                                                    position: \"relative\",\r\n                                                    left: \"50%\",\r\n                                                    transform: \"translateX(-50%)\",\r\n                                                    width: 200,\r\n                                                    height: 100,\r\n                                                }}\r\n                                            >\r\n                                            </div>\r\n                                            <div\r\n                                                style={{\r\n                                                    position: \"relative\",\r\n                                                    left: \"50%\",\r\n                                                    transform: \"translateX(-50%)\",\r\n                                                    width: 200,\r\n                                                    height: 200,\r\n                                                    background: \"url('https://static.thenounproject.com/png/603669-200.png') no-repeat center\",\r\n                                                }}>\r\n                                            </div>\r\n                                            <div\r\n                                                style={{\r\n                                                    position: \"relative\",\r\n                                                    left: \"50%\",\r\n                                                    transform: \"translateX(-50%)\",\r\n                                                    width: 200,\r\n                                                    height: 100,\r\n                                                    textAlign: \"center\",\r\n                                                }}\r\n                                            >\r\n                                                <Typography>\r\n                                                    {lang.currLang.texts.NoDreams}\r\n                                                </Typography>\r\n                                            </div>\r\n                                        </div>\r\n                                    }\r\n                                </Paper>\r\n                            </Container>\r\n                        }\r\n                    </Grid>\r\n                    <Grid item xs={1} zeroMinWidth className={classes.mainGridBodyItem}>\r\n                        <Grid\r\n                            container\r\n                            direction=\"row\"\r\n                            justify=\"space-evenly\"\r\n                            alignItems=\"center\"\r\n                            spacing={1}\r\n                        >\r\n                            <Grid item xs={6} align=\"center\">\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    color=\"secondary\"\r\n                                    className={classes.actionButton}\r\n                                    onClick={() => { history.push(\"/luciddreams\") }}\r\n                                >\r\n                                    {lang.currLang.buttons.close}\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid item xs={6} />\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </MuiThemeProvider >\r\n    );\r\n}\r\n\r\nViewDreams.propTypes = {\r\n    themeMode: PropTypes.object.isRequired,\r\n    lang: PropTypes.object.isRequired,\r\n    auth: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        themeMode: store.themeMode,\r\n        lang: store.lang,\r\n        auth: store.auth,\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(ViewDreams);","const words = {\r\n    current: 'Ru',\r\n    buttons: {\r\n        signIn: 'Вход',\r\n        signUp: 'Регистрация',\r\n        dreamJoirnal: 'Дневник снов',\r\n        addDream: 'Добавить сон',\r\n        addCDream: 'Добавить осознанный сон',\r\n        techniques: 'Техники',\r\n        adventures: 'Приключения',\r\n        close: 'Назад',\r\n        about: 'О нас',\r\n        cancel: 'Отмена',\r\n        add: 'Добавить',\r\n        Edit: 'Изменить',\r\n        Delete: 'Удалить',\r\n        Save: 'Сохранить',\r\n    },\r\n    texts: {\r\n        about: 'О нас О нас О нас О нас О нас О нас О нас О нас О нас О нас О нас О нас',\r\n        or: 'ИЛИ',\r\n        nickname: 'Отображаемое имя',\r\n        password: 'Пароль',\r\n        passwordAgain: 'Поторите пароль',\r\n        cancel: 'Отмена',\r\n        sucessRegistration: 'Вы успешно зарегистрировались',\r\n        hello: 'Привет, ',\r\n        changleLanguage: 'Сохранить изменение языка на ',\r\n        success: 'Успешно',\r\n        title: 'Заголовок',\r\n        content: 'Что снилось',\r\n        tags: 'Места',\r\n        technics: 'Техники',\r\n        rating: 'Реалистичность',\r\n        Dream: 'Обычный сон',\r\n        Cdream: 'ОC',\r\n        NoDreams: \"У вас нет снов\",\r\n        pickDate: \"Дата\",\r\n        pickTime: \"Время\",\r\n        TapToShow: \"Нажмите на текст, чтобы отобразить подсвечивание\",\r\n        Public: \"Опубликовано\",\r\n        Publish: \"Опубликовать\",\r\n        Unpublish: \"Скрыть\",\r\n        PublicAlert: \"Вы точно хотите опубликовать сон?\",\r\n        PublicText: \"После публикации ваши друзья смогут прочитать этот сон.\",\r\n        PublicDescription: \"Ваши друзья могут прочитать этот сон\",\r\n        UnpublicAlert: \"Вы точно хотите скрыть сон?\",\r\n        UnpublicText: \"После скрытия ваши друзья не смогут прочитать этот сон.\",\r\n        UnpublicDescription: \"Ваши друзья не могут прочитать этот сон\",\r\n        DeleteAlert: \"Вы точно хотите удалить сон?\",\r\n        DeleteText: \"После удаления сон не получится восстановить. Никогда.\",\r\n    },\r\n    errors: {\r\n        emailLenght: 'Введите email',\r\n        nicknameLenght: 'Введите отображаемое имя',\r\n        passwordLenght: 'Введите пароль',\r\n        password2Lenght: 'Введите пароль',\r\n        passwordsCompare: 'Пароли не совпадают',\r\n        UserNotExist: 'Неверный email или пароль',\r\n        EmailIsNotValid: 'Введен некорректный email',\r\n        IncorrectPassword: 'Неверный email или пароль',\r\n        EmailIsBusy: 'Email занят',\r\n        PasswordLenght5Symbols: 'Длина пароля - больше 5 символов',\r\n        NotLogin: 'Вы не авторизированы',\r\n        EmptyTitle: 'Пустой заголовок',\r\n        EmptyDream: 'Пустое поле сна',\r\n        NoChanges: 'Нет изменений',\r\n    },\r\n};\r\n\r\nexport default words;","import React from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport SnackbarContent from \"@material-ui/core/SnackbarContent\";\r\nimport ButtonBase from '@material-ui/core/ButtonBase';\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport Button from '@material-ui/core/Button';\r\nimport Slide from \"@material-ui/core/Slide\";\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport { SET_THEME_MODE, SET_SNACKBAR_MODE } from \"../actions/types\";\r\n\r\nimport { setCurrLang, setTheme, setSnackbar } from '../actions/Actions';\r\nimport { useStyles } from '../styles/Styles';\r\nimport { instance } from './Config';\r\nimport { CheckTimeOut } from '../utils/CheckLoginTimeOut';\r\n\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\n\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\n\r\nimport RuDict from '../dictionary/ru';\r\nimport EnDict from '../dictionary/en';\r\n\r\nfunction TransitionDown(props) {\r\n    return <Slide {...props} direction=\"down\" />;\r\n}\r\n\r\nfunction MainPage(props) {\r\n    const classes = useStyles();\r\n    const { lang, themeMode, auth, history, setCurrLangAction, setTheme, setSnackbar } = props;\r\n    const muiTheme = createMuiTheme(themeMode);\r\n    const [prevLanguage, setPrevLanguage] = React.useState(undefined);\r\n    const [openLangSnakbar, setOpenLangSnakbar] = React.useState(false);\r\n    const [langSnakbarMessage, setLangSnakbarMessage] = React.useState('');\r\n    const [transition, setTransition] = React.useState(undefined);\r\n\r\n    const switchMode = () => {\r\n        let newPaletteType = themeMode.palette.type === \"light\" ? \"dark\" : \"light\";\r\n        let primaryColor = themeMode.palette.type === \"light\" ? \"#f9a825\" : \"#3f51b5\";\r\n        let secondaryColor = themeMode.palette.type === \"light\" ? \"#f50057\" : \"#f50057\";\r\n        setTheme({\r\n            type: SET_THEME_MODE,\r\n            palette: {\r\n                type: newPaletteType,\r\n                primary: { main: primaryColor },\r\n                secondary: { main: secondaryColor },\r\n            }\r\n        });\r\n    };\r\n\r\n    const onAstronautClick = () => {\r\n        alert('Тут должны перейти на страницу космонафта');\r\n    };\r\n\r\n    const onMapClick = () => {\r\n        alert('Тут должны перейти на страницу карты');\r\n    };\r\n\r\n    const changeLanguage = (language) => {\r\n        if (language !== lang.currLang.current) {\r\n            if (language === 'Ru') {\r\n                setPrevLanguage(lang.currLang.current);\r\n                setCurrLangAction(RuDict);\r\n                setLangSnakbarMessage(language);\r\n                setTransition(() => TransitionDown);\r\n                setOpenLangSnakbar(true);\r\n            }\r\n            if (lang.currLang.current !== 'En') {\r\n                setPrevLanguage(lang.currLang.current);\r\n                setCurrLangAction(EnDict);\r\n                setLangSnakbarMessage(language);\r\n                setTransition(() => TransitionDown);\r\n                setOpenLangSnakbar(true);\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleCloseLangSnakbar = () => {\r\n        switch (prevLanguage) {\r\n            case 'En':\r\n                setCurrLangAction(EnDict);\r\n                break;\r\n            case 'Ru':\r\n                setCurrLangAction(RuDict);\r\n                break;\r\n            default:\r\n                setCurrLangAction(EnDict);\r\n                break;\r\n        }\r\n        setOpenLangSnakbar(false);\r\n    };\r\n\r\n    const handleSaveLangSnakbar = () => {\r\n        let newLang;\r\n        switch (lang.currLang.current) {\r\n            case 'En':\r\n                newLang = 0;\r\n                break;\r\n            case 'Ru':\r\n                newLang = 1;\r\n                break;\r\n            default:\r\n                newLang = 0;\r\n                break;\r\n        }\r\n        let userid = auth.user.id;\r\n        let usernickname = auth.user.nickname;\r\n        let newUserData = {\r\n            language: newLang,\r\n            id: userid,\r\n            nickname: usernickname,\r\n        };\r\n        //Проверка на таймаут\r\n        let check = CheckTimeOut();\r\n        if (check) {\r\n            instance\r\n                .post('/actions/users/updateuserdata', newUserData)\r\n                .then(res => {\r\n                    setSnackbar({\r\n                        type: SET_SNACKBAR_MODE,\r\n                        snackbar: {\r\n                            open: true,\r\n                            variant: 'success',\r\n                            message: lang.currLang.texts.success,\r\n                        },\r\n                    });\r\n                    setOpenLangSnakbar(false);\r\n                })\r\n                .catch(err => {\r\n                    handleCloseLangSnakbar();\r\n                });\r\n\r\n        }\r\n        else {\r\n            setSnackbar({\r\n                type: SET_SNACKBAR_MODE,\r\n                snackbar: {\r\n                    open: true,\r\n                    variant: 'error',\r\n                    message: lang.currLang.errors.NotLogin,\r\n                },\r\n            });\r\n            handleCloseLangSnakbar();\r\n        }\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        let id = {\r\n            id: auth.user.id,\r\n        };\r\n        instance\r\n            .post('/actions/users/getuserdata', id)\r\n            .then(res => {\r\n                res.data.language === 0 ? setCurrLangAction(EnDict) : setCurrLangAction(RuDict);\r\n            })\r\n            .catch(err => {\r\n                auth.user.language === 0 ? setCurrLangAction(EnDict) : setCurrLangAction(RuDict);\r\n            });\r\n        // if (auth.user.times_mode === 0) {\r\n        //     setTheme({\r\n        //         type: SET_THEME_MODE,\r\n        //         palette: {\r\n        //             type: \"dark\",\r\n        //             primary: { main: \"#f9a825\" },\r\n        //             secondary: { main: \"#f50057\" },\r\n        //         }\r\n        //     });\r\n        // }\r\n        // else {\r\n        //     setTheme({\r\n        //         type: SET_THEME_MODE,\r\n        //         palette: {\r\n        //             type: \"light\",\r\n        //             primary: { main: \"#3f51b5\" },\r\n        //             secondary: { main: \"#f50057\" },\r\n        //         }\r\n        //     });\r\n        // }\r\n    }, [classes, setTheme, setCurrLangAction, auth.user.language, auth.user.times_mode, auth.user.id]);\r\n\r\n    return (\r\n        <MuiThemeProvider theme={muiTheme}>\r\n            <CssBaseline />\r\n\r\n            <Snackbar\r\n                anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }}\r\n                key={\"top, center\"}\r\n                open={openLangSnakbar}\r\n                TransitionComponent={transition}\r\n            >\r\n                <SnackbarContent\r\n                    aria-describedby=\"lang-snackbar\"\r\n                    message={\r\n                        <Typography className={classes.mainGridContainer}\r\n                            align='center'\r\n                            id=\"lang-snackbar\"\r\n                            variant='body2'>\r\n                            {lang.currLang.texts.changleLanguage + langSnakbarMessage + ' ?'}\r\n                        </Typography>\r\n                    }\r\n                    action={[\r\n                        <div key={\"lang-snackbar-buttons\"}>\r\n                            <IconButton\r\n                                key=\"save\"\r\n                                aria-label=\"save\"\r\n                                color=\"inherit\"\r\n                                onClick={handleSaveLangSnakbar}\r\n                            >\r\n                                <SaveIcon />\r\n                            </IconButton>\r\n                            <IconButton\r\n                                key=\"close\"\r\n                                aria-label=\"close\"\r\n                                color=\"inherit\"\r\n                                onClick={handleCloseLangSnakbar}\r\n                            >\r\n                                <CloseIcon />\r\n                            </IconButton>\r\n                        </div>\r\n                    ]}\r\n                />\r\n            </Snackbar>\r\n\r\n            <div className={classes.root}>\r\n                <div className={classes.mainPage}>\r\n                    <Grid className={classes.mainGridContainer}\r\n                        container\r\n                        direction=\"column\"\r\n                        justify=\"center\"\r\n                        alignItems=\"stretch\"\r\n                    >\r\n                        <Grid item xs={4} className={classes.mainGridHeadItem} >\r\n                            <Grid container className={classes.mainGridContainer}\r\n                                direction=\"row\"\r\n                                justify=\"space-around\"\r\n                                alignItems=\"stretch\"\r\n                            >\r\n                                <Grid item xs={4} >\r\n                                    <ButtonBase className={classes.AstronautButton}\r\n                                        type='button'\r\n                                        focusRipple\r\n                                        onClick={onAstronautClick}>\r\n                                        <div className={classes.AstronautDiv}>\r\n                                            <div className={classes.AstronautImg} style={themeMode.palette.type === \"light\" ? { filter: 'invert(0)', } : { filter: 'invert(1)', }} />\r\n                                        </div>\r\n                                    </ButtonBase>\r\n                                </Grid>\r\n                                <Grid item xs={4} >\r\n                                    <ButtonBase className={classes.image}\r\n                                        type='button'\r\n                                        focusRipple\r\n                                        onClick={switchMode}>\r\n                                        <div className={classes.SkyDiv}>\r\n                                            <div className={classes.SunSrc} style={themeMode.palette.type === \"dark\" ? { transform: 'translateY(36vw)' } : { transform: 'translateY(0)' }} />\r\n                                            <div className={classes.MoonSrc} style={themeMode.palette.type === \"dark\" ? { transform: 'translateY(0)' } : { transform: 'translateY(-36vw)' }} />\r\n                                        </div>\r\n                                    </ButtonBase>\r\n                                </Grid>\r\n                                <Grid item xs={4} >\r\n                                    <ButtonBase className={classes.MapButton}\r\n                                        type='button'\r\n                                        focusRipple\r\n                                        onClick={onMapClick}>\r\n                                        <div className={classes.MapDiv}>\r\n                                            <div className={classes.MapImg} style={themeMode.palette.type === \"light\" ? { filter: 'invert(0)', } : { filter: 'invert(1)', }} />\r\n                                        </div>\r\n                                    </ButtonBase>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item xs={1} className={classes.mainGridHeadItem} >\r\n                            <Grid className={classes.mainGridContainer}\r\n                                container\r\n                                direction=\"column\"\r\n                                justify=\"center\"\r\n                                alignItems=\"stretch\" >\r\n                                <Grid item xs={12} className={classes.menuButtonContainerItem} >\r\n                                    <Typography className={classes.mainGridContainer}\r\n                                        align='center'\r\n                                        variant='h6'>\r\n                                        {lang.currLang.texts.hello + auth.user.nickname}\r\n                                    </Typography>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item xs={6} className={classes.mainGridBodyItem} >\r\n                            <Grid className={classes.mainGridContainer}\r\n                                container\r\n                                direction=\"column\"\r\n                                justify=\"center\"\r\n                                alignItems=\"stretch\"\r\n                            >\r\n                                <Grid className={classes.menuButtonContainer}\r\n                                    container\r\n                                    direction=\"column\"\r\n                                    justify=\"center\"\r\n                                    alignItems=\"stretch\"\r\n                                >\r\n                                    <Grid item xs={12} className={classes.menuButtonContainerItem} >\r\n                                        <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                            <Button\r\n                                                variant=\"contained\"\r\n                                                color=\"primary\"\r\n                                                className={classes.menuButton}\r\n                                                onClick={() => {\r\n                                                    let check = CheckTimeOut();\r\n                                                    if (check) history.push(\"/dreams\");\r\n                                                    else history.push(\"/\");\r\n                                                }}\r\n                                            >\r\n                                                {lang.currLang.buttons.dreamJoirnal}\r\n                                            </Button>\r\n                                        </Grid>\r\n                                        <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                            <Button\r\n                                                variant=\"contained\"\r\n                                                color=\"primary\"\r\n                                                className={classes.menuButton}\r\n                                                onClick={() => {\r\n                                                    let check = CheckTimeOut();\r\n                                                    if (check) history.push(\"/addregulardream\");\r\n                                                    else history.push(\"/\");\r\n                                                }}\r\n                                            >\r\n                                                {lang.currLang.buttons.addDream}\r\n                                            </Button>\r\n                                        </Grid>\r\n                                        <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                            <Button\r\n                                                variant=\"contained\"\r\n                                                color=\"primary\"\r\n                                                className={classes.menuButton}\r\n                                                onClick={() => {\r\n                                                    let check = CheckTimeOut();\r\n                                                    if (check) history.push(\"/addcdream\");\r\n                                                    else history.push(\"/\");\r\n                                                }}\r\n                                            >\r\n                                                {lang.currLang.buttons.addCDream}\r\n                                            </Button>\r\n                                        </Grid>\r\n                                        <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                            <Button variant=\"contained\" color=\"primary\" className={classes.menuButton}>\r\n                                                {lang.currLang.buttons.techniques}\r\n                                            </Button>\r\n                                        </Grid>\r\n                                        <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                            <Button variant=\"contained\" color=\"primary\" className={classes.menuButton}>\r\n                                                {lang.currLang.buttons.adventures}\r\n                                            </Button>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item xs={1} className={classes.mainGridFooterItem} >\r\n                            <Grid className={classes.menuButtonContainerFooterLanguageButtons}\r\n                                container\r\n                                direction=\"row\"\r\n                                justify=\"center\"\r\n                                alignItems=\"center\" >\r\n                                <Grid item>\r\n                                    <Button onClick={() => { changeLanguage('Ru') }}>\r\n                                        RU\r\n                                    </Button>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Button onClick={() => { changeLanguage('En') }}>\r\n                                        EN\r\n                                    </Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </div>\r\n            </div>\r\n        </MuiThemeProvider>\r\n    );\r\n};\r\n\r\nMainPage.propTypes = {\r\n    setCurrLangAction: PropTypes.func.isRequired,\r\n    setTheme: PropTypes.func.isRequired,\r\n    setSnackbar: PropTypes.func.isRequired,\r\n    lang: PropTypes.object.isRequired,\r\n    themeMode: PropTypes.object.isRequired,\r\n    auth: PropTypes.object.isRequired,\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        lang: store.lang,\r\n        themeMode: store.themeMode,\r\n        auth: store.auth,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setCurrLangAction: currLangState => dispatch(setCurrLang(currLangState)),\r\n        setTheme: palette => dispatch(setTheme(palette)),\r\n        setSnackbar: snackbar => dispatch(setSnackbar(snackbar)),\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(MainPage);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport jwt_decode from \"jwt-decode\";\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { GET_ERRORS, SET_CURRENT_USER, SET_SNACKBAR_MODE } from \"../actions/types\";\r\nimport { setCurrLang, setUserState, setSnackbar } from '../actions/Actions';\r\nimport { useStyles } from '../styles/Styles';\r\nimport setAuthToken from \"../utils/setAuthToken\";\r\nimport { instance } from './Config';\r\n\r\nimport RuDict from '../dictionary/ru';\r\nimport EnDict from '../dictionary/en';\r\n\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\r\nimport Visibility from '@material-ui/icons/Visibility';\r\n\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\n\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\n\r\nimport { mdiVk } from '@mdi/js';\r\nimport Icon from '@mdi/react';\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nfunction Sign(props) {\r\n    const classes = useStyles();\r\n    const { history, themeMode, lang, setUserState, setSnackbar, setCurrLang } = props;\r\n    const muiTheme = createMuiTheme(themeMode);\r\n    const [loginData, setLoginData] = React.useState({\r\n        email: '',\r\n        password: '',\r\n    });\r\n    const [registData, setRegistData] = React.useState({\r\n        email: '',\r\n        nickname: '',\r\n        password: '',\r\n        password2: '',\r\n    });\r\n    const [regFieldErrors, setRegFieldErrors] = React.useState({\r\n        emailErr: false,\r\n        emailErrText: '',\r\n        nicknameErr: false,\r\n        nicknameErrText: '',\r\n        passwordErr: false,\r\n        passwordErrText: '',\r\n        password2Err: false,\r\n        password2ErrText: '',\r\n    });\r\n    const [isLoading, setIsLoading] = React.useState(false);\r\n    const [showPassword, setShowPassword] = React.useState(false);\r\n    const [openLogin, setOpenLogin] = React.useState(false);\r\n    const [openRegist, setOpenRegist] = React.useState(false);\r\n    const [page, setPage] = React.useState({\r\n        mainPage: true,\r\n        aboutPage: false,\r\n    });\r\n\r\n    const handleMouseDownPassword = event => {\r\n        event.preventDefault();\r\n    };\r\n    const changeAuthLogin = (e) => {\r\n        let newLoginData = loginData;\r\n        newLoginData = { ...newLoginData, email: e.target.value };\r\n        setLoginData(newLoginData);\r\n    };\r\n    const changeAuthPassword = (e) => {\r\n        let newLoginData = loginData;\r\n        newLoginData = { ...newLoginData, password: e.target.value };\r\n        setLoginData(newLoginData);\r\n    };\r\n    const changeRegistLogin = (e) => {\r\n        let newRegFieldErrors = regFieldErrors;\r\n        newRegFieldErrors = { ...newRegFieldErrors, emailErr: false };\r\n        newRegFieldErrors = { ...newRegFieldErrors, emailErrText: '' };\r\n        setRegFieldErrors(newRegFieldErrors);\r\n\r\n        let newRegistData = registData;\r\n        newRegistData = { ...newRegistData, email: e.target.value };\r\n        setRegistData(newRegistData);\r\n    };\r\n    const changeRegistNickname = (e) => {\r\n        let newRegFieldErrors = regFieldErrors;\r\n        newRegFieldErrors = { ...newRegFieldErrors, nicknameErr: false };\r\n        newRegFieldErrors = { ...newRegFieldErrors, nicknameErrText: '' };\r\n        setRegFieldErrors(newRegFieldErrors);\r\n\r\n        let newRegistData = registData;\r\n        newRegistData = { ...newRegistData, nickname: e.target.value };\r\n        setRegistData(newRegistData);\r\n    };\r\n    const changeRegistPassword = (e) => {\r\n        let newRegFieldErrors = regFieldErrors;\r\n        newRegFieldErrors = { ...newRegFieldErrors, passwordErr: false };\r\n        newRegFieldErrors = { ...newRegFieldErrors, passwordErrText: '' };\r\n        newRegFieldErrors = { ...newRegFieldErrors, password2Err: false };\r\n        newRegFieldErrors = { ...newRegFieldErrors, password2ErrText: '' };\r\n        setRegFieldErrors(newRegFieldErrors);\r\n\r\n        let newRegistData = registData;\r\n        newRegistData = { ...newRegistData, password: e.target.value };\r\n        setRegistData(newRegistData);\r\n    };\r\n    const changeRegistPassword2 = (e) => {\r\n        let newRegFieldErrors = regFieldErrors;\r\n        newRegFieldErrors = { ...newRegFieldErrors, passwordErr: false };\r\n        newRegFieldErrors = { ...newRegFieldErrors, passwordErrText: '' };\r\n        newRegFieldErrors = { ...newRegFieldErrors, password2Err: false };\r\n        newRegFieldErrors = { ...newRegFieldErrors, password2ErrText: '' };\r\n        setRegFieldErrors(newRegFieldErrors);\r\n        let newRegistData = registData;\r\n        newRegistData = { ...newRegistData, password2: e.target.value };\r\n        setRegistData(newRegistData);\r\n    };\r\n    const singIn = () => {\r\n        instance\r\n            .post(\"/actions/users/login\", loginData)\r\n            .then(res => {\r\n                const { token } = res.data;\r\n                localStorage.setItem(\"jwtToken\", token);\r\n                setAuthToken(token);\r\n                const decoded = jwt_decode(token);\r\n                setUserState({\r\n                    type: SET_CURRENT_USER,\r\n                    payload: decoded\r\n                });\r\n                setIsLoading(false);\r\n                history.push(\"/luciddreams\");\r\n            })\r\n            .catch(err => {\r\n                //console.log(err);\r\n                let errorMessage = '';\r\n                if (err.response.data.email === 'UserNotExist') {\r\n                    errorMessage = lang.currLang.errors.UserNotExist;\r\n                }\r\n                if (err.response.data.email === 'EmailIsNotValid') {\r\n                    errorMessage = lang.currLang.errors.EmailIsNotValid;\r\n                }\r\n                if (err.response.data.passwordincorrect === 'IncorrectPassword') {\r\n                    errorMessage = lang.currLang.errors.IncorrectPassword;\r\n                }\r\n                setSnackbar({\r\n                    type: SET_SNACKBAR_MODE,\r\n                    snackbar: {\r\n                        open: true,\r\n                        variant: 'error',\r\n                        message: errorMessage,\r\n                    },\r\n                });\r\n                setIsLoading(false);\r\n            });\r\n    };\r\n    const singUp = () => {\r\n        let isErr = false;\r\n        let newRegFieldErrors = regFieldErrors;\r\n        if (registData.email.length === 0) {\r\n            newRegFieldErrors = { ...newRegFieldErrors, emailErr: true };\r\n            newRegFieldErrors = { ...newRegFieldErrors, emailErrText: lang.currLang.errors.emailLenght };\r\n            isErr = true;\r\n        }\r\n        if (registData.nickname.length === 0) {\r\n            newRegFieldErrors = { ...newRegFieldErrors, nicknameErr: true };\r\n            newRegFieldErrors = { ...newRegFieldErrors, nicknameErrText: lang.currLang.errors.nicknameLenght };\r\n            isErr = true;\r\n        }\r\n        if (registData.password.length === 0) {\r\n            newRegFieldErrors = { ...newRegFieldErrors, passwordErr: true };\r\n            newRegFieldErrors = { ...newRegFieldErrors, passwordErrText: lang.currLang.errors.passwordLenght };\r\n            isErr = true;\r\n        }\r\n        if (registData.password2.length === 0) {\r\n            newRegFieldErrors = { ...newRegFieldErrors, password2Err: true };\r\n            newRegFieldErrors = { ...newRegFieldErrors, password2ErrText: lang.currLang.errors.password2Lenght };\r\n            isErr = true;\r\n        }\r\n        if (registData.password !== registData.password2) {\r\n            newRegFieldErrors = { ...newRegFieldErrors, passwordErr: true };\r\n            newRegFieldErrors = { ...newRegFieldErrors, passwordErrText: lang.currLang.errors.passwordsCompare };\r\n            newRegFieldErrors = { ...newRegFieldErrors, password2Err: true };\r\n            newRegFieldErrors = { ...newRegFieldErrors, password2ErrText: lang.currLang.errors.passwordsCompare };\r\n            isErr = true;\r\n        }\r\n        if (isErr) {\r\n            setRegFieldErrors(newRegFieldErrors);\r\n            setIsLoading(false);\r\n        }\r\n        else {\r\n            instance\r\n                .post('/actions/users/register', registData)\r\n                .then(res => {\r\n                    //TODO нормальный popup\r\n                    alert(lang.currLang.texts.sucessRegistration);\r\n                    let newRegistData = registData;\r\n                    newRegistData = { ...newRegistData, email: '' };\r\n                    newRegistData = { ...newRegistData, nickname: '' };\r\n                    newRegistData = { ...newRegistData, password: '' };\r\n                    newRegistData = { ...newRegistData, password2: '' };\r\n                    setRegistData(newRegistData);\r\n                    click('closeRegist');\r\n                    click('openLogin');\r\n                    setIsLoading(false);\r\n                })\r\n                .catch(err => {\r\n                    let errorMessage = '';\r\n                    setUserState({\r\n                        type: GET_ERRORS,\r\n                        payload: err.response.data\r\n                    });\r\n                    if (err.response.data.email === 'EmailIsBusy') {\r\n                        errorMessage = lang.currLang.errors.EmailIsBusy;\r\n                    }\r\n                    if (err.response.data.password === 'PasswordLenght5Symbols') {\r\n                        errorMessage = lang.currLang.errors.PasswordLenght5Symbols;\r\n                    }\r\n                    setSnackbar({\r\n                        type: SET_SNACKBAR_MODE,\r\n                        snackbar: {\r\n                            open: true,\r\n                            variant: 'error',\r\n                            message: errorMessage,\r\n                        },\r\n                    });\r\n                    setIsLoading(false);\r\n                });\r\n        }\r\n    };\r\n    const click = (action) => {\r\n        let newPages = page;\r\n        switch (action) {\r\n            case 'useVk':\r\n                // window.VK.Auth.login(checkLoginState, 4194304);\r\n                // let loadItems = async () => {\r\n                //     const response = await fetch('http://10.203.117.137:3001/auth/vk', {\r\n                //         method: 'GET',\r\n                //         credentials: 'include',\r\n                //     });\r\n                //     const body = await response.json();\r\n\r\n                //     console.log(response);\r\n                // }\r\n                break;\r\n            case 'openLogin':\r\n                setOpenLogin(true);\r\n                break;\r\n            case 'openRegist':\r\n                setOpenRegist(true);\r\n                break;\r\n            case 'closeLogin':\r\n                setOpenLogin(false);\r\n                setShowPassword(false);\r\n                break;\r\n            case 'closeRegist':\r\n                setOpenRegist(false);\r\n                setShowPassword(false);\r\n                break;\r\n            case 'signIn':\r\n                setIsLoading(true);\r\n                singIn();\r\n                break;\r\n            case 'signUp':\r\n                setIsLoading(true);\r\n                singUp();\r\n                break;\r\n            case 'openAboutPage':\r\n                newPages = { ...newPages, aboutPage: true };\r\n                newPages = { ...newPages, mainPage: false };\r\n                setPage(newPages);\r\n                break;\r\n            case 'closeAboutPage':\r\n                newPages = { ...newPages, aboutPage: false };\r\n                newPages = { ...newPages, mainPage: true };\r\n                setPage(newPages);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    };\r\n    const changeLanguage = (language) => {\r\n        if (language === 'Ru') {\r\n            setCurrLang(RuDict);\r\n        }\r\n        else {\r\n            setCurrLang(EnDict);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <MuiThemeProvider theme={muiTheme}>\r\n            <CssBaseline />\r\n\r\n            <div className={classes.root} id='rootDiv'>\r\n\r\n                <div className={classes.mainPage}\r\n                    style={\r\n                        page.mainPage === true\r\n                            ? { transform: 'translateY(0%)' }\r\n                            : { transform: 'translateY(-100%)' }\r\n                    } >\r\n                    <Grid className={classes.mainGridContainer}\r\n                        container\r\n                        direction=\"column\"\r\n                        justify=\"center\"\r\n                        alignItems=\"stretch\"\r\n                    >\r\n                        <Grid item xs={11} className={classes.mainGridBodyItem} >\r\n                            <Grid className={classes.menuButtonContainer}\r\n                                container\r\n                                direction=\"column\"\r\n                                justify=\"center\"\r\n                                alignItems=\"stretch\" >\r\n                                <Grid item xs={3} />\r\n                                <Grid item xs={6} className={classes.menuButtonContainerItem}>\r\n                                    <Dialog\r\n                                        open={openLogin}\r\n                                        TransitionComponent={Transition}\r\n                                        keepMounted\r\n                                        aria-labelledby=\"alert-dialog-slide-title\"\r\n                                        aria-describedby=\"alert-dialog-slide-description\"\r\n                                    >\r\n                                        <DialogTitle id=\"alert-dialog-slide-title\">\r\n                                            {lang.currLang.buttons.signIn}\r\n                                        </DialogTitle>\r\n                                        <DialogContent>\r\n                                            <Grid item xs={12} className={classes.menuButtonContainerItem}>\r\n                                                <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                                    <TextField\r\n                                                        className={classes.textField}\r\n                                                        id=\"email-field\"\r\n                                                        type=\"email\"\r\n                                                        label=\"Email\"\r\n                                                        onBlur={(e) => { changeAuthLogin(e) }} />\r\n                                                </Grid>\r\n                                                <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                                    <TextField\r\n                                                        id=\"password-field\"\r\n                                                        className={classes.textField}\r\n                                                        type={showPassword ? 'text' : 'password'}\r\n                                                        label={lang.currLang.texts.password}\r\n                                                        onBlur={(e) => { changeAuthPassword(e) }}\r\n                                                        InputProps={{\r\n                                                            endAdornment: (\r\n                                                                <InputAdornment position=\"end\">\r\n                                                                    <IconButton\r\n                                                                        tabIndex=\"-1\"\r\n                                                                        edge=\"end\"\r\n                                                                        aria-label=\"toggle password visibility\"\r\n                                                                        onClick={() => { showPassword ? setShowPassword(false) : setShowPassword(true) }}\r\n                                                                        onMouseDown={handleMouseDownPassword} >\r\n                                                                        {showPassword ? <VisibilityOff /> : <Visibility />}\r\n                                                                    </IconButton>\r\n                                                                </InputAdornment>\r\n                                                            ),\r\n                                                        }} />\r\n                                                </Grid>\r\n                                                <Grid item xs={2} className={classes.menuDivButton}\r\n                                                    align=\"center\"\r\n                                                >\r\n                                                    <Typography>\r\n                                                        {lang.currLang.texts.or}\r\n                                                    </Typography>\r\n                                                </Grid>\r\n                                                <Grid item xs={2} className={classes.menuDivButton}\r\n                                                    align=\"center\"\r\n                                                >\r\n                                                    <IconButton className={classes.button}\r\n                                                        onClick={() => { click('useVk') }}\r\n                                                        disabled={isLoading}>\r\n                                                        <Icon path={mdiVk} size={2} color={themeMode.palette.type === 'light' ? 'rgba(0, 0, 0, 0.54)' : 'rgba(255, 255, 255, 1)'} />\r\n                                                    </IconButton>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                            {isLoading\r\n                                                ? <LinearProgress /> :\r\n                                                ''}\r\n                                        </DialogContent>\r\n                                        {!isLoading\r\n                                            ?\r\n                                            <DialogActions>\r\n                                                <Button onClick={() => { click('closeLogin') }}\r\n                                                    color=\"secondary\"\r\n                                                    disabled={isLoading}>\r\n                                                    {lang.currLang.buttons.cancel}\r\n                                                </Button>\r\n                                                <Button onClick={() => { click('signIn') }}\r\n                                                    color=\"primary\"\r\n                                                    disabled={isLoading}>\r\n                                                    {lang.currLang.buttons.signIn}\r\n                                                </Button>\r\n                                            </DialogActions>\r\n                                            : ''}\r\n                                    </Dialog>\r\n                                    <Dialog\r\n                                        open={openRegist}\r\n                                        TransitionComponent={Transition}\r\n                                        keepMounted\r\n                                        aria-labelledby=\"alert-dialog-slide-title\"\r\n                                        aria-describedby=\"alert-dialog-slide-description\"\r\n                                    >\r\n                                        <DialogTitle id=\"alert-dialog-slide-title\">\r\n                                            {lang.currLang.buttons.signUp}\r\n                                        </DialogTitle>\r\n                                        <DialogContent>\r\n                                            <Grid item xs={12} className={classes.menuButtonContainerItem}>\r\n                                                <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                                    <TextField\r\n                                                        error={regFieldErrors.emailErr}\r\n                                                        helperText={regFieldErrors.emailErrText}\r\n                                                        className={classes.textField}\r\n                                                        id=\"reg-email-field\"\r\n                                                        type=\"email\"\r\n                                                        label=\"Email\"\r\n                                                        onBlur={(e) => { changeRegistLogin(e) }} />\r\n                                                </Grid>\r\n                                                <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                                    <TextField\r\n                                                        error={regFieldErrors.nicknameErr}\r\n                                                        helperText={regFieldErrors.nicknameErrText}\r\n                                                        className={classes.textField}\r\n                                                        id=\"reg-nickname-field\"\r\n                                                        type=\"text\"\r\n                                                        label={lang.currLang.texts.nickname}\r\n                                                        onBlur={(e) => { changeRegistNickname(e) }} />\r\n                                                </Grid>\r\n                                                <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                                    <TextField\r\n                                                        error={regFieldErrors.passwordErr}\r\n                                                        helperText={regFieldErrors.passwordErrText}\r\n                                                        id=\"reg-password-field\"\r\n                                                        className={classes.textField}\r\n                                                        type={showPassword ? 'text' : 'password'}\r\n                                                        label={lang.currLang.texts.password}\r\n                                                        onBlur={(e) => { changeRegistPassword(e) }}\r\n                                                        InputProps={{\r\n                                                            endAdornment: (\r\n                                                                <InputAdornment position=\"end\">\r\n                                                                    <IconButton\r\n                                                                        tabIndex=\"-1\"\r\n                                                                        edge=\"end\"\r\n                                                                        aria-label=\"toggle password visibility\"\r\n                                                                        onClick={() => { showPassword ? setShowPassword(false) : setShowPassword(true) }}\r\n                                                                        onMouseDown={handleMouseDownPassword} >\r\n                                                                        {showPassword ? <VisibilityOff /> : <Visibility />}\r\n                                                                    </IconButton>\r\n                                                                </InputAdornment>\r\n                                                            ),\r\n                                                        }} />\r\n                                                </Grid>\r\n                                                <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                                    <TextField\r\n                                                        error={regFieldErrors.password2Err}\r\n                                                        helperText={regFieldErrors.password2ErrText}\r\n                                                        id=\"reg-password2-field\"\r\n                                                        className={classes.textField}\r\n                                                        type={showPassword ? 'text' : 'password'}\r\n                                                        label={lang.currLang.texts.passwordAgain}\r\n                                                        onBlur={(e) => { changeRegistPassword2(e) }}\r\n                                                        InputProps={{\r\n                                                            endAdornment: (\r\n                                                                <InputAdornment position=\"end\">\r\n                                                                    <IconButton\r\n                                                                        tabIndex=\"-1\"\r\n                                                                        edge=\"end\"\r\n                                                                        aria-label=\"toggle password visibility\"\r\n                                                                        onClick={() => { showPassword ? setShowPassword(false) : setShowPassword(true) }}\r\n                                                                        onMouseDown={handleMouseDownPassword} >\r\n                                                                        {showPassword ? <VisibilityOff /> : <Visibility />}\r\n                                                                    </IconButton>\r\n                                                                </InputAdornment>\r\n                                                            ),\r\n                                                        }} />\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                            {isLoading\r\n                                                ? <LinearProgress />\r\n                                                : ''}\r\n\r\n                                        </DialogContent>\r\n                                        {!isLoading\r\n                                            ?\r\n                                            <DialogActions>\r\n                                                <Button onClick={() => { click('closeRegist') }}\r\n                                                    color=\"secondary\"\r\n                                                    disabled={isLoading}>\r\n                                                    {lang.currLang.buttons.cancel}\r\n                                                </Button>\r\n                                                <Button onClick={() => { click('signUp') }}\r\n                                                    color=\"primary\"\r\n                                                    disabled={isLoading}>\r\n                                                    {lang.currLang.buttons.signUp}\r\n                                                </Button>\r\n                                            </DialogActions>\r\n                                            : ''}\r\n                                    </Dialog>\r\n                                    <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                        <Button variant=\"contained\" color=\"primary\" className={classes.menuButton} onClick={() => { click('openLogin') }}>\r\n                                            {lang.currLang.buttons.signIn}\r\n                                        </Button>\r\n                                    </Grid>\r\n                                    <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                        <Button variant=\"contained\" color=\"primary\" className={classes.menuButton} onClick={() => { click('openRegist') }}>\r\n                                            {lang.currLang.buttons.signUp}\r\n                                        </Button>\r\n                                    </Grid>\r\n                                    <Grid item xs={2} className={classes.menuDivButton} align=\"center\" />\r\n                                    <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                        <Button variant=\"contained\"\r\n                                            color=\"primary\"\r\n                                            className={classes.menuButton}\r\n                                            onClick={() => (click('openAboutPage'))} >\r\n                                            {lang.currLang.buttons.about}\r\n                                        </Button>\r\n                                    </Grid>\r\n                                </Grid>\r\n                                <Grid item xs={3} />\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item xs={1} className={classes.mainGridFooterItem} >\r\n                            <Grid className={classes.menuButtonContainerFooterLanguageButtons}\r\n                                container\r\n                                direction=\"row\"\r\n                                justify=\"center\"\r\n                                alignItems=\"center\" >\r\n                                <Grid item>\r\n                                    <Button onClick={() => { changeLanguage('Ru') }}>\r\n                                        RU\r\n                                    </Button>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Button onClick={() => { changeLanguage('En') }}>\r\n                                        EN\r\n                                    </Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </div >\r\n\r\n                <div className={classes.aboutPage}\r\n                    style={page.aboutPage === true\r\n                        ? { transform: 'translateY(-100%)' }\r\n                        : { transform: 'translateY(0%)' }\r\n                    }\r\n                >\r\n                    <Grid className={classes.aboutGridContainer}\r\n                        container\r\n                        direction=\"column\"\r\n                        justify=\"center\"\r\n                        alignItems=\"stretch\"\r\n                        spacing={5} >\r\n                        <Grid item\r\n                            className={classes.aboutGridItem}\r\n                            align='center'>\r\n                            <Paper className={classes.aboutPaper}>\r\n                                <Typography>\r\n                                    {lang.currLang.texts.about}\r\n                                </Typography>\r\n                            </Paper>\r\n                        </Grid>\r\n                        <Grid item\r\n                            className={classes.aboutGridItem}\r\n                            align='center'>\r\n                            <Button variant=\"contained\"\r\n                                color=\"primary\"\r\n                                className={classes.menuButton}\r\n                                onClick={() => (click('closeAboutPage'))} >\r\n                                {lang.currLang.buttons.close}\r\n                            </Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                </div>\r\n            </div >\r\n        </MuiThemeProvider>\r\n    )\r\n}\r\n\r\nSign.propTypes = {\r\n    setCurrLang: PropTypes.func.isRequired,\r\n    setUserState: PropTypes.func.isRequired,\r\n    setSnackbar: PropTypes.func.isRequired,\r\n    themeMode: PropTypes.object.isRequired,\r\n    lang: PropTypes.object.isRequired,\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        themeMode: store.themeMode,\r\n        lang: store.lang,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setCurrLang: currLangState => dispatch(setCurrLang(currLangState)),\r\n        setUserState: State => dispatch(setUserState(State)),\r\n        setSnackbar: snackbar => dispatch(setSnackbar(snackbar)),\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Sign);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport { Route, Switch } from \"react-router-dom\";\r\n\r\nimport { SET_SNACKBAR_MODE } from \"./actions/types\";\r\nimport { setSnackbar } from './actions/Actions';\r\n\r\nimport PrivateRoute from \"./components/PrivateRoute\";\r\n\r\nimport AddDream from './components/AddDream';\r\nimport AddCDream from './components/AddCDream';\r\nimport ViewDreams from './components/ViewDreams';\r\nimport MainPage from \"./components/MainPage\";\r\nimport Sign from './components/Sign';\r\n\r\nimport { useStyles, variantIcon } from './styles/Styles';\r\n\r\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { amber, green } from '@material-ui/core/colors';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nconst useStyles1 = makeStyles(theme => ({\r\n    success: {\r\n        backgroundColor: green[600],\r\n    },\r\n    error: {\r\n        backgroundColor: theme.palette.error.dark,\r\n    },\r\n    info: {\r\n        backgroundColor: theme.palette.primary.main,\r\n    },\r\n    warning: {\r\n        backgroundColor: amber[700],\r\n    },\r\n    icon: {\r\n        fontSize: 20,\r\n    },\r\n    iconVariant: {\r\n        opacity: 0.9,\r\n        marginRight: theme.spacing(1),\r\n    },\r\n    message: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n    },\r\n}));\r\n\r\nfunction MySnackbarContentWrapper(props) {\r\n    const classes = useStyles1();\r\n    const { className, message, onClose, variant } = props;\r\n    const Icon = variantIcon[variant];\r\n    return (\r\n        <SnackbarContent\r\n            className={clsx(classes[variant], className)}\r\n            aria-describedby=\"client-snackbar\"\r\n            message={\r\n                <span id=\"client-snackbar\" className={classes.message}>\r\n                    <Icon className={clsx(classes.icon, classes.iconVariant)} />\r\n                    <Typography className={classes.mainGridContainer}\r\n                        align='center'\r\n                        variant='body2'>\r\n                        {message}\r\n                    </Typography>\r\n                </span>\r\n            }\r\n            action={[\r\n                <IconButton key=\"close\" aria-label=\"close\" color=\"inherit\" onClick={onClose}>\r\n                    <CloseIcon className={classes.icon} />\r\n                </IconButton>,\r\n            ]}\r\n        />\r\n    );\r\n}\r\n\r\nfunction Routes(props) {\r\n    const classes = useStyles();\r\n    const { open, variant, message } = props;\r\n    const [openSnackbar, setOpenSnackbar] = React.useState(false);\r\n    const [openSnackbarVariant, setOpenSnackbarVariant] = React.useState('');\r\n    const [snackbarMessage, setSnackbarMessage] = React.useState('');\r\n\r\n    const handleCloseSnackbar = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setOpenSnackbar(false);\r\n        props.setSnackbar({\r\n            type: SET_SNACKBAR_MODE,\r\n            snackbar: {\r\n                open: false,\r\n                variant: 'error',\r\n                message: '',\r\n            },\r\n        });\r\n    };\r\n    React.useEffect(() => {\r\n        setOpenSnackbarVariant(variant);\r\n        setSnackbarMessage(message);\r\n        setOpenSnackbar(open);\r\n    }, [open, variant, message]);\r\n\r\n    return (\r\n        <div>\r\n            <Snackbar\r\n                open={openSnackbar}\r\n                onClose={handleCloseSnackbar}\r\n                autoHideDuration={3000}>\r\n                <MySnackbarContentWrapper\r\n                    className={classes.margin}\r\n                    onClose={handleCloseSnackbar}\r\n                    variant={openSnackbarVariant}\r\n                    message={snackbarMessage}\r\n                />\r\n            </Snackbar>\r\n            <Route exact path=\"/\" component={Sign} />\r\n            <Switch>\r\n                <PrivateRoute exact path=\"/luciddreams\" component={MainPage} />\r\n                <PrivateRoute exact path=\"/dreams\" component={ViewDreams} />\r\n                <PrivateRoute exact path=\"/addregulardream\" component={AddDream} />\r\n                <PrivateRoute exact path=\"/addcdream\" component={AddCDream} />\r\n            </Switch>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nRoutes.propTypes = {\r\n    open: PropTypes.bool.isRequired,\r\n    variant: PropTypes.string.isRequired,\r\n    message: PropTypes.string.isRequired,\r\n    setSnackbar: PropTypes.func.isRequired,\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        open: store.snackbar.snackbar.open,\r\n        variant: store.snackbar.snackbar.variant,\r\n        message: store.snackbar.snackbar.message,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setSnackbar: snackbar => dispatch(setSnackbar(snackbar)),\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Routes);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { Router } from \"react-router-dom\";\r\nimport './App.css';\r\n\r\nimport history from '../history';\r\nimport { store } from \"../store\";\r\nimport { CheckTimeOut } from '../utils/CheckLoginTimeOut';\r\nimport setAuthToken from \"../utils/setAuthToken\";\r\nimport { SET_CURRENT_USER, SET_THEME_MODE } from \"../actions/types\";\r\n\r\nimport Routes from '../Routes';\r\n\r\nimport { useStyles, params, randomBetween } from '../styles/Styles';\r\n\r\nlet check = CheckTimeOut();\r\nlet stars = [];\r\nlet clouds = [];\r\n\r\nif (!check) {\r\n    localStorage.removeItem(\"jwtToken\");\r\n    setAuthToken(false);\r\n    store.dispatch({\r\n        type: SET_CURRENT_USER,\r\n        payload: null\r\n    });\r\n    history.push(\"/\");\r\n}\r\nelse {\r\n    history.push(\"/luciddreams\");\r\n}\r\n\r\nif (new Date().getHours() >= 16 || (new Date().getHours() >= 0 && new Date().getHours() < 6)) {\r\n    store.dispatch({\r\n        type: SET_THEME_MODE,\r\n        palette: {\r\n            type: \"dark\",\r\n            primary: { main: \"#f9a825\" },\r\n            secondary: { main: \"#f50057\" },\r\n            error: { main: \"#cc0000\" },\r\n        }\r\n    });\r\n}\r\nelse {\r\n    store.dispatch({\r\n        type: SET_THEME_MODE,\r\n        palette: {\r\n            type: \"light\",\r\n            primary: { main: \"#3f51b5\" },\r\n            secondary: { main: \"#f50057\" },\r\n            error: { main: \"#cc0000\" },\r\n        }\r\n    });\r\n}\r\n\r\nfunction App(props) {\r\n    const { type } = props;\r\n    const classes = useStyles();\r\n    stars = [];\r\n    clouds = [];\r\n    for (let i = 0; i < params.amountStars; i++) {\r\n        let size = Math.round(Math.random() * 10) === 0\r\n            ? params.size.giant\r\n            : randomBetween(params.size.min, params.size.max);\r\n        stars.push(\r\n            <div\r\n                className={classes.AppStar}\r\n                key={i + 'AppStar'}\r\n                style={{\r\n                    left: randomBetween(0, 100) + \"%\",\r\n                    top: randomBetween(0, 100) + \"%\",\r\n                    width: size + \"px\",\r\n                    height: size + \"px\",\r\n                    boxShadow: \"0 0 \" + size + \"px \" + size / 2 + \"px #043668\",\r\n                    animationDuration: randomBetween(params.duration.min, params.duration.max) + \"s\",\r\n                }}\r\n            />\r\n        );\r\n    }\r\n\r\n    for (let i = 0; i < params.amountClouds; i++) {\r\n        let left = Math.round(Math.random() * 50 + 90);\r\n        let top = Math.round(Math.random() * 100 / 100 * 90);\r\n        let scale = Math.random() * 1.5 - 0.5;\r\n        let opacity = Math.random() * 90 / 100;\r\n        let speed = Math.random() * 30 + 15;\r\n        clouds.push(\r\n            <div className={classes.AppCloud}\r\n                key={i + 'AppCloud'}\r\n                style={{\r\n                    left: left + '%',\r\n                    top: top + '%',\r\n                    width: '400px',\r\n                    height: '100px',\r\n                    transform: 'scale(' + scale + ')',\r\n                    opacity: opacity,\r\n                    animationDuration: speed + 's',\r\n                }}\r\n            />\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Router history={history}>\r\n            <div className={classes.AppDivDark}>\r\n                <div className={classes.AppDivLight}\r\n                    style={type === \"light\"\r\n                        ? { opacity: 1, }\r\n                        : { opacity: 0, }}\r\n                />\r\n                {type === \"light\"\r\n                    ?\r\n                    <div className={classes.AppCloudsDiv}\r\n                        style={type === \"light\"\r\n                            ? { opacity: 1, }\r\n                            : { opacity: 0, }}\r\n                    >\r\n                        {clouds}\r\n                    </div>\r\n                    :\r\n                    <div className={classes.AppStarsDiv}\r\n                        style={type === \"light\"\r\n                            ? { opacity: 0, }\r\n                            : { opacity: 1, }}\r\n                    >\r\n                        {stars}\r\n                    </div>\r\n                }\r\n            </div>\r\n            <Routes />\r\n        </Router>\r\n    );\r\n};\r\n\r\nApp.propTypes = {\r\n    type: PropTypes.string.isRequired,\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        type: store.themeMode.palette.type,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(App);","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from \"./store\";\r\n\r\nReactDOM.render(\r\n    <div id='global'\r\n        style={{\r\n            overflow: 'auto',\r\n            height: '100%',\r\n            position: 'relative',\r\n        }}\r\n    >\r\n\r\n        <Provider store={store}>\r\n            <App />\r\n        </Provider>\r\n    </div>\r\n    , document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n\r\n"],"sourceRoot":""}