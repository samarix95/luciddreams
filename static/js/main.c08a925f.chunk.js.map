{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","AppDiv","position","margin","width","height","background","zIndex","AppStarsDiv","overflow","AppStar","image","left","transform","borderRadius","MoonDiv","top","MoonSrc","params","amount","size","min","max","giant","duration","randomBetween","a","b","Math","random","Boolean","window","location","hostname","match","ReactDOM","render","classes","useState","palette","type","primary","main","secondary","arrayStars","muiTheme","createMuiTheme","i","round","push","className","key","style","boxShadow","animationDuration","CssBaseline","ButtonBase","focusRipple","src","alt","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oSASMA,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCC,OAAQ,CACJC,SAAU,WACVC,OAAQ,EACRC,MAAO,OACPC,OAAQ,OACRC,WAAY,oFACZC,QAAS,GAEbC,YAAa,CACTN,SAAU,WACVE,MAAO,OACPC,OAAQ,OACRI,SAAU,SACVF,QAAS,GAEbG,QAAS,CACLH,QAAS,GAEbI,MAAO,CACHT,SAAU,WACVU,KAAM,MAENC,UAAW,uBACXT,MAAO,kBACHC,OAAQ,OACZS,aAAc,OAElBC,QAAS,CACLb,SAAU,WACVc,IAAK,EACLJ,KAAM,EACNR,MAAO,OACPC,OAAQ,QAEZY,QAAS,CACLf,SAAU,WACVc,IAAK,EACLJ,KAAM,EACNR,MAAO,OACPC,OAAQ,YAIVa,EAAS,CACXC,OAAQ,IACRC,KAAM,CACFC,IAAK,EACLC,IAAK,EACLC,MAAO,GAEXC,SAAU,CACNH,IAAK,EACLC,IAAK,KAIb,SAASG,EAAcC,EAAGC,GACtB,OAAQD,EAAKE,KAAKC,UAAYF,EAAID,GCvDlBI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,mBFgED,WAaX,IAZA,IAAMC,EAAUvC,IADU,EAEAwC,mBAAS,CAC/BC,QAAS,CACLC,KAAM,QACNC,QAAS,CAAEC,KAAM,WACjBC,UAAW,CAAED,KAAM,cAND,mBAEnB1C,EAFmB,KAUtB4C,GAVsB,KAUT,IACXC,EAAWC,YAAe9C,GAEvB+C,EAAI,EAAGA,EAAI7B,EAAOC,OAAQ4B,IAAK,CACpC,IAAI3B,EAA0C,IAAnCQ,KAAKoB,MAAsB,GAAhBpB,KAAKC,UAAuBX,EAAOE,KAAKG,MAAQE,EAAcP,EAAOE,KAAKC,IAAKH,EAAOE,KAAKE,KACjHsB,EAAWK,KACP,yBAAKC,UAAWb,EAAQ3B,QACpByC,IAAKJ,EACLK,MAAO,CACHhD,MAAOgB,EAAO,KACdf,OAAQe,EAAO,KACfR,KAAMa,EAAc,EAAG,KAAO,IAC9BT,IAAKS,EAAc,EAAG,KAAO,IAC7B4B,UAAW,OAASjC,EAAO,MAAQA,EAAO,EAAI,aAC9CkC,kBAAmB7B,EAAcP,EAAOM,SAASH,IAAKH,EAAOM,SAASF,KAAO,QAK7F,OACI,kBAAC,IAAD,CAAkBtB,MAAO6C,GACrB,kBAACU,EAAA,EAAD,MACA,yBAAKL,UAAWb,EAAQpC,QACpB,yBAAKiD,UAAWb,EAAQ7B,aACnBoC,IAGT,kBAACY,EAAA,EAAD,CAAYN,UAAWb,EAAQ1B,MAC3B6B,KAAK,SACLiB,aAAW,GACX,yBAAKP,UAAWb,EAAQtB,SACpB,yBAAKmC,UAAWb,EAAQpB,QACpByC,IAAK,wDACLC,IAAK,cE3Gb,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.c08a925f.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\nimport { MuiThemeProvider, createMuiTheme, makeStyles } from '@material-ui/core/styles';\n\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\nimport ButtonBase from '@material-ui/core/ButtonBase';\n\nconst useStyles = makeStyles(theme => ({\n    AppDiv: {\n        position: 'absolute',\n        margin: 0,\n        width: '100%',\n        height: '100%',\n        background: 'radial-gradient(ellipse at center, rgba(8, 25, 42, 1) 19%, rgba(1, 4, 6, 1) 100%)',\n        zIndex: -3,\n    },\n    AppStarsDiv: {\n        position: 'absolute',\n        width: '100%',\n        height: '100%',\n        overflow: 'hidden',\n        zIndex: -2,\n    },\n    AppStar: {\n        zIndex: -1,\n    },\n    image: {\n        position: 'relative',\n        left: '50%',\n        //top: '50%',\n        transform: 'translate(-50%, 50%)',\n        width: '20vw !important', // Overrides inline-style\n            height: '20vw',\n        borderRadius: '50%',\n    },\n    MoonDiv: {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        width: '100%',\n        height: '100%',\n    },\n    MoonSrc: {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        width: '100%',\n        height: '100%',\n    },\n}));\n\nconst params = {\n    amount: 200,\n    size: {\n        min: 1,\n        max: 5,\n        giant: 9\n    },\n    duration: {\n        min: 5,\n        max: 25,\n    }\n}\n\nfunction randomBetween(a, b) {\n    return (a + (Math.random() * (b - a)));\n}\n\nexport default function App() {\n    const classes = useStyles();\n    const [theme, setTheme] = useState({\n        palette: {\n            type: \"light\",\n            primary: { main: \"#3f51b5\" },\n            secondary: { main: \"#f50057\" },\n        }\n    });\n\n    let arrayStars = [];\n    const muiTheme = createMuiTheme(theme);\n\n    for (let i = 0; i < params.amount; i++) {\n        let size = Math.round(Math.random() * 10) === 0 ? params.size.giant : randomBetween(params.size.min, params.size.max);\n        arrayStars.push(\n            <div className={classes.AppStar}\n                key={i}\n                style={{\n                    width: size + \"px\",\n                    height: size + \"px\",\n                    left: randomBetween(0, 100) + \"%\",\n                    top: randomBetween(0, 100) + \"%\",\n                    boxShadow: \"0 0 \" + size + \"px \" + size / 2 + \"px #043668\",\n                    animationDuration: randomBetween(params.duration.min, params.duration.max) + \"s\",\n                }} />\n        );\n    }\n\n    return (\n        <MuiThemeProvider theme={muiTheme}>\n            <CssBaseline />\n            <div className={classes.AppDiv}>\n                <div className={classes.AppStarsDiv}>\n                    {arrayStars}\n                </div>\n            </div>\n            <ButtonBase className={classes.image}\n                type='button'\n                focusRipple>\n                <div className={classes.MoonDiv}>\n                    <img className={classes.MoonSrc}\n                        src={'https://i.ya-webdesign.com/images/moon-icon-png-8.png'}\n                        alt={'Moon'}>\n                    </img>\n                </div>\n            </ButtonBase>\n        </MuiThemeProvider>\n    );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}