{"version":3,"sources":["img/map.png","img/sun.png","img/moon.png","img/astronaut.png","img/cloud.svg","history.js","actions/types.js","dictionary/en.js","reducers/currLang.js","reducers/cloud.js","reducers/star.js","reducers/themeMode.js","reducers/authReducer.js","reducers/errorReducer.js","reducers/snackbarReducer.js","reducers/index.js","store.js","utils/setAuthToken.js","utils/CheckLoginTimeOut.js","actions/Actions.js","components/PrivateRoute.js","components/Config.js","styles/Styles.js","components/muiltiple/MapCell.jsx","components/DreamMap.jsx","components/AddLocation.jsx","functions.js","components/AddDream.jsx","components/AddCDream.jsx","components/AddTechnics.jsx","components/muiltiple/DreamCard.jsx","components/ViewDreams.jsx","dictionary/ru.js","components/MainPage.jsx","components/Sign.js","components/muiltiple/TechnicCard.jsx","components/Technics.jsx","Routes.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","createBrowserHistory","GET_ERRORS","SET_CURRENT_USER","SET_CLOUD","CLEAR_CLOUD","SET_STAR","CLEAR_STAR","SET_LANG","SET_THEME_MODE","SET_SNACKBAR_MODE","words","current","buttons","signIn","signUp","dreamJoirnal","addDream","addCDream","techniques","adventures","close","about","cancel","add","Edit","Delete","Save","addTag","texts","or","nickname","password","passwordAgain","sucessRegistration","hello","changleLanguage","success","title","description","content","tags","dreams","technics","rating","Dream","Cdream","NoDreams","pickDate","pickTime","TapToShow","Public","Publish","Unpublish","PublicAlert","PublicText","PublicDescription","UnpublicAlert","UnpublicText","UnpublicDescription","DeleteAlert","DeleteText","Name","ChangeIcon","errors","emailLenght","nicknameLenght","passwordLenght","password2Lenght","passwordsCompare","UserNotExist","EmailIsNotValid","IncorrectPassword","EmailIsBusy","PasswordLenght5Symbols","NotLogin","EmptyName","EmptyTitle","EmptyDescription","EmptyDream","NoChanges","CantDeletePost","IconNotChange","ColorNotChange","initialState","currLang","EnDict","clouds","stars","palette","type","primary","main","secondary","error","isempty","require","isAuthenticated","user","loading","snackbar","open","variant","message","rootReducer","combineReducers","lang","state","action","currLangState","cloudState","starState","themeMode","auth","payload","middleware","thunk","store","createStore","applyMiddleware","setAuthToken","token","axios","defaults","headers","common","CheckTimeOut","localStorage","jwtToken","decoded","jwt_decode","dispatch","currentTime","Date","now","exp","setCurrLang","setSnackbar","connect","Component","component","rest","render","props","to","instance","create","baseURL","timeout","params","amountStars","amountClouds","size","min","max","giant","duration","variantIcon","CheckCircleIcon","warning","WarningIcon","ErrorIcon","info","InfoIcon","randomBetween","a","b","Math","random","useStyles","makeStyles","theme","formControl","position","left","top","transform","width","height","SwipeableViews","media","iconCenter","display","margin","dreamCardDiv","marginTop","marginBottom","borderRadius","divDreamsNotFoundImg","background","divDreamsNotFound","textAlign","contentPaper","backgroundColor","text","padding","pickerGridContainer","div85width","ratingGridContainer","pickers","avatarRoot","verySmallAvatar","spacing","smallAvatar","smallChip","centerCircularProgress","mainGridDreamsBodyItemContainer","paddingTop","boxSizing","maxHeight","overflow","mainGridDreamsBodyItemContainerPaper","opacity","mainGridDreamsBodyItem","mainGridDreamsContainer","card","maxWidth","expand","marginLeft","transition","transitions","shortest","expandOpen","textField","root","flexGrow","window","innerHeight","mainPage","aboutPage","AppDivDark","zIndex","AppDivLight","AppStarsDiv","AppCloudsDiv","AppStar","filter","animation","AppCloud","backgroundRepeat","backgroundImage","CloudSvg","image","SkyDiv","MoonSrc","backgroundSize","MoonImg","SunSrc","SunImg","AstronautButton","AstronautDiv","AstronautImg","MapButton","MapDiv","MapImg","mainGridContainer","mainGridHeadItem","mainGridBodyItem","menuButtonContainerItem","menuButtonContainer","menuButtonGrid","menuDivButton","menuButton","minWidth","actionButton","poppupButton","mainGridFooterItem","menuButtonContainerFooterLanguageButtons","aboutGridContainer","fullMinWidth","inputDiv","inputScrollableDiv","chips","flexWrap","noWrap","chip","aboutGridItem","mainPaperGridBodyItem","paper","minMargin","VKLoginDiv","VKLoginButton","boxShadow","classes","i","j","cellHeight","cellWidth","id","locations","loadMap","history","React","useState","anchorEl","setAnchorEl","tagId","setTagId","disabledSave","Boolean","popoverId","undefined","style","length","className","onClick","event","currentTarget","find","loc","img_url","color","Skeleton","Popover","anchorOrigin","vertical","horizontal","transformOrigin","Grid","container","direction","justify","alignItems","item","xs","Typography","name_rus","name_eng","IconButton","push","pathname","defaultData","prevUrl","fontSize","FormControl","Select","value","onChange","target","MenuProps","PaperProps","map","key","MenuItem","Avatar","src","align","Button","disabled","newCell","oldLoc","newLoc","console","log","JSONtable","0","1","2","3","4","5","6","7","8","9","muiTheme","createMuiTheme","cellSize","setCellSize","setLocations","dreamMap","setDreamMap","get","then","res","data","catch","err","useEffect","CssBaseline","zeroMinWidth","Container","borderCollapse","table","Object","keys","forEach","row","rows","col","createTable","Fab","Slider","newValue","isEditMode","setIsEditMode","setValue","setPrevUrl","isIconsLoading","setIsIconsLoading","locationIcons","setLocationIcons","nameEn","setNameEn","nameRu","setNameRu","selectedIcon","setSelectedIcon","iconColor","setIconColor","location","getIcon","post","icons","newArray","concat","name","Paper","Tabs","centered","indicatorColor","textColor","Tab","label","animateHeight","axis","index","onChangeIndex","role","TextField","required","e","onBlur","loadIconsList","errorMessage","postData","CircularProgress","InputLabel","labelId","onChangeComplete","hex","chages","saveLocation","compare","obj1","obj2","every","hasOwnProperty","defaultTags","assign","overrides","MUIRichTextEditor","border","toolbar","justifyContent","minHeight","borderBottom","placeHolder","editor","editorContainer","isLoading","setIsLoading","titleText","setTitleText","selectedDate","setSelectedDate","contentText","setContentText","prevContentText","setPrevContentText","selectedLocations","setselectedLocations","handleDateChange","date","post_title","dream_date","post_content","Number","utils","DateFnsUtils","locale","ruLocale","format","KeyboardButtonProps","ampm","currCont","getCurrentContent","convert","convertToRaw","JSON","stringify","inlineToolbar","controls","customControls","icon","inlineStyle","Autocomplete","multiple","options","getOptionLabel","option","Chip","avatar","defaultValue","handleChangeLocations","filterSelectedOptions","renderInput","fullWidth","LinearProgress","havErr","parse","blocks","hasChanges","tagChanges","post_id","getTime","dreamDate","toLocaleString","timeZone","deleteTags","item1","some","item2","addTags","remove","create_user","post_type","savepost","defaultTechnics","selectedTechnics","setselectedTechnics","realisticsValue","setRealisticsValue","setTechnics","tech","handleChangeTechnics","Rating","techChanges","deleteTech","addTech","titleRu","titleEn","descriptionRu","descriptionEn","technicsData","setTechnicsData","fileldsErr","setFileldsErr","changeData","field","newTechnicsData","newFileldsErr","multiline","isError","save","is_public","expanded","setExpanded","openAlert","setOpenAlert","publicChecked","setPublicChecked","header","body","commit","alertTexts","setAlertTexts","dateOfDream","getDate","getMonth","getFullYear","getHours","getMinutes","slice","srcContent","toString","jsonPparse","convertfromraw","convertFromRaw","text_content","EditorState","createWithContent","getPlainText","closeMenu","clickMenu","newAlertTexts","checked","loadPosts","newPublic","Dialog","onClose","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","DialogActions","autoFocus","Menu","keepMounted","ListItemIcon","FormControlLabel","control","Checkbox","Card","raised","CardHeader","paddingBottom","Tooltip","disableFocusListener","disableTouchListener","subheader","aria-label","CardActions","disableSpacing","clsx","aria-expanded","Collapse","in","unmountOnExit","CardContent","technic","tag","readOnly","setDreams","useCallback","disableShrink","TransitionDown","Slide","setCurrLangAction","setTheme","prevLanguage","setPrevLanguage","openLangSnakbar","setOpenLangSnakbar","langSnakbarMessage","setLangSnakbarMessage","setTransition","changeLanguage","language","RuDict","handleCloseLangSnakbar","times_mode","Snackbar","TransitionComponent","SnackbarContent","newLang","newUserData","ButtonBase","focusRipple","alert","newPaletteType","primaryColor","secondaryColor","Transition","forwardRef","ref","setUserState","State","email","loginData","setLoginData","password2","registData","setRegistData","emailErr","emailErrText","nicknameErr","nicknameErrText","passwordErr","passwordErrText","password2Err","password2ErrText","regFieldErrors","setRegFieldErrors","showPassword","setShowPassword","openLogin","setOpenLogin","openRegist","setOpenRegist","page","setPage","handleMouseDownPassword","preventDefault","singUp","isErr","newRegFieldErrors","newRegistData","click","response","newPages","setItem","passwordincorrect","newLoginData","changeAuthLogin","changeAuthPassword","InputProps","endAdornment","InputAdornment","tabIndex","edge","onMouseDown","button","path","mdiVk","helperText","changeRegistLogin","changeRegistNickname","changeRegistPassword","changeRegistPassword2","aboutPaper","actions","loadTechnics","CardActionArea","CardMedia","gutterBottom","roles","useStyles1","green","dark","amber","iconVariant","marginRight","MySnackbarContentWrapper","Icon","openSnackbar","setOpenSnackbar","openSnackbarVariant","setOpenSnackbarVariant","snackbarMessage","setSnackbarMessage","handleCloseSnackbar","reason","autoHideDuration","exact","Sign","DreamMap","AddLocation","MainPage","ViewDreams","AddDream","AddCDream","Technics","AddTechnics","check","removeItem","round","animationDuration","scale","speed","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c44d2956.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/map.71ce46a8.png\";","module.exports = __webpack_public_path__ + \"static/media/sun.4f817e2f.png\";","module.exports = __webpack_public_path__ + \"static/media/moon.ca0fb531.png\";","module.exports = __webpack_public_path__ + \"static/media/astronaut.7219d35a.png\";","module.exports = __webpack_public_path__ + \"static/media/cloud.7fb181bd.svg\";","import { createBrowserHistory } from \"history\";\r\n\r\nexport default createBrowserHistory();","export const GET_ERRORS = \"GET_ERRORS\";\r\nexport const USER_LOADING = \"USER_LOADING\";\r\nexport const SET_CURRENT_USER = \"SET_CURRENT_USER\";\r\n\r\nexport const SET_CLOUD = 'SET_CLOUD';\r\nexport const CLEAR_CLOUD = 'CLEAR_CLOUD';\r\n\r\nexport const SET_STAR = 'SET_STAR';\r\nexport const CLEAR_STAR = 'CLEAR_STAR';\r\n\r\nexport const SET_LANG = 'SET_LANG';\r\nexport const SET_THEME_MODE = 'SET_THEME_MODE';\r\n\r\nexport const SET_SNACKBAR_MODE = 'SET_SNACKBAR_MODE';","const words = {\r\n    current: 'En',\r\n    buttons: {\r\n        signIn: 'Sign in',\r\n        signUp: 'Sign up',\r\n        dreamJoirnal: 'Dream joirnal',\r\n        addDream: 'Add dream',\r\n        addCDream: 'Add C-dream',\r\n        techniques: 'Techniques',\r\n        adventures: 'Adventures',\r\n        close: 'Back',\r\n        about: 'About us',\r\n        cancel: 'Cancel',\r\n        add: 'Add',\r\n        Edit: 'Edit',\r\n        Delete: 'Delete',\r\n        Save: 'Save',\r\n        addTag: 'New loc',\r\n    },\r\n    texts: {\r\n        about: 'About us About us About us About us About us About us About us About us About us About us ',\r\n        or: 'OR',\r\n        nickname: 'Nickname',\r\n        password: 'Password',\r\n        passwordAgain: 'Password again',\r\n        cancel: 'Cancel',\r\n        sucessRegistration: 'You are sign up successful',\r\n        hello: 'Hello, ',\r\n        changleLanguage: 'Save change language to ',\r\n        success: 'Success',\r\n        title: 'Title',\r\n        description: 'Description',\r\n        content: \"What's a dream\",\r\n        tags: 'Locations',\r\n        dreams: 'Dreams',\r\n        technics: 'Technics',\r\n        rating: 'Realistics',\r\n        Dream: 'Regular dream',\r\n        Cdream: 'C-dream',\r\n        NoDreams: \"You don't have dreams\",\r\n        pickDate: \"Date\",\r\n        pickTime: \"Time\",\r\n        TapToShow: \"Tap on text to show highlights\",\r\n        Public: \"Public\",\r\n        Publish: \"Unpublish\",\r\n        Unpublish: \"Publish\",\r\n        PublicAlert: \"Are you sure you want to public the dream?\",\r\n        PublicText: \"After public your friends can read this dream.\",\r\n        PublicDescription: \"Your friends can read this dream\",\r\n        UnpublicAlert: \"Are you sure you want to unpublic the dream?\",\r\n        UnpublicText: \"After unpublic your friends can't read this dream.\",\r\n        UnpublicDescription: \"Your friends can't read this dream\",\r\n        DeleteAlert: \"Are you sure you want to remove?\",\r\n        DeleteText: \"You can't restore data.\",\r\n        Name: \"Name\",\r\n        ChangeIcon: \"Icon\",\r\n    },\r\n    errors: {\r\n        emailLenght: 'Email must not be empty',\r\n        nicknameLenght: 'Nickname must not be empty',\r\n        passwordLenght: 'Password must not be empty',\r\n        password2Lenght: 'Password must not be empty',\r\n        passwordsCompare: 'Passwords not equal',\r\n        UserNotExist: 'Invalid email or password',\r\n        EmailIsNotValid: 'Invalid email',\r\n        IncorrectPassword: 'Invalid email or password',\r\n        EmailIsBusy: 'Email is busy',\r\n        PasswordLenght5Symbols: 'Minimum password length: 5 symbols',\r\n        NotLogin: 'You not loggin in',\r\n        EmptyName: 'Name must not be empty',\r\n        EmptyTitle: 'Title must not be empty',\r\n        EmptyDescription: 'Description must not be empty',\r\n        EmptyDream: 'Dream must not be empty',\r\n        NoChanges: 'No changes',\r\n        CantDeletePost: 'Error deleting dream',\r\n        IconNotChange: 'Change icon',\r\n        ColorNotChange: 'Change color',\r\n    },\r\n};\r\n\r\nexport default words;","import { SET_LANG } from '../actions/types';\r\nimport EnDict from '../dictionary/en';\r\n\r\nconst initialState = {\r\n    currLang: EnDict,\r\n}\r\n\r\nexport function currLangReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case SET_LANG:\r\n            return { ...state, currLang: action.currLangState }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}","import { SET_CLOUD, CLEAR_CLOUD } from '../actions/types';\r\n\r\nconst initialState = {\r\n\tclouds: [],\r\n}\r\n\r\nexport function cloudsReducer(state = initialState, action) {\r\n\tswitch (action.type) {\r\n\t\tcase SET_CLOUD:\r\n\t\t\treturn {\r\n\t\t\t\t...state, clouds: [...state.clouds, action.cloudState]\r\n\t\t\t}\r\n\t\tcase CLEAR_CLOUD:\r\n\t\t\treturn {\r\n\t\t\t\t...state, clouds: []\r\n\t\t\t}\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n}","import { SET_STAR, CLEAR_STAR } from '../actions/types';\r\n\r\nconst initialState = {\r\n\tstars: [],\r\n}\r\n\r\nexport function starsReducer(state = initialState, action) {\r\n\tswitch (action.type) {\r\n\t\tcase SET_STAR:\r\n\t\t\treturn {\r\n\t\t\t\t...state, stars: [...state.stars, action.starState]\r\n\t\t\t}\r\n\t\tcase CLEAR_STAR:\r\n\t\t\treturn {\r\n\t\t\t\t...state, stars: []\r\n\t\t\t}\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n}","import { SET_THEME_MODE } from '../actions/types';\r\n\r\nconst initialState = {\r\n    palette: {\r\n        type: \"dark\",\r\n        primary: { main: \"#f9a825\" },\r\n        secondary: { main: \"#f50057\" },\r\n        error: { main: \"#cc0000\" },\r\n    },\r\n}\r\n\r\nexport function themeReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case SET_THEME_MODE:\r\n            return { ...state, palette: action.palette }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}","import { SET_CURRENT_USER, USER_LOADING } from \"../actions/types\";\r\n\r\nconst isempty = require(\"is-empty\");\r\n\r\nconst initialState = {\r\n    isAuthenticated: false,\r\n    user: {},\r\n    loading: false\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case SET_CURRENT_USER:\r\n            return {\r\n                ...state,\r\n                isAuthenticated: !isempty(action.payload),\r\n                user: action.payload\r\n            };\r\n        case USER_LOADING:\r\n            return {\r\n                ...state,\r\n                loading: true\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}","import { GET_ERRORS } from \"../actions/types\";\r\nconst initialState = {};\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case GET_ERRORS:\r\n            return action.payload;\r\n        default:\r\n            return state;\r\n    }\r\n}","import { SET_SNACKBAR_MODE } from '../actions/types';\r\n\r\nconst initialState = {\r\n    snackbar: {\r\n        open: false,\r\n        variant: '',\r\n        message: '',\r\n    },\r\n}\r\n\r\nexport function snackbarReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case SET_SNACKBAR_MODE:\r\n            return { ...state, snackbar: action.snackbar }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}","import { combineReducers } from 'redux';\r\nimport { currLangReducer } from './currLang';\r\nimport { cloudsReducer } from './cloud';\r\nimport { starsReducer } from './star';\r\nimport { themeReducer } from './themeMode';\r\nimport authReducer from './authReducer';\r\nimport errorReducer from './errorReducer';\r\nimport { snackbarReducer } from './snackbarReducer';\r\n\r\nexport const rootReducer = combineReducers({\r\n    lang: currLangReducer,\r\n    clouds: cloudsReducer,\r\n    stars: starsReducer,\r\n    themeMode: themeReducer,\r\n    auth: authReducer,\r\n    errors: errorReducer,\r\n    snackbar: snackbarReducer,\r\n});","import { createStore, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { rootReducer } from './reducers';\r\n\r\nconst middleware = [thunk];\r\n\r\nexport const store = createStore(\r\n    rootReducer,\r\n    {},\r\n    applyMiddleware(...middleware)\r\n);","import axios from \"axios\";\r\n\r\nconst setAuthToken = token => {\r\n    if (token) {\r\n        // Apply authorization token to every request if logged in\r\n        axios.defaults.headers.common[\"Authorization\"] = token;\r\n    }\r\n    else {\r\n        // Delete auth header\r\n        delete axios.defaults.headers.common[\"Authorization\"];\r\n    }\r\n};\r\n\r\nexport default setAuthToken;","import jwt_decode from \"jwt-decode\";\r\n\r\nimport { store } from \"../store\";\r\nimport setAuthToken from \"../utils/setAuthToken\";\r\nimport { SET_CURRENT_USER } from \"../actions/types\"\r\n\r\nexport function CheckTimeOut() {\r\n    if (localStorage.jwtToken) {\r\n        const token = localStorage.jwtToken;\r\n        setAuthToken(token);\r\n        const decoded = jwt_decode(token);\r\n        store.dispatch({\r\n            type: SET_CURRENT_USER,\r\n            payload: decoded\r\n        });\r\n\r\n        const currentTime = Date.now() / 1000; // to get in milliseconds\r\n        if (decoded.exp < currentTime) {\r\n            return false;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }\r\n}","import { SET_LANG } from '../actions/types';\r\n\r\nexport function setCloud(state) {\r\n\treturn {\r\n\t\ttype: state.type,\r\n\t\tcloudState: state.cloudState,\r\n\t}\r\n}\r\nexport function setStar(state) {\r\n\treturn {\r\n\t\ttype: state.type,\r\n\t\tstarState: state.starState,\r\n\t}\r\n}\r\nexport function setCurrLang(state) {\r\n\treturn {\r\n\t\ttype: SET_LANG,\r\n\t\tcurrLangState: state,\r\n\t}\r\n}\r\nexport function setTheme(state) {\r\n\treturn {\r\n\t\ttype: state.type,\r\n\t\tpalette: state.palette,\r\n\t}\r\n}\r\nexport function setUserState(state) {\r\n\treturn {\r\n\t\ttype: state.type,\r\n\t\tpayload: state.payload,\r\n\t}\r\n}\r\nexport function setSnackbar(state) {\r\n\treturn {\r\n\t\ttype: state.type,\r\n\t\tsnackbar: state.snackbar,\r\n\t}\r\n}","import React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst PrivateRoute = ({ component: Component, auth, ...rest }) => (\r\n    <Route\r\n        {...rest}\r\n        render={props =>\r\n            auth.isAuthenticated === true\r\n                ? <Component {...props} />\r\n                : <Redirect to=\"/\" />\r\n        }\r\n    />\r\n);\r\n\r\nPrivateRoute.propTypes = {\r\n    auth: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    auth: state.auth\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps\r\n)(PrivateRoute);","import axios from \"axios\";\r\n\r\n\r\nexport const instance = axios.create({\r\n    baseURL: 'https://ldserver.herokuapp.com',\r\n    timeout: 10000,\r\n    headers: { \"Access-Control-Allow-Origin\": \"*\" }\r\n});","import { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\nimport WarningIcon from '@material-ui/icons/Warning';\r\nimport ErrorIcon from '@material-ui/icons/Error';\r\nimport InfoIcon from '@material-ui/icons/Info';\r\n\r\nimport MapImg from '../img/map.png';\r\nimport SunImg from '../img/sun.png';\r\nimport MoonImg from '../img/moon.png';\r\nimport AstronautImg from '../img/astronaut.png';\r\nimport CloudSvg from '../img/cloud.svg';\r\n\r\nexport const params = {\r\n    amountStars: 25,\r\n    amountClouds: 5,\r\n    size: {\r\n        min: 1,\r\n        max: 5,\r\n        giant: 9\r\n    },\r\n    duration: {\r\n        min: 5,\r\n        max: 25,\r\n    }\r\n}\r\n\r\nexport const variantIcon = {\r\n    success: CheckCircleIcon,\r\n    warning: WarningIcon,\r\n    error: ErrorIcon,\r\n    info: InfoIcon,\r\n};\r\n\r\nexport function randomBetween(a, b) {\r\n    return (a + (Math.random() * (b - a)));\r\n}\r\n\r\nexport const useStyles = makeStyles(theme => ({\r\n    formControl: {\r\n        position: 'absolute',\r\n        left: '50%',\r\n        top: '50%',\r\n        transform: 'translate(-50%, -50%)',\r\n        width: 'auto',\r\n        height: 'auto',\r\n    },\r\n    SwipeableViews: {\r\n        position: 'relative',\r\n        height: '90%',\r\n        '& .react-swipeable-view-container': {\r\n            height: '100% !Important',\r\n        },\r\n    },\r\n    media: {\r\n        height: 140,\r\n    },\r\n    iconCenter: {\r\n        display: \"block\",\r\n        margin: \"auto\"\r\n    },\r\n    dreamCardDiv: {\r\n        marginTop: '15px',\r\n        marginBottom: '15px',\r\n        width: '100%',\r\n        height: 'auto',\r\n        borderRadius: '4px',\r\n    },\r\n    divDreamsNotFoundImg: {\r\n        background: \"url('https://static.thenounproject.com/png/603669-200.png') no-repeat center\",\r\n    },\r\n    divDreamsNotFound: {\r\n        position: \"relative\",\r\n        left: \"50%\",\r\n        transform: \"translateX(-50%)\",\r\n        width: 200,\r\n        height: 100,\r\n        textAlign: \"center\",\r\n    },\r\n    contentPaper: {\r\n        backgroundColor: theme.palette.text.main,\r\n        padding: 10,\r\n    },\r\n    pickerGridContainer: {\r\n        position: \"relative\",\r\n        width: \"85%\",\r\n        left: \"50%\",\r\n        transform: \"translateX(-50%)\",\r\n        marginBottom: \"5px\",\r\n    },\r\n    div85width: {\r\n        position: \"relative\",\r\n        width: \"85%\",\r\n        top: \"65%\",\r\n        left: \"50%\",\r\n        transform: \"translate(-50%, -50%)\",\r\n    },\r\n    ratingGridContainer: {\r\n        position: \"relative\",\r\n        width: \"100%\",\r\n        top: \"65%\",\r\n        left: \"50%\",\r\n        transform: \"translate(-50%, -50%)\",\r\n    },\r\n    pickers: {\r\n        position: \"relative\",\r\n        width: \"90%\",\r\n        left: \"50%\",\r\n        transform: \"translateX(-50%)\",\r\n    },\r\n    avatarRoot: {\r\n        textAlign: 'center',\r\n        width: '100%',\r\n    },\r\n    verySmallAvatar: {\r\n        margin: theme.spacing(1),\r\n        width: theme.spacing(3),\r\n        height: theme.spacing(3),\r\n        display: 'inline-flex !Important',\r\n    },\r\n    smallAvatar: {\r\n        margin: theme.spacing(0.5),\r\n        width: theme.spacing(5),\r\n        height: theme.spacing(5),\r\n        display: 'inline-flex !Important',\r\n    },\r\n    smallChip: {\r\n        margin: theme.spacing(0.5),\r\n    },\r\n    centerCircularProgress: {\r\n        position: 'relative',\r\n        top: '50%',\r\n        left: '50%',\r\n    },\r\n    mainGridDreamsBodyItemContainer: {\r\n        paddingTop: '16px',\r\n        position: 'absolute',\r\n        boxSizing: 'border-box',\r\n        maxHeight: '90%',\r\n        overflow: 'auto',\r\n        borderRadius: '4px',\r\n    },\r\n    mainGridDreamsBodyItemContainerPaper: {\r\n        height: '100%',\r\n        opacity: 0.9,\r\n    },\r\n    mainGridDreamsBodyItem: {\r\n        overflow: 'hidden',\r\n    },\r\n    mainGridDreamsContainer: {\r\n        height: '100%',\r\n        position: 'relative',\r\n        width: '90%',\r\n        left: '50%',\r\n        transform: 'translateX(-50%)',\r\n    },\r\n    card: {\r\n        maxWidth: '100%',\r\n        height: '100%',\r\n    },\r\n    expand: {\r\n        transform: \"rotate(0deg)\",\r\n        marginLeft: \"auto\",\r\n        transition: theme.transitions.create(\"transform\", {\r\n            duration: theme.transitions.duration.shortest\r\n        })\r\n    },\r\n    expandOpen: {\r\n        transform: \"rotate(180deg)\"\r\n    },\r\n    textField: {\r\n        width: '100%',\r\n    },\r\n    margin: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    root: {\r\n        flexGrow: 1,\r\n        position: 'relative',\r\n        width: '100%',\r\n        height: window.innerHeight - 1,\r\n        overflow: 'hidden',\r\n    },\r\n    mainPage: {\r\n        top: 0,\r\n        left: 0,\r\n        position: 'absolute',\r\n        transition: 'all 0.3s linear',\r\n        width: '100%',\r\n        height: '100%',\r\n    },\r\n    aboutPage: {\r\n        position: 'absolute',\r\n        transition: 'all 0.3s linear',\r\n        top: '100%',\r\n        width: '100%',\r\n        height: '100%',\r\n    },\r\n    AppDivDark: {\r\n        position: 'fixed',\r\n        background: 'radial-gradient(ellipse at center, rgba(8, 25, 42, 1) 20%, rgba(1, 4, 6, 1) 100%)',\r\n        opacity: 1,\r\n        margin: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        zIndex: -3,\r\n    },\r\n    AppDivLight: {\r\n        position: 'absolute',\r\n        background: 'radial-gradient(ellipse at center, rgba(207, 225, 237, 1) 20%, rgba(127, 170, 202, 1) 100%)',\r\n        transition: 'opacity 0.5s linear',\r\n        margin: 0,\r\n        opacity: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        zIndex: -3,\r\n    },\r\n    AppStarsDiv: {\r\n        transition: 'opacity 0.5s linear',\r\n        opacity: 0,\r\n        position: 'absolute',\r\n        width: '100%',\r\n        height: '100%',\r\n        overflow: 'hidden',\r\n        zIndex: -2,\r\n    },\r\n    AppCloudsDiv: {\r\n        transition: 'opacity 0.5s linear',\r\n        opacity: 0,\r\n        position: 'absolute',\r\n        width: '100%',\r\n        height: '100%',\r\n        overflow: 'hidden',\r\n        zIndex: -2,\r\n    },\r\n    AppStar: {\r\n        borderRadius: '100%',\r\n        position: 'absolute',\r\n        background: 'radial-gradient(ellipse at center, rgba(177, 198, 219, 1) 2%, rgba(5, 63, 118, 1) 100%)',\r\n        filter: 'blur(1px)',\r\n        animation: '$shine infinite alternate',\r\n        zIndex: -1,\r\n    },\r\n    AppCloud: {\r\n        position: 'absolute',\r\n        backgroundRepeat: 'no-repeat',\r\n        backgroundImage: 'url(' + CloudSvg + ')',\r\n        animation: '$moveclouds infinite linear',\r\n        zIndex: -1,\r\n    },\r\n    image: {\r\n        position: 'relative',\r\n        left: '50%',\r\n        top: '25%',\r\n        transform: 'translate(-50%, -25%)',\r\n        width: '35vw !important',\r\n        height: '35vw',\r\n        borderRadius: '50%',\r\n    },\r\n    SkyDiv: {\r\n        position: 'absolute',\r\n        borderRadius: '50%',\r\n        top: 0,\r\n        left: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        overflow: 'hidden',\r\n    },\r\n    MoonSrc: {\r\n        backgroundSize: 'cover',\r\n        background: 'url(' + MoonImg + ')',\r\n        backgroundRepeat: 'no-repeat',\r\n        position: 'absolute',\r\n        top: 0,\r\n        left: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        transition: 'all 0.3s linear',\r\n    },\r\n    SunSrc: {\r\n        backgroundSize: 'cover',\r\n        background: 'url(' + SunImg + ')',\r\n        backgroundRepeat: 'no-repeat',\r\n        position: 'absolute',\r\n        top: 0,\r\n        left: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        transition: 'all 0.3s linear',\r\n    },\r\n    AstronautButton: {\r\n        position: 'relative',\r\n        left: '50%',\r\n        top: '50%',\r\n        transform: 'translate(-50%, -50%)',\r\n        width: '25vw !important',\r\n        height: '25vw',\r\n        borderRadius: '50%',\r\n    },\r\n    AstronautDiv: {\r\n        position: 'absolute',\r\n        borderRadius: '50%',\r\n        top: 0,\r\n        left: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        overflow: 'hidden',\r\n        animation: '$swinging 30s infinite linear',\r\n    },\r\n    AstronautImg: {\r\n        backgroundSize: 'cover',\r\n        background: 'url(' + AstronautImg + ')',\r\n        backgroundRepeat: 'no-repeat',\r\n        position: 'absolute',\r\n        top: 0,\r\n        left: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        transition: 'filter 0.5s linear',\r\n    },\r\n    MapButton: {\r\n        position: 'relative',\r\n        left: '50%',\r\n        top: '50%',\r\n        transform: 'translate(-50%, -50%)',\r\n        width: '25vw !important',\r\n        height: '25vw',\r\n        borderRadius: '10%',\r\n    },\r\n    MapDiv: {\r\n        position: 'absolute',\r\n        top: 0,\r\n        left: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        overflow: 'hidden',\r\n        animation: '$swinging 30s infinite linear',\r\n    },\r\n    MapImg: {\r\n        backgroundSize: 'cover',\r\n        background: 'url(' + MapImg + ')',\r\n        backgroundRepeat: 'no-repeat',\r\n        position: 'absolute',\r\n        top: 0,\r\n        left: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        transition: 'filter 0.5s linear',\r\n    },\r\n    mainGridContainer: {\r\n        height: '100%',\r\n    },\r\n    mainGridHeadItem: {\r\n        maxWidth: '100% !Important',\r\n    },\r\n    mainGridBodyItem: {\r\n        maxWidth: '100% !Important',\r\n        position: 'relative',\r\n    },\r\n    menuButtonContainerItem: {\r\n        maxWidth: '100% !Important',\r\n    },\r\n    menuButtonContainer: {\r\n        height: '100% !Important',\r\n    },\r\n    menuButtonGrid: {\r\n    },\r\n    menuDivButton: {\r\n        maxWidth: '100% !Important',\r\n        padding: '10px',\r\n    },\r\n    menuButton: {\r\n        minWidth: '55vw',\r\n        maxWidth: '55vw',\r\n    },\r\n    actionButton: {\r\n        minWidth: '40vw',\r\n        maxWidth: '40vw',\r\n    },\r\n    poppupButton: {\r\n        minWidth: '90%',\r\n        maxWidth: '90%',\r\n    },\r\n    mainGridFooterItem: {\r\n        maxWidth: '100% !Important',\r\n    },\r\n    menuButtonContainerFooterLanguageButtons: {\r\n    },\r\n    aboutGridContainer: {\r\n        width: '100%',\r\n        height: '100%',\r\n        margin: 0,\r\n    },\r\n    fullMinWidth: {\r\n        minWidth: '100% !Important',\r\n        position: 'relative'\r\n    },\r\n    inputDiv: {\r\n        minWidth: '85% !Important',\r\n        maxWidth: '85% !Important',\r\n        position: 'absolute',\r\n        top: '50%',\r\n        left: '50%',\r\n        transform: 'translate(-50%, -50%)',\r\n        opacity: 1,\r\n    },\r\n    inputScrollableDiv: {\r\n        minWidth: '85% !Important',\r\n        maxWidth: '85% !Important',\r\n        height: '100%',\r\n        position: 'absolute',\r\n        top: '50%',\r\n        left: '50%',\r\n        transform: 'translate(-50%, -50%)',\r\n        opacity: 1,\r\n    },\r\n    chips: {\r\n        display: \"flex\",\r\n        flexWrap: \"wrap\",\r\n    },\r\n    noWrap: {\r\n        flexWrap: 'nowrap',\r\n    },\r\n    chip: {\r\n        margin: 1\r\n    },\r\n    aboutGridItem: {\r\n        width: '100%',\r\n    },\r\n    mainPaperGridBodyItem: {\r\n        maxWidth: '100% !Important',\r\n    },\r\n    paper: {\r\n        height: '90%',\r\n        margin: theme.spacing(3, 2),\r\n        opacity: 0.9,\r\n    },\r\n    minMargin: {\r\n        margin: theme.spacing(0.5),\r\n    },\r\n    VKLoginDiv: {\r\n        position: 'absolute',\r\n        width: '15vw',\r\n        height: '15vw',\r\n    },\r\n    VKLoginButton: {\r\n        background: 'url(https://dressirovka70.ru/wp-content/uploads/2019/10/1200px-VK.com-logo.svg1_-1024x1024.png)',\r\n        boxShadow: '0px 3px 1px -2px rgba(0,0,0,0.2), 0px 2px 2px 0px rgba(0,0,0,0.14), 0px 1px 5px 0px rgba(0,0,0,0.12)',\r\n        backgroundSize: 'cover',\r\n        borderRadius: '25%',\r\n        width: '100%',\r\n        height: '100%',\r\n    },\r\n    \"@keyframes shine\": {\r\n        \"0%\": {\r\n            transform: 'scale(1)',\r\n            opacity: '1',\r\n        },\r\n        \"20%\": {\r\n            transform: 'scale(.9)',\r\n            opacity: '.8',\r\n        },\r\n        \"40%\": {\r\n            transform: 'scale(1)',\r\n            opacity: '.9',\r\n        },\r\n        \"60%\": {\r\n            transform: 'scale(.2)',\r\n            opacity: '.1',\r\n        },\r\n        \"80%\": {\r\n            transform: 'scale(.5)',\r\n            opacity: '.5',\r\n        },\r\n        \"100%\": {\r\n            transform: 'scale(.9)',\r\n            opacity: '.9',\r\n        },\r\n    },\r\n    \"@keyframes moveclouds\": {\r\n        '100%': {\r\n            left: '-100%',\r\n        },\r\n    },\r\n    \"@keyframes swinging\": {\r\n        '0%': {\r\n            transform: 'rotate(0)',\r\n        },\r\n        '10%': {\r\n            transform: 'rotate(12deg)',\r\n        },\r\n        '20%': {\r\n            transform: 'rotate(-10deg)',\r\n        },\r\n        '30%': {\r\n            transform: 'rotate(9deg)',\r\n        },\r\n        '40%': {\r\n            transform: 'rotate(-8deg)',\r\n        },\r\n        '50%': {\r\n            transform: 'rotate(7deg)',\r\n        },\r\n        '60%': {\r\n            transform: 'rotate(-6deg)',\r\n        },\r\n        '70%': {\r\n            transform: 'rotate(5deg)',\r\n        },\r\n        '80%': {\r\n            transform: 'rotate(-4deg)',\r\n        },\r\n        '90%': {\r\n            transform: 'rotate(3deg)',\r\n        },\r\n        '100%': {\r\n            transform: 'rotate(0)',\r\n        },\r\n    }\r\n}));","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Popover from \"@material-ui/core/Popover\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nimport Skeleton from '@material-ui/lab/Skeleton';\r\n\r\nimport EditIcon from '@material-ui/icons/Edit';\r\n\r\nimport { useStyles } from '../../styles/Styles';\r\n//import { SET_SNACKBAR_MODE } from \"../../actions/types\";\r\nimport { setSnackbar } from '../../actions/Actions';\r\n\r\nfunction MapCell(props) {\r\n    const classes = useStyles();\r\n    const { i, j, cellHeight, cellWidth, id, locations, palette, lang, loadMap, history } = props;\r\n    const [anchorEl, setAnchorEl] = React.useState(null);\r\n    const [tagId, setTagId] = React.useState(id);\r\n    const disabledSave = tagId === id ? true : false;\r\n\r\n    const handleClick = event => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setTagId(id);\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    const changeTagId = event => {\r\n        setTagId(event.target.value);\r\n    };\r\n\r\n    const editLocation = () => {\r\n        history.push({\r\n            pathname: \"/addlocation\",\r\n            defaultData: {\r\n                id: tagId,\r\n                name_rus: locations.find(loc => loc.id === tagId).name_rus,\r\n                name_eng: locations.find(loc => loc.id === tagId).name_eng,\r\n                img_url: locations.find(loc => loc.id === tagId).img_url,\r\n                color: locations.find(loc => loc.id === tagId).color,\r\n                prevUrl: \"/dreammap\",\r\n            }\r\n        });\r\n    };\r\n\r\n    const saveCellLoc = () => {\r\n        let newCell = {\r\n            \"i\": i,\r\n            \"j\": j,\r\n        };\r\n        newCell.oldLoc = id;\r\n        newCell.newLoc = tagId;\r\n        console.log(newCell);\r\n        setAnchorEl(null);\r\n        loadMap();\r\n    };\r\n\r\n    const open = Boolean(anchorEl);\r\n    const popoverId = open ? \"simple-popover\" : undefined;\r\n\r\n    return (\r\n        <td\r\n            style={{\r\n                height: cellHeight + 'px',\r\n                minWidth: cellWidth + 'px',\r\n                maxWidth: cellWidth + 'px',\r\n                padding: 0,\r\n                margin: 0,\r\n                transition: \"all 0.1s\",\r\n            }}\r\n        >\r\n            {locations.length\r\n                ? <div className={classes.aboutGridContainer}\r\n                    onClick={handleClick}\r\n                    style={{\r\n                        backgroundImage: 'url(' + locations.find(loc => loc.id === tagId).img_url + ')',\r\n                        backgroundSize: 'contain',\r\n                        backgroundColor: locations.find(loc => loc.id === tagId).color,\r\n                        overflow: 'hidden',\r\n                        //position: 'absolute',\r\n                        // width: cellWidth,\r\n                        // height: cellHeight,\r\n                        // transform: 'rotateZ(45deg) rotateY(0deg) rotateX(-60deg)',\r\n                        // transformOrigin: 'bottom center',\r\n                        // borderRadius: '40%',\r\n                    }}\r\n                />\r\n                : <Skeleton variant=\"circle\" width={cellHeight} height={cellWidth} />\r\n\r\n            }\r\n\r\n            <Popover\r\n                id={popoverId}\r\n                open={open}\r\n                anchorEl={anchorEl}\r\n                anchorOrigin={{\r\n                    vertical: \"center\",\r\n                    horizontal: \"center\"\r\n                }}\r\n                transformOrigin={{\r\n                    vertical: \"center\",\r\n                    horizontal: \"center\"\r\n                }}\r\n            >\r\n                <Grid className={classes.mainGridContainer}\r\n                    container\r\n                    direction=\"column\"\r\n                    justify=\"center\"\r\n                    alignItems=\"stretch\"\r\n                >\r\n                    <Grid item\r\n                        xs={11}\r\n                        className={classes.mainGridBodyItem}\r\n                        style={{\r\n                            padding: '16px'\r\n                        }}\r\n                    >\r\n                        {locations.length\r\n                            ? <Grid className={classes.mainGridContainer}\r\n                                container\r\n                                direction=\"column\"\r\n                                justify=\"center\"\r\n                                alignItems=\"stretch\"\r\n                            >\r\n                                <Grid item>\r\n                                    <Grid className={classes.mainGridContainer}\r\n                                        container\r\n                                        direction=\"row\"\r\n                                        justify=\"center\"\r\n                                        alignItems=\"stretch\"\r\n                                    >\r\n                                        <Grid item xs={10}\r\n                                            style={{\r\n                                                textAlign: 'center',\r\n                                                position: 'relative',\r\n                                            }}\r\n                                        >\r\n                                            <Typography variant='h6'\r\n                                                style={{\r\n                                                    position: 'absolute',\r\n                                                    top: '50%',\r\n                                                    left: '50%',\r\n                                                    transform: 'translate(-50%, -50%)',\r\n                                                }}\r\n                                            >\r\n                                                {lang.currLang.current === \"Ru\"\r\n                                                    ? locations.find(loc => loc.id === tagId).name_rus\r\n                                                    : locations.find(loc => loc.id === tagId).name_eng\r\n                                                }\r\n                                            </Typography>\r\n                                        </Grid>\r\n                                        <Grid item xs={2}>\r\n                                            <IconButton onClick={editLocation}>\r\n                                                <EditIcon fontSize=\"small\" />\r\n                                            </IconButton >\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Grid\r\n                                        container\r\n                                        direction=\"row\"\r\n                                        justify=\"space-around\"\r\n                                        alignItems=\"center\"\r\n                                    >\r\n                                        <Grid item>\r\n                                            <FormControl>\r\n                                                <Select value={tagId}\r\n                                                    onChange={changeTagId}\r\n                                                    MenuProps={{\r\n                                                        PaperProps: {\r\n                                                            style: {\r\n                                                                maxHeight: 48 * 4.5 + 8,\r\n                                                                width: 'auto',\r\n                                                            },\r\n                                                        },\r\n                                                    }}\r\n                                                >\r\n                                                    {locations.map((item, key) => (\r\n                                                        <MenuItem key={key} value={item.id}>\r\n                                                            <Avatar className={classes.smallAvatar}\r\n                                                                src={item.img_url}\r\n                                                                style={palette.type === 'dark'\r\n                                                                    ? {\r\n                                                                        filter: 'invert(1)',\r\n                                                                    }\r\n                                                                    : {}\r\n                                                                }\r\n                                                            />\r\n                                                        </MenuItem>\r\n                                                    ))}\r\n                                                </Select>\r\n                                            </FormControl>\r\n                                        </Grid>\r\n                                        <Grid item>\r\n                                            <Typography component='div' variant='body2'>\r\n                                                {lang.currLang.texts.dreams}:\r\n                                            </Typography>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                            : ''\r\n                        }\r\n                    </Grid>\r\n                    <Grid item xs={1} className={classes.mainGridBodyItem}>\r\n                        <Grid className={classes.menuDivButton}\r\n                            container\r\n                            direction=\"row\"\r\n                            justify=\"space-around\"\r\n                            alignItems=\"stretch\"\r\n                        >\r\n                            <Grid item xs={6} align=\"center\">\r\n                                <Button className={classes.poppupButton}\r\n                                    variant=\"contained\"\r\n                                    color=\"secondary\"\r\n                                    onClick={handleClose}\r\n                                >\r\n                                    {lang.currLang.texts.cancel}\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid item xs={6} align=\"center\">\r\n                                <Button className={classes.poppupButton}\r\n                                    disabled={disabledSave}\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    onClick={saveCellLoc}\r\n                                >\r\n                                    {lang.currLang.buttons.Save}\r\n                                </Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Popover>\r\n        </td >\r\n    )\r\n}\r\n\r\nMapCell.propTypes = {\r\n    setSnackbar: PropTypes.func.isRequired,\r\n    lang: PropTypes.object.isRequired,\r\n    palette: PropTypes.object.isRequired,\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        lang: store.lang,\r\n        palette: store.themeMode.palette,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setSnackbar: snackbar => dispatch(setSnackbar(snackbar)),\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(MapCell);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Container from '@material-ui/core/Container';\r\nimport Button from '@material-ui/core/Button';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Fab from '@material-ui/core/Fab';\r\n\r\nimport RemoveIcon from '@material-ui/icons/Remove';\r\nimport AddIcon from '@material-ui/icons/Add';\r\n\r\nimport { instance } from './Config';\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\nimport MapCell from './muiltiple/MapCell';\r\nimport { useStyles } from '../styles/Styles';\r\n\r\nconst JSONtable = {\r\n    0: {\r\n        0: {\r\n            id: 5,\r\n        },\r\n        1: {\r\n            id: 3,\r\n        },\r\n        2: {\r\n            id: 4,\r\n        },\r\n        3: {\r\n            id: 4,\r\n        },\r\n        4: {\r\n            id: 4,\r\n        },\r\n        5: {\r\n            id: 4,\r\n\r\n        },\r\n        6: {\r\n            id: 4,\r\n\r\n        },\r\n        7: {\r\n            id: 4,\r\n\r\n        },\r\n        8: {\r\n            id: 4,\r\n\r\n        },\r\n        9: {\r\n            id: 4,\r\n\r\n        },\r\n    },\r\n    1: {\r\n        0: {\r\n            id: 5,\r\n        },\r\n        1: {\r\n            id: 6,\r\n        },\r\n        2: {\r\n            id: 4,\r\n\r\n        },\r\n        3: {\r\n            id: 4,\r\n\r\n        },\r\n        4: {\r\n            id: 4,\r\n\r\n        },\r\n        5: {\r\n            id: 4,\r\n\r\n        },\r\n        6: {\r\n            id: 4,\r\n\r\n        },\r\n        7: {\r\n            id: 4,\r\n\r\n        },\r\n        8: {\r\n            id: 4,\r\n\r\n        },\r\n        9: {\r\n            id: 4,\r\n\r\n        },\r\n    },\r\n    2: {\r\n        0: {\r\n            id: 5,\r\n        },\r\n        1: {\r\n            id: 5,\r\n        },\r\n        2: {\r\n            id: 4,\r\n\r\n        },\r\n        3: {\r\n            id: 4,\r\n\r\n        },\r\n        4: {\r\n            id: 4,\r\n\r\n        },\r\n        5: {\r\n            id: 4,\r\n\r\n        },\r\n        6: {\r\n            id: 4,\r\n\r\n        },\r\n        7: {\r\n            id: 4,\r\n\r\n        },\r\n        8: {\r\n            id: 4,\r\n\r\n        },\r\n        9: {\r\n            id: 4,\r\n\r\n        },\r\n    },\r\n    3: {\r\n        0: {\r\n            id: 5,\r\n        },\r\n        1: {\r\n            id: 5,\r\n        },\r\n        2: {\r\n            id: 4,\r\n\r\n        },\r\n        3: {\r\n            id: 4,\r\n\r\n        },\r\n        4: {\r\n            id: 4,\r\n\r\n        },\r\n        5: {\r\n            id: 4,\r\n\r\n        },\r\n        6: {\r\n            id: 4,\r\n\r\n        },\r\n        7: {\r\n            id: 4,\r\n\r\n        },\r\n        8: {\r\n            id: 4,\r\n\r\n        },\r\n        9: {\r\n            id: 4,\r\n\r\n        },\r\n    },\r\n    4: {\r\n        0: {\r\n            id: 5,\r\n        },\r\n        1: {\r\n            id: 5,\r\n        },\r\n        2: {\r\n            id: 4,\r\n\r\n        },\r\n        3: {\r\n            id: 4,\r\n\r\n        },\r\n        4: {\r\n            id: 4,\r\n\r\n        },\r\n        5: {\r\n            id: 4,\r\n\r\n        },\r\n        6: {\r\n            id: 4,\r\n\r\n        },\r\n        7: {\r\n            id: 4,\r\n\r\n        },\r\n        8: {\r\n            id: 4,\r\n\r\n        },\r\n        9: {\r\n            id: 4,\r\n\r\n        },\r\n    },\r\n    5: {\r\n        0: {\r\n            id: 5,\r\n        },\r\n        1: {\r\n            id: 5,\r\n        },\r\n        2: {\r\n            id: 4,\r\n\r\n        },\r\n        3: {\r\n            id: 4,\r\n\r\n        },\r\n        4: {\r\n            id: 4,\r\n\r\n        },\r\n        5: {\r\n            id: 4,\r\n\r\n        },\r\n        6: {\r\n            id: 4,\r\n\r\n        },\r\n        7: {\r\n            id: 4,\r\n\r\n        },\r\n        8: {\r\n            id: 4,\r\n\r\n        },\r\n        9: {\r\n            id: 4,\r\n\r\n        },\r\n    },\r\n    6: {\r\n        0: {\r\n            id: 5,\r\n        },\r\n        1: {\r\n            id: 5,\r\n        },\r\n        2: {\r\n            id: 4,\r\n\r\n        },\r\n        3: {\r\n            id: 4,\r\n\r\n        },\r\n        4: {\r\n            id: 4,\r\n\r\n        },\r\n        5: {\r\n            id: 4,\r\n\r\n        },\r\n        6: {\r\n            id: 4,\r\n\r\n        },\r\n        7: {\r\n            id: 4,\r\n\r\n        },\r\n        8: {\r\n            id: 6,\r\n        },\r\n        9: {\r\n            id: 4,\r\n\r\n        },\r\n    },\r\n    7: {\r\n        0: {\r\n            id: 5,\r\n        },\r\n        1: {\r\n            id: 5,\r\n        },\r\n        2: {\r\n            id: 4,\r\n\r\n        },\r\n        3: {\r\n            id: 4,\r\n\r\n        },\r\n        4: {\r\n            id: 4,\r\n\r\n        },\r\n        5: {\r\n            id: 4,\r\n\r\n        },\r\n        6: {\r\n            id: 4,\r\n\r\n        },\r\n        7: {\r\n            id: 4,\r\n\r\n        },\r\n        8: {\r\n            id: 4,\r\n\r\n        },\r\n        9: {\r\n            id: 4,\r\n\r\n        },\r\n    },\r\n    8: {\r\n        0: {\r\n            id: 5,\r\n        },\r\n        1: {\r\n            id: 5,\r\n        },\r\n        2: {\r\n            id: 4,\r\n\r\n        },\r\n        3: {\r\n            id: 4,\r\n\r\n        },\r\n        4: {\r\n            id: 4,\r\n\r\n        },\r\n        5: {\r\n            id: 4,\r\n\r\n        },\r\n        6: {\r\n            id: 4,\r\n\r\n        },\r\n        7: {\r\n            id: 4,\r\n\r\n        },\r\n        8: {\r\n            id: 4,\r\n\r\n        },\r\n        9: {\r\n            id: 4,\r\n\r\n        },\r\n    },\r\n    9: {\r\n        0: {\r\n            id: 5,\r\n        },\r\n        1: {\r\n            id: 5,\r\n        },\r\n        2: {\r\n            id: 4,\r\n\r\n        },\r\n        3: {\r\n            id: 4,\r\n\r\n        },\r\n        4: {\r\n            id: 4,\r\n\r\n        },\r\n        5: {\r\n            id: 4,\r\n\r\n        },\r\n        6: {\r\n            id: 4,\r\n\r\n        },\r\n        7: {\r\n            id: 4,\r\n\r\n        },\r\n        8: {\r\n            id: 4,\r\n\r\n        },\r\n        9: {\r\n            id: 4,\r\n\r\n        },\r\n    },\r\n};\r\n\r\nfunction DreamMap(props) {\r\n    const { lang, themeMode, history } = props;\r\n    const classes = useStyles();\r\n    const muiTheme = createMuiTheme(themeMode);\r\n    const [cellSize, setCellSize] = React.useState(50);\r\n    const [locations, setLocations] = React.useState({});\r\n    const [dreamMap, setDreamMap] = React.useState(null);\r\n\r\n    const changeCellSize = (event, newValue) => {\r\n        setCellSize(newValue);\r\n    };\r\n\r\n    const sizeUp = () => {\r\n        const newcellSize = cellSize + 5;\r\n        setCellSize(newcellSize);\r\n    };\r\n\r\n    const sizeDown = () => {\r\n        const newcellSize = cellSize - 5;\r\n        setCellSize(newcellSize);\r\n    };\r\n\r\n    const createTable = () => {\r\n        let table = [];\r\n        let i = 0;\r\n        let j = 0;\r\n\r\n        Object.keys(dreamMap).forEach(row => {\r\n            let rows = [];\r\n            Object.keys(dreamMap[row]).forEach(col => {\r\n                rows.push(\r\n                    <MapCell key={'cell' + i + j}\r\n                        i={i}\r\n                        j={j}\r\n                        cellHeight={cellSize * 0.6}\r\n                        cellWidth={cellSize * 0.6}\r\n                        dreamMap={dreamMap}\r\n                        id={dreamMap[row][col].id}\r\n                        locations={locations}\r\n                        loadMap={loadMap}\r\n                        history={history}\r\n                    />\r\n                );\r\n                i++;\r\n            })\r\n            table.push(\r\n                <tr key={'row' + j} >\r\n                    {rows}\r\n                </tr>\r\n            );\r\n            j++;\r\n            i = 0;\r\n        });\r\n\r\n        return table;\r\n    }\r\n\r\n    const loadMap = () => {\r\n        instance.get(\"/gettags\")\r\n            .then(res => {\r\n                setLocations(res.data);\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            });\r\n        setDreamMap(JSONtable);\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        loadMap();\r\n    }, []);\r\n\r\n    return (\r\n        <MuiThemeProvider theme={muiTheme}>\r\n            <CssBaseline />\r\n            <div className={classes.root}>\r\n                <Grid className={classes.mainGridContainer}\r\n                    container\r\n                    direction=\"column\"\r\n                    justify=\"center\"\r\n                    alignItems=\"stretch\" >\r\n                    <Grid item xs={10} zeroMinWidth className={classes.mainGridDreamsBodyItem}>\r\n                        <Container\r\n                            style={{\r\n                                paddingTop: '16px',\r\n                                height: '83%',\r\n                                width: '100%',\r\n                                position: 'absolute',\r\n                            }}\r\n                        >\r\n                            <div\r\n                                style={{\r\n                                    position: 'relative',\r\n                                    height: '100%',\r\n                                    width: '100%',\r\n                                    overflow: 'auto',\r\n                                }}\r\n                            >\r\n                                <table\r\n                                    style={{\r\n                                        // transform: 'rotateX(60deg) rotateY(0deg) rotateZ(-45deg)',\r\n                                        // transformStyle: 'preserve-3d',\r\n                                        position: 'relative',\r\n                                        margin: 'auto',\r\n                                        backgroundColor: 'rgb(196, 188, 78, 0.6)',\r\n                                        borderRadius: '4px',\r\n                                        borderCollapse: 'collapse',\r\n\r\n                                    }}\r\n                                >\r\n                                    <tbody>\r\n                                        {dreamMap !== null\r\n                                            ? createTable()\r\n                                            : <tr>\r\n                                                <td />\r\n                                            </tr>\r\n                                        }\r\n                                    </tbody>\r\n                                </table>\r\n                            </div>\r\n                        </Container>\r\n                    </Grid>\r\n                    <Grid item xs={1} zeroMinWidth className={classes.mainGridBodyItem}>\r\n                        <Grid\r\n                            container\r\n                            direction=\"row\"\r\n                            justify=\"space-evenly\"\r\n                            alignItems=\"center\"\r\n                        >\r\n                            <Grid item xs={1} align=\"center\"></Grid>\r\n                            <Grid item xs={2} align=\"center\">\r\n                                <Fab size=\"small\"\r\n                                    color=\"secondary\"\r\n                                    onClick={sizeDown}\r\n                                >\r\n                                    <RemoveIcon />\r\n                                </Fab>\r\n                            </Grid>\r\n                            <Grid item xs={6} align=\"center\">\r\n                                <Slider\r\n                                    min={6}\r\n                                    value={typeof cellSize === 'number' ? cellSize : 0}\r\n                                    onChange={changeCellSize}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={2} align=\"center\">\r\n                                <Fab size=\"small\"\r\n                                    color=\"primary\"\r\n                                    onClick={sizeUp}\r\n                                >\r\n                                    <AddIcon />\r\n                                </Fab>\r\n                            </Grid>\r\n                            <Grid item xs={1} align=\"center\"></Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid item xs={1} zeroMinWidth className={classes.mainGridBodyItem}>\r\n                        <Grid\r\n                            container\r\n                            direction=\"row\"\r\n                            justify=\"space-evenly\"\r\n                            alignItems=\"center\"\r\n                        >\r\n                            <Grid item>\r\n                                <Button className={classes.actionButton}\r\n                                    variant=\"contained\"\r\n                                    color=\"secondary\"\r\n                                    onClick={() => { history.push(\"/luciddreams\") }}\r\n                                >\r\n                                    {lang.currLang.buttons.close}\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Button className={classes.actionButton}\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    onClick={() => { history.push(\"/addlocation\") }}\r\n                                >\r\n                                    {lang.currLang.buttons.add}\r\n                                </Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </MuiThemeProvider >\r\n    )\r\n}\r\n\r\nDreamMap.propTypes = {\r\n    themeMode: PropTypes.object.isRequired,\r\n    lang: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        themeMode: store.themeMode,\r\n        lang: store.lang,\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(DreamMap);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport SwipeableViews from \"react-swipeable-views\";\r\nimport { SliderPicker } from 'react-color';\r\n\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Button from '@material-ui/core/Button';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Select from \"@material-ui/core/Select\";\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\n\r\nimport { setSnackbar } from '../actions/Actions';\r\nimport { SET_SNACKBAR_MODE } from \"../actions/types\";\r\n\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\nimport { instance } from './Config';\r\nimport { useStyles } from '../styles/Styles';\r\n\r\nfunction AddLocation(props) {\r\n    const { lang, themeMode, history, palette, setSnackbar } = props;\r\n    const classes = useStyles();\r\n    const muiTheme = createMuiTheme(themeMode);\r\n    const [isEditMode, setIsEditMode] = React.useState(false);\r\n    const [value, setValue] = React.useState(0);\r\n    const [prevUrl, setPrevUrl] = React.useState('');\r\n    const [isIconsLoading, setIsIconsLoading] = React.useState(false);\r\n    const [locationIcons, setLocationIcons] = React.useState([]);\r\n\r\n    const [nameEn, setNameEn] = React.useState('');\r\n    const [nameRu, setNameRu] = React.useState('');\r\n    const [selectedIcon, setSelectedIcon] = React.useState('');\r\n    const [iconColor, setIconColor] = React.useState('');\r\n\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue);\r\n    };\r\n\r\n    const handleChangeIndex = index => {\r\n        setValue(index);\r\n    };\r\n\r\n    const changeNameRu = (e) => {\r\n        setNameRu(e.target.value)\r\n    };\r\n\r\n    const changeNameEn = (e) => {\r\n        setNameEn(e.target.value)\r\n    };\r\n\r\n    const changeIcon = (e) => {\r\n        setSelectedIcon(e.target.value);\r\n    };\r\n\r\n    const setColor = (color, e) => {\r\n        setIconColor(color.hex);\r\n    };\r\n\r\n    const loadIconsList = () => {\r\n        let errorMessage = '';\r\n        let error = false;\r\n\r\n        if (nameRu.length === 0) {\r\n            errorMessage = lang.currLang.errors.EmptyName;\r\n            error = true;\r\n            setValue(0);\r\n        }\r\n        else {\r\n            if (nameEn.length === 0) {\r\n                errorMessage = lang.currLang.errors.EmptyName;\r\n                error = true;\r\n                setValue(1);\r\n            }\r\n        }\r\n\r\n        if (error) {\r\n            setLocationIcons([]);\r\n            setSelectedIcon('');\r\n            setSnackbar({\r\n                type: SET_SNACKBAR_MODE,\r\n                snackbar: {\r\n                    open: true,\r\n                    variant: 'error',\r\n                    message: errorMessage,\r\n                },\r\n            });\r\n        }\r\n        else {\r\n            setIsIconsLoading(true);\r\n            const postData = {\r\n                name: nameEn,\r\n            };\r\n            instance\r\n                .post('/actions/users/geticons', postData)\r\n                .then(res => {\r\n                    if (res.data.length === 0) {\r\n                        loadIconsList();\r\n                    }\r\n                    else {\r\n                        setLocationIcons(res.data);\r\n                        setIsIconsLoading(false);\r\n                    }\r\n                });\r\n        }\r\n    };\r\n\r\n    const saveLocation = () => {\r\n        let errorMessage = '';\r\n        let error = false;\r\n        if (!isEditMode) {\r\n            if (iconColor.length === 0) {\r\n                errorMessage = lang.currLang.errors.ColorNotChange;\r\n                error = true;\r\n            }\r\n            if (selectedIcon.length === 0) {\r\n                errorMessage = lang.currLang.errors.IconNotChange;\r\n                error = true;\r\n            }\r\n            if (nameRu.length === 0 || nameEn.length === 0) {\r\n                errorMessage = lang.currLang.errors.EmptyName;\r\n                error = true;\r\n                setValue(1);\r\n            }\r\n\r\n            if (error) {\r\n                setSnackbar({\r\n                    type: SET_SNACKBAR_MODE,\r\n                    snackbar: {\r\n                        open: true,\r\n                        variant: 'error',\r\n                        message: errorMessage,\r\n                    },\r\n                });\r\n            }\r\n            else {\r\n                let postData = {\r\n                    name_rus: nameRu,\r\n                    name_eng: nameEn,\r\n                    img_url: selectedIcon,\r\n                    color: iconColor\r\n                };\r\n                console.log(postData);\r\n            }\r\n        }\r\n        else {\r\n            let chages = false;\r\n            let postData = {\r\n                id: props.location.defaultData.id,\r\n            };\r\n\r\n            if (nameRu !== props.location.defaultData.name_rus) {\r\n                postData.name_rus = nameRu;\r\n                chages = true;\r\n            }\r\n            if (nameEn !== props.location.defaultData.name_eng) {\r\n                postData.name_eng = nameEn;\r\n                chages = true;\r\n            }\r\n            if (selectedIcon !== props.location.defaultData.img_url) {\r\n                postData.img_url = selectedIcon;\r\n                chages = true;\r\n            }\r\n            if (iconColor !== props.location.defaultData.color) {\r\n                postData.color = iconColor;\r\n                chages = true;\r\n            }\r\n\r\n            if (chages) {\r\n                console.log(postData);\r\n            }\r\n            else {\r\n                setSnackbar({\r\n                    type: SET_SNACKBAR_MODE,\r\n                    snackbar: {\r\n                        open: true,\r\n                        variant: 'error',\r\n                        message: lang.currLang.errors.NoChanges,\r\n                    },\r\n                });\r\n            }\r\n        }\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        if (typeof (props.location.defaultData) !== 'undefined') {\r\n            const getIcon = (data, img_url) => {\r\n                instance\r\n                    .post('/actions/users/geticons', data)\r\n                    .then(res => {\r\n                        if (res.data.length === 0) {\r\n                            getIcon(data, img_url);\r\n                        }\r\n                        else {\r\n                            let icons = [];\r\n                            icons.push(img_url);\r\n                            const newArray = icons.concat(res.data);\r\n                            setLocationIcons(newArray);\r\n                            setIsIconsLoading(false);\r\n                        }\r\n                    });\r\n            };\r\n\r\n            if (typeof props.location.defaultData.id === 'number') {\r\n                setIsEditMode(true);\r\n                const { name_rus, name_eng, img_url, color, prevUrl } = props.location.defaultData;\r\n                setNameRu(name_rus);\r\n                setNameEn(name_eng);\r\n                setSelectedIcon(img_url);\r\n                setIconColor(color);\r\n                setPrevUrl(prevUrl);\r\n                setIsIconsLoading(true);\r\n                const postData = {\r\n                    name: name_eng,\r\n                };\r\n                getIcon(postData, img_url);\r\n            }\r\n            else {\r\n                const { prevUrl } = props.location.defaultData;\r\n                setPrevUrl(prevUrl);\r\n            }\r\n        }\r\n    }, [props.location.defaultData]);\r\n    \r\n    return (\r\n        <MuiThemeProvider theme={muiTheme}>\r\n            <CssBaseline />\r\n            <div className={classes.root}>\r\n                <Grid className={classes.mainGridContainer}\r\n                    container\r\n                    direction=\"column\"\r\n                    justify=\"center\"\r\n                    alignItems=\"stretch\" >\r\n                    <Grid item xs={11} className={classes.mainGridBodyItem}>\r\n                        <Paper className={classes.paper}>\r\n                            <Grid className={classes.mainGridContainer}\r\n                                container\r\n                                direction=\"column\"\r\n                                justify=\"center\"\r\n                                alignItems=\"stretch\"\r\n                            >\r\n                                <Grid item xs={6} className={classes.mainGridBodyItem} >\r\n                                    <Paper >\r\n                                        <Tabs\r\n                                            centered\r\n                                            value={value}\r\n                                            onChange={handleChange}\r\n                                            indicatorColor=\"primary\"\r\n                                            textColor=\"primary\"\r\n                                        >\r\n                                            <Tab label=\"RU\" />\r\n                                            <Tab label=\"EN\" />\r\n                                        </Tabs>\r\n                                    </Paper>\r\n                                    <SwipeableViews className={classes.SwipeableViews}\r\n                                        animateHeight\r\n                                        axis={muiTheme.direction === \"rtl\" ? \"x-reverse\" : \"x\"}\r\n                                        index={value}\r\n                                        onChangeIndex={handleChangeIndex}\r\n                                    >\r\n                                        <Grid container\r\n                                            className={classes.mainGridContainer}\r\n                                            direction=\"column\"\r\n                                            justify=\"center\"\r\n                                            alignItems=\"center\"\r\n                                            role=\"tabpanel\"\r\n                                        >\r\n                                            <Grid item className={classes.fullMinWidth} >\r\n                                                <TextField className={classes.inputDiv}\r\n                                                    disabled={!isIconsLoading\r\n                                                        ? false\r\n                                                        : true\r\n                                                    }\r\n                                                    required\r\n                                                    id=\"outlined-required\"\r\n                                                    value={nameRu}\r\n                                                    label={lang.currLang.texts.Name}\r\n                                                    variant=\"outlined\"\r\n                                                    onChange={changeNameRu}\r\n                                                />\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                        <Grid container\r\n                                            className={classes.mainGridContainer}\r\n                                            direction=\"column\"\r\n                                            justify=\"center\"\r\n                                            alignItems=\"center\"\r\n                                            role=\"tabpanel\"\r\n                                        >\r\n                                            <Grid item className={classes.fullMinWidth} >\r\n                                                <TextField className={classes.inputDiv}\r\n                                                    disabled={!isIconsLoading\r\n                                                        ? false\r\n                                                        : true\r\n                                                    }\r\n                                                    required\r\n                                                    id=\"outlined-required\"\r\n                                                    value={nameEn}\r\n                                                    label={lang.currLang.texts.Name}\r\n                                                    variant=\"outlined\"\r\n                                                    onChange={changeNameEn}\r\n                                                    onBlur={loadIconsList}\r\n                                                />\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </SwipeableViews>\r\n                                </Grid>\r\n                                <Grid item xs={2} className={classes.mainGridBodyItem} >\r\n                                    <div className={classes.formControl}>\r\n                                        {!isIconsLoading\r\n                                            ? <FormControl\r\n                                                disabled={locationIcons.length !== 0\r\n                                                    ? false\r\n                                                    : true\r\n                                                }\r\n                                            >\r\n                                                <InputLabel id=\"select-icon\">\r\n                                                    {lang.currLang.texts.ChangeIcon}\r\n                                                </InputLabel>\r\n                                                <Select value={selectedIcon}\r\n                                                    style={{\r\n                                                        minWidth: 100,\r\n                                                    }}\r\n                                                    labelId=\"select-icon\"\r\n                                                    onChange={changeIcon}\r\n                                                    MenuProps={{\r\n                                                        PaperProps: {\r\n                                                            style: {\r\n                                                                maxHeight: 48 * 4.5 + 8,\r\n                                                                width: 'auto',\r\n                                                            },\r\n                                                        },\r\n                                                    }}\r\n                                                >\r\n                                                    {locationIcons.map((item, key) => (\r\n                                                        <MenuItem key={key} value={item} >\r\n                                                            <Avatar className={classes.smallAvatar}\r\n                                                                src={item}\r\n                                                                style={palette.type === 'dark'\r\n                                                                    ? {\r\n                                                                        filter: 'invert(1)',\r\n                                                                    }\r\n                                                                    : {}}\r\n                                                            />\r\n                                                        </MenuItem>\r\n                                                    ))}\r\n                                                </Select>\r\n                                            </FormControl>\r\n                                            : <CircularProgress />\r\n                                        }\r\n                                    </div>\r\n                                </Grid>\r\n                                <Grid item xs={4} className={classes.mainGridBodyItem}>\r\n                                    <SliderPicker //className={classes.inputDiv}\r\n                                        color={iconColor}\r\n                                        onChangeComplete={setColor}\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Paper>\r\n                    </Grid>\r\n                    <Grid item xs={1} className={classes.mainGridBodyItem} >\r\n                        <Grid\r\n                            container\r\n                            direction=\"row\"\r\n                            justify=\"space-evenly\"\r\n                            alignItems=\"center\"\r\n                        >\r\n                            <Grid item>\r\n                                <Button className={classes.actionButton}\r\n                                    variant=\"contained\"\r\n                                    color=\"secondary\"\r\n                                    onClick={() => {\r\n                                        prevUrl.length === 0\r\n                                            ? history.push(\"/dreammap\")\r\n                                            : history.push(prevUrl)\r\n                                    }}\r\n                                >\r\n                                    {lang.currLang.buttons.close}\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    className={classes.actionButton}\r\n                                    onClick={() => saveLocation()}\r\n                                >\r\n                                    {isEditMode\r\n                                        ? lang.currLang.buttons.Save\r\n                                        : lang.currLang.buttons.add\r\n                                    }\r\n                                </Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </MuiThemeProvider >\r\n    )\r\n}\r\n\r\nAddLocation.propTypes = {\r\n    setSnackbar: PropTypes.func.isRequired,\r\n    themeMode: PropTypes.object.isRequired,\r\n    lang: PropTypes.object.isRequired,\r\n    palette: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        themeMode: store.themeMode,\r\n        palette: store.themeMode.palette,\r\n        lang: store.lang,\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setSnackbar: snackbar => dispatch(setSnackbar(snackbar)),\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(AddLocation);","export function compare(obj1, obj2) {\r\n    if (!Object.keys(obj2).every(key => obj1.hasOwnProperty(key))) {\r\n        return false;\r\n    }\r\n    return Object.keys(obj1).every(function (key) {\r\n        if (typeof obj1[key] == \"object\") {\r\n            return compare(obj1[key], obj2[key]);\r\n        }\r\n        else {\r\n            return obj1[key] === obj2[key];\r\n        }\r\n    });\r\n}","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport ruLocale from \"date-fns/locale/ru\";\r\nimport enLocale from \"date-fns/locale/ru\";\r\n\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Button from '@material-ui/core/Button';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\n\r\nimport MUIRichTextEditor from 'mui-rte';\r\nimport { convertToRaw } from 'draft-js';\r\n\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\n\r\nimport { MuiPickersUtilsProvider, KeyboardTimePicker, KeyboardDatePicker } from '@material-ui/pickers';\r\n\r\nimport FormatColorFillIcon from '@material-ui/icons/FormatColorFill';\r\nimport AddIcon from '@material-ui/icons/Add';\r\n\r\nimport { useStyles } from '../styles/Styles';\r\nimport { setSnackbar } from '../actions/Actions';\r\nimport { SET_SNACKBAR_MODE } from \"../actions/types\";\r\n\r\nimport { instance } from './Config';\r\n\r\nimport { compare } from '../functions';\r\n\r\nlet defaultTags = [];\r\n\r\nfunction AddDream(props) {\r\n    const classes = useStyles();\r\n    const { lang, themeMode, history, auth, setSnackbar } = props;\r\n    const muiTheme = createMuiTheme(themeMode);\r\n    Object.assign(muiTheme, {\r\n        overrides: {\r\n            MUIRichTextEditor: {\r\n                root: {\r\n                    border: \"1px solid gray\",\r\n                    borderRadius: '4px',\r\n                    height: '100%',\r\n                    //Весь компонент\r\n                },\r\n                container: {\r\n                    height: '100%',\r\n                    margin: '0 !Important',\r\n                    //Без шапки\r\n                },\r\n                toolbar: {\r\n                    //textAlign: 'center',\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    justifyContent: 'center',\r\n                    height: '20%',\r\n                    minHeight: '48px',\r\n                    margin: '0 !Important',\r\n                    borderBottom: \"1px solid gray\",\r\n                    borderRadius: '4px',\r\n                },\r\n                placeHolder: {\r\n                    height: '72%',\r\n                },\r\n                editor: {\r\n                    height: '72%',\r\n                    width: '100%',\r\n                    position: 'relative',\r\n                    overflow: 'hidden',\r\n                    //Эдитор\r\n                },\r\n                editorContainer: {\r\n                    margin: '0 !Important',\r\n                    padding: \"0px 14px\",\r\n                    borderRadius: '4px',\r\n                    position: 'relative',\r\n                    boxSizing: 'border-box',\r\n                    maxHeight: '100%',\r\n                    overflow: 'auto',\r\n                    //Редактор\r\n                },\r\n            }\r\n        }\r\n    })\r\n    const [isEditMode, setIsEditMode] = React.useState(false);\r\n    const [isLoading, setIsLoading] = React.useState(false);\r\n    const [titleText, setTitleText] = React.useState('');\r\n    const [selectedDate, setSelectedDate] = React.useState(new Date());\r\n    const [contentText, setContentText] = React.useState();\r\n    const [prevContentText, setPrevContentText] = React.useState();\r\n    const [selectedLocations, setselectedLocations] = React.useState([]);\r\n    const [locations, setLocations] = React.useState({});\r\n\r\n    const addLocation = () => {\r\n        history.push({\r\n            pathname: \"/addlocation\",\r\n            defaultData: {\r\n                prevUrl: \"/addregulardream\",\r\n            }\r\n        });\r\n    };\r\n\r\n    const handleChangeLocations = (event, value) => {\r\n        setselectedLocations(value);\r\n    };\r\n\r\n    const changeTitle = (event) => {\r\n        setTitleText(event.target.value);\r\n    };\r\n\r\n    const handleDateChange = date => {\r\n        setSelectedDate(date);\r\n    };\r\n\r\n    const changeContent = (state) => {\r\n        const currCont = state.getCurrentContent();\r\n        const convert = convertToRaw(currCont);\r\n        const content = JSON.stringify(convert);\r\n        if (prevContentText !== content) {\r\n            setPrevContentText(content);\r\n        }\r\n    };\r\n\r\n    const savepost = () => {\r\n        setIsLoading(true);\r\n        let havErr = false;\r\n        let errorMessage = '';\r\n        if (typeof (titleText) !== 'undefined') {\r\n            if (titleText.length === 0) {\r\n                errorMessage = lang.currLang.errors.EmptyTitle;\r\n                havErr = true;\r\n            }\r\n        }\r\n        else {\r\n            errorMessage = lang.currLang.errors.EmptyTitle;\r\n            havErr = true;\r\n        }\r\n\r\n        if (typeof (prevContentText) !== 'undefined') {\r\n            if (JSON.parse(prevContentText).blocks[0].text.length === 0) {\r\n                errorMessage = lang.currLang.errors.EmptyDream;\r\n                havErr = true;\r\n            }\r\n        }\r\n        else {\r\n            errorMessage = lang.currLang.errors.EmptyDream;\r\n            havErr = true;\r\n        }\r\n\r\n        if (havErr) {\r\n            setSnackbar({\r\n                type: SET_SNACKBAR_MODE,\r\n                snackbar: {\r\n                    open: true,\r\n                    variant: 'error',\r\n                    message: errorMessage,\r\n                },\r\n            });\r\n            setIsLoading(false);\r\n        }\r\n        else {\r\n            if (isEditMode) {\r\n                let hasChanges = false;\r\n                let tagChanges = false;\r\n                let postData = {\r\n                    post_id: props.location.defaultData.post_id,\r\n                };\r\n\r\n                if (props.location.defaultData.post_title !== titleText) {\r\n                    postData.title = titleText;\r\n                    hasChanges = true;\r\n                }\r\n\r\n                if (props.location.defaultData.dream_date.getTime() !== selectedDate.getTime()) {\r\n                    postData.dreamDate = selectedDate.toLocaleString(\"ru-RU\", { timeZone: 'Europe/London' });\r\n                    hasChanges = true;\r\n                }\r\n\r\n                if (props.location.defaultData.post_content !== prevContentText) {\r\n                    postData.content = prevContentText;\r\n                    hasChanges = true;\r\n                }\r\n\r\n                if (defaultTags.length === selectedLocations.length) {\r\n                    if (!compare(defaultTags, selectedLocations)) {\r\n                        hasChanges = true;\r\n                        tagChanges = true;\r\n                    }\r\n                }\r\n                else {\r\n                    hasChanges = true;\r\n                    tagChanges = true;\r\n                }\r\n\r\n                if (hasChanges) {\r\n                    if (tagChanges) {\r\n                        let deleteTags = defaultTags.filter(item1 =>\r\n                            !selectedLocations.some(item2 => (\r\n                                item2.id === item1.id)\r\n                            )\r\n                        );\r\n                        let addTags = selectedLocations.filter(item1 =>\r\n                            !defaultTags.some(item2 => (\r\n                                item2.id === item1.id)\r\n                            )\r\n                        );\r\n                        if (addTags.length > 0) {\r\n                            let add = {};\r\n                            addTags.map((item, key) => (\r\n                                add[key] = item\r\n                            ));\r\n                            postData.tags = { ...postData.tags, add: add };\r\n                        }\r\n                        if (deleteTags.length > 0) {\r\n                            let remove = {};\r\n                            deleteTags.map((item, key) => (\r\n                                remove[key] = item\r\n                            ));\r\n                            postData.tags = { ...postData.tags, remove: remove };\r\n                        }\r\n                    }\r\n                    instance\r\n                        .post('/actions/users/updatepost', postData)\r\n                        .then(res => {\r\n                            setIsLoading(false);\r\n                            setSnackbar({\r\n                                type: SET_SNACKBAR_MODE,\r\n                                snackbar: {\r\n                                    open: true,\r\n                                    variant: 'success',\r\n                                    message: lang.currLang.texts.success,\r\n                                },\r\n                            });\r\n                            history.push(\"/dreams\")\r\n                        })\r\n                        .catch(err => {\r\n                            console.log(err);\r\n                            setIsLoading(false);\r\n                        });\r\n                }\r\n                else {\r\n                    setSnackbar({\r\n                        type: SET_SNACKBAR_MODE,\r\n                        snackbar: {\r\n                            open: true,\r\n                            variant: 'error',\r\n                            message: lang.currLang.errors.NoChanges,\r\n                        },\r\n                    });\r\n                    setIsLoading(false);\r\n                }\r\n            }\r\n            else {\r\n                let postData = {\r\n                    title: titleText,\r\n                    dreamDate: selectedDate.toLocaleString(\"ru-RU\", { timeZone: 'Europe/London' }),\r\n                    content: prevContentText,\r\n                    create_user: auth.user.id,\r\n                    post_type: 0,\r\n                    nickname: auth.user.nickname,\r\n                    tags: selectedLocations,\r\n                }\r\n                instance\r\n                    .post('/actions/users/createpost', postData)\r\n                    .then(res => {\r\n                        setIsLoading(false);\r\n                        setSnackbar({\r\n                            type: SET_SNACKBAR_MODE,\r\n                            snackbar: {\r\n                                open: true,\r\n                                variant: 'success',\r\n                                message: lang.currLang.texts.success,\r\n                            },\r\n                        });\r\n                        history.push(\"/luciddreams\")\r\n                    })\r\n                    .catch(err => {\r\n                        setIsLoading(false);\r\n                    });\r\n            }\r\n        }\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        defaultTags = [];\r\n        instance.get(\"/gettags\")\r\n            .then(res => {\r\n                setLocations(res.data);\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            });\r\n\r\n        if (typeof (props.location.defaultData) !== 'undefined') {\r\n            setIsEditMode(true);\r\n            const { post_title, dream_date, post_content, tags } = props.location.defaultData;\r\n            setTitleText(post_title);\r\n            setSelectedDate(dream_date);\r\n            setContentText(post_content);\r\n            setPrevContentText(post_content);\r\n            if (typeof tags[0][0] === 'string') {\r\n                tags.forEach(item => {\r\n                    let location = {};\r\n                    location.id = Number(item[0]);\r\n                    location.name_rus = item[1];\r\n                    location.name_eng = item[2];\r\n                    location.img_url = item[3];\r\n                    defaultTags.push(location);\r\n                });\r\n                setselectedLocations(defaultTags);\r\n            }\r\n        }\r\n    }, [props.location.defaultData, lang.currLang]);\r\n\r\n    return (\r\n        <MuiThemeProvider theme={muiTheme}>\r\n            <CssBaseline />\r\n            <div className={classes.root} >\r\n                <Grid className={classes.mainGridContainer}\r\n                    container\r\n                    direction=\"column\"\r\n                    justify=\"center\"\r\n                    alignItems=\"stretch\" >\r\n                    <Grid item xs={11} className={classes.mainGridBodyItem}>\r\n                        <Paper className={classes.paper}>\r\n                            <Grid container\r\n                                className={classes.mainGridContainer}\r\n                                direction=\"column\"\r\n                                justify=\"center\"\r\n                                alignItems=\"center\"\r\n                            >\r\n                                <Grid item xs={2} className={classes.fullMinWidth} >\r\n                                    <TextField className={classes.inputDiv}\r\n                                        required\r\n                                        id=\"outlined-required\"\r\n                                        value={titleText}\r\n                                        label={lang.currLang.texts.title}\r\n                                        variant=\"outlined\"\r\n                                        onChange={(e) => { changeTitle(e) }}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={2} className={classes.fullMinWidth} >\r\n                                    <MuiPickersUtilsProvider utils={DateFnsUtils}\r\n                                        locale={lang.currLang.current === \"Ru\"\r\n                                            ? ruLocale\r\n                                            : enLocale}\r\n                                    >\r\n                                        <Grid className={classes.pickerGridContainer}\r\n                                            container\r\n                                            direction=\"row\"\r\n                                            justify=\"center\"\r\n                                            alignItems=\"stretch\" >\r\n                                            <Grid item xs={7} >\r\n                                                <KeyboardDatePicker className={classes.pickers}\r\n                                                    id=\"date-picker-dialog\"\r\n                                                    label={lang.currLang.texts.pickDate}\r\n                                                    format=\"dd.MM.yyyy\"\r\n                                                    value={selectedDate}\r\n                                                    onChange={handleDateChange}\r\n                                                    KeyboardButtonProps={{\r\n                                                        'aria-label': 'change date',\r\n                                                    }}\r\n                                                />\r\n                                            </Grid>\r\n                                            <Grid item xs={5} >\r\n                                                <KeyboardTimePicker className={classes.pickers}\r\n                                                    id=\"time-picker\"\r\n                                                    label={lang.currLang.texts.pickTime}\r\n                                                    value={selectedDate}\r\n                                                    onChange={handleDateChange}\r\n                                                    ampm={false}\r\n                                                    KeyboardButtonProps={{\r\n                                                        'aria-label': 'change time',\r\n                                                    }}\r\n                                                />\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </MuiPickersUtilsProvider>\r\n                                </Grid>\r\n                                <Grid item xs={5} className={classes.fullMinWidth} >\r\n\r\n                                    <div className={classes.inputScrollableDiv}>\r\n\r\n                                        <MUIRichTextEditor\r\n                                            value={contentText}\r\n                                            onChange={changeContent}\r\n                                            label={lang.currLang.texts.content}\r\n                                            inlineToolbar={false}\r\n                                            controls={[\r\n                                                \"bold\",\r\n                                                \"italic\",\r\n                                                \"underline\",\r\n                                                \"strikethrough\",\r\n                                                \"colorfill\",\r\n                                            ]}\r\n                                            customControls={[\r\n                                                {\r\n                                                    name: \"colorfill\",\r\n                                                    icon: <FormatColorFillIcon />,\r\n                                                    type: \"inline\",\r\n                                                    inlineStyle: {\r\n                                                        backgroundColor: \"yellow\",\r\n                                                        color: \"black\"\r\n                                                    }\r\n                                                }\r\n                                            ]}\r\n                                        />\r\n\r\n                                    </div>\r\n\r\n                                </Grid>\r\n                                <Grid item xs={3} className={classes.fullMinWidth} >\r\n                                    <Grid container\r\n                                        className={classes.mainGridContainer}\r\n                                        direction=\"row\"\r\n                                        justify=\"center\"\r\n                                        alignItems=\"center\"\r\n                                    >\r\n                                        <Grid item xs={10} style={{ position: 'relative' }}>\r\n                                            {locations.length\r\n                                                ? <Autocomplete\r\n                                                    multiple\r\n                                                    className={classes.inputDiv}\r\n                                                    id=\"tags-outlined\"\r\n                                                    size=\"small\"\r\n                                                    options={locations}\r\n                                                    getOptionLabel={option => (\r\n                                                        <Chip\r\n                                                            size=\"small\"\r\n                                                            className={classes.chip}\r\n                                                            avatar={\r\n                                                                <Avatar src={option.img_url} />\r\n                                                            }\r\n                                                            label={\r\n                                                                lang.currLang.current === \"Ru\"\r\n                                                                    ? option.name_rus\r\n                                                                    : option.name_eng\r\n                                                            }\r\n                                                        />\r\n                                                    )}\r\n                                                    defaultValue={\r\n                                                        defaultTags.map(item => {\r\n                                                            return locations[item.id - 1];\r\n                                                        })\r\n                                                    }\r\n                                                    onChange={(event, value) => handleChangeLocations(event, value)}\r\n                                                    filterSelectedOptions\r\n                                                    renderInput={params => (\r\n                                                        <TextField\r\n                                                            {...params}\r\n                                                            label={lang.currLang.texts.tags}\r\n                                                            fullWidth\r\n                                                        />\r\n                                                    )}\r\n                                                />\r\n                                                : <div className={classes.inputDiv}>\r\n                                                    <LinearProgress />\r\n                                                </div>\r\n                                            }\r\n                                        </Grid>\r\n                                        <Grid item xs={2}>\r\n                                            <IconButton onClick={addLocation}>\r\n                                                <AddIcon fontSize=\"small\" />\r\n                                            </IconButton>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Paper>\r\n                    </Grid>\r\n                    <Grid item xs={1} className={classes.mainGridBodyItem} >\r\n                        {isLoading\r\n                            ? <LinearProgress />\r\n                            : <Grid\r\n                                container\r\n                                direction=\"row\"\r\n                                justify=\"space-evenly\"\r\n                                alignItems=\"center\"\r\n                            >\r\n                                <Grid item>\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        color=\"secondary\"\r\n                                        className={classes.actionButton}\r\n                                        onClick={() => {\r\n                                            isEditMode\r\n                                                ? history.push(\"/dreams\")\r\n                                                : history.push(\"/luciddreams\")\r\n                                        }}\r\n                                    >\r\n                                        {lang.currLang.buttons.close}\r\n                                    </Button>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        color=\"primary\"\r\n                                        className={classes.actionButton}\r\n                                        onClick={() => savepost()}\r\n                                    >\r\n                                        {isEditMode\r\n                                            ? lang.currLang.buttons.Save\r\n                                            : lang.currLang.buttons.add\r\n                                        }\r\n                                    </Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                        }\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </MuiThemeProvider >\r\n    );\r\n};\r\n\r\nAddDream.propTypes = {\r\n    setSnackbar: PropTypes.func.isRequired,\r\n    themeMode: PropTypes.object.isRequired,\r\n    lang: PropTypes.object.isRequired,\r\n    auth: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        themeMode: store.themeMode,\r\n        lang: store.lang,\r\n        auth: store.auth,\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setSnackbar: snackbar => dispatch(setSnackbar(snackbar)),\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(AddDream);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport ruLocale from \"date-fns/locale/ru\";\r\nimport enLocale from \"date-fns/locale/ru\";\r\n\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Button from '@material-ui/core/Button';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\n\r\nimport MUIRichTextEditor from 'mui-rte';\r\nimport { convertToRaw } from 'draft-js';\r\n\r\nimport Rating from \"@material-ui/lab/Rating\";\r\n\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\n\r\nimport { MuiPickersUtilsProvider, KeyboardTimePicker, KeyboardDatePicker } from '@material-ui/pickers';\r\n\r\nimport FormatColorFillIcon from '@material-ui/icons/FormatColorFill';\r\n\r\nimport { useStyles } from '../styles/Styles';\r\nimport { SET_SNACKBAR_MODE } from \"../actions/types\";\r\nimport { setSnackbar } from '../actions/Actions';\r\n\r\nimport { instance } from './Config';\r\n\r\nimport { compare } from '../functions';\r\n\r\nlet defaultTechnics = [];\r\nlet defaultTags = [];\r\n\r\nfunction AddCDream(props) {\r\n    const classes = useStyles();\r\n    const { lang, themeMode, history, auth, setSnackbar } = props;\r\n    const muiTheme = createMuiTheme(themeMode);\r\n    Object.assign(muiTheme, {\r\n        overrides: {\r\n            MUIRichTextEditor: {\r\n                root: {\r\n                    border: \"1px solid gray\",\r\n                    borderRadius: '4px',\r\n                    height: '100%',\r\n                    //Весь компонент\r\n                },\r\n                container: {\r\n                    height: '100%',\r\n                    margin: '0 !Important',\r\n                    //Без шапки\r\n                },\r\n                toolbar: {\r\n                    //textAlign: 'center',\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    justifyContent: 'center',\r\n                    height: '20%',\r\n                    minHeight: '48px',\r\n                    margin: '0 !Important',\r\n                    borderBottom: \"1px solid gray\",\r\n                    borderRadius: '4px',\r\n                },\r\n                placeHolder: {\r\n                    height: '72%',\r\n                },\r\n                editor: {\r\n                    height: '72%',\r\n                    width: '100%',\r\n                    position: 'relative',\r\n                    overflow: 'hidden',\r\n                    //Эдитор\r\n                },\r\n                editorContainer: {\r\n                    margin: '0 !Important',\r\n                    padding: \"0px 14px\",\r\n                    borderRadius: '4px',\r\n                    position: 'relative',\r\n                    boxSizing: 'border-box',\r\n                    maxHeight: '100%',\r\n                    overflow: 'auto',\r\n                    //Редактор\r\n                },\r\n            }\r\n        }\r\n    })\r\n    const [isEditMode, setIsEditMode] = React.useState(false);\r\n    const [isLoading, setIsLoading] = React.useState(false);\r\n    const [titleText, setTitleText] = React.useState('');\r\n    const [selectedDate, setSelectedDate] = React.useState(new Date());\r\n    const [contentText, setContentText] = React.useState();\r\n    const [prevContentText, setPrevContentText] = React.useState();\r\n    const [selectedLocations, setselectedLocations] = React.useState([]);\r\n    const [selectedTechnics, setselectedTechnics] = React.useState([]);\r\n    const [realisticsValue, setRealisticsValue] = React.useState(1);\r\n    const [locations, setLocations] = React.useState({});\r\n    const [technics, setTechnics] = React.useState({});\r\n\r\n    const handleChangeRealistics = (event, newValue) => {\r\n        setRealisticsValue(newValue);\r\n    };\r\n\r\n    const handleChangeLocations = (event, value) => {\r\n        setselectedLocations(value);\r\n    };\r\n\r\n    const handleChangeTechnics = (event, value) => {\r\n        setselectedTechnics(value);\r\n    };\r\n\r\n    const blurTitle = (event) => {\r\n        setTitleText(event.target.value);\r\n    };\r\n\r\n    const handleDateChange = date => {\r\n        setSelectedDate(date);\r\n    };\r\n\r\n    const changeContent = (state) => {\r\n        const currCont = state.getCurrentContent();\r\n        const convert = convertToRaw(currCont);\r\n        const content = JSON.stringify(convert);\r\n        if (prevContentText !== content) {\r\n            setPrevContentText(content);\r\n        }\r\n    };\r\n\r\n    const savepost = () => {\r\n        setIsLoading(true);\r\n        let havErr = false;\r\n        let errorMessage = '';\r\n        if (typeof (titleText) !== 'undefined') {\r\n            if (titleText.length === 0) {\r\n                errorMessage = lang.currLang.errors.EmptyTitle;\r\n                havErr = true;\r\n            }\r\n        }\r\n        else {\r\n            errorMessage = lang.currLang.errors.EmptyTitle;\r\n            havErr = true;\r\n        }\r\n        if (typeof (prevContentText) !== 'undefined') {\r\n            if (JSON.parse(prevContentText).blocks[0].text.length === 0) {\r\n                errorMessage = lang.currLang.errors.EmptyDream;\r\n                havErr = true;\r\n            }\r\n        }\r\n        else {\r\n            errorMessage = lang.currLang.errors.EmptyDream;\r\n            havErr = true;\r\n        }\r\n        if (havErr) {\r\n            setSnackbar({\r\n                type: SET_SNACKBAR_MODE,\r\n                snackbar: {\r\n                    open: true,\r\n                    variant: 'error',\r\n                    message: errorMessage,\r\n                },\r\n            });\r\n            setIsLoading(false);\r\n        }\r\n        else {\r\n            if (isEditMode) {\r\n                let hasChanges = false;\r\n                let tagChanges = false;\r\n                let techChanges = false;\r\n                let postData = {\r\n                    post_id: props.location.defaultData.post_id,\r\n                };\r\n\r\n                if (props.location.defaultData.post_title !== titleText) {\r\n                    postData.title = titleText;\r\n                    hasChanges = true;\r\n                }\r\n\r\n                if (props.location.defaultData.dream_date.getTime() !== selectedDate.getTime()) {\r\n                    postData.dreamDate = selectedDate.toLocaleString(\"ru-RU\", { timeZone: 'Europe/London' });\r\n                    hasChanges = true;\r\n                }\r\n\r\n                if (props.location.defaultData.post_content !== prevContentText) {\r\n                    postData.content = prevContentText;\r\n                    hasChanges = true;\r\n                }\r\n\r\n                if (props.location.defaultData.rating !== realisticsValue) {\r\n                    postData.rating = realisticsValue;\r\n                    hasChanges = true;\r\n                }\r\n\r\n                if (defaultTechnics.length === selectedTechnics.length) {\r\n                    if (!compare(defaultTechnics, selectedTechnics)) {\r\n                        hasChanges = true;\r\n                        techChanges = true;\r\n                    }\r\n                }\r\n                else {\r\n                    hasChanges = true;\r\n                    techChanges = true;\r\n                }\r\n\r\n                if (defaultTags.length === selectedLocations.length) {\r\n                    if (!compare(defaultTags, selectedLocations)) {\r\n                        hasChanges = true;\r\n                        tagChanges = true;\r\n                    }\r\n                }\r\n                else {\r\n                    hasChanges = true;\r\n                    tagChanges = true;\r\n                }\r\n\r\n                if (hasChanges) {\r\n                    if (tagChanges) {\r\n                        let deleteTags = defaultTags.filter(item1 =>\r\n                            !selectedLocations.some(item2 => (\r\n                                item2.id === item1.id)\r\n                            )\r\n                        );\r\n                        let addTags = selectedLocations.filter(item1 =>\r\n                            !defaultTags.some(item2 => (\r\n                                item2.id === item1.id)\r\n                            )\r\n                        );\r\n                        if (addTags.length > 0) {\r\n                            let add = {};\r\n                            addTags.map((item, key) => (\r\n                                add[key] = item\r\n                            ));\r\n                            postData.tags = { ...postData.tags, add: add };\r\n                        }\r\n                        if (deleteTags.length > 0) {\r\n                            let remove = {};\r\n                            deleteTags.map((item, key) => (\r\n                                remove[key] = item\r\n                            ));\r\n                            postData.tags = { ...postData.tags, remove: remove };\r\n                        }\r\n                    }\r\n                    if (techChanges) {\r\n                        let deleteTech = defaultTechnics.filter(item1 =>\r\n                            !selectedTechnics.some(item2 => (\r\n                                item2.id === item1.id)\r\n                            )\r\n                        );\r\n                        let addTech = selectedTechnics.filter(item1 =>\r\n                            !defaultTechnics.some(item2 => (\r\n                                item2.id === item1.id)\r\n                            )\r\n                        );\r\n                        if (addTech.length > 0) {\r\n                            let add = {};\r\n                            addTech.map((item, key) => (\r\n                                add[key] = item\r\n                            ));\r\n                            postData.technics = { ...postData.technics, add: add };\r\n                        }\r\n                        if (deleteTech.length > 0) {\r\n                            let remove = {};\r\n                            deleteTech.map((item, key) => (\r\n                                remove[key] = item\r\n                            ));\r\n                            postData.technics = { ...postData.technics, remove: remove };\r\n                        }\r\n                    }\r\n                    instance\r\n                        .post('/actions/users/updatepost', postData)\r\n                        .then(res => {\r\n                            setIsLoading(false);\r\n                            setSnackbar({\r\n                                type: SET_SNACKBAR_MODE,\r\n                                snackbar: {\r\n                                    open: true,\r\n                                    variant: 'success',\r\n                                    message: lang.currLang.texts.success,\r\n                                },\r\n                            });\r\n                            history.push(\"/dreams\")\r\n                        })\r\n                        .catch(err => {\r\n                            console.log(err);\r\n                            setIsLoading(false);\r\n                        });\r\n                }\r\n                else {\r\n                    setSnackbar({\r\n                        type: SET_SNACKBAR_MODE,\r\n                        snackbar: {\r\n                            open: true,\r\n                            variant: 'error',\r\n                            message: lang.currLang.errors.NoChanges,\r\n                        },\r\n                    });\r\n                    setIsLoading(false);\r\n                }\r\n            }\r\n            else {\r\n                let postData = {\r\n                    title: titleText,\r\n                    dreamDate: selectedDate.toLocaleString(\"ru-RU\", { timeZone: 'Europe/London' }),\r\n                    content: prevContentText,\r\n                    create_user: auth.user.id,\r\n                    rating: realisticsValue,\r\n                    post_type: 1,\r\n                    nickname: auth.user.nickname,\r\n                    tags: selectedLocations,\r\n                    technics: selectedTechnics\r\n                }\r\n\r\n                instance\r\n                    .post('/actions/users/createpost', postData)\r\n                    .then(res => {\r\n                        setIsLoading(false);\r\n                        setSnackbar({\r\n                            type: SET_SNACKBAR_MODE,\r\n                            snackbar: {\r\n                                open: true,\r\n                                variant: 'success',\r\n                                message: lang.currLang.texts.success,\r\n                            },\r\n                        });\r\n                        history.push(\"/luciddreams\")\r\n                    })\r\n                    .catch(err => {\r\n                        setIsLoading(false);\r\n                    });\r\n            }\r\n        }\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        defaultTechnics = [];\r\n        defaultTags = [];\r\n        instance.get(\"/gettags\")\r\n            .then(res => {\r\n                setLocations(res.data);\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            });\r\n        instance.get(\"/gettechnics\")\r\n            .then(res => {\r\n                setTechnics(res.data);\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            });\r\n\r\n        if (typeof (props.location.defaultData) !== 'undefined') {\r\n            setIsEditMode(true);\r\n            defaultTechnics = [];\r\n            defaultTags = [];\r\n            const { post_title, dream_date, post_content, technics, tags, rating } = props.location.defaultData;\r\n            setTitleText(post_title);\r\n            setSelectedDate(dream_date);\r\n            setContentText(post_content);\r\n            setPrevContentText(post_content);\r\n\r\n            if (typeof tags[0][0] === 'string') {\r\n                tags.forEach(item => {\r\n                    let location = {};\r\n                    location.id = Number(item[0]);\r\n                    location.name_rus = item[1];\r\n                    location.name_eng = item[2];\r\n                    location.img_url = item[3];\r\n                    defaultTags.push(location);\r\n                });\r\n                setselectedLocations(defaultTags);\r\n            }\r\n\r\n            if (typeof technics[0][0] === 'string') {\r\n                technics.forEach(item => {\r\n                    let tech = {};\r\n                    tech.id = Number(item[0]);\r\n                    tech.name_rus = item[1];\r\n                    tech.name_eng = item[2];\r\n                    defaultTechnics.push(tech);\r\n                });\r\n                setselectedTechnics(defaultTechnics);\r\n            }\r\n\r\n            setRealisticsValue(rating);\r\n        }\r\n    }, [props.location.defaultData, lang.currLang]);\r\n\r\n    return (\r\n        <MuiThemeProvider theme={muiTheme}>\r\n            <CssBaseline />\r\n            <div className={classes.root} >\r\n                <Grid className={classes.mainGridContainer}\r\n                    container\r\n                    direction=\"column\"\r\n                    justify=\"center\"\r\n                    alignItems=\"stretch\" >\r\n                    <Grid item xs={11} className={classes.mainGridBodyItem}>\r\n                        <Paper className={classes.paper}>\r\n                            <Grid className={`${classes.mainGridContainer} ${classes.noWrap}`}\r\n                                container\r\n                                direction=\"column\"\r\n                                justify=\"center\"\r\n                                alignItems=\"center\"\r\n                            >\r\n                                <Grid item xs={2} className={classes.fullMinWidth} >\r\n                                    <TextField className={classes.inputDiv}\r\n                                        required\r\n                                        id=\"outlined-required\"\r\n                                        value={titleText}\r\n                                        label={lang.currLang.texts.title}\r\n                                        variant=\"outlined\"\r\n                                        onChange={(e) => { blurTitle(e) }}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={1} className={classes.fullMinWidth} >\r\n                                    <MuiPickersUtilsProvider utils={DateFnsUtils}\r\n                                        locale={lang.currLang.current === \"Ru\"\r\n                                            ? ruLocale\r\n                                            : enLocale}\r\n                                    >\r\n                                        <Grid className={classes.pickerGridContainer}\r\n                                            container\r\n                                            direction=\"row\"\r\n                                            justify=\"center\"\r\n                                            alignItems=\"stretch\" >\r\n                                            <Grid item xs={7} >\r\n                                                <KeyboardDatePicker className={classes.pickers}\r\n                                                    id=\"date-picker-dialog\"\r\n                                                    label={lang.currLang.texts.pickDate}\r\n                                                    format=\"dd.MM.yyyy\"\r\n                                                    value={selectedDate}\r\n                                                    onChange={handleDateChange}\r\n                                                    KeyboardButtonProps={{\r\n                                                        'aria-label': 'change date',\r\n                                                    }}\r\n                                                />\r\n                                            </Grid>\r\n                                            <Grid item xs={5} >\r\n                                                <KeyboardTimePicker className={classes.pickers}\r\n                                                    id=\"time-picker\"\r\n                                                    label={lang.currLang.texts.pickTime}\r\n                                                    value={selectedDate}\r\n                                                    onChange={handleDateChange}\r\n                                                    ampm={false}\r\n                                                    KeyboardButtonProps={{\r\n                                                        'aria-label': 'change time',\r\n                                                    }}\r\n                                                />\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </MuiPickersUtilsProvider>\r\n                                </Grid>\r\n                                <Grid item xs={4} className={classes.fullMinWidth} >\r\n                                    <div className={classes.inputScrollableDiv}>\r\n                                        <MUIRichTextEditor\r\n                                            value={contentText}\r\n                                            onChange={changeContent}\r\n                                            label={lang.currLang.texts.content}\r\n                                            inlineToolbar={false}\r\n                                            controls={[\r\n                                                \"bold\",\r\n                                                \"italic\",\r\n                                                \"underline\",\r\n                                                \"strikethrough\",\r\n                                                \"colorfill\",\r\n                                            ]}\r\n                                            customControls={[\r\n                                                {\r\n                                                    name: \"colorfill\",\r\n                                                    icon: <FormatColorFillIcon />,\r\n                                                    type: \"inline\",\r\n                                                    inlineStyle: {\r\n                                                        backgroundColor: \"yellow\",\r\n                                                        color: \"black\"\r\n                                                    }\r\n                                                }\r\n                                            ]}\r\n                                        />\r\n                                    </div>\r\n                                </Grid>\r\n                                <Grid item xs={2} className={classes.fullMinWidth} >\r\n                                    {technics.length\r\n                                        ? <Autocomplete\r\n                                            multiple\r\n                                            className={classes.inputDiv}\r\n                                            id=\"technics-outlined\"\r\n                                            size=\"small\"\r\n                                            options={technics}\r\n                                            getOptionLabel={option => (\r\n                                                <Chip\r\n                                                    size=\"small\"\r\n                                                    className={classes.chip}\r\n                                                    label={\r\n                                                        lang.currLang.current === \"Ru\"\r\n                                                            ? option.name_rus\r\n                                                            : option.name_eng\r\n                                                    }\r\n                                                />\r\n                                            )}\r\n                                            defaultValue={\r\n                                                defaultTechnics.map(item => {\r\n                                                    return technics[item.id - 1];\r\n                                                })}\r\n                                            onChange={(event, value) => handleChangeTechnics(event, value)}\r\n                                            filterSelectedOptions\r\n                                            renderInput={params => (\r\n                                                <TextField\r\n                                                    {...params}\r\n                                                    label={lang.currLang.texts.technics}\r\n                                                    fullWidth\r\n                                                />\r\n                                            )}\r\n                                        />\r\n                                        : <div className={classes.inputDiv}>\r\n                                            <LinearProgress />\r\n                                        </div>\r\n                                    }\r\n                                </Grid>\r\n                                <Grid item xs={2} className={classes.fullMinWidth} >\r\n                                    {locations.length\r\n                                        ? <Autocomplete\r\n                                            multiple\r\n                                            className={classes.inputDiv}\r\n                                            id=\"tags-outlined\"\r\n                                            size=\"small\"\r\n                                            options={locations}\r\n                                            getOptionLabel={option => (\r\n                                                <Chip\r\n                                                    size=\"small\"\r\n                                                    className={classes.chip}\r\n                                                    avatar={\r\n                                                        <Avatar src={option.img_url} />\r\n                                                    }\r\n                                                    label={\r\n                                                        lang.currLang.current === \"Ru\"\r\n                                                            ? option.name_rus\r\n                                                            : option.name_eng\r\n                                                    }\r\n                                                />\r\n                                            )}\r\n                                            defaultValue={\r\n                                                defaultTags.map(item => {\r\n                                                    return locations[item.id - 1];\r\n                                                })}\r\n                                            onChange={(event, value) => handleChangeLocations(event, value)}\r\n                                            filterSelectedOptions\r\n                                            renderInput={params => (\r\n                                                <TextField\r\n                                                    {...params}\r\n                                                    label={lang.currLang.texts.tags}\r\n                                                    fullWidth\r\n                                                />\r\n                                            )}\r\n                                        />\r\n                                        : <div className={classes.inputDiv}>\r\n                                            <LinearProgress />\r\n                                        </div>\r\n                                    }\r\n                                </Grid>\r\n                                <Grid item xs={1} className={classes.fullMinWidth} >\r\n                                    <div className={classes.div85width}>\r\n                                        <Grid className={classes.ratingGridContainer}\r\n                                            container\r\n                                            direction=\"row\"\r\n                                            justify=\"center\"\r\n                                            alignItems=\"stretch\" >\r\n                                            <Grid item xs={6}>\r\n                                                <Typography component=\"legend\">\r\n                                                    {lang.currLang.texts.rating} :\r\n                                                </Typography>\r\n                                            </Grid>\r\n                                            <Grid item xs={6}>\r\n                                                <Rating name=\"simple-controlled\"\r\n                                                    value={realisticsValue}\r\n                                                    onChange={handleChangeRealistics}\r\n                                                />\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </div>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Paper>\r\n                    </Grid>\r\n                    <Grid item xs={1} className={classes.mainGridBodyItem} >\r\n                        {isLoading\r\n                            ? <LinearProgress />\r\n                            : <Grid\r\n                                container\r\n                                direction=\"row\"\r\n                                justify=\"space-evenly\"\r\n                                alignItems=\"center\"\r\n                            >\r\n                                <Grid item>\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        color=\"secondary\"\r\n                                        className={classes.actionButton}\r\n                                        onClick={() => {\r\n                                            isEditMode\r\n                                                ? history.push(\"/dreams\")\r\n                                                : history.push(\"/luciddreams\")\r\n                                        }}\r\n                                    >\r\n                                        {lang.currLang.buttons.close}\r\n                                    </Button>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        color=\"primary\"\r\n                                        className={classes.actionButton}\r\n                                        onClick={() => savepost()}\r\n                                    >\r\n                                        {isEditMode\r\n                                            ? lang.currLang.buttons.Save\r\n                                            : lang.currLang.buttons.add\r\n                                        }\r\n                                    </Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                        }\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </MuiThemeProvider >\r\n    );\r\n};\r\n\r\nAddCDream.propTypes = {\r\n    setSnackbar: PropTypes.func.isRequired,\r\n    themeMode: PropTypes.object.isRequired,\r\n    lang: PropTypes.object.isRequired,\r\n    auth: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        themeMode: store.themeMode,\r\n        lang: store.lang,\r\n        auth: store.auth,\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setSnackbar: snackbar => dispatch(setSnackbar(snackbar)),\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(AddCDream);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport SwipeableViews from \"react-swipeable-views\";\r\n\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from '@material-ui/core/Button';\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Tab from \"@material-ui/core/Tab\";\r\n\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\n\r\nimport { useStyles } from '../styles/Styles';\r\nimport { setSnackbar } from '../actions/Actions';\r\nimport { SET_SNACKBAR_MODE } from \"../actions/types\";\r\n\r\nfunction AddTechnics(props) {\r\n    const classes = useStyles();\r\n    const { lang, themeMode, history, setSnackbar } = props;\r\n    const muiTheme = createMuiTheme(themeMode);\r\n    const [isEditMode, setIsEditMode] = React.useState(false);\r\n    const [value, setValue] = React.useState(0);\r\n    const [technicsData, setTechnicsData] = React.useState({\r\n        titleRu: '',\r\n        titleEn: '',\r\n        descriptionRu: '',\r\n        descriptionEn: '',\r\n    });\r\n    const [fileldsErr, setFileldsErr] = React.useState({\r\n        titleRu: false,\r\n        titleEn: false,\r\n        descriptionRu: false,\r\n        descriptionEn: false,\r\n    });\r\n\r\n    const changeData = (event, field) => {\r\n        let newTechnicsData = technicsData;\r\n        let newFileldsErr = fileldsErr;\r\n        switch (field) {\r\n            case 'title-ru':\r\n                newTechnicsData = { ...newTechnicsData, titleRu: event.target.value };\r\n                if (newFileldsErr.titleRu) {\r\n                    newFileldsErr = { ...newFileldsErr, titleRu: false };\r\n                    setFileldsErr(newFileldsErr);\r\n                }\r\n                break;\r\n            case 'title-en':\r\n                newTechnicsData = { ...newTechnicsData, titleEn: event.target.value };\r\n                if (newFileldsErr.titleEn) {\r\n                    newFileldsErr = { ...newFileldsErr, titleEn: false };\r\n                    setFileldsErr(newFileldsErr);\r\n                }\r\n                break;\r\n            case 'description-ru':\r\n                newTechnicsData = { ...newTechnicsData, descriptionRu: event.target.value };\r\n                if (newFileldsErr.descriptionRu) {\r\n                    newFileldsErr = { ...newFileldsErr, descriptionRu: false };\r\n                    setFileldsErr(newFileldsErr);\r\n                }\r\n                break;\r\n            case 'description-en':\r\n                newTechnicsData = { ...newTechnicsData, descriptionEn: event.target.value };\r\n                if (newFileldsErr.descriptionEn) {\r\n                    newFileldsErr = { ...newFileldsErr, descriptionEn: false };\r\n                    setFileldsErr(newFileldsErr);\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        setTechnicsData(newTechnicsData);\r\n    };\r\n\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue);\r\n    };\r\n\r\n    const handleChangeIndex = index => {\r\n        setValue(index);\r\n    };\r\n\r\n    const save = () => {\r\n        let isError = false;\r\n        let errorMessage = '';\r\n        let newFileldsErr = fileldsErr;\r\n        if (technicsData.titleRu.length === 0) {\r\n            isError = true;\r\n            errorMessage = lang.currLang.errors.EmptyTitle;\r\n            newFileldsErr = { ...newFileldsErr, titleRu: true };\r\n            setValue(0);\r\n        }\r\n        if (technicsData.titleEn.length === 0 && !isError) {\r\n            isError = true;\r\n            errorMessage = lang.currLang.errors.EmptyTitle;\r\n            newFileldsErr = { ...newFileldsErr, titleEn: true };\r\n            setValue(1);\r\n        }\r\n        if (technicsData.descriptionRu.length === 0 && !isError) {\r\n            isError = true;\r\n            errorMessage = lang.currLang.errors.EmptyDescription;\r\n            newFileldsErr = { ...newFileldsErr, descriptionRu: true };\r\n            setValue(0);\r\n        }\r\n        if (technicsData.descriptionEn.length === 0 && !isError) {\r\n            isError = true;\r\n            errorMessage = lang.currLang.errors.EmptyDescription;\r\n            newFileldsErr = { ...newFileldsErr, descriptionEn: true };\r\n            setValue(1);\r\n        }\r\n\r\n        if (isError) {\r\n            setFileldsErr(newFileldsErr);\r\n            setSnackbar({\r\n                type: SET_SNACKBAR_MODE,\r\n                snackbar: {\r\n                    open: true,\r\n                    variant: 'error',\r\n                    message: errorMessage,\r\n                },\r\n            });\r\n        }\r\n        else {\r\n            console.log(technicsData);\r\n        }\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        if (typeof (props.location.defaultData) !== 'undefined') {\r\n            setIsEditMode(true);\r\n            const { name_rus, name_eng } = props.location.defaultData.item;\r\n            let newTechnicsData = {};\r\n            newTechnicsData = { ...newTechnicsData, titleRu: name_rus };\r\n            newTechnicsData = { ...newTechnicsData, titleEn: name_eng };\r\n            setTechnicsData(newTechnicsData);\r\n        }\r\n    }, [props.location.defaultData]);\r\n\r\n    return (\r\n        <MuiThemeProvider theme={muiTheme}>\r\n            <CssBaseline />\r\n            <div className={classes.root} >\r\n                <Grid className={classes.mainGridContainer}\r\n                    container\r\n                    direction=\"column\"\r\n                    justify=\"center\"\r\n                    alignItems=\"stretch\" >\r\n                    <Grid item xs={11} className={classes.mainGridBodyItem}>\r\n                        <Paper className={classes.paper}>\r\n                            <Paper style={{\r\n                                position: 'relative',\r\n                                height: '10%',\r\n                            }}>\r\n                                <Tabs\r\n                                    centered\r\n                                    value={value}\r\n                                    onChange={handleChange}\r\n                                    indicatorColor=\"primary\"\r\n                                    textColor=\"primary\"\r\n                                >\r\n                                    <Tab label=\"RU\" />\r\n                                    <Tab label=\"EN\" />\r\n                                </Tabs>\r\n                            </Paper>\r\n                            <SwipeableViews className={classes.SwipeableViews}\r\n                                animateHeight\r\n                                axis={muiTheme.direction === \"rtl\" ? \"x-reverse\" : \"x\"}\r\n                                index={value}\r\n                                onChangeIndex={handleChangeIndex}\r\n                            >\r\n                                <Grid container\r\n                                    className={classes.mainGridContainer}\r\n                                    direction=\"column\"\r\n                                    justify=\"center\"\r\n                                    alignItems=\"center\"\r\n                                    role=\"tabpanel\"\r\n                                >\r\n                                    <Grid item xs={2} className={classes.fullMinWidth} >\r\n                                        <TextField className={classes.inputDiv}\r\n                                            error={fileldsErr.titleRu}\r\n                                            required\r\n                                            id=\"title-ru\"\r\n                                            value={technicsData.titleRu}\r\n                                            label={lang.currLang.texts.title}\r\n                                            variant=\"outlined\"\r\n                                            onChange={(e) => { changeData(e, 'title-ru') }}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item xs={10} className={classes.fullMinWidth} >\r\n                                        <TextField className={classes.inputDiv}\r\n                                            error={fileldsErr.descriptionRu}\r\n                                            required\r\n                                            id=\"description-ru\"\r\n                                            multiline\r\n                                            rows=\"5\"\r\n                                            value={technicsData.descriptionRu}\r\n                                            label={lang.currLang.texts.description}\r\n                                            variant=\"outlined\"\r\n                                            onChange={(e) => { changeData(e, 'description-ru') }}\r\n                                        />\r\n                                    </Grid>\r\n                                </Grid>\r\n                                <Grid container\r\n                                    className={classes.mainGridContainer}\r\n                                    direction=\"column\"\r\n                                    justify=\"center\"\r\n                                    alignItems=\"center\"\r\n                                    role=\"tabpanel\"\r\n                                >\r\n                                    <Grid item xs={2} className={classes.fullMinWidth} >\r\n                                        <TextField className={classes.inputDiv}\r\n                                            error={fileldsErr.titleEn}\r\n                                            required\r\n                                            id=\"title-en\"\r\n                                            value={technicsData.titleEn}\r\n                                            label={lang.currLang.texts.title}\r\n                                            variant=\"outlined\"\r\n                                            onChange={(e) => { changeData(e, 'title-en') }}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item xs={10} className={classes.fullMinWidth} >\r\n                                        <TextField className={classes.inputDiv}\r\n                                            error={fileldsErr.descriptionEn}\r\n                                            required\r\n                                            id=\"description-en\"\r\n                                            multiline\r\n                                            rows=\"5\"\r\n                                            value={technicsData.descriptionEn}\r\n                                            label={lang.currLang.texts.description}\r\n                                            variant=\"outlined\"\r\n                                            onChange={(e) => { changeData(e, 'description-en') }}\r\n                                        />\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </SwipeableViews>\r\n                        </Paper>\r\n                    </Grid>\r\n                    <Grid item xs={1} zeroMinWidth className={classes.mainGridBodyItem}>\r\n                        <Grid container\r\n                            direction=\"row\"\r\n                            justify=\"space-evenly\"\r\n                            alignItems=\"center\"\r\n                        >\r\n                            <Grid item>\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    color=\"secondary\"\r\n                                    className={classes.actionButton}\r\n                                    onClick={() => { history.push(\"/technics\") }}\r\n                                >\r\n                                    {lang.currLang.buttons.close}\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    className={classes.actionButton}\r\n                                    onClick={() => save()}\r\n                                >\r\n                                    {isEditMode\r\n                                        ? lang.currLang.buttons.Save\r\n                                        : lang.currLang.buttons.add\r\n                                    }\r\n                                </Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </MuiThemeProvider>\r\n    )\r\n}\r\n\r\nAddTechnics.propTypes = {\r\n    setSnackbar: PropTypes.func.isRequired,\r\n    themeMode: PropTypes.object.isRequired,\r\n    lang: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        themeMode: store.themeMode,\r\n        lang: store.lang,\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setSnackbar: snackbar => dispatch(setSnackbar(snackbar)),\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(AddTechnics);","import React from 'react';\r\nimport clsx from \"clsx\";\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport MUIRichTextEditor from 'mui-rte';\r\nimport { EditorState, convertFromRaw } from 'draft-js';\r\n\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport CardHeader from \"@material-ui/core/CardHeader\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Collapse from \"@material-ui/core/Collapse\";\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Button from '@material-ui/core/Button';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Card from \"@material-ui/core/Card\";\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport Menu from '@material-ui/core/Menu';\r\n\r\nimport Rating from \"@material-ui/lab/Rating\";\r\n\r\nimport FormatColorFillIcon from '@material-ui/icons/FormatColorFill';\r\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport Visibility from '@material-ui/icons/Visibility';\r\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\n\r\nimport { useStyles } from '../../styles/Styles';\r\n\r\nimport { instance } from '../Config';\r\n\r\nimport { SET_SNACKBAR_MODE } from \"../../actions/types\";\r\nimport { setSnackbar } from '../../actions/Actions';\r\n\r\nfunction DreamCard(props) {\r\n    const classes = useStyles();\r\n    const { post_id, post_title, post_content, post_type, tags, technics, rating, dream_date, is_public } = props.item;\r\n    const { lang, palette, history, setSnackbar } = props;\r\n    const [expanded, setExpanded] = React.useState(false);\r\n    const [anchorEl, setAnchorEl] = React.useState(null);\r\n    const [openAlert, setOpenAlert] = React.useState(false);\r\n    const [publicChecked, setPublicChecked] = React.useState(false);\r\n    const [alertTexts, setAlertTexts] = React.useState({\r\n        header: '',\r\n        body: '',\r\n        commit: '',\r\n        action: '',\r\n    });\r\n\r\n    const dateOfDream = new Date(dream_date).getDate() + '.' + (new Date(dream_date).getMonth() + 1) + '.' + new Date(dream_date).getFullYear() + ' ' + new Date(dream_date).getHours() + ':' + (\"0\" + new Date(dream_date).getMinutes()).slice(-2);\r\n    const srcContent = post_content.toString();\r\n    const jsonPparse = JSON.parse(srcContent);\r\n    const convertfromraw = convertFromRaw(jsonPparse);\r\n    const text_content = EditorState.createWithContent(convertfromraw).getCurrentContent().getPlainText('');\r\n\r\n    React.useEffect(() => {\r\n        is_public === 1\r\n            ? setPublicChecked(true)\r\n            : setPublicChecked(false);\r\n    }, [is_public]);\r\n\r\n    const openMenu = event => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const closeMenu = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    const clickMenu = (action, event) => {\r\n        let newAlertTexts = alertTexts;\r\n        switch (action) {\r\n            case 'public':\r\n                if (event.target.checked) {\r\n                    newAlertTexts = { ...newAlertTexts, header: lang.currLang.texts.PublicAlert };\r\n                    newAlertTexts = { ...newAlertTexts, body: lang.currLang.texts.PublicText };\r\n                    newAlertTexts = { ...newAlertTexts, commit: lang.currLang.texts.Publish };\r\n                    newAlertTexts = { ...newAlertTexts, action: 'publicOk' };\r\n                    setAlertTexts(newAlertTexts);\r\n                }\r\n                else {\r\n                    newAlertTexts = { ...newAlertTexts, header: lang.currLang.texts.UnpublicAlert };\r\n                    newAlertTexts = { ...newAlertTexts, body: lang.currLang.texts.UnpublicText };\r\n                    newAlertTexts = { ...newAlertTexts, commit: lang.currLang.texts.Unpublish };\r\n                    newAlertTexts = { ...newAlertTexts, action: 'publicOk' };\r\n                    setAlertTexts(newAlertTexts);\r\n                }\r\n                setOpenAlert(true);\r\n                closeMenu();\r\n                break;\r\n\r\n            case 'edit':\r\n                closeMenu();\r\n                if (post_type === 0) {\r\n                    history.push({\r\n                        pathname: \"/addregulardream\",\r\n                        defaultData: {\r\n                            post_id: post_id,\r\n                            post_title: post_title,\r\n                            dream_date: new Date(dream_date),\r\n                            post_content: post_content,\r\n                            tags: tags,\r\n                        }\r\n                    });\r\n                }\r\n                else if (post_type === 1) {\r\n                    history.push({\r\n                        pathname: \"/addcdream\",\r\n                        defaultData: {\r\n                            post_id: post_id,\r\n                            post_title: post_title,\r\n                            dream_date: new Date(dream_date),\r\n                            post_content: post_content,\r\n                            tags: tags,\r\n                            technics: technics,\r\n                            rating: rating,\r\n                        }\r\n                    });\r\n                }\r\n                break;\r\n\r\n            case 'delete':\r\n                newAlertTexts = { ...newAlertTexts, header: lang.currLang.texts.DeleteAlert };\r\n                newAlertTexts = { ...newAlertTexts, body: lang.currLang.texts.DeleteText };\r\n                newAlertTexts = { ...newAlertTexts, commit: lang.currLang.buttons.Delete };\r\n                newAlertTexts = { ...newAlertTexts, action: 'deleteOk' };\r\n                setAlertTexts(newAlertTexts);\r\n                closeMenu();\r\n                setOpenAlert(true);\r\n                break;\r\n\r\n            case 'closeAlert':\r\n                setOpenAlert(false);\r\n                break;\r\n\r\n            case 'deleteOk':\r\n                const postData = {\r\n                    post_id: post_id\r\n                };\r\n                instance\r\n                    .post('/actions/users/deletepost', postData)\r\n                    .then(res => {\r\n                        closeMenu();\r\n                        setSnackbar({\r\n                            type: SET_SNACKBAR_MODE,\r\n                            snackbar: {\r\n                                open: true,\r\n                                variant: 'success',\r\n                                message: lang.currLang.texts.success,\r\n                            },\r\n                        });\r\n                        setOpenAlert(false);\r\n                        props.loadPosts();\r\n                    })\r\n                    .catch(err => {\r\n                        setSnackbar({\r\n                            type: SET_SNACKBAR_MODE,\r\n                            snackbar: {\r\n                                open: true,\r\n                                variant: 'error',\r\n                                message: lang.currLang.texts.CantDeletePost,\r\n                            },\r\n                        });\r\n                        closeMenu();\r\n                        setOpenAlert(false);\r\n                    });\r\n                break;\r\n\r\n            case 'publicOk':\r\n                closeMenu();\r\n                setOpenAlert(false);\r\n                if (publicChecked) {\r\n                    const postData = {\r\n                        post_id: post_id,\r\n                        newPublic: 0\r\n                    };\r\n                    instance\r\n                        .post('/actions/users/updatepost', postData)\r\n                        .then(res => {\r\n                            setPublicChecked(false);\r\n                            setSnackbar({\r\n                                type: SET_SNACKBAR_MODE,\r\n                                snackbar: {\r\n                                    open: true,\r\n                                    variant: 'success',\r\n                                    message: lang.currLang.texts.success,\r\n                                },\r\n                            });\r\n                        })\r\n                        .catch(err => {\r\n                            setPublicChecked(true);\r\n                        });\r\n                }\r\n                else {\r\n                    const postData = {\r\n                        post_id: post_id,\r\n                        newPublic: 1,\r\n                    };\r\n                    instance\r\n                        .post('/actions/users/updatepost', postData)\r\n                        .then(res => {\r\n                            setPublicChecked(true);\r\n                            setSnackbar({\r\n                                type: SET_SNACKBAR_MODE,\r\n                                snackbar: {\r\n                                    open: true,\r\n                                    variant: 'success',\r\n                                    message: lang.currLang.texts.success,\r\n                                },\r\n                            });\r\n                        })\r\n                        .catch(err => {\r\n                            setPublicChecked(false);\r\n                        });\r\n                }\r\n                break;\r\n\r\n            default:\r\n                console.log('Command not found');\r\n                break;\r\n        }\r\n    };\r\n\r\n    const handleExpandClick = () => {\r\n        setExpanded(!expanded);\r\n    };\r\n\r\n    return (\r\n        <Grid item xs={12} className={classes.dreamCardDiv}>\r\n            <Dialog open={openAlert}\r\n                onClose={() => clickMenu('closeAlert')}\r\n                aria-labelledby=\"alert-dialog-title\"\r\n                aria-describedby=\"alert-dialog-description\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-title\" >\r\n                    {alertTexts.header}\r\n                </DialogTitle>\r\n                <DialogContent >\r\n                    <DialogContentText id=\"alert-dialog-description\" >\r\n                        {alertTexts.body}\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => clickMenu('closeAlert')}\r\n                        color=\"secondary\">\r\n                        {lang.currLang.buttons.cancel}\r\n                    </Button>\r\n                    <Button onClick={() => clickMenu(alertTexts.action)}\r\n                        color=\"primary\" autoFocus>\r\n                        {alertTexts.commit}\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n            <Menu id=\"simple-menu\"\r\n                anchorEl={anchorEl}\r\n                keepMounted\r\n                open={Boolean(anchorEl)}\r\n                onClose={closeMenu}>\r\n\r\n                <MenuItem >\r\n                    <ListItemIcon>\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Checkbox\r\n                                    onChange={(e) => clickMenu('public', e)}\r\n                                    checked={publicChecked}\r\n                                    value=\"checkedB\"\r\n                                    color=\"primary\"\r\n                                />\r\n                            }\r\n                        />\r\n                    </ListItemIcon>\r\n                    {lang.currLang.texts.Public}\r\n                </MenuItem>\r\n\r\n                <MenuItem onClick={() => clickMenu('edit')}>\r\n                    <ListItemIcon>\r\n                        <EditIcon fontSize=\"small\" />\r\n                    </ListItemIcon>\r\n                    {lang.currLang.buttons.Edit}\r\n                </MenuItem>\r\n\r\n                <MenuItem onClick={() => clickMenu('delete')}>\r\n                    <ListItemIcon>\r\n                        <DeleteIcon fontSize=\"small\" />\r\n                    </ListItemIcon>\r\n                    {lang.currLang.buttons.Delete}\r\n                </MenuItem>\r\n\r\n            </Menu>\r\n            <Card raised={true}\r\n                className={classes.card}>\r\n                <CardHeader\r\n                    style={{\r\n                        paddingBottom: '0px',\r\n                    }}\r\n                    title={\r\n                        <Grid container\r\n                            direction=\"row\"\r\n                            justify=\"flex-start\"\r\n                            alignItems=\"center\"\r\n                        >\r\n                            <Grid item xs={10} >\r\n                                <Typography variant='subtitle1'>\r\n                                    {post_title} (\r\n                                    {post_type === 0\r\n                                        ? lang.currLang.texts.Dream\r\n                                        : lang.currLang.texts.Cdream})\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid item xs={2} >\r\n                                <Tooltip\r\n                                    disableFocusListener\r\n                                    disableTouchListener\r\n                                    title={publicChecked\r\n                                        ? lang.currLang.texts.PublicDescription\r\n                                        : lang.currLang.texts.UnpublicDescription\r\n                                    }\r\n                                >\r\n                                    {publicChecked\r\n                                        ? <Visibility className={classes.iconCenter} />\r\n                                        : <VisibilityOff className={classes.iconCenter} />\r\n                                    }\r\n                                </Tooltip>\r\n                            </Grid>\r\n                        </Grid>\r\n                    }\r\n                    subheader={dateOfDream}\r\n                    action={\r\n                        <IconButton\r\n                            aria-label=\"settings\"\r\n                            onClick={(e) => openMenu(e)}\r\n                        >\r\n                            <MoreVertIcon />\r\n                        </IconButton>\r\n                    }\r\n                />\r\n                <CardActions disableSpacing={true}>\r\n                    <Typography\r\n                        noWrap={expanded\r\n                            ? false\r\n                            : true\r\n                        }\r\n                        variant='body2'\r\n                        style={{\r\n                            padding: '12px',\r\n                        }}\r\n                    >\r\n                        {expanded\r\n                            ? lang.currLang.texts.TapToShow\r\n                            : text_content\r\n                        }\r\n                    </Typography>\r\n\r\n                    <IconButton\r\n                        className={clsx(classes.expand, {\r\n                            [classes.expandOpen]: expanded\r\n                        })}\r\n                        onClick={handleExpandClick}\r\n                        aria-expanded={expanded}\r\n                        aria-label=\"show more\"\r\n                    >\r\n                        <ExpandMoreIcon />\r\n                    </IconButton>\r\n                </CardActions>\r\n                <Collapse in={expanded}\r\n                    timeout=\"auto\"\r\n                    unmountOnExit >\r\n                    <CardContent>\r\n                        <div className={classes.avatarRoot}>\r\n                            {technics.map((technic, key) =>\r\n                                technic[0]\r\n                                    ? <Chip className={classes.smallChip}\r\n                                        key={key}\r\n                                        label={lang.currLang.current === \"Ru\"\r\n                                            ? technic[1]\r\n                                            : technic[2]}\r\n                                    />\r\n                                    : ''\r\n                            )}\r\n                        </div>\r\n                        <div className={classes.avatarRoot}>\r\n                            {tags.map((tag, key) =>\r\n                                tag[0]\r\n                                    ? <Tooltip key={key}\r\n                                        disableFocusListener\r\n                                        disableTouchListener\r\n                                        title={\r\n                                            lang.currLang.current === \"Ru\"\r\n                                                ? tag[1]\r\n                                                : tag[2]\r\n                                        }\r\n                                    >\r\n                                        <Avatar className={classes.smallAvatar}\r\n                                            src={tag[3]}\r\n                                            style={palette.type === 'dark'\r\n                                                ? {\r\n                                                    filter: 'invert(1)',\r\n                                                }\r\n                                                : {}}\r\n                                        />\r\n                                    </Tooltip>\r\n                                    : ''\r\n                            )}\r\n                        </div>\r\n                        <Paper className={classes.contentPaper}>\r\n                            <MUIRichTextEditor\r\n                                controls={[\r\n                                    \"bold\",\r\n                                    \"italic\",\r\n                                    \"underline\",\r\n                                    \"strikethrough\",\r\n                                    \"colorfill\",\r\n                                ]}\r\n                                customControls={[\r\n                                    {\r\n                                        name: \"colorfill\",\r\n                                        icon: <FormatColorFillIcon />,\r\n                                        type: \"inline\",\r\n                                        inlineStyle: {\r\n                                            backgroundColor: \"yellow\",\r\n                                            color: \"black\"\r\n                                        }\r\n                                    }\r\n                                ]}\r\n                                readOnly={true}\r\n                                toolbar={false}\r\n                                value={post_content}\r\n                            />\r\n                        </Paper>\r\n                        {post_type === 0\r\n                            ? ''\r\n                            :\r\n                            <Grid container\r\n                                style={{\r\n                                    paddingTop: '10px',\r\n                                }}\r\n                                direction=\"row\"\r\n                                justify=\"center\"\r\n                                alignItems=\"stretch\" >\r\n                                <Grid item xs={6}>\r\n                                    <Typography component=\"legend\" variant='body2'>\r\n                                        {lang.currLang.texts.rating}:\r\n                                    </Typography>\r\n                                </Grid>\r\n                                <Grid item xs={6}>\r\n                                    <Rating name=\"simple-controlled\"\r\n                                        value={rating}\r\n                                        readOnly\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n                        }\r\n                    </CardContent>\r\n                </Collapse>\r\n            </Card>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nDreamCard.propTypes = {\r\n    setSnackbar: PropTypes.func.isRequired,\r\n    lang: PropTypes.object.isRequired,\r\n    palette: PropTypes.object.isRequired,\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        lang: store.lang,\r\n        palette: store.themeMode.palette,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setSnackbar: snackbar => dispatch(setSnackbar(snackbar)),\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(DreamCard);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Button from '@material-ui/core/Button';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\n\r\nimport DreamCard from './muiltiple/DreamCard';\r\nimport { useStyles } from '../styles/Styles';\r\nimport { instance } from './Config';\r\n\r\nfunction ViewDreams(props) {\r\n    const { lang, themeMode, history, auth } = props;\r\n    const muiTheme = createMuiTheme(themeMode);\r\n    const classes = useStyles();\r\n    const [isLoading, setIsLoading] = React.useState(true);\r\n    const [dreams, setDreams] = React.useState([]);\r\n\r\n    const loadPosts = React.useCallback(() => {\r\n        setIsLoading(true);\r\n        instance.post(\"/actions/users/getuserposts\", { id: auth.user.id })\r\n            .then(res => {\r\n                setDreams(res.data);\r\n                setIsLoading(false);\r\n            })\r\n            .catch(err => {\r\n                setIsLoading(false);\r\n            });\r\n    }, [auth.user.id]);\r\n\r\n    React.useEffect(() => {\r\n        loadPosts();\r\n    }, [loadPosts]);\r\n\r\n    return (\r\n        <MuiThemeProvider theme={muiTheme}>\r\n            <CssBaseline />\r\n            <div className={classes.root}>\r\n                <Grid className={classes.mainGridContainer}\r\n                    container\r\n                    direction=\"column\"\r\n                    justify=\"center\"\r\n                    alignItems=\"stretch\" >\r\n                    <Grid item xs={11} zeroMinWidth className={classes.mainGridDreamsBodyItem}>\r\n                        {isLoading\r\n                            ? <div className={classes.centerCircularProgress}>\r\n                                <CircularProgress disableShrink />\r\n                            </div>\r\n                            : <Container className={classes.mainGridDreamsBodyItemContainer}>\r\n                                <Paper className={classes.mainGridDreamsBodyItemContainerPaper}>\r\n                                    {dreams.length !== 0\r\n                                        ? <Grid className={classes.mainGridDreamsContainer}\r\n                                            container\r\n                                            direction=\"column\"\r\n                                            justify=\"center\"\r\n                                            alignItems=\"stretch\"\r\n                                        >\r\n                                            {dreams.map((item, key) => (\r\n                                                <DreamCard\r\n                                                    item={item}\r\n                                                    key={key}\r\n                                                    history={history}\r\n                                                    loadPosts={loadPosts}\r\n                                                />\r\n                                            ))}\r\n                                        </Grid>\r\n                                        :\r\n                                        <div>\r\n                                            <div className={classes.divDreamsNotFound} />\r\n                                            <div className={`${classes.divDreamsNotFound} ${classes.divDreamsNotFoundImg}`} />\r\n                                            <div className={classes.divDreamsNotFound}>\r\n                                                <Typography>\r\n                                                    {lang.currLang.texts.NoDreams}\r\n                                                </Typography>\r\n                                            </div>\r\n                                        </div>\r\n                                    }\r\n                                </Paper>\r\n                            </Container>\r\n                        }\r\n                    </Grid>\r\n                    <Grid item xs={1} zeroMinWidth className={classes.mainGridBodyItem}>\r\n                        <Grid\r\n                            container\r\n                            direction=\"row\"\r\n                            justify=\"space-evenly\"\r\n                            alignItems=\"center\"\r\n                            spacing={1}\r\n                        >\r\n                            <Grid item xs={6} align=\"center\">\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    color=\"secondary\"\r\n                                    className={classes.actionButton}\r\n                                    onClick={() => { history.push(\"/luciddreams\") }}\r\n                                >\r\n                                    {lang.currLang.buttons.close}\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid item xs={6} />\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </MuiThemeProvider >\r\n    );\r\n}\r\n\r\nViewDreams.propTypes = {\r\n    themeMode: PropTypes.object.isRequired,\r\n    lang: PropTypes.object.isRequired,\r\n    auth: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        themeMode: store.themeMode,\r\n        lang: store.lang,\r\n        auth: store.auth,\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(ViewDreams);","const words = {\r\n    current: 'Ru',\r\n    buttons: {\r\n        signIn: 'Вход',\r\n        signUp: 'Регистрация',\r\n        dreamJoirnal: 'Дневник снов',\r\n        addDream: 'Добавить сон',\r\n        addCDream: 'Добавить ос',\r\n        techniques: 'Техники',\r\n        adventures: 'Приключения',\r\n        close: 'Назад',\r\n        about: 'О нас',\r\n        cancel: 'Отмена',\r\n        add: 'Добавить',\r\n        Edit: 'Изменить',\r\n        Delete: 'Удалить',\r\n        Save: 'Сохранить',\r\n        addTag: '+ место',\r\n    },\r\n    texts: {\r\n        about: 'О нас О нас О нас О нас О нас О нас О нас О нас О нас О нас О нас О нас',\r\n        or: 'ИЛИ',\r\n        nickname: 'Отображаемое имя',\r\n        password: 'Пароль',\r\n        passwordAgain: 'Поторите пароль',\r\n        cancel: 'Отмена',\r\n        sucessRegistration: 'Вы успешно зарегистрировались',\r\n        hello: 'Привет, ',\r\n        changleLanguage: 'Сохранить изменение языка на ',\r\n        success: 'Успешно',\r\n        title: 'Заголовок',\r\n        description: 'Описание',\r\n        content: 'Что снилось',\r\n        tags: 'Места',\r\n        dreams: 'Снов',\r\n        technics: 'Техники',\r\n        rating: 'Реалистичность',\r\n        Dream: 'Обычный сон',\r\n        Cdream: 'ОC',\r\n        NoDreams: \"У вас нет снов\",\r\n        pickDate: \"Дата\",\r\n        pickTime: \"Время\",\r\n        TapToShow: \"Нажмите на текст, чтобы отобразить подсвечивание\",\r\n        Public: \"Опубликовано\",\r\n        Publish: \"Опубликовать\",\r\n        Unpublish: \"Скрыть\",\r\n        PublicAlert: \"Вы точно хотите опубликовать сон?\",\r\n        PublicText: \"После публикации ваши друзья смогут прочитать этот сон.\",\r\n        PublicDescription: \"Ваши друзья могут прочитать этот сон\",\r\n        UnpublicAlert: \"Вы точно хотите скрыть сон?\",\r\n        UnpublicText: \"После скрытия ваши друзья не смогут прочитать этот сон.\",\r\n        UnpublicDescription: \"Ваши друзья не могут прочитать этот сон\",\r\n        DeleteAlert: \"Вы точно хотите удалить?\",\r\n        DeleteText: \"После удаления запись не получится восстановить.\",\r\n        Name: \"Наименование\",\r\n        ChangeIcon: \"Иконка\",\r\n    },\r\n    errors: {\r\n        emailLenght: 'Введите email',\r\n        nicknameLenght: 'Введите отображаемое имя',\r\n        passwordLenght: 'Введите пароль',\r\n        password2Lenght: 'Введите пароль',\r\n        passwordsCompare: 'Пароли не совпадают',\r\n        UserNotExist: 'Неверный email или пароль',\r\n        EmailIsNotValid: 'Введен некорректный email',\r\n        IncorrectPassword: 'Неверный email или пароль',\r\n        EmailIsBusy: 'Email занят',\r\n        PasswordLenght5Symbols: 'Длина пароля - больше 5 символов',\r\n        NotLogin: 'Вы не авторизированы',\r\n        EmptyName: 'Пустое наименование',\r\n        EmptyTitle: 'Пустой заголовок',\r\n        EmptyDescription: 'Пустое описание',\r\n        EmptyDream: 'Пустое поле сна',\r\n        NoChanges: 'Нет изменений',\r\n        CantDeletePost: 'Ошибка удаления сна',\r\n        IconNotChange: 'Выберите иконку',\r\n        ColorNotChange: 'Выберите цвет',\r\n    },\r\n};\r\n\r\nexport default words;","import React from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport SnackbarContent from \"@material-ui/core/SnackbarContent\";\r\nimport ButtonBase from '@material-ui/core/ButtonBase';\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport Button from '@material-ui/core/Button';\r\nimport Slide from \"@material-ui/core/Slide\";\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport { SET_THEME_MODE, SET_SNACKBAR_MODE } from \"../actions/types\";\r\n\r\nimport { setCurrLang, setTheme, setSnackbar } from '../actions/Actions';\r\nimport { useStyles } from '../styles/Styles';\r\nimport { instance } from './Config';\r\nimport { CheckTimeOut } from '../utils/CheckLoginTimeOut';\r\n\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\n\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\n\r\nimport RuDict from '../dictionary/ru';\r\nimport EnDict from '../dictionary/en';\r\n\r\nfunction TransitionDown(props) {\r\n    return <Slide {...props} direction=\"down\" />;\r\n}\r\n\r\nfunction MainPage(props) {\r\n    const classes = useStyles();\r\n    const { lang, themeMode, auth, history, setCurrLangAction, setTheme, setSnackbar } = props;\r\n    const muiTheme = createMuiTheme(themeMode);\r\n    const [prevLanguage, setPrevLanguage] = React.useState(undefined);\r\n    const [openLangSnakbar, setOpenLangSnakbar] = React.useState(false);\r\n    const [langSnakbarMessage, setLangSnakbarMessage] = React.useState('');\r\n    const [transition, setTransition] = React.useState(undefined);\r\n\r\n    const switchMode = () => {\r\n        let newPaletteType = themeMode.palette.type === \"light\" ? \"dark\" : \"light\";\r\n        let primaryColor = themeMode.palette.type === \"light\" ? \"#f9a825\" : \"#3f51b5\";\r\n        let secondaryColor = themeMode.palette.type === \"light\" ? \"#f50057\" : \"#f50057\";\r\n        setTheme({\r\n            type: SET_THEME_MODE,\r\n            palette: {\r\n                type: newPaletteType,\r\n                primary: { main: primaryColor },\r\n                secondary: { main: secondaryColor },\r\n            }\r\n        });\r\n    };\r\n\r\n    const onAstronautClick = () => {\r\n        alert('Тут должны перейти на страницу космонафта');\r\n    };\r\n\r\n    const onMapClick = () => {\r\n        let check = CheckTimeOut();\r\n        if (check) history.push(\"/dreammap\");\r\n        else history.push(\"/\");\r\n    };\r\n\r\n    const changeLanguage = (language) => {\r\n        if (language !== lang.currLang.current) {\r\n            if (language === 'Ru') {\r\n                setPrevLanguage(lang.currLang.current);\r\n                setCurrLangAction(RuDict);\r\n                setLangSnakbarMessage(language);\r\n                setTransition(() => TransitionDown);\r\n                setOpenLangSnakbar(true);\r\n            }\r\n            if (lang.currLang.current !== 'En') {\r\n                setPrevLanguage(lang.currLang.current);\r\n                setCurrLangAction(EnDict);\r\n                setLangSnakbarMessage(language);\r\n                setTransition(() => TransitionDown);\r\n                setOpenLangSnakbar(true);\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleCloseLangSnakbar = () => {\r\n        switch (prevLanguage) {\r\n            case 'En':\r\n                setCurrLangAction(EnDict);\r\n                break;\r\n            case 'Ru':\r\n                setCurrLangAction(RuDict);\r\n                break;\r\n            default:\r\n                setCurrLangAction(EnDict);\r\n                break;\r\n        }\r\n        setOpenLangSnakbar(false);\r\n    };\r\n\r\n    const handleSaveLangSnakbar = () => {\r\n        let newLang;\r\n        switch (lang.currLang.current) {\r\n            case 'En':\r\n                newLang = 0;\r\n                break;\r\n            case 'Ru':\r\n                newLang = 1;\r\n                break;\r\n            default:\r\n                newLang = 0;\r\n                break;\r\n        }\r\n        let userid = auth.user.id;\r\n        let usernickname = auth.user.nickname;\r\n        let newUserData = {\r\n            language: newLang,\r\n            id: userid,\r\n            nickname: usernickname,\r\n        };\r\n        //Проверка на таймаут\r\n        let check = CheckTimeOut();\r\n        if (check) {\r\n            instance\r\n                .post('/actions/users/updateuserdata', newUserData)\r\n                .then(res => {\r\n                    setSnackbar({\r\n                        type: SET_SNACKBAR_MODE,\r\n                        snackbar: {\r\n                            open: true,\r\n                            variant: 'success',\r\n                            message: lang.currLang.texts.success,\r\n                        },\r\n                    });\r\n                    setOpenLangSnakbar(false);\r\n                })\r\n                .catch(err => {\r\n                    handleCloseLangSnakbar();\r\n                });\r\n\r\n        }\r\n        else {\r\n            setSnackbar({\r\n                type: SET_SNACKBAR_MODE,\r\n                snackbar: {\r\n                    open: true,\r\n                    variant: 'error',\r\n                    message: lang.currLang.errors.NotLogin,\r\n                },\r\n            });\r\n            handleCloseLangSnakbar();\r\n        }\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        let id = {\r\n            id: auth.user.id,\r\n        };\r\n        instance\r\n            .post('/actions/users/getuserdata', id)\r\n            .then(res => {\r\n                res.data.language === 0 ? setCurrLangAction(EnDict) : setCurrLangAction(RuDict);\r\n            })\r\n            .catch(err => {\r\n                auth.user.language === 0 ? setCurrLangAction(EnDict) : setCurrLangAction(RuDict);\r\n            });\r\n        // if (auth.user.times_mode === 0) {\r\n        //     setTheme({\r\n        //         type: SET_THEME_MODE,\r\n        //         palette: {\r\n        //             type: \"dark\",\r\n        //             primary: { main: \"#f9a825\" },\r\n        //             secondary: { main: \"#f50057\" },\r\n        //         }\r\n        //     });\r\n        // }\r\n        // else {\r\n        //     setTheme({\r\n        //         type: SET_THEME_MODE,\r\n        //         palette: {\r\n        //             type: \"light\",\r\n        //             primary: { main: \"#3f51b5\" },\r\n        //             secondary: { main: \"#f50057\" },\r\n        //         }\r\n        //     });\r\n        // }\r\n    }, [classes, setTheme, setCurrLangAction, auth.user.language, auth.user.times_mode, auth.user.id]);\r\n\r\n    return (\r\n        <MuiThemeProvider theme={muiTheme}>\r\n            <CssBaseline />\r\n\r\n            <Snackbar\r\n                anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }}\r\n                key={\"top, center\"}\r\n                open={openLangSnakbar}\r\n                TransitionComponent={transition}\r\n            >\r\n                <SnackbarContent\r\n                    aria-describedby=\"lang-snackbar\"\r\n                    message={\r\n                        <Typography className={classes.mainGridContainer}\r\n                            align='center'\r\n                            id=\"lang-snackbar\"\r\n                            variant='body2'>\r\n                            {lang.currLang.texts.changleLanguage + langSnakbarMessage + ' ?'}\r\n                        </Typography>\r\n                    }\r\n                    action={[\r\n                        <div key={\"lang-snackbar-buttons\"}>\r\n                            <IconButton\r\n                                key=\"save\"\r\n                                aria-label=\"save\"\r\n                                color=\"inherit\"\r\n                                onClick={handleSaveLangSnakbar}\r\n                            >\r\n                                <SaveIcon />\r\n                            </IconButton>\r\n                            <IconButton\r\n                                key=\"close\"\r\n                                aria-label=\"close\"\r\n                                color=\"inherit\"\r\n                                onClick={handleCloseLangSnakbar}\r\n                            >\r\n                                <CloseIcon />\r\n                            </IconButton>\r\n                        </div>\r\n                    ]}\r\n                />\r\n            </Snackbar>\r\n\r\n            <div className={classes.root}>\r\n                <div className={classes.mainPage}>\r\n                    <Grid className={classes.mainGridContainer}\r\n                        container\r\n                        direction=\"column\"\r\n                        justify=\"center\"\r\n                        alignItems=\"stretch\"\r\n                    >\r\n                        <Grid item xs={4} className={classes.mainGridHeadItem} >\r\n                            <Grid container className={classes.mainGridContainer}\r\n                                direction=\"row\"\r\n                                justify=\"space-around\"\r\n                                alignItems=\"stretch\"\r\n                            >\r\n                                <Grid item xs={4} >\r\n                                    <ButtonBase className={classes.AstronautButton}\r\n                                        type='button'\r\n                                        focusRipple\r\n                                        onClick={onAstronautClick}>\r\n                                        <div className={classes.AstronautDiv}>\r\n                                            <div className={classes.AstronautImg} style={themeMode.palette.type === \"light\" ? { filter: 'invert(0)', } : { filter: 'invert(1)', }} />\r\n                                        </div>\r\n                                    </ButtonBase>\r\n                                </Grid>\r\n                                <Grid item xs={4} >\r\n                                    <ButtonBase className={classes.image}\r\n                                        type='button'\r\n                                        focusRipple\r\n                                        onClick={switchMode}>\r\n                                        <div className={classes.SkyDiv}>\r\n                                            <div className={classes.SunSrc} style={themeMode.palette.type === \"dark\" ? { transform: 'translateY(36vw)' } : { transform: 'translateY(0)' }} />\r\n                                            <div className={classes.MoonSrc} style={themeMode.palette.type === \"dark\" ? { transform: 'translateY(0)' } : { transform: 'translateY(-36vw)' }} />\r\n                                        </div>\r\n                                    </ButtonBase>\r\n                                </Grid>\r\n                                <Grid item xs={4} >\r\n                                    <ButtonBase className={classes.MapButton}\r\n                                        type='button'\r\n                                        focusRipple\r\n                                        onClick={onMapClick}>\r\n                                        <div className={classes.MapDiv}>\r\n                                            <div className={classes.MapImg} style={themeMode.palette.type === \"light\" ? { filter: 'invert(0)', } : { filter: 'invert(1)', }} />\r\n                                        </div>\r\n                                    </ButtonBase>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item xs={1} className={classes.mainGridHeadItem} >\r\n                            <Grid className={classes.mainGridContainer}\r\n                                container\r\n                                direction=\"column\"\r\n                                justify=\"center\"\r\n                                alignItems=\"stretch\" >\r\n                                <Grid item xs={12} className={classes.menuButtonContainerItem} >\r\n                                    <Typography className={classes.mainGridContainer}\r\n                                        align='center'\r\n                                        variant='h6'>\r\n                                        {lang.currLang.texts.hello + auth.user.nickname}\r\n                                    </Typography>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item xs={6} className={classes.mainGridBodyItem} >\r\n                            <Grid className={classes.mainGridContainer}\r\n                                container\r\n                                direction=\"column\"\r\n                                justify=\"center\"\r\n                                alignItems=\"stretch\"\r\n                            >\r\n                                <Grid className={classes.menuButtonContainer}\r\n                                    container\r\n                                    direction=\"column\"\r\n                                    justify=\"center\"\r\n                                    alignItems=\"stretch\"\r\n                                >\r\n                                    <Grid item xs={12} className={classes.menuButtonContainerItem} >\r\n                                        <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                            <Button\r\n                                                variant=\"contained\"\r\n                                                color=\"primary\"\r\n                                                className={classes.menuButton}\r\n                                                onClick={() => {\r\n                                                    let check = CheckTimeOut();\r\n                                                    if (check) history.push(\"/dreams\");\r\n                                                    else history.push(\"/\");\r\n                                                }}\r\n                                            >\r\n                                                {lang.currLang.buttons.dreamJoirnal}\r\n                                            </Button>\r\n                                        </Grid>\r\n                                        <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                            <Button\r\n                                                variant=\"contained\"\r\n                                                color=\"primary\"\r\n                                                className={classes.menuButton}\r\n                                                onClick={() => {\r\n                                                    let check = CheckTimeOut();\r\n                                                    if (check) history.push(\"/addregulardream\");\r\n                                                    else history.push(\"/\");\r\n                                                }}\r\n                                            >\r\n                                                {lang.currLang.buttons.addDream}\r\n                                            </Button>\r\n                                        </Grid>\r\n                                        <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                            <Button\r\n                                                variant=\"contained\"\r\n                                                color=\"primary\"\r\n                                                className={classes.menuButton}\r\n                                                onClick={() => {\r\n                                                    let check = CheckTimeOut();\r\n                                                    if (check) history.push(\"/addcdream\");\r\n                                                    else history.push(\"/\");\r\n                                                }}\r\n                                            >\r\n                                                {lang.currLang.buttons.addCDream}\r\n                                            </Button>\r\n                                        </Grid>\r\n                                        <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                            <Button\r\n                                                variant=\"contained\"\r\n                                                color=\"primary\"\r\n                                                className={classes.menuButton}\r\n                                                onClick={() => {\r\n                                                    let check = CheckTimeOut();\r\n                                                    if (check) history.push(\"/technics\");\r\n                                                    else history.push(\"/\");\r\n                                                }}\r\n                                            >\r\n                                                {lang.currLang.buttons.techniques}\r\n                                            </Button>\r\n                                        </Grid>\r\n                                        <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                            <Button variant=\"contained\" color=\"primary\" className={classes.menuButton}>\r\n                                                {lang.currLang.buttons.adventures}\r\n                                            </Button>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item xs={1} className={classes.mainGridFooterItem} >\r\n                            <Grid className={classes.menuButtonContainerFooterLanguageButtons}\r\n                                container\r\n                                direction=\"row\"\r\n                                justify=\"center\"\r\n                                alignItems=\"center\" >\r\n                                <Grid item>\r\n                                    <Button onClick={() => { changeLanguage('Ru') }}>\r\n                                        RU\r\n                                    </Button>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Button onClick={() => { changeLanguage('En') }}>\r\n                                        EN\r\n                                    </Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </div>\r\n            </div>\r\n        </MuiThemeProvider>\r\n    );\r\n};\r\n\r\nMainPage.propTypes = {\r\n    setCurrLangAction: PropTypes.func.isRequired,\r\n    setTheme: PropTypes.func.isRequired,\r\n    setSnackbar: PropTypes.func.isRequired,\r\n    lang: PropTypes.object.isRequired,\r\n    themeMode: PropTypes.object.isRequired,\r\n    auth: PropTypes.object.isRequired,\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        lang: store.lang,\r\n        themeMode: store.themeMode,\r\n        auth: store.auth,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setCurrLangAction: currLangState => dispatch(setCurrLang(currLangState)),\r\n        setTheme: palette => dispatch(setTheme(palette)),\r\n        setSnackbar: snackbar => dispatch(setSnackbar(snackbar)),\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(MainPage);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport jwt_decode from \"jwt-decode\";\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { GET_ERRORS, SET_CURRENT_USER, SET_SNACKBAR_MODE } from \"../actions/types\";\r\nimport { setCurrLang, setUserState, setSnackbar } from '../actions/Actions';\r\nimport { useStyles } from '../styles/Styles';\r\nimport setAuthToken from \"../utils/setAuthToken\";\r\nimport { instance } from './Config';\r\n\r\nimport RuDict from '../dictionary/ru';\r\nimport EnDict from '../dictionary/en';\r\n\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\r\nimport Visibility from '@material-ui/icons/Visibility';\r\n\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\n\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\n\r\nimport { mdiVk } from '@mdi/js';\r\nimport Icon from '@mdi/react';\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nfunction Sign(props) {\r\n    const classes = useStyles();\r\n    const { history, themeMode, lang, setUserState, setSnackbar, setCurrLang } = props;\r\n    const muiTheme = createMuiTheme(themeMode);\r\n    const [loginData, setLoginData] = React.useState({\r\n        email: '',\r\n        password: '',\r\n    });\r\n    const [registData, setRegistData] = React.useState({\r\n        email: '',\r\n        nickname: '',\r\n        password: '',\r\n        password2: '',\r\n    });\r\n    const [regFieldErrors, setRegFieldErrors] = React.useState({\r\n        emailErr: false,\r\n        emailErrText: '',\r\n        nicknameErr: false,\r\n        nicknameErrText: '',\r\n        passwordErr: false,\r\n        passwordErrText: '',\r\n        password2Err: false,\r\n        password2ErrText: '',\r\n    });\r\n    const [isLoading, setIsLoading] = React.useState(false);\r\n    const [showPassword, setShowPassword] = React.useState(false);\r\n    const [openLogin, setOpenLogin] = React.useState(false);\r\n    const [openRegist, setOpenRegist] = React.useState(false);\r\n    const [page, setPage] = React.useState({\r\n        mainPage: true,\r\n        aboutPage: false,\r\n    });\r\n\r\n    const handleMouseDownPassword = event => {\r\n        event.preventDefault();\r\n    };\r\n    const changeAuthLogin = (e) => {\r\n        let newLoginData = loginData;\r\n        newLoginData = { ...newLoginData, email: e.target.value };\r\n        setLoginData(newLoginData);\r\n    };\r\n    const changeAuthPassword = (e) => {\r\n        let newLoginData = loginData;\r\n        newLoginData = { ...newLoginData, password: e.target.value };\r\n        setLoginData(newLoginData);\r\n    };\r\n    const changeRegistLogin = (e) => {\r\n        let newRegFieldErrors = regFieldErrors;\r\n        newRegFieldErrors = { ...newRegFieldErrors, emailErr: false };\r\n        newRegFieldErrors = { ...newRegFieldErrors, emailErrText: '' };\r\n        setRegFieldErrors(newRegFieldErrors);\r\n\r\n        let newRegistData = registData;\r\n        newRegistData = { ...newRegistData, email: e.target.value };\r\n        setRegistData(newRegistData);\r\n    };\r\n    const changeRegistNickname = (e) => {\r\n        let newRegFieldErrors = regFieldErrors;\r\n        newRegFieldErrors = { ...newRegFieldErrors, nicknameErr: false };\r\n        newRegFieldErrors = { ...newRegFieldErrors, nicknameErrText: '' };\r\n        setRegFieldErrors(newRegFieldErrors);\r\n\r\n        let newRegistData = registData;\r\n        newRegistData = { ...newRegistData, nickname: e.target.value };\r\n        setRegistData(newRegistData);\r\n    };\r\n    const changeRegistPassword = (e) => {\r\n        let newRegFieldErrors = regFieldErrors;\r\n        newRegFieldErrors = { ...newRegFieldErrors, passwordErr: false };\r\n        newRegFieldErrors = { ...newRegFieldErrors, passwordErrText: '' };\r\n        newRegFieldErrors = { ...newRegFieldErrors, password2Err: false };\r\n        newRegFieldErrors = { ...newRegFieldErrors, password2ErrText: '' };\r\n        setRegFieldErrors(newRegFieldErrors);\r\n\r\n        let newRegistData = registData;\r\n        newRegistData = { ...newRegistData, password: e.target.value };\r\n        setRegistData(newRegistData);\r\n    };\r\n    const changeRegistPassword2 = (e) => {\r\n        let newRegFieldErrors = regFieldErrors;\r\n        newRegFieldErrors = { ...newRegFieldErrors, passwordErr: false };\r\n        newRegFieldErrors = { ...newRegFieldErrors, passwordErrText: '' };\r\n        newRegFieldErrors = { ...newRegFieldErrors, password2Err: false };\r\n        newRegFieldErrors = { ...newRegFieldErrors, password2ErrText: '' };\r\n        setRegFieldErrors(newRegFieldErrors);\r\n        let newRegistData = registData;\r\n        newRegistData = { ...newRegistData, password2: e.target.value };\r\n        setRegistData(newRegistData);\r\n    };\r\n    const singIn = () => {\r\n        instance\r\n            .post(\"/actions/users/login\", loginData)\r\n            .then(res => {\r\n                const { token } = res.data;\r\n                localStorage.setItem(\"jwtToken\", token);\r\n                setAuthToken(token);\r\n                const decoded = jwt_decode(token);\r\n                setUserState({\r\n                    type: SET_CURRENT_USER,\r\n                    payload: decoded\r\n                });\r\n                setIsLoading(false);\r\n                history.push(\"/luciddreams\");\r\n            })\r\n            .catch(err => {\r\n                //console.log(err);\r\n                let errorMessage = '';\r\n                if (err.response.data.email === 'UserNotExist') {\r\n                    errorMessage = lang.currLang.errors.UserNotExist;\r\n                }\r\n                if (err.response.data.email === 'EmailIsNotValid') {\r\n                    errorMessage = lang.currLang.errors.EmailIsNotValid;\r\n                }\r\n                if (err.response.data.passwordincorrect === 'IncorrectPassword') {\r\n                    errorMessage = lang.currLang.errors.IncorrectPassword;\r\n                }\r\n                setSnackbar({\r\n                    type: SET_SNACKBAR_MODE,\r\n                    snackbar: {\r\n                        open: true,\r\n                        variant: 'error',\r\n                        message: errorMessage,\r\n                    },\r\n                });\r\n                setIsLoading(false);\r\n            });\r\n    };\r\n    const singUp = () => {\r\n        let isErr = false;\r\n        let newRegFieldErrors = regFieldErrors;\r\n        if (registData.email.length === 0) {\r\n            newRegFieldErrors = { ...newRegFieldErrors, emailErr: true };\r\n            newRegFieldErrors = { ...newRegFieldErrors, emailErrText: lang.currLang.errors.emailLenght };\r\n            isErr = true;\r\n        }\r\n        if (registData.nickname.length === 0) {\r\n            newRegFieldErrors = { ...newRegFieldErrors, nicknameErr: true };\r\n            newRegFieldErrors = { ...newRegFieldErrors, nicknameErrText: lang.currLang.errors.nicknameLenght };\r\n            isErr = true;\r\n        }\r\n        if (registData.password.length === 0) {\r\n            newRegFieldErrors = { ...newRegFieldErrors, passwordErr: true };\r\n            newRegFieldErrors = { ...newRegFieldErrors, passwordErrText: lang.currLang.errors.passwordLenght };\r\n            isErr = true;\r\n        }\r\n        if (registData.password2.length === 0) {\r\n            newRegFieldErrors = { ...newRegFieldErrors, password2Err: true };\r\n            newRegFieldErrors = { ...newRegFieldErrors, password2ErrText: lang.currLang.errors.password2Lenght };\r\n            isErr = true;\r\n        }\r\n        if (registData.password !== registData.password2) {\r\n            newRegFieldErrors = { ...newRegFieldErrors, passwordErr: true };\r\n            newRegFieldErrors = { ...newRegFieldErrors, passwordErrText: lang.currLang.errors.passwordsCompare };\r\n            newRegFieldErrors = { ...newRegFieldErrors, password2Err: true };\r\n            newRegFieldErrors = { ...newRegFieldErrors, password2ErrText: lang.currLang.errors.passwordsCompare };\r\n            isErr = true;\r\n        }\r\n        if (isErr) {\r\n            setRegFieldErrors(newRegFieldErrors);\r\n            setIsLoading(false);\r\n        }\r\n        else {\r\n            instance\r\n                .post('/actions/users/register', registData)\r\n                .then(res => {\r\n                    setSnackbar({\r\n                        type: SET_SNACKBAR_MODE,\r\n                        snackbar: {\r\n                            open: true,\r\n                            variant: 'success',\r\n                            message: lang.currLang.texts.sucessRegistration,\r\n                        },\r\n                    });\r\n                    let newRegistData = registData;\r\n                    newRegistData = { ...newRegistData, email: '' };\r\n                    newRegistData = { ...newRegistData, nickname: '' };\r\n                    newRegistData = { ...newRegistData, password: '' };\r\n                    newRegistData = { ...newRegistData, password2: '' };\r\n                    setRegistData(newRegistData);\r\n                    click('closeRegist');\r\n                    click('openLogin');\r\n                    setIsLoading(false);\r\n                })\r\n                .catch(err => {\r\n                    let errorMessage = '';\r\n                    setUserState({\r\n                        type: GET_ERRORS,\r\n                        payload: err.response.data\r\n                    });\r\n                    if (err.response.data.email === 'EmailIsBusy') {\r\n                        errorMessage = lang.currLang.errors.EmailIsBusy;\r\n                    }\r\n                    if (err.response.data.password === 'PasswordLenght5Symbols') {\r\n                        errorMessage = lang.currLang.errors.PasswordLenght5Symbols;\r\n                    }\r\n                    setSnackbar({\r\n                        type: SET_SNACKBAR_MODE,\r\n                        snackbar: {\r\n                            open: true,\r\n                            variant: 'error',\r\n                            message: errorMessage,\r\n                        },\r\n                    });\r\n                    setIsLoading(false);\r\n                });\r\n        }\r\n    };\r\n    const click = (action) => {\r\n        let newPages = page;\r\n        switch (action) {\r\n            case 'useVk':\r\n                // window.VK.Auth.login(checkLoginState, 4194304);\r\n                // let loadItems = async () => {\r\n                //     const response = await fetch('http://10.203.117.137:3001/auth/vk', {\r\n                //         method: 'GET',\r\n                //         credentials: 'include',\r\n                //     });\r\n                //     const body = await response.json();\r\n\r\n                //     console.log(response);\r\n                // }\r\n                break;\r\n            case 'openLogin':\r\n                setOpenLogin(true);\r\n                break;\r\n            case 'openRegist':\r\n                setOpenRegist(true);\r\n                break;\r\n            case 'closeLogin':\r\n                setOpenLogin(false);\r\n                setShowPassword(false);\r\n                break;\r\n            case 'closeRegist':\r\n                setOpenRegist(false);\r\n                setShowPassword(false);\r\n                break;\r\n            case 'signIn':\r\n                setIsLoading(true);\r\n                singIn();\r\n                break;\r\n            case 'signUp':\r\n                setIsLoading(true);\r\n                singUp();\r\n                break;\r\n            case 'openAboutPage':\r\n                newPages = { ...newPages, aboutPage: true };\r\n                newPages = { ...newPages, mainPage: false };\r\n                setPage(newPages);\r\n                break;\r\n            case 'closeAboutPage':\r\n                newPages = { ...newPages, aboutPage: false };\r\n                newPages = { ...newPages, mainPage: true };\r\n                setPage(newPages);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    };\r\n    const changeLanguage = (language) => {\r\n        if (language === 'Ru') {\r\n            setCurrLang(RuDict);\r\n        }\r\n        else {\r\n            setCurrLang(EnDict);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <MuiThemeProvider theme={muiTheme}>\r\n            <CssBaseline />\r\n\r\n            <div className={classes.root} id='rootDiv'>\r\n\r\n                <div className={classes.mainPage}\r\n                    style={\r\n                        page.mainPage === true\r\n                            ? { transform: 'translateY(0%)' }\r\n                            : { transform: 'translateY(-100%)' }\r\n                    } >\r\n                    <Grid className={classes.mainGridContainer}\r\n                        container\r\n                        direction=\"column\"\r\n                        justify=\"center\"\r\n                        alignItems=\"stretch\"\r\n                    >\r\n                        <Grid item xs={11} className={classes.mainGridBodyItem} >\r\n                            <Grid className={classes.menuButtonContainer}\r\n                                container\r\n                                direction=\"column\"\r\n                                justify=\"center\"\r\n                                alignItems=\"stretch\" >\r\n                                <Grid item xs={3} />\r\n                                <Grid item xs={6} className={classes.menuButtonContainerItem}>\r\n                                    <Dialog\r\n                                        open={openLogin}\r\n                                        TransitionComponent={Transition}\r\n                                        keepMounted\r\n                                        aria-labelledby=\"alert-dialog-slide-title\"\r\n                                        aria-describedby=\"alert-dialog-slide-description\"\r\n                                    >\r\n                                        <DialogTitle id=\"alert-dialog-slide-title\">\r\n                                            {lang.currLang.buttons.signIn}\r\n                                        </DialogTitle>\r\n                                        <DialogContent>\r\n                                            <Grid item xs={12} className={classes.menuButtonContainerItem}>\r\n                                                <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                                    <TextField\r\n                                                        className={classes.textField}\r\n                                                        id=\"email-field\"\r\n                                                        type=\"email\"\r\n                                                        label=\"Email\"\r\n                                                        onBlur={(e) => { changeAuthLogin(e) }} />\r\n                                                </Grid>\r\n                                                <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                                    <TextField\r\n                                                        id=\"password-field\"\r\n                                                        className={classes.textField}\r\n                                                        type={showPassword ? 'text' : 'password'}\r\n                                                        label={lang.currLang.texts.password}\r\n                                                        onBlur={(e) => { changeAuthPassword(e) }}\r\n                                                        InputProps={{\r\n                                                            endAdornment: (\r\n                                                                <InputAdornment position=\"end\">\r\n                                                                    <IconButton\r\n                                                                        tabIndex=\"-1\"\r\n                                                                        edge=\"end\"\r\n                                                                        aria-label=\"toggle password visibility\"\r\n                                                                        onClick={() => { showPassword ? setShowPassword(false) : setShowPassword(true) }}\r\n                                                                        onMouseDown={handleMouseDownPassword} >\r\n                                                                        {showPassword ? <VisibilityOff /> : <Visibility />}\r\n                                                                    </IconButton>\r\n                                                                </InputAdornment>\r\n                                                            ),\r\n                                                        }} />\r\n                                                </Grid>\r\n                                                <Grid item xs={2} className={classes.menuDivButton}\r\n                                                    align=\"center\"\r\n                                                >\r\n                                                    <Typography>\r\n                                                        {lang.currLang.texts.or}\r\n                                                    </Typography>\r\n                                                </Grid>\r\n                                                <Grid item xs={2} className={classes.menuDivButton}\r\n                                                    align=\"center\"\r\n                                                >\r\n                                                    <IconButton className={classes.button}\r\n                                                        onClick={() => { click('useVk') }}\r\n                                                        disabled={isLoading}>\r\n                                                        <Icon path={mdiVk} size={2} color={themeMode.palette.type === 'light' ? 'rgba(0, 0, 0, 0.54)' : 'rgba(255, 255, 255, 1)'} />\r\n                                                    </IconButton>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                            {isLoading\r\n                                                ? <LinearProgress /> :\r\n                                                ''}\r\n                                        </DialogContent>\r\n                                        {!isLoading\r\n                                            ?\r\n                                            <DialogActions>\r\n                                                <Button onClick={() => { click('closeLogin') }}\r\n                                                    color=\"secondary\"\r\n                                                    disabled={isLoading}>\r\n                                                    {lang.currLang.buttons.cancel}\r\n                                                </Button>\r\n                                                <Button onClick={() => { click('signIn') }}\r\n                                                    color=\"primary\"\r\n                                                    disabled={isLoading}>\r\n                                                    {lang.currLang.buttons.signIn}\r\n                                                </Button>\r\n                                            </DialogActions>\r\n                                            : ''}\r\n                                    </Dialog>\r\n                                    <Dialog\r\n                                        open={openRegist}\r\n                                        TransitionComponent={Transition}\r\n                                        keepMounted\r\n                                        aria-labelledby=\"alert-dialog-slide-title\"\r\n                                        aria-describedby=\"alert-dialog-slide-description\"\r\n                                    >\r\n                                        <DialogTitle id=\"alert-dialog-slide-title\">\r\n                                            {lang.currLang.buttons.signUp}\r\n                                        </DialogTitle>\r\n                                        <DialogContent>\r\n                                            <Grid item xs={12} className={classes.menuButtonContainerItem}>\r\n                                                <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                                    <TextField\r\n                                                        error={regFieldErrors.emailErr}\r\n                                                        helperText={regFieldErrors.emailErrText}\r\n                                                        className={classes.textField}\r\n                                                        id=\"reg-email-field\"\r\n                                                        type=\"email\"\r\n                                                        label=\"Email\"\r\n                                                        onBlur={(e) => { changeRegistLogin(e) }} />\r\n                                                </Grid>\r\n                                                <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                                    <TextField\r\n                                                        error={regFieldErrors.nicknameErr}\r\n                                                        helperText={regFieldErrors.nicknameErrText}\r\n                                                        className={classes.textField}\r\n                                                        id=\"reg-nickname-field\"\r\n                                                        type=\"text\"\r\n                                                        label={lang.currLang.texts.nickname}\r\n                                                        onBlur={(e) => { changeRegistNickname(e) }} />\r\n                                                </Grid>\r\n                                                <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                                    <TextField\r\n                                                        error={regFieldErrors.passwordErr}\r\n                                                        helperText={regFieldErrors.passwordErrText}\r\n                                                        id=\"reg-password-field\"\r\n                                                        className={classes.textField}\r\n                                                        type={showPassword ? 'text' : 'password'}\r\n                                                        label={lang.currLang.texts.password}\r\n                                                        onBlur={(e) => { changeRegistPassword(e) }}\r\n                                                        InputProps={{\r\n                                                            endAdornment: (\r\n                                                                <InputAdornment position=\"end\">\r\n                                                                    <IconButton\r\n                                                                        tabIndex=\"-1\"\r\n                                                                        edge=\"end\"\r\n                                                                        aria-label=\"toggle password visibility\"\r\n                                                                        onClick={() => { showPassword ? setShowPassword(false) : setShowPassword(true) }}\r\n                                                                        onMouseDown={handleMouseDownPassword} >\r\n                                                                        {showPassword ? <VisibilityOff /> : <Visibility />}\r\n                                                                    </IconButton>\r\n                                                                </InputAdornment>\r\n                                                            ),\r\n                                                        }} />\r\n                                                </Grid>\r\n                                                <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                                    <TextField\r\n                                                        error={regFieldErrors.password2Err}\r\n                                                        helperText={regFieldErrors.password2ErrText}\r\n                                                        id=\"reg-password2-field\"\r\n                                                        className={classes.textField}\r\n                                                        type={showPassword ? 'text' : 'password'}\r\n                                                        label={lang.currLang.texts.passwordAgain}\r\n                                                        onBlur={(e) => { changeRegistPassword2(e) }}\r\n                                                        InputProps={{\r\n                                                            endAdornment: (\r\n                                                                <InputAdornment position=\"end\">\r\n                                                                    <IconButton\r\n                                                                        tabIndex=\"-1\"\r\n                                                                        edge=\"end\"\r\n                                                                        aria-label=\"toggle password visibility\"\r\n                                                                        onClick={() => { showPassword ? setShowPassword(false) : setShowPassword(true) }}\r\n                                                                        onMouseDown={handleMouseDownPassword} >\r\n                                                                        {showPassword ? <VisibilityOff /> : <Visibility />}\r\n                                                                    </IconButton>\r\n                                                                </InputAdornment>\r\n                                                            ),\r\n                                                        }} />\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                            {isLoading\r\n                                                ? <LinearProgress />\r\n                                                : ''}\r\n\r\n                                        </DialogContent>\r\n                                        {!isLoading\r\n                                            ?\r\n                                            <DialogActions>\r\n                                                <Button onClick={() => { click('closeRegist') }}\r\n                                                    color=\"secondary\"\r\n                                                    disabled={isLoading}>\r\n                                                    {lang.currLang.buttons.cancel}\r\n                                                </Button>\r\n                                                <Button onClick={() => { click('signUp') }}\r\n                                                    color=\"primary\"\r\n                                                    disabled={isLoading}>\r\n                                                    {lang.currLang.buttons.signUp}\r\n                                                </Button>\r\n                                            </DialogActions>\r\n                                            : ''}\r\n                                    </Dialog>\r\n                                    <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                        <Button variant=\"contained\" color=\"primary\" className={classes.menuButton} onClick={() => { click('openLogin') }}>\r\n                                            {lang.currLang.buttons.signIn}\r\n                                        </Button>\r\n                                    </Grid>\r\n                                    <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                        <Button variant=\"contained\" color=\"primary\" className={classes.menuButton} onClick={() => { click('openRegist') }}>\r\n                                            {lang.currLang.buttons.signUp}\r\n                                        </Button>\r\n                                    </Grid>\r\n                                    <Grid item xs={2} className={classes.menuDivButton} align=\"center\" />\r\n                                    <Grid item xs={2} className={classes.menuDivButton} align=\"center\">\r\n                                        <Button variant=\"contained\"\r\n                                            color=\"primary\"\r\n                                            className={classes.menuButton}\r\n                                            onClick={() => (click('openAboutPage'))} >\r\n                                            {lang.currLang.buttons.about}\r\n                                        </Button>\r\n                                    </Grid>\r\n                                </Grid>\r\n                                <Grid item xs={3} />\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item xs={1} className={classes.mainGridFooterItem} >\r\n                            <Grid className={classes.menuButtonContainerFooterLanguageButtons}\r\n                                container\r\n                                direction=\"row\"\r\n                                justify=\"center\"\r\n                                alignItems=\"center\" >\r\n                                <Grid item>\r\n                                    <Button onClick={() => { changeLanguage('Ru') }}>\r\n                                        RU\r\n                                    </Button>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Button onClick={() => { changeLanguage('En') }}>\r\n                                        EN\r\n                                    </Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </div >\r\n\r\n                <div className={classes.aboutPage}\r\n                    style={page.aboutPage === true\r\n                        ? { transform: 'translateY(-100%)' }\r\n                        : { transform: 'translateY(0%)' }\r\n                    }\r\n                >\r\n                    <Grid className={classes.aboutGridContainer}\r\n                        container\r\n                        direction=\"column\"\r\n                        justify=\"center\"\r\n                        alignItems=\"stretch\"\r\n                        spacing={5} >\r\n                        <Grid item\r\n                            className={classes.aboutGridItem}\r\n                            align='center'>\r\n                            <Paper className={classes.aboutPaper}>\r\n                                <Typography>\r\n                                    {lang.currLang.texts.about}\r\n                                </Typography>\r\n                            </Paper>\r\n                        </Grid>\r\n                        <Grid item\r\n                            className={classes.aboutGridItem}\r\n                            align='center'>\r\n                            <Button variant=\"contained\"\r\n                                color=\"primary\"\r\n                                className={classes.menuButton}\r\n                                onClick={() => (click('closeAboutPage'))} >\r\n                                {lang.currLang.buttons.close}\r\n                            </Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                </div>\r\n            </div >\r\n        </MuiThemeProvider>\r\n    )\r\n}\r\n\r\nSign.propTypes = {\r\n    setCurrLang: PropTypes.func.isRequired,\r\n    setUserState: PropTypes.func.isRequired,\r\n    setSnackbar: PropTypes.func.isRequired,\r\n    themeMode: PropTypes.object.isRequired,\r\n    lang: PropTypes.object.isRequired,\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        themeMode: store.themeMode,\r\n        lang: store.lang,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setCurrLang: currLangState => dispatch(setCurrLang(currLangState)),\r\n        setUserState: State => dispatch(setUserState(State)),\r\n        setSnackbar: snackbar => dispatch(setSnackbar(snackbar)),\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Sign);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Card from '@material-ui/core/Card';\r\n\r\nimport { useStyles } from '../../styles/Styles';\r\nimport { setSnackbar } from '../../actions/Actions';\r\n\r\nfunction TechnicCard(props) {\r\n    const { item, lang, auth, history } = props;\r\n    const classes = useStyles();\r\n    const [openAlert, setOpenAlert] = React.useState(false);\r\n    const [alertTexts, setAlertTexts] = React.useState({\r\n        header: '',\r\n        body: '',\r\n        commit: '',\r\n        action: '',\r\n    });\r\n    const actions = (action) => {\r\n        switch (action) {\r\n            case 'edit':\r\n                history.push({\r\n                    pathname: \"/addtechnics\",\r\n                    defaultData: {\r\n                        item: item,\r\n                    }\r\n                });\r\n                break;\r\n            case 'delete':\r\n                let newAlertTexts = alertTexts;\r\n                newAlertTexts = { ...newAlertTexts, header: lang.currLang.texts.DeleteAlert };\r\n                newAlertTexts = { ...newAlertTexts, body: lang.currLang.texts.DeleteText };\r\n                newAlertTexts = { ...newAlertTexts, commit: lang.currLang.buttons.Delete };\r\n                newAlertTexts = { ...newAlertTexts, action: 'deleteOk' };\r\n                setAlertTexts(newAlertTexts);\r\n                setOpenAlert(true);\r\n                break;\r\n            case 'deleteOk':\r\n                setOpenAlert(false);\r\n                props.loadTechnics();\r\n                break;\r\n            case 'closeAlert':\r\n                setOpenAlert(false);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Grid item xs={12} className={classes.dreamCardDiv} >\r\n            <Dialog open={openAlert}\r\n                onClose={() => actions('closeAlert')}\r\n                aria-labelledby=\"alert-dialog-title\"\r\n                aria-describedby=\"alert-dialog-description\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-title\" >\r\n                    {alertTexts.header}\r\n                </DialogTitle>\r\n                <DialogContent >\r\n                    <DialogContentText id=\"alert-dialog-description\" >\r\n                        {alertTexts.body}\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => actions('closeAlert')}\r\n                        color=\"secondary\">\r\n                        {lang.currLang.buttons.cancel}\r\n                    </Button>\r\n                    <Button onClick={() => actions(alertTexts.action)}\r\n                        color=\"primary\" autoFocus>\r\n                        {alertTexts.commit}\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n            <Card raised={true} className={classes.card}>\r\n                <CardActionArea>\r\n                    <CardMedia className={classes.media}\r\n                        image=\"https://4.bp.blogspot.com/-imM00o7SslA/V8NXohT8AmI/AAAAAAAAFOM/F7h1SZjMaCU4mJ6PlwUlx7tpePjVJWlcACLcB/s1600/Cockpit%2B2.png\"\r\n                    />\r\n                    <CardContent>\r\n                        <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                            {lang.currLang.current === \"Ru\"\r\n                                ? item.name_rus\r\n                                : item.name_eng\r\n                            }\r\n                        </Typography>\r\n                        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                            Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging\r\n                            across all continents except Antarctica\r\n                        </Typography>\r\n                    </CardContent>\r\n                </CardActionArea>\r\n                {auth.user.roles < 2 //0 - admin; 1 - moderator\r\n                    ? <CardActions>\r\n                        <Button size=\"small\" color=\"secondary\" onClick={() => { actions('delete') }}>\r\n                            {lang.currLang.buttons.Delete}\r\n                        </Button>\r\n                        <Button size=\"small\" color=\"primary\" onClick={() => { actions('edit') }}>\r\n                            {lang.currLang.buttons.Edit}\r\n                        </Button>\r\n                    </CardActions>\r\n                    : ''\r\n                }\r\n            </Card>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nTechnicCard.propTypes = {\r\n    setSnackbar: PropTypes.func.isRequired,\r\n    lang: PropTypes.object.isRequired,\r\n    palette: PropTypes.object.isRequired,\r\n    auth: PropTypes.object.isRequired,\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        lang: store.lang,\r\n        palette: store.themeMode.palette,\r\n        auth: store.auth,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setSnackbar: snackbar => dispatch(setSnackbar(snackbar)),\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(TechnicCard);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Container from '@material-ui/core/Container';\r\nimport Button from '@material-ui/core/Button';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\n\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\n\r\nimport { CheckTimeOut } from '../utils/CheckLoginTimeOut';\r\nimport TechnicCard from './muiltiple/TechnicCard';\r\nimport { useStyles } from '../styles/Styles';\r\nimport { instance } from './Config';\r\n\r\nfunction Technics(props) {\r\n    const { lang, themeMode, history, auth } = props;\r\n    const muiTheme = createMuiTheme(themeMode);\r\n    const classes = useStyles();\r\n\r\n    const [isLoading, setIsLoading] = React.useState(true);\r\n    const [technics, setTechnics] = React.useState([]);\r\n\r\n    const loadTechnics = React.useCallback(() => {\r\n        setIsLoading(true);\r\n        instance.get(\"/gettechnics\")\r\n            .then(res => {\r\n                setTechnics(res.data);\r\n                setIsLoading(false);\r\n            })\r\n            .catch(err => {\r\n                setIsLoading(false);\r\n            });\r\n    }, []);\r\n\r\n    React.useEffect(() => {\r\n        loadTechnics();\r\n    }, [loadTechnics]);\r\n\r\n    return (\r\n        <MuiThemeProvider theme={muiTheme}>\r\n            <CssBaseline />\r\n            <div className={classes.root}>\r\n                <Grid className={classes.mainGridContainer}\r\n                    container\r\n                    direction=\"column\"\r\n                    justify=\"center\"\r\n                    alignItems=\"stretch\"\r\n                >\r\n                    <Grid item xs={11} zeroMinWidth className={classes.mainGridDreamsBodyItem}>\r\n                        {isLoading\r\n                            ? <div className={classes.centerCircularProgress}>\r\n                                <CircularProgress disableShrink />\r\n                            </div>\r\n                            : <Container className={classes.mainGridDreamsBodyItemContainer}>\r\n                                <Paper className={classes.mainGridDreamsBodyItemContainerPaper}>\r\n                                    <Grid className={classes.mainGridDreamsContainer}\r\n                                        container\r\n                                        direction=\"column\"\r\n                                        justify=\"center\"\r\n                                        alignItems=\"stretch\"\r\n                                    >\r\n                                        {technics.map((item, key) => (\r\n                                            <TechnicCard key={key}\r\n                                                item={item}\r\n                                                loadTechnics={loadTechnics}\r\n                                                history={history}\r\n                                            />\r\n                                        ))}\r\n                                    </Grid>\r\n                                </Paper>\r\n                            </Container>\r\n                        }\r\n                    </Grid>\r\n                    <Grid item xs={1} zeroMinWidth className={classes.mainGridBodyItem}>\r\n                        <Grid container\r\n                            direction=\"row\"\r\n                            justify=\"space-evenly\"\r\n                            alignItems=\"center\"\r\n                        >\r\n                            <Grid item>\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    color=\"secondary\"\r\n                                    className={classes.actionButton}\r\n                                    onClick={() => { history.push(\"/luciddreams\") }}\r\n                                >\r\n                                    {lang.currLang.buttons.close}\r\n                                </Button>\r\n                            </Grid>\r\n                            {auth.user.roles < 2 //0 - admin; 1 - moderator\r\n                                ? <Grid item>\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        color=\"primary\"\r\n                                        className={classes.actionButton}\r\n                                        onClick={() => {\r\n                                            let check = CheckTimeOut();\r\n                                            if (check) history.push(\"/addtechnics\");\r\n                                            else history.push(\"/\");\r\n                                        }}\r\n                                    >\r\n                                        {lang.currLang.buttons.add}\r\n                                    </Button>\r\n                                </Grid>\r\n                                : <Grid item xs={6} />\r\n                            }\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </MuiThemeProvider >\r\n    );\r\n}\r\n\r\nTechnics.propTypes = {\r\n    themeMode: PropTypes.object.isRequired,\r\n    lang: PropTypes.object.isRequired,\r\n    auth: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        themeMode: store.themeMode,\r\n        lang: store.lang,\r\n        auth: store.auth,\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Technics);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport { Route, Switch } from \"react-router-dom\";\r\n\r\nimport { SET_SNACKBAR_MODE } from \"./actions/types\";\r\nimport { setSnackbar } from './actions/Actions';\r\n\r\nimport PrivateRoute from \"./components/PrivateRoute\";\r\n\r\nimport DreamMap from './components/DreamMap';\r\nimport AddLocation from './components/AddLocation';\r\nimport AddDream from './components/AddDream';\r\nimport AddCDream from './components/AddCDream';\r\nimport AddTechnics from './components/AddTechnics';\r\nimport ViewDreams from './components/ViewDreams';\r\nimport MainPage from \"./components/MainPage\";\r\nimport Sign from './components/Sign';\r\nimport Technics from './components/Technics';\r\n\r\nimport { useStyles, variantIcon } from './styles/Styles';\r\n\r\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { amber, green } from '@material-ui/core/colors';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nconst useStyles1 = makeStyles(theme => ({\r\n    success: {\r\n        backgroundColor: green[600],\r\n    },\r\n    error: {\r\n        backgroundColor: theme.palette.error.dark,\r\n    },\r\n    info: {\r\n        backgroundColor: theme.palette.primary.main,\r\n    },\r\n    warning: {\r\n        backgroundColor: amber[700],\r\n    },\r\n    icon: {\r\n        fontSize: 20,\r\n    },\r\n    iconVariant: {\r\n        opacity: 0.9,\r\n        marginRight: theme.spacing(1),\r\n    },\r\n    message: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n    },\r\n}));\r\n\r\nfunction MySnackbarContentWrapper(props) {\r\n    const classes = useStyles1();\r\n    const { className, message, onClose, variant } = props;\r\n    const Icon = variantIcon[variant];\r\n    return (\r\n        <SnackbarContent\r\n            className={clsx(classes[variant], className)}\r\n            aria-describedby=\"client-snackbar\"\r\n            message={\r\n                <span id=\"client-snackbar\" className={classes.message}>\r\n                    <Icon className={clsx(classes.icon, classes.iconVariant)} />\r\n                    <Typography className={classes.mainGridContainer}\r\n                        align='center'\r\n                        variant='body2'>\r\n                        {message}\r\n                    </Typography>\r\n                </span>\r\n            }\r\n            action={[\r\n                <IconButton key=\"close\"\r\n                    aria-label=\"close\"\r\n                    color=\"inherit\"\r\n                    onClick={onClose}\r\n                >\r\n                    <CloseIcon className={classes.icon} />\r\n                </IconButton>,\r\n            ]}\r\n        />\r\n    );\r\n}\r\n\r\nfunction Routes(props) {\r\n    const classes = useStyles();\r\n    const { open, variant, message } = props;\r\n    const [openSnackbar, setOpenSnackbar] = React.useState(false);\r\n    const [openSnackbarVariant, setOpenSnackbarVariant] = React.useState('');\r\n    const [snackbarMessage, setSnackbarMessage] = React.useState('');\r\n\r\n    const handleCloseSnackbar = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setOpenSnackbar(false);\r\n        props.setSnackbar({\r\n            type: SET_SNACKBAR_MODE,\r\n            snackbar: {\r\n                open: false,\r\n                variant: openSnackbarVariant,\r\n                message: snackbarMessage,\r\n            },\r\n        });\r\n    };\r\n    React.useEffect(() => {\r\n        setOpenSnackbarVariant(variant);\r\n        setSnackbarMessage(message);\r\n        setOpenSnackbar(open);\r\n    }, [open, variant, message]);\r\n\r\n    return (\r\n        <div>\r\n            <Snackbar\r\n                open={openSnackbar}\r\n                onClose={handleCloseSnackbar}\r\n                autoHideDuration={3000}>\r\n                <MySnackbarContentWrapper\r\n                    className={classes.margin}\r\n                    onClose={handleCloseSnackbar}\r\n                    variant={openSnackbarVariant}\r\n                    message={snackbarMessage}\r\n                />\r\n            </Snackbar>\r\n            <Route exact path=\"/\" component={Sign} />\r\n            <Switch>\r\n                <PrivateRoute exact path=\"/dreammap\" component={DreamMap} />\r\n                <PrivateRoute exact path=\"/addlocation\" component={AddLocation} />\r\n                <PrivateRoute exact path=\"/luciddreams\" component={MainPage} />\r\n                <PrivateRoute exact path=\"/dreams\" component={ViewDreams} />\r\n                <PrivateRoute exact path=\"/addregulardream\" component={AddDream} />\r\n                <PrivateRoute exact path=\"/addcdream\" component={AddCDream} />\r\n                <PrivateRoute exact path=\"/technics\" component={Technics} />\r\n                <PrivateRoute exact path=\"/addtechnics\" component={AddTechnics} />\r\n            </Switch>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nRoutes.propTypes = {\r\n    open: PropTypes.bool.isRequired,\r\n    variant: PropTypes.string.isRequired,\r\n    message: PropTypes.string.isRequired,\r\n    setSnackbar: PropTypes.func.isRequired,\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        open: store.snackbar.snackbar.open,\r\n        variant: store.snackbar.snackbar.variant,\r\n        message: store.snackbar.snackbar.message,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setSnackbar: snackbar => dispatch(setSnackbar(snackbar)),\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Routes);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { Router } from \"react-router-dom\";\r\nimport './App.css';\r\n\r\nimport history from '../history';\r\nimport { store } from \"../store\";\r\nimport { CheckTimeOut } from '../utils/CheckLoginTimeOut';\r\nimport setAuthToken from \"../utils/setAuthToken\";\r\nimport { SET_CURRENT_USER, SET_THEME_MODE } from \"../actions/types\";\r\n\r\nimport Routes from '../Routes';\r\n\r\nimport { useStyles, params, randomBetween } from '../styles/Styles';\r\n\r\nlet check = CheckTimeOut();\r\nlet stars = [];\r\nlet clouds = [];\r\n\r\nif (!check) {\r\n    localStorage.removeItem(\"jwtToken\");\r\n    setAuthToken(false);\r\n    store.dispatch({\r\n        type: SET_CURRENT_USER,\r\n        payload: null\r\n    });\r\n    history.push(\"/\");\r\n}\r\nelse {\r\n    history.push(\"/luciddreams\");\r\n}\r\n\r\nif (new Date().getHours() >= 16 || (new Date().getHours() >= 0 && new Date().getHours() < 6)) {\r\n    store.dispatch({\r\n        type: SET_THEME_MODE,\r\n        palette: {\r\n            type: \"dark\",\r\n            primary: { main: \"#f9a825\" },\r\n            secondary: { main: \"#f50057\" },\r\n            error: { main: \"#cc0000\" },\r\n        }\r\n    });\r\n}\r\nelse {\r\n    store.dispatch({\r\n        type: SET_THEME_MODE,\r\n        palette: {\r\n            type: \"light\",\r\n            primary: { main: \"#3f51b5\" },\r\n            secondary: { main: \"#f50057\" },\r\n            error: { main: \"#cc0000\" },\r\n        }\r\n    });\r\n}\r\n\r\nfunction App(props) {\r\n    const { type } = props;\r\n    const classes = useStyles();\r\n    stars = [];\r\n    clouds = [];\r\n    for (let i = 0; i < params.amountStars; i++) {\r\n        let size = Math.round(Math.random() * 10) === 0\r\n            ? params.size.giant\r\n            : randomBetween(params.size.min, params.size.max);\r\n        stars.push(\r\n            <div\r\n                className={classes.AppStar}\r\n                key={i + 'AppStar'}\r\n                style={{\r\n                    left: randomBetween(0, 100) + \"%\",\r\n                    top: randomBetween(0, 100) + \"%\",\r\n                    width: size + \"px\",\r\n                    height: size + \"px\",\r\n                    boxShadow: \"0 0 \" + size + \"px \" + size / 2 + \"px #043668\",\r\n                    animationDuration: randomBetween(params.duration.min, params.duration.max) + \"s\",\r\n                }}\r\n            />\r\n        );\r\n    }\r\n\r\n    for (let i = 0; i < params.amountClouds; i++) {\r\n        let left = Math.round(Math.random() * 50 + 150);\r\n        let top = Math.round(Math.random() * 100 / 100 * 90);\r\n        let scale = Math.random() * 2 - 0.5;\r\n        let opacity = Math.random() * 90 / 100;\r\n        let speed = Math.random() * 30 + 15;\r\n        clouds.push(\r\n            <div className={classes.AppCloud}\r\n                key={i + 'AppCloud'}\r\n                style={{\r\n                    left: left + '%',\r\n                    top: top + '%',\r\n                    width: '400px',\r\n                    height: '100px',\r\n                    transform: 'scale(' + scale + ')',\r\n                    opacity: opacity,\r\n                    animationDuration: speed + 's',\r\n                }}\r\n            />\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Router history={history}>\r\n            <div className={classes.AppDivDark}>\r\n                <div className={classes.AppDivLight}\r\n                    style={type === \"light\"\r\n                        ? { opacity: 1, }\r\n                        : { opacity: 0, }}\r\n                />\r\n                {type === \"light\"\r\n                    ?\r\n                    <div className={classes.AppCloudsDiv}\r\n                        style={type === \"light\"\r\n                            ? { opacity: 1, }\r\n                            : { opacity: 0, }}\r\n                    >\r\n                        {clouds}\r\n                    </div>\r\n                    :\r\n                    <div className={classes.AppStarsDiv}\r\n                        style={type === \"light\"\r\n                            ? { opacity: 0, }\r\n                            : { opacity: 1, }}\r\n                    >\r\n                        {stars}\r\n                    </div>\r\n                }\r\n            </div>\r\n            <Routes />\r\n        </Router>\r\n    );\r\n};\r\n\r\nApp.propTypes = {\r\n    type: PropTypes.string.isRequired,\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        type: store.themeMode.palette.type,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from \"./store\";\r\n\r\nReactDOM.render(\r\n    <div id='global' >\r\n        <Provider store={store}>\r\n            <App />\r\n        </Provider>\r\n    </div>\r\n    , document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n\r\n"],"sourceRoot":""}