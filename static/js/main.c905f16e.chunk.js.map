{"version":3,"sources":["img/map.png","img/sun.png","img/moon.png","img/astronaut.png","img/cloud.svg","history.js","actions/types.js","dictionary/en.js","reducers/currLang.js","reducers/cloud.js","reducers/star.js","reducers/themeMode.js","reducers/authReducer.js","reducers/errorReducer.js","reducers/snackbarReducer.js","reducers/index.js","store.js","utils/setAuthToken.js","utils/CheckLoginTimeOut.js","actions/Actions.js","components/PrivateRoute.js","components/Config.js","styles/Styles.js","components/muiltiple/MapCell.jsx","components/DreamMap.jsx","components/AddLocation.jsx","functions.js","components/AddDream.jsx","components/AddCDream.jsx","components/AddTechnics.jsx","components/muiltiple/DreamCard.jsx","components/ViewDreams.jsx","dictionary/ru.js","components/MainPage.jsx","components/Sign.js","components/muiltiple/TechnicCard.jsx","components/Technics.jsx","Routes.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","createBrowserHistory","GET_ERRORS","SET_CURRENT_USER","SET_CLOUD","CLEAR_CLOUD","SET_STAR","CLEAR_STAR","SET_LANG","SET_THEME_MODE","SET_SNACKBAR_MODE","words","current","buttons","signIn","signUp","dreamJoirnal","addDream","addCDream","techniques","adventures","close","about","cancel","add","Edit","Delete","Save","addTag","texts","Nothink","nickname","password","passwordAgain","sucessRegistration","hello","changleLanguage","success","title","description","content","tags","dreams","technics","rating","Dream","Cdream","NoDreams","pickDate","pickTime","TapToShow","Public","Publish","Unpublish","PublicAlert","PublicText","PublicDescription","UnpublicAlert","UnpublicText","UnpublicDescription","DeleteAlert","DeleteText","Name","ChangeIcon","FindIcon","errors","emailLenght","nicknameLenght","passwordLenght","password2Lenght","passwordsCompare","UserNotExist","EmailIsNotValid","IncorrectPassword","EmailIsBusy","PasswordLenght5Symbols","NotLogin","EmptyName","EmptyTitle","EmptyDescription","EmptyDream","NoChanges","CantDeletePost","CantAddLocation","CantUpdateLocation","IconNotChange","ColorNotChange","initialState","currLang","EnDict","clouds","stars","palette","type","primary","main","secondary","error","isempty","require","isAuthenticated","user","loading","snackbar","open","variant","message","rootReducer","combineReducers","lang","state","action","currLangState","cloudState","starState","themeMode","auth","payload","middleware","thunk","store","createStore","applyMiddleware","setAuthToken","token","axios","defaults","headers","common","CheckTimeOut","localStorage","jwtToken","decoded","jwt_decode","dispatch","currentTime","Date","now","exp","setCurrLang","setSnackbar","connect","Component","component","rest","render","props","to","instance","create","baseURL","timeout","params","amountStars","amountClouds","size","min","max","giant","duration","variantIcon","CheckCircleIcon","warning","WarningIcon","ErrorIcon","info","InfoIcon","randomBetween","a","b","Math","random","useStyles","makeStyles","theme","formControl","position","left","top","transform","width","height","SwipeableViews","media","iconCenter","display","margin","dreamCardDiv","marginTop","marginBottom","borderRadius","divDreamsNotFoundImg","background","divDreamsNotFound","textAlign","contentPaper","backgroundColor","text","padding","pickerGridContainer","div85width","ratingGridContainer","pickers","avatarRoot","verySmallAvatar","spacing","smallAvatar","smallChip","mainGridDreamsBodyItemContainer","paddingTop","boxSizing","maxHeight","overflow","mainGridDreamsBodyItemContainerPaper","opacity","hiddenOverflow","mainGridDreamsContainer","card","maxWidth","expand","marginLeft","transition","transitions","shortest","expandOpen","textField","root","flexGrow","window","innerHeight","mainPage","aboutPage","AppDivDark","zIndex","AppDivLight","AppStarsDiv","AppCloudsDiv","AppStar","filter","animation","AppCloud","backgroundRepeat","backgroundImage","CloudSvg","image","SkyDiv","MoonSrc","backgroundSize","MoonImg","SunSrc","SunImg","AstronautButton","AstronautDiv","AstronautImg","MapButton","MapDiv","MapImg","mainGridContainer","mainGridBodyItem","menuButtonContainer","menuDivButton","centerButton","menuButton","minWidth","actionButton","poppupButton","aboutGridContainer","fullMinWidth","inputDiv","inputScrollableDiv","noWrap","flexWrap","chip","aboutGridItem","paper","marginRight","height12","height11","height10","height9","height8","height7","height6","height5","height4","height3","height2","height1","height0","classes","i","j","cellHeight","cellWidth","id","locations","loadMap","history","user_id","React","useState","anchorEl","setAnchorEl","tagId","setTagId","Boolean","popoverId","undefined","disabledSave","useEffect","style","border","length","className","onClick","event","currentTarget","find","loc","img_url","color","Popover","anchorOrigin","vertical","horizontal","transformOrigin","Grid","container","direction","justify","alignItems","item","xs","Typography","name_rus","name_eng","IconButton","push","pathname","defaultData","prevUrl","disabled","fontSize","FormControl","Select","value","onChange","target","MenuProps","PaperProps","map","key","MenuItem","Avatar","src","align","Button","newCell","oldLoc","newLoc","post","then","res","catch","err","console","log","muiTheme","createMuiTheme","cellSize","setCellSize","setLocations","dreamMap","setDreamMap","useCallback","get","concat","data","JSON","parse","result","CssBaseline","Container","borderCollapse","table","Object","keys","forEach","row","rows","col","createTable","Fab","Slider","newValue","isEditMode","setIsEditMode","setValue","setPrevUrl","isIconsLoading","setIsIconsLoading","locationIcons","setLocationIcons","searchName","setSearchName","nameEn","setNameEn","nameRu","setNameRu","selectedIcon","setSelectedIcon","iconColor","setIconColor","location","getIcon","icons","newArray","name","Paper","Tabs","centered","indicatorColor","textColor","Tab","label","animateHeight","axis","index","onChangeIndex","role","TextField","required","e","reg","search","replace","onBlur","loadIconsList","postData","CircularProgress","InputLabel","labelId","onChangeComplete","hex","errorMessage","chages","saveLocation","compare","obj1","obj2","every","hasOwnProperty","defaultTags","assign","overrides","MUIRichTextEditor","toolbar","justifyContent","minHeight","borderBottom","placeHolder","editor","editorContainer","isLoading","setIsLoading","titleText","setTitleText","selectedDate","setSelectedDate","contentText","setContentText","prevContentText","setPrevContentText","selectedLocations","setselectedLocations","handleDateChange","date","saveToLocalStorage","getItem","setItem","stringify","loadFromLocalStorage","post_title","dream_date","post_content","Number","utils","DateFnsUtils","locale","ruLocale","format","KeyboardButtonProps","ampm","currCont","getCurrentContent","convert","convertToRaw","inlineToolbar","controls","customControls","icon","inlineStyle","Autocomplete","multiple","options","getOptionLabel","option","Chip","avatar","defaultValue","handleChangeLocations","filterSelectedOptions","renderInput","fullWidth","LinearProgress","removeItem","havErr","blocks","hasChanges","tagChanges","post_id","getTime","dreamDate","toLocaleString","timeZone","deleteTags","item1","some","item2","addTags","remove","create_user","post_type","savepost","defaultTechnics","selectedTechnics","setselectedTechnics","realisticsValue","setRealisticsValue","setTechnics","tech","handleChangeTechnics","Rating","techChanges","deleteTech","addTech","titleRu","titleEn","descriptionRu","descriptionEn","technicsData","setTechnicsData","fileldsErr","setFileldsErr","changeData","field","newTechnicsData","newFileldsErr","description_rus","description_eng","multiline","haveChanges","isError","save","is_public","expanded","setExpanded","openAlert","setOpenAlert","publicChecked","setPublicChecked","header","body","commit","alertTexts","setAlertTexts","dateOfDream","getDate","getMonth","getFullYear","getHours","getMinutes","slice","srcContent","toString","jsonPparse","convertfromraw","convertFromRaw","text_content","EditorState","createWithContent","getPlainText","closeMenu","clickMenu","newAlertTexts","checked","loadPosts","newPublic","Dialog","onClose","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","DialogActions","autoFocus","Menu","keepMounted","ListItemIcon","FormControlLabel","control","Checkbox","Card","raised","CardHeader","paddingBottom","Tooltip","disableFocusListener","disableTouchListener","subheader","aria-label","CardActions","disableSpacing","clsx","aria-expanded","Collapse","in","unmountOnExit","CardContent","technic","tag","readOnly","setDreams","TransitionDown","Slide","setCurrLangAction","setTheme","prevLanguage","setPrevLanguage","openLangSnakbar","setOpenLangSnakbar","langSnakbarMessage","setLangSnakbarMessage","setTransition","changeLanguage","language","RuDict","handleCloseLangSnakbar","times_mode","Snackbar","TransitionComponent","SnackbarContent","newLang","newUserData","ButtonBase","focusRipple","alert","newPaletteType","primaryColor","secondaryColor","Transition","forwardRef","ref","setUserState","State","email","loginData","setLoginData","password2","registData","setRegistData","emailErr","emailErrText","nicknameErr","nicknameErrText","passwordErr","passwordErrText","password2Err","password2ErrText","regFieldErrors","setRegFieldErrors","showPassword","setShowPassword","openLogin","setOpenLogin","openRegist","setOpenRegist","page","setPage","handleMouseDownPassword","preventDefault","singUp","isErr","newRegFieldErrors","newRegistData","click","response","newPages","passwordincorrect","newLoginData","changeAuthLogin","changeAuthPassword","InputProps","endAdornment","InputAdornment","tabIndex","edge","onMouseDown","helperText","changeRegistLogin","changeRegistNickname","changeRegistPassword","changeRegistPassword2","aboutPaper","actions","loadTechnics","CardActionArea","CardMedia","gutterBottom","roles","useStyles1","green","dark","amber","iconVariant","MySnackbarContentWrapper","Icon","openSnackbar","setOpenSnackbar","openSnackbarVariant","setOpenSnackbarVariant","snackbarMessage","setSnackbarMessage","handleCloseSnackbar","reason","autoHideDuration","exact","path","Sign","DreamMap","AddLocation","MainPage","ViewDreams","AddDream","AddCDream","Technics","AddTechnics","check","round","boxShadow","animationDuration","scale","speed","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c905f16e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/map.71ce46a8.png\";","module.exports = __webpack_public_path__ + \"static/media/sun.4f817e2f.png\";","module.exports = __webpack_public_path__ + \"static/media/moon.ca0fb531.png\";","module.exports = __webpack_public_path__ + \"static/media/astronaut.7219d35a.png\";","module.exports = __webpack_public_path__ + \"static/media/cloud.7fb181bd.svg\";","import { createBrowserHistory } from \"history\";\r\n\r\nexport default createBrowserHistory();","export const GET_ERRORS = \"GET_ERRORS\";\r\nexport const USER_LOADING = \"USER_LOADING\";\r\nexport const SET_CURRENT_USER = \"SET_CURRENT_USER\";\r\n\r\nexport const SET_CLOUD = 'SET_CLOUD';\r\nexport const CLEAR_CLOUD = 'CLEAR_CLOUD';\r\n\r\nexport const SET_STAR = 'SET_STAR';\r\nexport const CLEAR_STAR = 'CLEAR_STAR';\r\n\r\nexport const SET_LANG = 'SET_LANG';\r\nexport const SET_THEME_MODE = 'SET_THEME_MODE';\r\n\r\nexport const SET_SNACKBAR_MODE = 'SET_SNACKBAR_MODE';","const words = {\r\n    current: 'En',\r\n    buttons: {\r\n        signIn: 'Sign in',\r\n        signUp: 'Sign up',\r\n        dreamJoirnal: 'Dream joirnal',\r\n        addDream: 'Add dream',\r\n        addCDream: 'Add C-dream',\r\n        techniques: 'Techniques',\r\n        adventures: 'Adventures',\r\n        close: 'Back',\r\n        about: 'About us',\r\n        cancel: 'Cancel',\r\n        add: 'Add',\r\n        Edit: 'Edit',\r\n        Delete: 'Delete',\r\n        Save: 'Save',\r\n        addTag: 'New loc',\r\n    },\r\n    texts: {\r\n        about: 'About us About us About us About us About us About us About us About us About us About us ',\r\n        Nothink: 'Nothink',\r\n        nickname: 'Nickname',\r\n        password: 'Password',\r\n        passwordAgain: 'Password again',\r\n        cancel: 'Cancel',\r\n        sucessRegistration: 'You are sign up successful',\r\n        hello: 'Hello, ',\r\n        changleLanguage: 'Save change language to ',\r\n        success: 'Success',\r\n        title: 'Title',\r\n        description: 'Description',\r\n        content: \"What's a dream\",\r\n        tags: 'Locations',\r\n        dreams: 'Dreams',\r\n        technics: 'Technics',\r\n        rating: 'Realistics',\r\n        Dream: 'Regular dream',\r\n        Cdream: 'C-dream',\r\n        NoDreams: \"You don't have dreams\",\r\n        pickDate: \"Date\",\r\n        pickTime: \"Time\",\r\n        TapToShow: \"Tap on text to show highlights\",\r\n        Public: \"Public\",\r\n        Publish: \"Unpublish\",\r\n        Unpublish: \"Publish\",\r\n        PublicAlert: \"Are you sure you want to public the dream?\",\r\n        PublicText: \"After public your friends can read this dream.\",\r\n        PublicDescription: \"Your friends can read this dream\",\r\n        UnpublicAlert: \"Are you sure you want to unpublic the dream?\",\r\n        UnpublicText: \"After unpublic your friends can't read this dream.\",\r\n        UnpublicDescription: \"Your friends can't read this dream\",\r\n        DeleteAlert: \"Are you sure you want to remove?\",\r\n        DeleteText: \"You can't restore data.\",\r\n        Name: \"Name\",\r\n        ChangeIcon: \"Icon\",\r\n        FindIcon: \"Search icon\",\r\n    },\r\n    errors: {\r\n        emailLenght: 'Email must not be empty',\r\n        nicknameLenght: 'Nickname must not be empty',\r\n        passwordLenght: 'Password must not be empty',\r\n        password2Lenght: 'Password must not be empty',\r\n        passwordsCompare: 'Passwords not equal',\r\n        UserNotExist: 'Invalid email or password',\r\n        EmailIsNotValid: 'Invalid email',\r\n        IncorrectPassword: 'Invalid email or password',\r\n        EmailIsBusy: 'Email is busy',\r\n        PasswordLenght5Symbols: 'Minimum password length: 5 symbols',\r\n        NotLogin: 'You not loggin in',\r\n        EmptyName: 'Name must not be empty',\r\n        EmptyTitle: 'Title must not be empty',\r\n        EmptyDescription: 'Description must not be empty',\r\n        EmptyDream: 'Dream must not be empty',\r\n        NoChanges: 'No changes',\r\n        CantDeletePost: 'Error deleting dream',\r\n        CantAddLocation: 'Error add location',\r\n        CantUpdateLocation: 'Error update location',\r\n        IconNotChange: 'Change icon',\r\n        ColorNotChange: 'Change color',\r\n    },\r\n};\r\n\r\nexport default words;","import { SET_LANG } from '../actions/types';\r\nimport EnDict from '../dictionary/en';\r\n\r\nconst initialState = {\r\n    currLang: EnDict,\r\n}\r\n\r\nexport function currLangReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case SET_LANG:\r\n            return { ...state, currLang: action.currLangState }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}","import { SET_CLOUD, CLEAR_CLOUD } from '../actions/types';\r\n\r\nconst initialState = {\r\n\tclouds: [],\r\n}\r\n\r\nexport function cloudsReducer(state = initialState, action) {\r\n\tswitch (action.type) {\r\n\t\tcase SET_CLOUD:\r\n\t\t\treturn {\r\n\t\t\t\t...state, clouds: [...state.clouds, action.cloudState]\r\n\t\t\t}\r\n\t\tcase CLEAR_CLOUD:\r\n\t\t\treturn {\r\n\t\t\t\t...state, clouds: []\r\n\t\t\t}\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n}","import { SET_STAR, CLEAR_STAR } from '../actions/types';\r\n\r\nconst initialState = {\r\n\tstars: [],\r\n}\r\n\r\nexport function starsReducer(state = initialState, action) {\r\n\tswitch (action.type) {\r\n\t\tcase SET_STAR:\r\n\t\t\treturn {\r\n\t\t\t\t...state, stars: [...state.stars, action.starState]\r\n\t\t\t}\r\n\t\tcase CLEAR_STAR:\r\n\t\t\treturn {\r\n\t\t\t\t...state, stars: []\r\n\t\t\t}\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n}","import { SET_THEME_MODE } from '../actions/types';\r\n\r\nconst initialState = {\r\n    palette: {\r\n        type: \"dark\",\r\n        primary: { main: \"#f9a825\" },\r\n        secondary: { main: \"#f50057\" },\r\n        error: { main: \"#cc0000\" },\r\n    },\r\n}\r\n\r\nexport function themeReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case SET_THEME_MODE:\r\n            return { ...state, palette: action.palette }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}","import { SET_CURRENT_USER, USER_LOADING } from \"../actions/types\";\r\n\r\nconst isempty = require(\"is-empty\");\r\n\r\nconst initialState = {\r\n    isAuthenticated: false,\r\n    user: {},\r\n    loading: false\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case SET_CURRENT_USER:\r\n            return {\r\n                ...state,\r\n                isAuthenticated: !isempty(action.payload),\r\n                user: action.payload\r\n            };\r\n        case USER_LOADING:\r\n            return {\r\n                ...state,\r\n                loading: true\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}","import { GET_ERRORS } from \"../actions/types\";\r\nconst initialState = {};\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case GET_ERRORS:\r\n            return action.payload;\r\n        default:\r\n            return state;\r\n    }\r\n}","import { SET_SNACKBAR_MODE } from '../actions/types';\r\n\r\nconst initialState = {\r\n    snackbar: {\r\n        open: false,\r\n        variant: '',\r\n        message: '',\r\n    },\r\n}\r\n\r\nexport function snackbarReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case SET_SNACKBAR_MODE:\r\n            return { ...state, snackbar: action.snackbar }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}","import { combineReducers } from 'redux';\r\nimport { currLangReducer } from './currLang';\r\nimport { cloudsReducer } from './cloud';\r\nimport { starsReducer } from './star';\r\nimport { themeReducer } from './themeMode';\r\nimport authReducer from './authReducer';\r\nimport errorReducer from './errorReducer';\r\nimport { snackbarReducer } from './snackbarReducer';\r\n\r\nexport const rootReducer = combineReducers({\r\n    lang: currLangReducer,\r\n    clouds: cloudsReducer,\r\n    stars: starsReducer,\r\n    themeMode: themeReducer,\r\n    auth: authReducer,\r\n    errors: errorReducer,\r\n    snackbar: snackbarReducer,\r\n});","import { createStore, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { rootReducer } from './reducers';\r\n\r\nconst middleware = [thunk];\r\n\r\nexport const store = createStore(\r\n    rootReducer,\r\n    {},\r\n    applyMiddleware(...middleware)\r\n);","import axios from \"axios\";\r\n\r\nconst setAuthToken = token => {\r\n    if (token) {\r\n        // Apply authorization token to every request if logged in\r\n        axios.defaults.headers.common[\"Authorization\"] = token;\r\n    }\r\n    else {\r\n        // Delete auth header\r\n        delete axios.defaults.headers.common[\"Authorization\"];\r\n    }\r\n};\r\n\r\nexport default setAuthToken;","import jwt_decode from \"jwt-decode\";\r\n\r\nimport { store } from \"../store\";\r\nimport setAuthToken from \"../utils/setAuthToken\";\r\nimport { SET_CURRENT_USER } from \"../actions/types\"\r\n\r\nexport function CheckTimeOut() {\r\n    if (localStorage.jwtToken) {\r\n        const token = localStorage.jwtToken;\r\n        setAuthToken(token);\r\n        const decoded = jwt_decode(token);\r\n        store.dispatch({\r\n            type: SET_CURRENT_USER,\r\n            payload: decoded\r\n        });\r\n\r\n        const currentTime = Date.now() / 1000; // to get in milliseconds\r\n        if (decoded.exp < currentTime) {\r\n            return false;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }\r\n}","import { SET_LANG } from '../actions/types';\r\n\r\nexport function setCloud(state) {\r\n\treturn {\r\n\t\ttype: state.type,\r\n\t\tcloudState: state.cloudState,\r\n\t}\r\n}\r\nexport function setStar(state) {\r\n\treturn {\r\n\t\ttype: state.type,\r\n\t\tstarState: state.starState,\r\n\t}\r\n}\r\nexport function setCurrLang(state) {\r\n\treturn {\r\n\t\ttype: SET_LANG,\r\n\t\tcurrLangState: state,\r\n\t}\r\n}\r\nexport function setTheme(state) {\r\n\treturn {\r\n\t\ttype: state.type,\r\n\t\tpalette: state.palette,\r\n\t}\r\n}\r\nexport function setUserState(state) {\r\n\treturn {\r\n\t\ttype: state.type,\r\n\t\tpayload: state.payload,\r\n\t}\r\n}\r\nexport function setSnackbar(state) {\r\n\treturn {\r\n\t\ttype: state.type,\r\n\t\tsnackbar: state.snackbar,\r\n\t}\r\n}","import React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst PrivateRoute = ({ component: Component, auth, ...rest }) => (\r\n    <Route\r\n        {...rest}\r\n        render={props =>\r\n            auth.isAuthenticated === true\r\n                ? <Component {...props} />\r\n                : <Redirect to=\"/\" />\r\n        }\r\n    />\r\n);\r\n\r\nPrivateRoute.propTypes = {\r\n    auth: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    auth: state.auth\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps\r\n)(PrivateRoute);","import axios from \"axios\";\r\n\r\n\r\nexport const instance = axios.create({\r\n    baseURL: 'https://ldserver.herokuapp.com',\r\n    timeout: 10000,\r\n    headers: { \"Access-Control-Allow-Origin\": \"*\" }\r\n});","import { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\nimport WarningIcon from '@material-ui/icons/Warning';\r\nimport ErrorIcon from '@material-ui/icons/Error';\r\nimport InfoIcon from '@material-ui/icons/Info';\r\n\r\nimport MapImg from '../img/map.png';\r\nimport SunImg from '../img/sun.png';\r\nimport MoonImg from '../img/moon.png';\r\nimport AstronautImg from '../img/astronaut.png';\r\nimport CloudSvg from '../img/cloud.svg';\r\n\r\nexport const params = {\r\n    amountStars: 25,\r\n    amountClouds: 5,\r\n    size: {\r\n        min: 1,\r\n        max: 5,\r\n        giant: 9\r\n    },\r\n    duration: {\r\n        min: 5,\r\n        max: 25,\r\n    }\r\n}\r\n\r\nexport const variantIcon = {\r\n    success: CheckCircleIcon,\r\n    warning: WarningIcon,\r\n    error: ErrorIcon,\r\n    info: InfoIcon,\r\n};\r\n\r\nexport function randomBetween(a, b) {\r\n    return (a + (Math.random() * (b - a)));\r\n}\r\n\r\nexport const useStyles = makeStyles(theme => ({\r\n    formControl: {\r\n        position: 'absolute',\r\n        left: '50%',\r\n        top: '50%',\r\n        transform: 'translate(-50%, -50%)',\r\n        width: 'auto',\r\n        height: 'auto',\r\n    },\r\n    SwipeableViews: {\r\n        position: 'relative',\r\n        height: '90%',\r\n        '& .react-swipeable-view-container': {\r\n            height: '100% !Important',\r\n        },\r\n    },\r\n    media: {\r\n        height: 140,\r\n    },\r\n    iconCenter: {\r\n        display: \"block\",\r\n        margin: \"auto\"\r\n    },\r\n    dreamCardDiv: {\r\n        marginTop: '15px',\r\n        marginBottom: '15px',\r\n        width: '100%',\r\n        height: 'auto',\r\n        borderRadius: '4px',\r\n    },\r\n    divDreamsNotFoundImg: {\r\n        background: \"url('https://static.thenounproject.com/png/603669-200.png') no-repeat center\",\r\n    },\r\n    divDreamsNotFound: {\r\n        position: \"relative\",\r\n        left: \"50%\",\r\n        transform: \"translateX(-50%)\",\r\n        width: 200,\r\n        height: 100,\r\n        textAlign: \"center\",\r\n    },\r\n    contentPaper: {\r\n        backgroundColor: theme.palette.text.main,\r\n        padding: 10,\r\n    },\r\n    pickerGridContainer: {\r\n        position: \"relative\",\r\n        width: \"85%\",\r\n        left: \"50%\",\r\n        transform: \"translateX(-50%)\",\r\n        marginBottom: \"5px\",\r\n    },\r\n    div85width: {\r\n        position: \"relative\",\r\n        width: \"85%\",\r\n        top: \"65%\",\r\n        left: \"50%\",\r\n        transform: \"translate(-50%, -50%)\",\r\n    },\r\n    ratingGridContainer: {\r\n        position: \"relative\",\r\n        width: \"100%\",\r\n        top: \"65%\",\r\n        left: \"50%\",\r\n        transform: \"translate(-50%, -50%)\",\r\n    },\r\n    pickers: {\r\n        position: \"relative\",\r\n        width: \"90%\",\r\n        left: \"50%\",\r\n        transform: \"translateX(-50%)\",\r\n    },\r\n    avatarRoot: {\r\n        textAlign: 'center',\r\n        width: '100%',\r\n    },\r\n    verySmallAvatar: {\r\n        margin: theme.spacing(1),\r\n        width: theme.spacing(3),\r\n        height: theme.spacing(3),\r\n        display: 'inline-flex !Important',\r\n    },\r\n    smallAvatar: {\r\n        margin: theme.spacing(0.5),\r\n        width: theme.spacing(5),\r\n        height: theme.spacing(5),\r\n        display: 'inline-flex !Important',\r\n    },\r\n    smallChip: {\r\n        margin: theme.spacing(0.5),\r\n    },\r\n    mainGridDreamsBodyItemContainer: {\r\n        paddingTop: '16px',\r\n        position: 'absolute',\r\n        boxSizing: 'border-box',\r\n        maxHeight: '90%',\r\n        overflow: 'auto',\r\n        borderRadius: '4px',\r\n    },\r\n    mainGridDreamsBodyItemContainerPaper: {\r\n        height: '100%',\r\n        opacity: 0.9,\r\n    },\r\n    hiddenOverflow: {\r\n        overflow: 'hidden',\r\n    },\r\n    mainGridDreamsContainer: {\r\n        height: '100%',\r\n        position: 'relative',\r\n        width: '90%',\r\n        left: '50%',\r\n        transform: 'translateX(-50%)',\r\n    },\r\n    card: {\r\n        maxWidth: '100%',\r\n        height: '100%',\r\n    },\r\n    expand: {\r\n        transform: \"rotate(0deg)\",\r\n        marginLeft: \"auto\",\r\n        transition: theme.transitions.create(\"transform\", {\r\n            duration: theme.transitions.duration.shortest\r\n        })\r\n    },\r\n    expandOpen: {\r\n        transform: \"rotate(180deg)\"\r\n    },\r\n    textField: {\r\n        width: '100%',\r\n    },\r\n    margin: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    root: {\r\n        flexGrow: 1,\r\n        position: 'relative',\r\n        width: '100%',\r\n        height: window.innerHeight - 0.1,\r\n        overflow: 'hidden',\r\n    },\r\n    mainPage: {\r\n        top: 0,\r\n        left: 0,\r\n        position: 'absolute',\r\n        transition: 'all 0.3s linear',\r\n        width: '100%',\r\n        height: '100%',\r\n    },\r\n    aboutPage: {\r\n        position: 'absolute',\r\n        transition: 'all 0.3s linear',\r\n        top: '100%',\r\n        width: '100%',\r\n        height: '100%',\r\n    },\r\n    AppDivDark: {\r\n        position: 'fixed',\r\n        background: 'radial-gradient(ellipse at center, rgba(8, 25, 42, 1) 20%, rgba(1, 4, 6, 1) 100%)',\r\n        opacity: 1,\r\n        margin: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        zIndex: -3,\r\n    },\r\n    AppDivLight: {\r\n        position: 'absolute',\r\n        background: 'radial-gradient(ellipse at center, rgba(207, 225, 237, 1) 20%, rgba(127, 170, 202, 1) 100%)',\r\n        transition: 'opacity 0.5s linear',\r\n        margin: 0,\r\n        opacity: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        zIndex: -3,\r\n    },\r\n    AppStarsDiv: {\r\n        transition: 'opacity 0.5s linear',\r\n        opacity: 0,\r\n        position: 'absolute',\r\n        width: '100%',\r\n        height: '100%',\r\n        overflow: 'hidden',\r\n        zIndex: -2,\r\n    },\r\n    AppCloudsDiv: {\r\n        transition: 'opacity 0.5s linear',\r\n        opacity: 0,\r\n        position: 'absolute',\r\n        width: '100%',\r\n        height: '100%',\r\n        overflow: 'hidden',\r\n        zIndex: -2,\r\n    },\r\n    AppStar: {\r\n        borderRadius: '100%',\r\n        position: 'absolute',\r\n        background: 'radial-gradient(ellipse at center, rgba(177, 198, 219, 1) 2%, rgba(5, 63, 118, 1) 100%)',\r\n        filter: 'blur(1px)',\r\n        animation: '$shine infinite alternate',\r\n        zIndex: -1,\r\n    },\r\n    AppCloud: {\r\n        position: 'absolute',\r\n        backgroundRepeat: 'no-repeat',\r\n        backgroundImage: 'url(' + CloudSvg + ')',\r\n        animation: '$moveclouds infinite linear',\r\n        zIndex: -1,\r\n    },\r\n    image: {\r\n        position: 'relative',\r\n        left: '50%',\r\n        top: '25%',\r\n        transform: 'translate(-50%, -25%)',\r\n        width: '35vw !important',\r\n        height: '35vw',\r\n        borderRadius: '50%',\r\n    },\r\n    SkyDiv: {\r\n        position: 'absolute',\r\n        borderRadius: '50%',\r\n        top: 0,\r\n        left: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        overflow: 'hidden',\r\n    },\r\n    MoonSrc: {\r\n        backgroundSize: 'cover',\r\n        background: 'url(' + MoonImg + ')',\r\n        backgroundRepeat: 'no-repeat',\r\n        position: 'absolute',\r\n        top: 0,\r\n        left: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        transition: 'all 0.3s linear',\r\n    },\r\n    SunSrc: {\r\n        backgroundSize: 'cover',\r\n        background: 'url(' + SunImg + ')',\r\n        backgroundRepeat: 'no-repeat',\r\n        position: 'absolute',\r\n        top: 0,\r\n        left: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        transition: 'all 0.3s linear',\r\n    },\r\n    AstronautButton: {\r\n        position: 'relative',\r\n        left: '50%',\r\n        top: '50%',\r\n        transform: 'translate(-50%, -50%)',\r\n        width: '25vw !important',\r\n        height: '25vw',\r\n        borderRadius: '50%',\r\n    },\r\n    AstronautDiv: {\r\n        position: 'absolute',\r\n        borderRadius: '50%',\r\n        top: 0,\r\n        left: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        overflow: 'hidden',\r\n        animation: '$swinging 30s infinite linear',\r\n    },\r\n    AstronautImg: {\r\n        backgroundSize: 'cover',\r\n        background: 'url(' + AstronautImg + ')',\r\n        backgroundRepeat: 'no-repeat',\r\n        position: 'absolute',\r\n        top: 0,\r\n        left: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        transition: 'filter 0.5s linear',\r\n    },\r\n    MapButton: {\r\n        position: 'relative',\r\n        left: '50%',\r\n        top: '50%',\r\n        transform: 'translate(-50%, -50%)',\r\n        width: '25vw !important',\r\n        height: '25vw',\r\n        borderRadius: '10%',\r\n    },\r\n    MapDiv: {\r\n        position: 'absolute',\r\n        top: 0,\r\n        left: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        overflow: 'hidden',\r\n        animation: '$swinging 30s infinite linear',\r\n    },\r\n    MapImg: {\r\n        backgroundSize: 'cover',\r\n        background: 'url(' + MapImg + ')',\r\n        backgroundRepeat: 'no-repeat',\r\n        position: 'absolute',\r\n        top: 0,\r\n        left: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        transition: 'filter 0.5s linear',\r\n    },\r\n    mainGridContainer: {\r\n        height: '100% !Important',\r\n        position: 'relative',\r\n    },\r\n    mainGridBodyItem: {\r\n        maxWidth: '100% !Important',\r\n        position: 'relative',\r\n    },\r\n    menuButtonContainer: {\r\n        height: '100% !Important',\r\n        position: 'relative',\r\n    },\r\n    menuDivButton: {\r\n        maxWidth: '100% !Important',\r\n        position: 'relative',\r\n    },\r\n    centerButton: {\r\n        position: 'absolute',\r\n        top: '50%',\r\n        left: '50%',\r\n        transform: 'translate(-50%, -50%)',\r\n    },\r\n    menuButton: {\r\n        minWidth: '55vw',\r\n        maxWidth: '55vw',\r\n        height: '75%',\r\n    },\r\n    actionButton: {\r\n        minWidth: '40vw',\r\n        maxWidth: '40vw',\r\n    },\r\n    poppupButton: {\r\n        minWidth: '90%',\r\n        maxWidth: '90%',\r\n    },\r\n    aboutGridContainer: {\r\n        width: '100%',\r\n        height: '100%',\r\n        margin: 0,\r\n    },\r\n    fullMinWidth: {\r\n        minWidth: '100% !Important',\r\n        position: 'relative'\r\n    },\r\n    inputDiv: {\r\n        minWidth: '85% !Important',\r\n        maxWidth: '85% !Important',\r\n        position: 'absolute',\r\n        top: '50%',\r\n        left: '50%',\r\n        transform: 'translate(-50%, -50%)',\r\n        opacity: 1,\r\n    },\r\n    inputScrollableDiv: {\r\n        minWidth: '85% !Important',\r\n        maxWidth: '85% !Important',\r\n        height: '100%',\r\n        position: 'absolute',\r\n        top: '50%',\r\n        left: '50%',\r\n        transform: 'translate(-50%, -50%)',\r\n        opacity: 1,\r\n    },\r\n    noWrap: {\r\n        flexWrap: 'nowrap',\r\n    },\r\n    chip: {\r\n        margin: 1\r\n    },\r\n    aboutGridItem: {\r\n        width: '100%',\r\n    },\r\n    paper: {\r\n        height: '91%',\r\n        marginTop: theme.spacing(3),\r\n        marginLeft: theme.spacing(2),\r\n        marginRight: theme.spacing(2),\r\n        opacity: 0.9,\r\n    },\r\n    \"@keyframes shine\": {\r\n        \"0%\": {\r\n            transform: 'scale(1)',\r\n            opacity: '1',\r\n        },\r\n        \"20%\": {\r\n            transform: 'scale(.9)',\r\n            opacity: '.8',\r\n        },\r\n        \"40%\": {\r\n            transform: 'scale(1)',\r\n            opacity: '.9',\r\n        },\r\n        \"60%\": {\r\n            transform: 'scale(.2)',\r\n            opacity: '.1',\r\n        },\r\n        \"80%\": {\r\n            transform: 'scale(.5)',\r\n            opacity: '.5',\r\n        },\r\n        \"100%\": {\r\n            transform: 'scale(.9)',\r\n            opacity: '.9',\r\n        },\r\n    },\r\n    \"@keyframes moveclouds\": {\r\n        '100%': {\r\n            left: '-100%',\r\n        },\r\n    },\r\n    \"@keyframes swinging\": {\r\n        '0%': {\r\n            transform: 'rotate(0)',\r\n        },\r\n        '10%': {\r\n            transform: 'rotate(12deg)',\r\n        },\r\n        '20%': {\r\n            transform: 'rotate(-10deg)',\r\n        },\r\n        '30%': {\r\n            transform: 'rotate(9deg)',\r\n        },\r\n        '40%': {\r\n            transform: 'rotate(-8deg)',\r\n        },\r\n        '50%': {\r\n            transform: 'rotate(7deg)',\r\n        },\r\n        '60%': {\r\n            transform: 'rotate(-6deg)',\r\n        },\r\n        '70%': {\r\n            transform: 'rotate(5deg)',\r\n        },\r\n        '80%': {\r\n            transform: 'rotate(-4deg)',\r\n        },\r\n        '90%': {\r\n            transform: 'rotate(3deg)',\r\n        },\r\n        '100%': {\r\n            transform: 'rotate(0)',\r\n        },\r\n    },\r\n    height12: {\r\n        height: 100 / 12 * 12 + \"%\",\r\n    },\r\n    height11: {\r\n        height: 100 / 12 * 11 - 0.1 + \"%\",\r\n    },\r\n    height10: {\r\n        height: 100 / 12 * 10 - 0.1 + \"%\",\r\n    },\r\n    height9: {\r\n        height: 100 / 12 * 9 - 0.1 + \"%\",\r\n    },\r\n    height8: {\r\n        height: 100 / 12 * 8 - 0.1 + \"%\",\r\n    },\r\n    height7: {\r\n        height: 100 / 12 * 7 - 0.1 + \"%\",\r\n    },\r\n    height6: {\r\n        height: 100 / 12 * 6 - 0.1 + \"%\",\r\n    },\r\n    height5: {\r\n        height: 100 / 12 * 5 - 0.1 + \"%\",\r\n    },\r\n    height4: {\r\n        height: 100 / 12 * 4 - 0.1 + \"%\",\r\n    },\r\n    height3: {\r\n        height: 100 / 12 * 3 - 0.1 + \"%\",\r\n    },\r\n    height2: {\r\n        height: 100 / 12 * 2 - 0.1 + \"%\",\r\n    },\r\n    height1: {\r\n        height: 100 / 12 * 1 - 0.1 + \"%\",\r\n    },\r\n    height0: {\r\n        height: 100 / 12 * 0 + \"%\",\r\n    },\r\n}));","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Popover from \"@material-ui/core/Popover\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nimport EditIcon from '@material-ui/icons/Edit';\r\n\r\nimport { useStyles } from '../../styles/Styles';\r\nimport { instance } from '../Config';\r\n\r\nfunction MapCell(props) {\r\n    const classes = useStyles();\r\n    const { i, j, cellHeight, cellWidth, id, locations, palette, lang, loadMap, history, user_id } = props;\r\n    const [anchorEl, setAnchorEl] = React.useState(null);\r\n    const [tagId, setTagId] = React.useState(null);\r\n    const open = Boolean(anchorEl);\r\n    const popoverId = open ? \"simple-popover\" : undefined;\r\n    const disabledSave = tagId === id ? true : false;\r\n\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setTagId(id);\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    const changeTagId = (event) => {\r\n        setTagId(event.target.value);\r\n    };\r\n\r\n    const editLocation = () => {\r\n        history.push({\r\n            pathname: \"/addlocation\",\r\n            defaultData: {\r\n                id: tagId,\r\n                name_rus: locations.find(loc => loc.id === tagId).name_rus,\r\n                name_eng: locations.find(loc => loc.id === tagId).name_eng,\r\n                img_url: locations.find(loc => loc.id === tagId).img_url,\r\n                color: locations.find(loc => loc.id === tagId).color,\r\n                prevUrl: \"/dreammap\",\r\n            }\r\n        });\r\n    };\r\n\r\n    const saveCellLoc = () => {\r\n        let newCell = {\r\n            \"user_id\": user_id,\r\n            \"i\": i,\r\n            \"j\": j,\r\n        };\r\n        newCell.oldLoc = id;\r\n        newCell.newLoc = tagId;\r\n        instance.post(\"/actions/users/updateusermap\", newCell)\r\n            .then(res => {\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            });\r\n        setAnchorEl(null);\r\n        loadMap();\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        if (id)\r\n            setTagId(id);\r\n    }, [id]);\r\n\r\n    return (\r\n        <td\r\n            style={{\r\n                height: cellHeight + 'px',\r\n                minWidth: cellWidth + 'px',\r\n                maxWidth: cellWidth + 'px',\r\n                padding: 0,\r\n                margin: 0,\r\n                transition: \"all 0.1s\",\r\n                border: '1px rgb(128,128,128,0.8) solid',\r\n            }}\r\n        >\r\n            {locations.length\r\n                ? <div className={classes.aboutGridContainer}\r\n                    onClick={handleClick}\r\n                    style={\r\n                        typeof tagId === 'number'\r\n                            ? {\r\n                                backgroundImage: 'url(' + locations.find(loc => loc.id === tagId).img_url + ')',\r\n                                backgroundSize: 'contain',\r\n                                backgroundColor: locations.find(loc => loc.id === tagId).color,\r\n                                overflow: 'hidden',\r\n                                //position: 'absolute',\r\n                                // width: cellWidth,\r\n                                // height: cellHeight,\r\n                                // transform: 'rotateZ(45deg) rotateY(0deg) rotateX(-60deg)',\r\n                                // transformOrigin: 'bottom center',\r\n                                // borderRadius: '40%',\r\n                            }\r\n                            : {\r\n                                backgroundSize: 'contain',\r\n                                backgroundColor: 'rgb(192,192,192,0.6)',\r\n                                overflow: 'hidden',\r\n                            }\r\n                    }\r\n                />\r\n                : ''\r\n            }\r\n            <Popover id={popoverId}\r\n                open={open}\r\n                anchorEl={anchorEl}\r\n                anchorOrigin={{\r\n                    vertical: \"center\",\r\n                    horizontal: \"center\"\r\n                }}\r\n                transformOrigin={{\r\n                    vertical: \"center\",\r\n                    horizontal: \"center\"\r\n                }}\r\n            >\r\n                <Grid container\r\n                    className={`${classes.height12}`}\r\n                    direction=\"column\"\r\n                    justify=\"center\"\r\n                    alignItems=\"stretch\"\r\n                >\r\n                    <Grid item className={`${classes.mainGridBodyItem} ${classes.height11}`} style={{ padding: '16px' }} >\r\n                        {locations.length\r\n                            ? <Grid container\r\n                                className={`${classes.height12}`}\r\n                                direction=\"column\"\r\n                                justify=\"center\"\r\n                                alignItems=\"stretch\"\r\n                            >\r\n                                <Grid item className={`${classes.height6}`}>\r\n                                    <Grid container\r\n                                        className={`${classes.height12}`}\r\n                                        direction=\"row\"\r\n                                        justify=\"center\"\r\n                                        alignItems=\"stretch\"\r\n                                    >\r\n                                        <Grid item xs={10}\r\n                                            style={{\r\n                                                textAlign: 'center',\r\n                                                position: 'relative',\r\n                                            }}\r\n                                        >\r\n                                            <Typography variant='h6'\r\n                                                style={{\r\n                                                    position: 'absolute',\r\n                                                    top: '50%',\r\n                                                    left: '50%',\r\n                                                    transform: 'translate(-50%, -50%)',\r\n                                                }}\r\n                                            >\r\n                                                {typeof tagId === 'number'\r\n                                                    ? lang.currLang.current === \"Ru\"\r\n                                                        ? locations.find(loc => loc.id === tagId).name_rus\r\n                                                        : locations.find(loc => loc.id === tagId).name_eng\r\n                                                    : lang.currLang.texts.Nothink\r\n                                                }\r\n                                            </Typography>\r\n                                        </Grid>\r\n                                        <Grid item xs={2}>\r\n                                            <IconButton onClick={editLocation}\r\n                                                disabled={\r\n                                                    typeof tagId === 'number'\r\n                                                        ? false\r\n                                                        : true\r\n                                                }\r\n                                            >\r\n                                                <EditIcon fontSize=\"small\" />\r\n                                            </IconButton >\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                                <Grid item className={`${classes.height6}`}>\r\n                                    <Grid container\r\n                                        direction=\"row\"\r\n                                        justify=\"space-around\"\r\n                                        alignItems=\"center\"\r\n                                    >\r\n                                        <Grid item>\r\n                                            <FormControl>\r\n                                                <Select\r\n                                                    value={\r\n                                                        typeof tagId === 'number'\r\n                                                            ? tagId\r\n                                                            : ''\r\n                                                    }\r\n                                                    onChange={changeTagId}\r\n                                                    MenuProps={{\r\n                                                        PaperProps: {\r\n                                                            style: {\r\n                                                                maxHeight: 48 * 4.5 + 8,\r\n                                                                width: 'auto',\r\n                                                            },\r\n                                                        },\r\n                                                    }}\r\n                                                >\r\n                                                    {locations.map((item, key) => (\r\n                                                        <MenuItem key={key} value={item.id}>\r\n                                                            <Avatar className={classes.smallAvatar}\r\n                                                                src={\r\n                                                                    item.id\r\n                                                                        ? item.img_url\r\n                                                                        : 'https://static.thenounproject.com/png/1446402-200.png'\r\n                                                                }\r\n                                                                style={palette.type === 'dark'\r\n                                                                    ? {\r\n                                                                        filter: 'invert(1)',\r\n                                                                    }\r\n                                                                    : {}\r\n                                                                }\r\n                                                            />\r\n                                                        </MenuItem>\r\n                                                    ))}\r\n                                                </Select>\r\n                                            </FormControl>\r\n                                        </Grid>\r\n                                        <Grid item>\r\n                                            <Typography component='div' variant='body2'>\r\n                                                {lang.currLang.texts.dreams}:\r\n                                            </Typography>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                            : ''\r\n                        }\r\n                    </Grid>\r\n                    <Grid item className={`${classes.mainGridBodyItem} ${classes.height1}`}>\r\n                        <Grid className={classes.menuDivButton}\r\n                            container\r\n                            direction=\"row\"\r\n                            justify=\"space-around\"\r\n                            alignItems=\"stretch\"\r\n                            style={{\r\n                                padding: '16px'\r\n                            }}\r\n                        >\r\n                            <Grid item xs={6} align=\"center\">\r\n                                <Button className={classes.poppupButton}\r\n                                    variant=\"contained\"\r\n                                    color=\"secondary\"\r\n                                    onClick={handleClose}\r\n                                >\r\n                                    {lang.currLang.texts.cancel}\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid item xs={6} align=\"center\">\r\n                                <Button className={classes.poppupButton}\r\n                                    disabled={disabledSave}\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    onClick={saveCellLoc}\r\n                                >\r\n                                    {lang.currLang.buttons.Save}\r\n                                </Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Popover>\r\n        </td >\r\n    )\r\n}\r\n\r\nMapCell.propTypes = {\r\n    lang: PropTypes.object.isRequired,\r\n    palette: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        lang: store.lang,\r\n        palette: store.themeMode.palette,\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n    }\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(MapCell);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Container from '@material-ui/core/Container';\r\nimport Button from '@material-ui/core/Button';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Fab from '@material-ui/core/Fab';\r\n\r\nimport RemoveIcon from '@material-ui/icons/Remove';\r\nimport AddIcon from '@material-ui/icons/Add';\r\n\r\nimport { instance } from './Config';\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\nimport MapCell from './muiltiple/MapCell';\r\nimport { useStyles } from '../styles/Styles';\r\n\r\nfunction DreamMap(props) {\r\n    const { lang, themeMode, history, user_id } = props;\r\n    const classes = useStyles();\r\n    const muiTheme = createMuiTheme(themeMode);\r\n    const [cellSize, setCellSize] = React.useState(50);\r\n    const [locations, setLocations] = React.useState({});\r\n    const [dreamMap, setDreamMap] = React.useState(null);\r\n\r\n    const changeCellSize = (event, newValue) => {\r\n        setCellSize(newValue);\r\n    };\r\n\r\n    const sizeUp = () => {\r\n        const newcellSize = cellSize + 5;\r\n        setCellSize(newcellSize);\r\n    };\r\n\r\n    const sizeDown = () => {\r\n        const newcellSize = cellSize - 5;\r\n        setCellSize(newcellSize);\r\n    };\r\n\r\n    const createTable = () => {\r\n        let table = [];\r\n        let i = 0;\r\n        let j = 0;\r\n\r\n        Object.keys(dreamMap).forEach(row => {\r\n            let rows = [];\r\n            Object.keys(dreamMap[row]).forEach(col => {\r\n                rows.push(\r\n                    <MapCell key={'cell' + i + j}\r\n                        i={i}\r\n                        j={j}\r\n                        cellHeight={cellSize * 0.6}\r\n                        cellWidth={cellSize * 0.6}\r\n                        dreamMap={dreamMap}\r\n                        id={dreamMap[row][col].id}\r\n                        locations={locations}\r\n                        loadMap={loadMap}\r\n                        history={history}\r\n                        user_id={user_id}\r\n                    />\r\n                );\r\n                i++;\r\n            })\r\n            table.push(\r\n                <tr key={'row' + j} >\r\n                    {rows}\r\n                </tr>\r\n            );\r\n            j++;\r\n            i = 0;\r\n        });\r\n\r\n        return table;\r\n    };\r\n\r\n    const loadMap = React.useCallback(() => {\r\n        instance.get(\"/gettags\")\r\n            .then(res => {\r\n                const nothink = [{\r\n                    id: null,\r\n                }];\r\n                setLocations(nothink.concat(res.data));\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            });\r\n        instance.post(\"/actions/users/getusermap\", { user_id: user_id })\r\n            .then(res => {\r\n                setDreamMap(JSON.parse(res.data.result));\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            });\r\n    }, [user_id]);\r\n\r\n    React.useEffect(() => {\r\n        loadMap();\r\n    }, [loadMap]);\r\n\r\n    return (\r\n        <MuiThemeProvider theme={muiTheme}>\r\n            <CssBaseline />\r\n            <div className={classes.root}>\r\n                <Grid container\r\n                    className={`${classes.height12}`}\r\n                    direction=\"column\"\r\n                    justify=\"center\"\r\n                    alignItems=\"stretch\"\r\n                >\r\n                    <Grid item className={`${classes.hiddenOverflow} ${classes.height9}`}>\r\n                        <Container\r\n                            style={{\r\n                                paddingTop: '16px',\r\n                                height: '75%',\r\n                                width: '100%',\r\n                                position: 'absolute',\r\n                            }}\r\n                        >\r\n                            <div\r\n                                style={{\r\n                                    position: 'relative',\r\n                                    height: '100%',\r\n                                    width: '100%',\r\n                                    overflow: 'auto',\r\n                                }}\r\n                            >\r\n                                <table\r\n                                    style={{\r\n                                        // transform: 'rotateX(60deg) rotateY(0deg) rotateZ(-45deg)',\r\n                                        // transformStyle: 'preserve-3d',\r\n                                        position: 'relative',\r\n                                        margin: 'auto',\r\n                                        borderCollapse: 'collapse',\r\n                                    }}\r\n                                >\r\n                                    <tbody>\r\n                                        {dreamMap !== null\r\n                                            ? createTable()\r\n                                            : <tr>\r\n                                                <td />\r\n                                            </tr>\r\n                                        }\r\n                                    </tbody>\r\n                                </table>\r\n                            </div>\r\n                        </Container>\r\n                    </Grid>\r\n                    <Grid item className={`${classes.mainGridBodyItem} ${classes.height2}`}>\r\n                        <Grid container\r\n                            className={classes.mainGridContainer}\r\n                            direction=\"row\"\r\n                            justify=\"space-evenly\"\r\n                            alignItems=\"center\" >\r\n                            <Grid item xs={1} align=\"center\" />\r\n                            <Grid item xs={2} align=\"center\">\r\n                                <Fab size=\"small\" color=\"secondary\" onClick={sizeDown}>\r\n                                    <RemoveIcon />\r\n                                </Fab>\r\n                            </Grid>\r\n                            <Grid item xs={6} align=\"center\">\r\n                                <Slider\r\n                                    min={6}\r\n                                    value={typeof cellSize === 'number' ? cellSize : 0}\r\n                                    onChange={changeCellSize}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={2} align=\"center\">\r\n                                <Fab size=\"small\" color=\"primary\" onClick={sizeUp} >\r\n                                    <AddIcon />\r\n                                </Fab>\r\n                            </Grid>\r\n                            <Grid item xs={1} align=\"center\" />\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid item className={`${classes.mainGridBodyItem} ${classes.height1}`}>\r\n                        <Grid container\r\n                            direction=\"row\"\r\n                            justify=\"space-evenly\"\r\n                            alignItems=\"center\"\r\n                        >\r\n                            <Grid item>\r\n                                <Button className={classes.actionButton}\r\n                                    variant=\"contained\"\r\n                                    color=\"secondary\"\r\n                                    onClick={() => { history.push(\"/luciddreams\") }}\r\n                                >\r\n                                    {lang.currLang.buttons.close}\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Button className={classes.actionButton}\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    onClick={() => { history.push(\"/addlocation\") }}\r\n                                >\r\n                                    {lang.currLang.buttons.add}\r\n                                </Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </MuiThemeProvider >\r\n    )\r\n}\r\n\r\nDreamMap.propTypes = {\r\n    themeMode: PropTypes.object.isRequired,\r\n    lang: PropTypes.object.isRequired,\r\n    user_id: PropTypes.number.isRequired,\r\n};\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        themeMode: store.themeMode,\r\n        lang: store.lang,\r\n        user_id: store.auth.user.id,\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(DreamMap);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport SwipeableViews from \"react-swipeable-views\";\r\nimport { SliderPicker } from 'react-color';\r\n\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Button from '@material-ui/core/Button';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Select from \"@material-ui/core/Select\";\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\n\r\nimport { setSnackbar } from '../actions/Actions';\r\nimport { SET_SNACKBAR_MODE } from \"../actions/types\";\r\n\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\nimport { instance } from './Config';\r\nimport { useStyles } from '../styles/Styles';\r\n\r\nfunction AddLocation(props) {\r\n    const { lang, themeMode, history, palette, setSnackbar } = props;\r\n    const classes = useStyles();\r\n    const muiTheme = createMuiTheme(themeMode);\r\n    const [isEditMode, setIsEditMode] = React.useState(false);\r\n    const [value, setValue] = React.useState(0);\r\n    const [prevUrl, setPrevUrl] = React.useState('');\r\n    const [isIconsLoading, setIsIconsLoading] = React.useState(false);\r\n    const [locationIcons, setLocationIcons] = React.useState([]);\r\n    const [searchName, setSearchName] = React.useState('');\r\n    const [nameEn, setNameEn] = React.useState('');\r\n    const [nameRu, setNameRu] = React.useState('');\r\n    const [selectedIcon, setSelectedIcon] = React.useState('');\r\n    const [iconColor, setIconColor] = React.useState('');\r\n\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue);\r\n    };\r\n\r\n    const handleChangeIndex = index => {\r\n        setValue(index);\r\n    };\r\n\r\n    const changeNameRu = (e) => {\r\n        setNameRu(e.target.value)\r\n    };\r\n\r\n    const changeNameEn = (e) => {\r\n        setNameEn(e.target.value)\r\n    };\r\n\r\n    const changeSearchName = (e) => {\r\n        let name = e.target.value;\r\n        const reg = /[а-яА-ЯёЁ]/g;\r\n        if (name.search(reg) !== -1) {\r\n            name = name.replace(reg, '');\r\n        }\r\n        setSearchName(name);\r\n    };\r\n\r\n    const changeIcon = (e) => {\r\n        setSelectedIcon(e.target.value);\r\n    };\r\n\r\n    const setColor = (color, e) => {\r\n        setIconColor(color.hex);\r\n    };\r\n\r\n    const loadIconsList = () => {\r\n        if (searchName.length !== 0) {\r\n            setIsIconsLoading(true);\r\n            const postData = {\r\n                name: searchName.replace(/ /g, \"%20\"),\r\n            };\r\n            instance\r\n                .post('/actions/users/geticons', postData)\r\n                .then(res => {\r\n                    if (res.data.length === 0) {\r\n                        loadIconsList();\r\n                    }\r\n                    else {\r\n                        setLocationIcons(res.data);\r\n                        setIsIconsLoading(false);\r\n                    }\r\n                });\r\n        }\r\n    };\r\n\r\n    const saveLocation = () => {\r\n        let errorMessage = '';\r\n        let error = false;\r\n        if (!isEditMode) {\r\n            if (iconColor.length === 0) {\r\n                errorMessage = lang.currLang.errors.ColorNotChange;\r\n                error = true;\r\n            }\r\n            if (selectedIcon.length === 0) {\r\n                errorMessage = lang.currLang.errors.IconNotChange;\r\n                error = true;\r\n            }\r\n            if (nameRu.length === 0) {\r\n                errorMessage = lang.currLang.errors.EmptyName;\r\n                error = true;\r\n                setValue(0);\r\n            }\r\n            if (nameEn.length === 0) {\r\n                errorMessage = lang.currLang.errors.EmptyName;\r\n                error = true;\r\n                setValue(1);\r\n            }\r\n\r\n            if (error) {\r\n                setSnackbar({\r\n                    type: SET_SNACKBAR_MODE,\r\n                    snackbar: {\r\n                        open: true,\r\n                        variant: 'error',\r\n                        message: errorMessage,\r\n                    },\r\n                });\r\n            }\r\n            else {\r\n                let postData = {\r\n                    name_rus: nameRu,\r\n                    name_eng: nameEn,\r\n                    img_url: selectedIcon,\r\n                    color: iconColor\r\n                };\r\n                instance\r\n                    .post('/actions/users/createlocation', postData)\r\n                    .then(res => {\r\n                        setSnackbar({\r\n                            type: SET_SNACKBAR_MODE,\r\n                            snackbar: {\r\n                                open: true,\r\n                                variant: 'success',\r\n                                message: lang.currLang.texts.success,\r\n                            },\r\n                        });\r\n                        prevUrl.length === 0\r\n                            ? history.push(\"/dreammap\")\r\n                            : history.push(prevUrl);\r\n                    })\r\n                    .catch(err => {\r\n                        setSnackbar({\r\n                            type: SET_SNACKBAR_MODE,\r\n                            snackbar: {\r\n                                open: true,\r\n                                variant: 'error',\r\n                                message: lang.currLang.errors.CantAddLocation,\r\n                            },\r\n                        });\r\n                    });\r\n            }\r\n        }\r\n        else {\r\n            let chages = false;\r\n            let postData = {\r\n                id: props.location.defaultData.id,\r\n            };\r\n\r\n            if (nameRu !== props.location.defaultData.name_rus) {\r\n                postData.name_rus = nameRu;\r\n                chages = true;\r\n            }\r\n            if (nameEn !== props.location.defaultData.name_eng) {\r\n                postData.name_eng = nameEn;\r\n                chages = true;\r\n            }\r\n            if (selectedIcon !== props.location.defaultData.img_url) {\r\n                postData.img_url = selectedIcon;\r\n                chages = true;\r\n            }\r\n            if (iconColor !== props.location.defaultData.color) {\r\n                postData.color = iconColor;\r\n                chages = true;\r\n            }\r\n\r\n            if (chages) {\r\n                instance\r\n                    .post('/actions/users/updatelocation', postData)\r\n                    .then(res => {\r\n                        setSnackbar({\r\n                            type: SET_SNACKBAR_MODE,\r\n                            snackbar: {\r\n                                open: true,\r\n                                variant: 'success',\r\n                                message: lang.currLang.texts.success,\r\n                            },\r\n                        });\r\n                        prevUrl.length === 0\r\n                            ? history.push(\"/dreammap\")\r\n                            : history.push(prevUrl);\r\n                    })\r\n                    .catch(err => {\r\n                        setSnackbar({\r\n                            type: SET_SNACKBAR_MODE,\r\n                            snackbar: {\r\n                                open: true,\r\n                                variant: 'error',\r\n                                message: lang.currLang.errors.CantUpdateLocation,\r\n                            },\r\n                        });\r\n                    });\r\n            }\r\n            else {\r\n                setSnackbar({\r\n                    type: SET_SNACKBAR_MODE,\r\n                    snackbar: {\r\n                        open: true,\r\n                        variant: 'error',\r\n                        message: lang.currLang.errors.NoChanges,\r\n                    },\r\n                });\r\n            }\r\n        }\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        if (typeof (props.location.defaultData) !== 'undefined') {\r\n            const getIcon = (data, img_url) => {\r\n                instance\r\n                    .post('/actions/users/geticons', data)\r\n                    .then(res => {\r\n                        if (res.data.length === 0) {\r\n                            getIcon(data, img_url);\r\n                        }\r\n                        else {\r\n                            let icons = [];\r\n                            icons.push(img_url);\r\n                            const newArray = icons.concat(res.data);\r\n                            setLocationIcons(newArray);\r\n                            setIsIconsLoading(false);\r\n                        }\r\n                    });\r\n            };\r\n\r\n            if (typeof props.location.defaultData.id === 'number') {\r\n                setIsEditMode(true);\r\n                const { name_rus, name_eng, img_url, color, prevUrl } = props.location.defaultData;\r\n                setNameRu(name_rus);\r\n                setNameEn(name_eng);\r\n                setSelectedIcon(img_url);\r\n                setIconColor(color);\r\n                setPrevUrl(prevUrl);\r\n                setIsIconsLoading(true);\r\n                const postData = {\r\n                    name: name_eng,\r\n                };\r\n                getIcon(postData, img_url);\r\n            }\r\n            else {\r\n                const { prevUrl } = props.location.defaultData;\r\n                setPrevUrl(prevUrl);\r\n            }\r\n        }\r\n    }, [props.location.defaultData]);\r\n\r\n    return (\r\n        <MuiThemeProvider theme={muiTheme}>\r\n            <CssBaseline />\r\n            <div className={classes.root}>\r\n                <Grid container\r\n                    className={`${classes.height12}`}\r\n                    direction=\"column\"\r\n                    justify=\"center\"\r\n                    alignItems=\"stretch\"\r\n                >\r\n                    <Grid item className={`${classes.mainGridBodyItem} ${classes.height11}`}>\r\n                        <Paper className={classes.paper}>\r\n                            <Grid className={`${classes.height12}`}\r\n                                container\r\n                                direction=\"column\"\r\n                                justify=\"center\"\r\n                                alignItems=\"stretch\"\r\n                            >\r\n                                <Grid item className={`${classes.mainGridBodyItem} ${classes.height5}`}>\r\n                                    <Paper>\r\n                                        <Tabs centered\r\n                                            value={value}\r\n                                            onChange={handleChange}\r\n                                            indicatorColor=\"primary\"\r\n                                            textColor=\"primary\"\r\n                                        >\r\n                                            <Tab label=\"RU\" />\r\n                                            <Tab label=\"EN\" />\r\n                                        </Tabs>\r\n                                    </Paper>\r\n                                    <SwipeableViews className={classes.SwipeableViews}\r\n                                        animateHeight\r\n                                        axis={muiTheme.direction === \"rtl\" ? \"x-reverse\" : \"x\"}\r\n                                        index={value}\r\n                                        onChangeIndex={handleChangeIndex}\r\n                                    >\r\n                                        <Grid container\r\n                                            className={`${classes.height12}`}\r\n                                            direction=\"column\"\r\n                                            justify=\"center\"\r\n                                            alignItems=\"center\"\r\n                                            role=\"tabpanel\"\r\n                                        >\r\n                                            <Grid item className={classes.fullMinWidth} >\r\n                                                <TextField className={classes.inputDiv}\r\n                                                    disabled={!isIconsLoading\r\n                                                        ? false\r\n                                                        : true\r\n                                                    }\r\n                                                    required\r\n                                                    id=\"input-ru\"\r\n                                                    value={nameRu}\r\n                                                    label={lang.currLang.texts.Name}\r\n                                                    variant=\"outlined\"\r\n                                                    onChange={changeNameRu}\r\n                                                />\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                        <Grid container\r\n                                            className={`${classes.height12}`}\r\n                                            direction=\"column\"\r\n                                            justify=\"center\"\r\n                                            alignItems=\"center\"\r\n                                            role=\"tabpanel\"\r\n                                        >\r\n                                            <Grid item className={classes.fullMinWidth} >\r\n                                                <TextField className={classes.inputDiv}\r\n                                                    disabled={!isIconsLoading\r\n                                                        ? false\r\n                                                        : true\r\n                                                    }\r\n                                                    required\r\n                                                    id=\"input-en\"\r\n                                                    value={nameEn}\r\n                                                    label={lang.currLang.texts.Name}\r\n                                                    variant=\"outlined\"\r\n                                                    onChange={changeNameEn}\r\n                                                />\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </SwipeableViews>\r\n                                </Grid>\r\n                                <Grid item className={`${classes.mainGridBodyItem} ${classes.height3}`}>\r\n                                    <Grid className={`${classes.height12}`}\r\n                                        container\r\n                                        direction=\"column\"\r\n                                        justify=\"center\"\r\n                                        alignItems=\"stretch\"\r\n                                    >\r\n                                        <Grid item className={`${classes.mainGridBodyItem} ${classes.height6}`}>\r\n                                            <TextField className={classes.inputDiv}\r\n                                                disabled={!isIconsLoading\r\n                                                    ? false\r\n                                                    : true\r\n                                                }\r\n                                                value={searchName}\r\n                                                id=\"input-search\"\r\n                                                label={lang.currLang.texts.FindIcon}\r\n                                                variant=\"outlined\"\r\n                                                onChange={changeSearchName}\r\n                                                onBlur={loadIconsList}\r\n                                            />\r\n                                        </Grid>\r\n                                        <Grid item className={`${classes.mainGridBodyItem} ${classes.height6}`}>\r\n                                            <div className={classes.formControl}>\r\n                                                {!isIconsLoading\r\n                                                    ? <FormControl\r\n                                                        disabled={locationIcons.length !== 0\r\n                                                            ? false\r\n                                                            : true\r\n                                                        }\r\n                                                    >\r\n                                                        <InputLabel id=\"select-icon\">\r\n                                                            {lang.currLang.texts.ChangeIcon}\r\n                                                        </InputLabel>\r\n                                                        <Select value={selectedIcon}\r\n                                                            style={{\r\n                                                                minWidth: 100,\r\n                                                            }}\r\n                                                            labelId=\"select-icon\"\r\n                                                            onChange={changeIcon}\r\n                                                            MenuProps={{\r\n                                                                PaperProps: {\r\n                                                                    style: {\r\n                                                                        maxHeight: 48 * 4.5 + 8,\r\n                                                                        width: 'auto',\r\n                                                                    },\r\n                                                                },\r\n                                                            }}\r\n                                                        >\r\n                                                            {locationIcons.map((item, key) => (\r\n                                                                <MenuItem key={key} value={item} >\r\n                                                                    <Avatar className={classes.smallAvatar}\r\n                                                                        src={item}\r\n                                                                        style={palette.type === 'dark'\r\n                                                                            ? {\r\n                                                                                filter: 'invert(1)',\r\n                                                                            }\r\n                                                                            : {}}\r\n                                                                    />\r\n                                                                </MenuItem>\r\n                                                            ))}\r\n                                                        </Select>\r\n                                                    </FormControl>\r\n                                                    : <CircularProgress />\r\n                                                }\r\n                                            </div>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                                <Grid item className={`${classes.mainGridBodyItem} ${classes.height4}`}>\r\n                                    <SliderPicker className={classes.inputDiv}\r\n                                        color={iconColor}\r\n                                        onChangeComplete={setColor}\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Paper>\r\n                    </Grid>\r\n                    <Grid item className={`${classes.mainGridBodyItem} ${classes.height1}`}>\r\n                        <Grid container\r\n                            direction=\"row\"\r\n                            justify=\"space-evenly\"\r\n                            alignItems=\"center\"\r\n                        >\r\n                            <Grid item>\r\n                                <Button className={classes.actionButton}\r\n                                    variant=\"contained\"\r\n                                    color=\"secondary\"\r\n                                    onClick={() => {\r\n                                        prevUrl.length === 0\r\n                                            ? history.push(\"/dreammap\")\r\n                                            : history.push(prevUrl);\r\n                                    }}\r\n                                >\r\n                                    {lang.currLang.buttons.close}\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    className={classes.actionButton}\r\n                                    onClick={() => saveLocation()}\r\n                                >\r\n                                    {isEditMode\r\n                                        ? lang.currLang.buttons.Save\r\n                                        : lang.currLang.buttons.add\r\n                                    }\r\n                                </Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </MuiThemeProvider >\r\n    )\r\n}\r\n\r\nAddLocation.propTypes = {\r\n    setSnackbar: PropTypes.func.isRequired,\r\n    themeMode: PropTypes.object.isRequired,\r\n    lang: PropTypes.object.isRequired,\r\n    palette: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        themeMode: store.themeMode,\r\n        palette: store.themeMode.palette,\r\n        lang: store.lang,\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setSnackbar: snackbar => dispatch(setSnackbar(snackbar)),\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(AddLocation);","export function compare(obj1, obj2) {\r\n    if (!Object.keys(obj2).every(key => obj1.hasOwnProperty(key))) {\r\n        return false;\r\n    }\r\n    return Object.keys(obj1).every(function (key) {\r\n        if (typeof obj1[key] == \"object\") {\r\n            return compare(obj1[key], obj2[key]);\r\n        }\r\n        else {\r\n            return obj1[key] === obj2[key];\r\n        }\r\n    });\r\n}","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport ruLocale from \"date-fns/locale/ru\";\r\nimport enLocale from \"date-fns/locale/ru\";\r\n\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Button from '@material-ui/core/Button';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\n\r\nimport MUIRichTextEditor from 'mui-rte';\r\nimport { convertToRaw } from 'draft-js';\r\n\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\n\r\nimport { MuiPickersUtilsProvider, KeyboardTimePicker, KeyboardDatePicker } from '@material-ui/pickers';\r\n\r\nimport FormatColorFillIcon from '@material-ui/icons/FormatColorFill';\r\nimport AddIcon from '@material-ui/icons/Add';\r\n\r\nimport { useStyles } from '../styles/Styles';\r\nimport { setSnackbar } from '../actions/Actions';\r\nimport { SET_SNACKBAR_MODE } from \"../actions/types\";\r\n\r\nimport { instance } from './Config';\r\n\r\nimport { compare } from '../functions';\r\n\r\nlet defaultTags = [];\r\n\r\nfunction AddDream(props) {\r\n    const classes = useStyles();\r\n    const { lang, themeMode, history, auth, setSnackbar } = props;\r\n    const muiTheme = createMuiTheme(themeMode);\r\n    Object.assign(muiTheme, {\r\n        overrides: {\r\n            MUIRichTextEditor: {\r\n                root: {\r\n                    border: \"1px solid gray\",\r\n                    borderRadius: '4px',\r\n                    height: '100%',\r\n                    //Весь компонент\r\n                },\r\n                container: {\r\n                    height: '100%',\r\n                    margin: '0 !Important',\r\n                    //Без шапки\r\n                },\r\n                toolbar: {\r\n                    //textAlign: 'center',\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    justifyContent: 'center',\r\n                    height: '20%',\r\n                    minHeight: '48px',\r\n                    margin: '0 !Important',\r\n                    borderBottom: \"1px solid gray\",\r\n                    borderRadius: '4px',\r\n                },\r\n                placeHolder: {\r\n                    height: '72%',\r\n                },\r\n                editor: {\r\n                    height: '72%',\r\n                    width: '100%',\r\n                    position: 'relative',\r\n                    overflow: 'hidden',\r\n                    //Эдитор\r\n                },\r\n                editorContainer: {\r\n                    margin: '0 !Important',\r\n                    padding: \"0px 14px\",\r\n                    borderRadius: '4px',\r\n                    position: 'relative',\r\n                    boxSizing: 'border-box',\r\n                    maxHeight: '100%',\r\n                    overflow: 'auto',\r\n                    //Редактор\r\n                },\r\n            }\r\n        }\r\n    })\r\n    const [isEditMode, setIsEditMode] = React.useState(false);\r\n    const [isLoading, setIsLoading] = React.useState(false);\r\n    const [titleText, setTitleText] = React.useState('');\r\n    const [selectedDate, setSelectedDate] = React.useState(new Date());\r\n    const [contentText, setContentText] = React.useState();\r\n    const [prevContentText, setPrevContentText] = React.useState();\r\n    const [selectedLocations, setselectedLocations] = React.useState([]);\r\n    const [locations, setLocations] = React.useState({});\r\n\r\n    const addLocation = () => {\r\n        saveToLocalStorage();\r\n        history.push({\r\n            pathname: \"/addlocation\",\r\n            defaultData: {\r\n                prevUrl: \"/addregulardream\",\r\n            }\r\n        });\r\n    };\r\n\r\n    const handleChangeLocations = (event, value) => {\r\n        setselectedLocations(value);\r\n    };\r\n\r\n    const changeTitle = (event) => {\r\n        setTitleText(event.target.value);\r\n    };\r\n\r\n    const handleDateChange = date => {\r\n        saveToLocalStorage();\r\n        setSelectedDate(date);\r\n    };\r\n\r\n    const changeContent = (state) => {\r\n        const currCont = state.getCurrentContent();\r\n        const convert = convertToRaw(currCont);\r\n        const content = JSON.stringify(convert);\r\n        if (prevContentText !== content) {\r\n            saveToLocalStorage();\r\n            setPrevContentText(content);\r\n        }\r\n    };\r\n\r\n    const savepost = () => {\r\n        setIsLoading(true);\r\n        let havErr = false;\r\n        let errorMessage = '';\r\n        if (typeof (titleText) !== 'undefined') {\r\n            if (titleText.length === 0) {\r\n                errorMessage = lang.currLang.errors.EmptyTitle;\r\n                havErr = true;\r\n            }\r\n        }\r\n        else {\r\n            errorMessage = lang.currLang.errors.EmptyTitle;\r\n            havErr = true;\r\n        }\r\n\r\n        if (typeof (prevContentText) !== 'undefined') {\r\n            if (JSON.parse(prevContentText).blocks[0].text.length === 0) {\r\n                errorMessage = lang.currLang.errors.EmptyDream;\r\n                havErr = true;\r\n            }\r\n        }\r\n        else {\r\n            errorMessage = lang.currLang.errors.EmptyDream;\r\n            havErr = true;\r\n        }\r\n\r\n        if (havErr) {\r\n            setSnackbar({\r\n                type: SET_SNACKBAR_MODE,\r\n                snackbar: {\r\n                    open: true,\r\n                    variant: 'error',\r\n                    message: errorMessage,\r\n                },\r\n            });\r\n            setIsLoading(false);\r\n        }\r\n        else {\r\n            if (isEditMode) {\r\n                let hasChanges = false;\r\n                let tagChanges = false;\r\n                let postData = {\r\n                    post_id: props.location.defaultData.post_id,\r\n                };\r\n\r\n                if (props.location.defaultData.post_title !== titleText) {\r\n                    postData.title = titleText;\r\n                    hasChanges = true;\r\n                }\r\n\r\n                if (props.location.defaultData.dream_date.getTime() !== selectedDate.getTime()) {\r\n                    postData.dreamDate = selectedDate.toLocaleString(\"ru-RU\", { timeZone: 'Europe/London' });\r\n                    hasChanges = true;\r\n                }\r\n\r\n                if (props.location.defaultData.post_content !== prevContentText) {\r\n                    postData.content = prevContentText;\r\n                    hasChanges = true;\r\n                }\r\n\r\n                if (defaultTags.length === selectedLocations.length) {\r\n                    if (!compare(defaultTags, selectedLocations)) {\r\n                        hasChanges = true;\r\n                        tagChanges = true;\r\n                    }\r\n                }\r\n                else {\r\n                    hasChanges = true;\r\n                    tagChanges = true;\r\n                }\r\n\r\n                if (hasChanges) {\r\n                    if (tagChanges) {\r\n                        let deleteTags = defaultTags.filter(item1 =>\r\n                            !selectedLocations.some(item2 => (\r\n                                item2.id === item1.id)\r\n                            )\r\n                        );\r\n                        let addTags = selectedLocations.filter(item1 =>\r\n                            !defaultTags.some(item2 => (\r\n                                item2.id === item1.id)\r\n                            )\r\n                        );\r\n                        if (addTags.length > 0) {\r\n                            let add = {};\r\n                            addTags.map((item, key) => (\r\n                                add[key] = item\r\n                            ));\r\n                            postData.tags = { ...postData.tags, add: add };\r\n                        }\r\n                        if (deleteTags.length > 0) {\r\n                            let remove = {};\r\n                            deleteTags.map((item, key) => (\r\n                                remove[key] = item\r\n                            ));\r\n                            postData.tags = { ...postData.tags, remove: remove };\r\n                        }\r\n                    }\r\n                    instance\r\n                        .post('/actions/users/updatepost', postData)\r\n                        .then(res => {\r\n                            setIsLoading(false);\r\n                            setSnackbar({\r\n                                type: SET_SNACKBAR_MODE,\r\n                                snackbar: {\r\n                                    open: true,\r\n                                    variant: 'success',\r\n                                    message: lang.currLang.texts.success,\r\n                                },\r\n                            });\r\n                            window.localStorage.removeItem(\"postDreamData\");\r\n                            history.push(\"/dreams\")\r\n                        })\r\n                        .catch(err => {\r\n                            console.log(err);\r\n                            setIsLoading(false);\r\n                        });\r\n                }\r\n                else {\r\n                    setSnackbar({\r\n                        type: SET_SNACKBAR_MODE,\r\n                        snackbar: {\r\n                            open: true,\r\n                            variant: 'error',\r\n                            message: lang.currLang.errors.NoChanges,\r\n                        },\r\n                    });\r\n                    setIsLoading(false);\r\n                }\r\n            }\r\n            else {\r\n                let postData = {\r\n                    title: titleText,\r\n                    dreamDate: selectedDate.toLocaleString(\"ru-RU\", { timeZone: 'Europe/London' }),\r\n                    content: prevContentText,\r\n                    create_user: auth.user.id,\r\n                    post_type: 0,\r\n                    nickname: auth.user.nickname,\r\n                    tags: selectedLocations,\r\n                }\r\n                instance\r\n                    .post('/actions/users/createpost', postData)\r\n                    .then(res => {\r\n                        setIsLoading(false);\r\n                        setSnackbar({\r\n                            type: SET_SNACKBAR_MODE,\r\n                            snackbar: {\r\n                                open: true,\r\n                                variant: 'success',\r\n                                message: lang.currLang.texts.success,\r\n                            },\r\n                        });\r\n                        window.localStorage.removeItem(\"postDreamData\");\r\n                        history.push(\"/luciddreams\")\r\n                    })\r\n                    .catch(err => {\r\n                        setIsLoading(false);\r\n                    });\r\n            }\r\n        }\r\n    };\r\n\r\n    const saveToLocalStorage = () => {\r\n        let data = {};\r\n        if (window.localStorage.getItem(\"postDreamData\")) {\r\n            data = JSON.parse(window.localStorage.getItem(\"postDreamData\"));\r\n        }\r\n        data.selectedDate = selectedDate;\r\n        if (titleText.length !== 0) {\r\n            data.titleText = titleText;\r\n        }\r\n        if (typeof prevContentText !== 'undefined')\r\n            if (prevContentText.length !== 0) {\r\n                data.contentText = prevContentText;\r\n            }\r\n        window.localStorage.setItem(\"postDreamData\", JSON.stringify(data));\r\n    };\r\n\r\n    const loadFromLocalStorage = () => {\r\n        const { selectedDate, titleText, contentText } = JSON.parse(window.localStorage.getItem(\"postDreamData\"));\r\n        if (typeof selectedDate !== 'undefined') {\r\n            setSelectedDate(new Date(selectedDate));\r\n        }\r\n        if (typeof titleText !== 'undefined') {\r\n            setTitleText(titleText);\r\n        }\r\n        if (typeof contentText !== 'undefined') {\r\n            setContentText(contentText);\r\n            setPrevContentText(contentText);\r\n        }\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        if (window.localStorage.getItem(\"postDreamData\"))\r\n            loadFromLocalStorage();\r\n\r\n        defaultTags = [];\r\n        instance.get(\"/gettags\")\r\n            .then(res => {\r\n                setLocations(res.data);\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            });\r\n\r\n        if (typeof (props.location.defaultData) !== 'undefined') {\r\n            setIsEditMode(true);\r\n            const { post_title, dream_date, post_content, tags } = props.location.defaultData;\r\n            setTitleText(post_title);\r\n            setSelectedDate(dream_date);\r\n            setContentText(post_content);\r\n            setPrevContentText(post_content);\r\n            if (typeof tags[0][0] === 'string') {\r\n                tags.forEach(item => {\r\n                    let location = {};\r\n                    location.id = Number(item[0]);\r\n                    location.name_rus = item[1];\r\n                    location.name_eng = item[2];\r\n                    location.img_url = item[3];\r\n                    defaultTags.push(location);\r\n                });\r\n                setselectedLocations(defaultTags);\r\n            }\r\n        }\r\n    }, [props.location.defaultData, lang.currLang]);\r\n\r\n    return (\r\n        <MuiThemeProvider theme={muiTheme}>\r\n            <CssBaseline />\r\n            <div className={classes.root} >\r\n                <Grid container\r\n                    className={`${classes.height12}`}\r\n                    direction=\"column\"\r\n                    justify=\"center\"\r\n                    alignItems=\"stretch\"\r\n                >\r\n                    <Grid item className={`${classes.mainGridBodyItem} ${classes.height11}`}>\r\n                        <Paper className={classes.paper}>\r\n                            <Grid container\r\n                                className={`${classes.height12}`}\r\n                                direction=\"column\"\r\n                                justify=\"center\"\r\n                                alignItems=\"stretch\"\r\n                            >\r\n                                <Grid item className={`${classes.fullMinWidth} ${classes.height2}`}>\r\n                                    <TextField className={classes.inputDiv}\r\n                                        required\r\n                                        id=\"outlined-required\"\r\n                                        value={titleText}\r\n                                        label={lang.currLang.texts.title}\r\n                                        variant=\"outlined\"\r\n                                        onChange={(e) => { changeTitle(e) }}\r\n                                        onBlur={saveToLocalStorage}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item className={`${classes.fullMinWidth} ${classes.height2}`}>\r\n                                    <MuiPickersUtilsProvider utils={DateFnsUtils}\r\n                                        locale={lang.currLang.current === \"Ru\"\r\n                                            ? ruLocale\r\n                                            : enLocale}\r\n                                    >\r\n                                        <Grid container\r\n                                            className={classes.pickerGridContainer}\r\n                                            direction=\"row\"\r\n                                            justify=\"center\"\r\n                                            alignItems=\"stretch\"\r\n                                        >\r\n                                            <Grid item xs={7} >\r\n                                                <KeyboardDatePicker className={classes.pickers}\r\n                                                    id=\"date-picker-dialog\"\r\n                                                    label={lang.currLang.texts.pickDate}\r\n                                                    format=\"dd.MM.yyyy\"\r\n                                                    value={selectedDate}\r\n                                                    onChange={handleDateChange}\r\n                                                    KeyboardButtonProps={{\r\n                                                        'aria-label': 'change date',\r\n                                                    }}\r\n                                                />\r\n                                            </Grid>\r\n                                            <Grid item xs={5} >\r\n                                                <KeyboardTimePicker className={classes.pickers}\r\n                                                    id=\"time-picker\"\r\n                                                    label={lang.currLang.texts.pickTime}\r\n                                                    value={selectedDate}\r\n                                                    onChange={handleDateChange}\r\n                                                    ampm={false}\r\n                                                    KeyboardButtonProps={{\r\n                                                        'aria-label': 'change time',\r\n                                                    }}\r\n                                                />\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </MuiPickersUtilsProvider>\r\n                                </Grid>\r\n                                <Grid item className={`${classes.fullMinWidth} ${classes.height5}`}>\r\n                                    <div className={classes.inputScrollableDiv}>\r\n                                        <MUIRichTextEditor\r\n                                            value={contentText}\r\n                                            onChange={changeContent}\r\n                                            label={lang.currLang.texts.content}\r\n                                            inlineToolbar={false}\r\n                                            controls={[\r\n                                                \"bold\",\r\n                                                \"italic\",\r\n                                                \"underline\",\r\n                                                \"strikethrough\",\r\n                                                \"colorfill\",\r\n                                            ]}\r\n                                            customControls={[\r\n                                                {\r\n                                                    name: \"colorfill\",\r\n                                                    icon: <FormatColorFillIcon />,\r\n                                                    type: \"inline\",\r\n                                                    inlineStyle: {\r\n                                                        backgroundColor: \"yellow\",\r\n                                                        color: \"black\"\r\n                                                    }\r\n                                                }\r\n                                            ]}\r\n                                        />\r\n\r\n                                    </div>\r\n                                </Grid>\r\n                                <Grid item className={`${classes.fullMinWidth} ${classes.height3}`}>\r\n                                    <Grid container\r\n                                        className={`${classes.height12}`}\r\n                                        direction=\"row\"\r\n                                        justify=\"center\"\r\n                                        alignItems=\"stretch\"\r\n                                    >\r\n                                        <Grid item xs={10} style={{ position: 'relative' }}>\r\n                                            {locations.length\r\n                                                ? <Autocomplete\r\n                                                    multiple\r\n                                                    className={classes.inputDiv}\r\n                                                    id=\"tags-outlined\"\r\n                                                    size=\"small\"\r\n                                                    options={locations}\r\n                                                    getOptionLabel={option => (\r\n                                                        <Chip\r\n                                                            size=\"small\"\r\n                                                            className={classes.chip}\r\n                                                            avatar={\r\n                                                                <Avatar src={option.img_url} />\r\n                                                            }\r\n                                                            label={\r\n                                                                lang.currLang.current === \"Ru\"\r\n                                                                    ? option.name_rus\r\n                                                                    : option.name_eng\r\n                                                            }\r\n                                                        />\r\n                                                    )}\r\n                                                    defaultValue={\r\n                                                        defaultTags.map(item => {\r\n                                                            return locations[item.id - 1];\r\n                                                        })\r\n                                                    }\r\n                                                    onChange={(event, value) => handleChangeLocations(event, value)}\r\n                                                    filterSelectedOptions\r\n                                                    renderInput={params => (\r\n                                                        <TextField\r\n                                                            {...params}\r\n                                                            label={lang.currLang.texts.tags}\r\n                                                            fullWidth\r\n                                                        />\r\n                                                    )}\r\n                                                />\r\n                                                : <div className={classes.inputDiv}>\r\n                                                    <LinearProgress />\r\n                                                </div>\r\n                                            }\r\n                                        </Grid>\r\n                                        <Grid item xs={2} style={{ position: 'relative' }}>\r\n                                            <IconButton onClick={addLocation} className={`${classes.centerButton}`}>\r\n                                                <AddIcon fontSize=\"small\" />\r\n                                            </IconButton>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Paper>\r\n                    </Grid>\r\n                    <Grid item className={`${classes.mainGridBodyItem} ${classes.height1}`}>\r\n                        {isLoading\r\n                            ? <LinearProgress />\r\n                            : <Grid container\r\n                                direction=\"row\"\r\n                                justify=\"space-evenly\"\r\n                                alignItems=\"center\"\r\n                            >\r\n                                <Grid item>\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        color=\"secondary\"\r\n                                        className={classes.actionButton}\r\n                                        onClick={() => {\r\n                                            isEditMode\r\n                                                ? history.push(\"/dreams\")\r\n                                                : history.push(\"/luciddreams\");\r\n                                            window.localStorage.removeItem(\"postDreamData\");\r\n                                        }}\r\n                                    >\r\n                                        {lang.currLang.buttons.close}\r\n                                    </Button>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        color=\"primary\"\r\n                                        className={classes.actionButton}\r\n                                        onClick={() => savepost()}\r\n                                    >\r\n                                        {isEditMode\r\n                                            ? lang.currLang.buttons.Save\r\n                                            : lang.currLang.buttons.add\r\n                                        }\r\n                                    </Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                        }\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </MuiThemeProvider >\r\n    );\r\n};\r\n\r\nAddDream.propTypes = {\r\n    setSnackbar: PropTypes.func.isRequired,\r\n    themeMode: PropTypes.object.isRequired,\r\n    lang: PropTypes.object.isRequired,\r\n    auth: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        themeMode: store.themeMode,\r\n        lang: store.lang,\r\n        auth: store.auth,\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setSnackbar: snackbar => dispatch(setSnackbar(snackbar)),\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(AddDream);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport ruLocale from \"date-fns/locale/ru\";\r\nimport enLocale from \"date-fns/locale/ru\";\r\n\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Button from '@material-ui/core/Button';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\n\r\nimport MUIRichTextEditor from 'mui-rte';\r\nimport { convertToRaw } from 'draft-js';\r\n\r\nimport Rating from \"@material-ui/lab/Rating\";\r\n\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\n\r\nimport { MuiPickersUtilsProvider, KeyboardTimePicker, KeyboardDatePicker } from '@material-ui/pickers';\r\n\r\nimport FormatColorFillIcon from '@material-ui/icons/FormatColorFill';\r\nimport AddIcon from '@material-ui/icons/Add';\r\n\r\nimport { useStyles } from '../styles/Styles';\r\nimport { SET_SNACKBAR_MODE } from \"../actions/types\";\r\nimport { setSnackbar } from '../actions/Actions';\r\n\r\nimport { instance } from './Config';\r\n\r\nimport { compare } from '../functions';\r\n\r\nlet defaultTechnics = [];\r\nlet defaultTags = [];\r\n\r\nfunction AddCDream(props) {\r\n    const classes = useStyles();\r\n    const { lang, themeMode, history, auth, setSnackbar } = props;\r\n    const muiTheme = createMuiTheme(themeMode);\r\n    Object.assign(muiTheme, {\r\n        overrides: {\r\n            MUIRichTextEditor: {\r\n                root: {\r\n                    border: \"1px solid gray\",\r\n                    borderRadius: '4px',\r\n                    height: '100%',\r\n                    //Весь компонент\r\n                },\r\n                container: {\r\n                    height: '100%',\r\n                    margin: '0 !Important',\r\n                    //Без шапки\r\n                },\r\n                toolbar: {\r\n                    //textAlign: 'center',\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    justifyContent: 'center',\r\n                    height: '20%',\r\n                    minHeight: '48px',\r\n                    margin: '0 !Important',\r\n                    borderBottom: \"1px solid gray\",\r\n                    borderRadius: '4px',\r\n                },\r\n                placeHolder: {\r\n                    height: '72%',\r\n                },\r\n                editor: {\r\n                    height: '72%',\r\n                    width: '100%',\r\n                    position: 'relative',\r\n                    overflow: 'hidden',\r\n                    //Эдитор\r\n                },\r\n                editorContainer: {\r\n                    margin: '0 !Important',\r\n                    padding: \"0px 14px\",\r\n                    borderRadius: '4px',\r\n                    position: 'relative',\r\n                    boxSizing: 'border-box',\r\n                    maxHeight: '100%',\r\n                    overflow: 'auto',\r\n                    //Редактор\r\n                },\r\n            }\r\n        }\r\n    })\r\n    const [isEditMode, setIsEditMode] = React.useState(false);\r\n    const [isLoading, setIsLoading] = React.useState(false);\r\n    const [titleText, setTitleText] = React.useState('');\r\n    const [selectedDate, setSelectedDate] = React.useState(new Date());\r\n    const [contentText, setContentText] = React.useState();\r\n    const [prevContentText, setPrevContentText] = React.useState();\r\n    const [selectedLocations, setselectedLocations] = React.useState([]);\r\n    const [selectedTechnics, setselectedTechnics] = React.useState([]);\r\n    const [realisticsValue, setRealisticsValue] = React.useState(1);\r\n    const [locations, setLocations] = React.useState({});\r\n    const [technics, setTechnics] = React.useState({});\r\n\r\n    const addLocation = () => {\r\n        saveToLocalStorage();\r\n        history.push({\r\n            pathname: \"/addlocation\",\r\n            defaultData: {\r\n                prevUrl: \"/addcdream\",\r\n            }\r\n        });\r\n    };\r\n\r\n    const handleChangeRealistics = (event, newValue) => {\r\n        setRealisticsValue(newValue);\r\n    };\r\n\r\n    const handleChangeLocations = (event, value) => {\r\n        setselectedLocations(value);\r\n    };\r\n\r\n    const handleChangeTechnics = (event, value) => {\r\n        setselectedTechnics(value);\r\n    };\r\n\r\n    const blurTitle = (event) => {\r\n        setTitleText(event.target.value);\r\n    };\r\n\r\n    const handleDateChange = date => {\r\n        saveToLocalStorage();\r\n        setSelectedDate(date);\r\n    };\r\n\r\n    const changeContent = (state) => {\r\n        const currCont = state.getCurrentContent();\r\n        const convert = convertToRaw(currCont);\r\n        const content = JSON.stringify(convert);\r\n        if (prevContentText !== content) {\r\n            saveToLocalStorage();\r\n            setPrevContentText(content);\r\n        }\r\n    };\r\n\r\n    const savepost = () => {\r\n        setIsLoading(true);\r\n        let havErr = false;\r\n        let errorMessage = '';\r\n        if (typeof (titleText) !== 'undefined') {\r\n            if (titleText.length === 0) {\r\n                errorMessage = lang.currLang.errors.EmptyTitle;\r\n                havErr = true;\r\n            }\r\n        }\r\n        else {\r\n            errorMessage = lang.currLang.errors.EmptyTitle;\r\n            havErr = true;\r\n        }\r\n        if (typeof (prevContentText) !== 'undefined') {\r\n            if (JSON.parse(prevContentText).blocks[0].text.length === 0) {\r\n                errorMessage = lang.currLang.errors.EmptyDream;\r\n                havErr = true;\r\n            }\r\n        }\r\n        else {\r\n            errorMessage = lang.currLang.errors.EmptyDream;\r\n            havErr = true;\r\n        }\r\n        if (havErr) {\r\n            setSnackbar({\r\n                type: SET_SNACKBAR_MODE,\r\n                snackbar: {\r\n                    open: true,\r\n                    variant: 'error',\r\n                    message: errorMessage,\r\n                },\r\n            });\r\n            setIsLoading(false);\r\n        }\r\n        else {\r\n            if (isEditMode) {\r\n                let hasChanges = false;\r\n                let tagChanges = false;\r\n                let techChanges = false;\r\n                let postData = {\r\n                    post_id: props.location.defaultData.post_id,\r\n                };\r\n\r\n                if (props.location.defaultData.post_title !== titleText) {\r\n                    postData.title = titleText;\r\n                    hasChanges = true;\r\n                }\r\n\r\n                if (props.location.defaultData.dream_date.getTime() !== selectedDate.getTime()) {\r\n                    postData.dreamDate = selectedDate.toLocaleString(\"ru-RU\", { timeZone: 'Europe/London' });\r\n                    hasChanges = true;\r\n                }\r\n\r\n                if (props.location.defaultData.post_content !== prevContentText) {\r\n                    postData.content = prevContentText;\r\n                    hasChanges = true;\r\n                }\r\n\r\n                if (props.location.defaultData.rating !== realisticsValue) {\r\n                    postData.rating = realisticsValue;\r\n                    hasChanges = true;\r\n                }\r\n\r\n                if (defaultTechnics.length === selectedTechnics.length) {\r\n                    if (!compare(defaultTechnics, selectedTechnics)) {\r\n                        hasChanges = true;\r\n                        techChanges = true;\r\n                    }\r\n                }\r\n                else {\r\n                    hasChanges = true;\r\n                    techChanges = true;\r\n                }\r\n\r\n                if (defaultTags.length === selectedLocations.length) {\r\n                    if (!compare(defaultTags, selectedLocations)) {\r\n                        hasChanges = true;\r\n                        tagChanges = true;\r\n                    }\r\n                }\r\n                else {\r\n                    hasChanges = true;\r\n                    tagChanges = true;\r\n                }\r\n\r\n                if (hasChanges) {\r\n                    if (tagChanges) {\r\n                        let deleteTags = defaultTags.filter(item1 =>\r\n                            !selectedLocations.some(item2 => (\r\n                                item2.id === item1.id)\r\n                            )\r\n                        );\r\n                        let addTags = selectedLocations.filter(item1 =>\r\n                            !defaultTags.some(item2 => (\r\n                                item2.id === item1.id)\r\n                            )\r\n                        );\r\n                        if (addTags.length > 0) {\r\n                            let add = {};\r\n                            addTags.map((item, key) => (\r\n                                add[key] = item\r\n                            ));\r\n                            postData.tags = { ...postData.tags, add: add };\r\n                        }\r\n                        if (deleteTags.length > 0) {\r\n                            let remove = {};\r\n                            deleteTags.map((item, key) => (\r\n                                remove[key] = item\r\n                            ));\r\n                            postData.tags = { ...postData.tags, remove: remove };\r\n                        }\r\n                    }\r\n                    if (techChanges) {\r\n                        let deleteTech = defaultTechnics.filter(item1 =>\r\n                            !selectedTechnics.some(item2 => (\r\n                                item2.id === item1.id)\r\n                            )\r\n                        );\r\n                        let addTech = selectedTechnics.filter(item1 =>\r\n                            !defaultTechnics.some(item2 => (\r\n                                item2.id === item1.id)\r\n                            )\r\n                        );\r\n                        if (addTech.length > 0) {\r\n                            let add = {};\r\n                            addTech.map((item, key) => (\r\n                                add[key] = item\r\n                            ));\r\n                            postData.technics = { ...postData.technics, add: add };\r\n                        }\r\n                        if (deleteTech.length > 0) {\r\n                            let remove = {};\r\n                            deleteTech.map((item, key) => (\r\n                                remove[key] = item\r\n                            ));\r\n                            postData.technics = { ...postData.technics, remove: remove };\r\n                        }\r\n                    }\r\n                    instance\r\n                        .post('/actions/users/updatepost', postData)\r\n                        .then(res => {\r\n                            setIsLoading(false);\r\n                            setSnackbar({\r\n                                type: SET_SNACKBAR_MODE,\r\n                                snackbar: {\r\n                                    open: true,\r\n                                    variant: 'success',\r\n                                    message: lang.currLang.texts.success,\r\n                                },\r\n                            });\r\n                            window.localStorage.removeItem(\"postСDreamData\");\r\n                            history.push(\"/dreams\")\r\n                        })\r\n                        .catch(err => {\r\n                            console.log(err);\r\n                            setIsLoading(false);\r\n                        });\r\n                }\r\n                else {\r\n                    setSnackbar({\r\n                        type: SET_SNACKBAR_MODE,\r\n                        snackbar: {\r\n                            open: true,\r\n                            variant: 'error',\r\n                            message: lang.currLang.errors.NoChanges,\r\n                        },\r\n                    });\r\n                    setIsLoading(false);\r\n                }\r\n            }\r\n            else {\r\n                let postData = {\r\n                    title: titleText,\r\n                    dreamDate: selectedDate.toLocaleString(\"ru-RU\", { timeZone: 'Europe/London' }),\r\n                    content: prevContentText,\r\n                    create_user: auth.user.id,\r\n                    rating: realisticsValue,\r\n                    post_type: 1,\r\n                    nickname: auth.user.nickname,\r\n                    tags: selectedLocations,\r\n                    technics: selectedTechnics\r\n                }\r\n\r\n                instance\r\n                    .post('/actions/users/createpost', postData)\r\n                    .then(res => {\r\n                        setIsLoading(false);\r\n                        setSnackbar({\r\n                            type: SET_SNACKBAR_MODE,\r\n                            snackbar: {\r\n                                open: true,\r\n                                variant: 'success',\r\n                                message: lang.currLang.texts.success,\r\n                            },\r\n                        });\r\n                        window.localStorage.removeItem(\"postСDreamData\");\r\n                        history.push(\"/luciddreams\")\r\n                    })\r\n                    .catch(err => {\r\n                        setIsLoading(false);\r\n                    });\r\n            }\r\n        }\r\n    };\r\n\r\n    const saveToLocalStorage = () => {\r\n        let data = {};\r\n        if (window.localStorage.getItem(\"postСDreamData\")) {\r\n            data = JSON.parse(window.localStorage.getItem(\"postСDreamData\"));\r\n        }\r\n        data.selectedDate = selectedDate;\r\n        if (titleText.length !== 0) {\r\n            data.titleText = titleText;\r\n        }\r\n        if (typeof prevContentText !== 'undefined')\r\n            if (prevContentText.length !== 0) {\r\n                data.contentText = prevContentText;\r\n            }\r\n        window.localStorage.setItem(\"postСDreamData\", JSON.stringify(data));\r\n    };\r\n\r\n    const loadFromLocalStorage = () => {\r\n        const { selectedDate, titleText, contentText } = JSON.parse(window.localStorage.getItem(\"postСDreamData\"));\r\n        if (typeof selectedDate !== 'undefined') {\r\n            setSelectedDate(new Date(selectedDate));\r\n        }\r\n        if (typeof titleText !== 'undefined') {\r\n            setTitleText(titleText);\r\n        }\r\n        if (typeof contentText !== 'undefined') {\r\n            setContentText(contentText);\r\n            setPrevContentText(contentText);\r\n        }\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        if (window.localStorage.getItem(\"postСDreamData\"))\r\n            loadFromLocalStorage();\r\n\r\n        defaultTechnics = [];\r\n        defaultTags = [];\r\n        instance.get(\"/gettags\")\r\n            .then(res => {\r\n                setLocations(res.data);\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            });\r\n        instance.get(\"/gettechnics\")\r\n            .then(res => {\r\n                setTechnics(res.data);\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            });\r\n\r\n        if (typeof (props.location.defaultData) !== 'undefined') {\r\n            setIsEditMode(true);\r\n            defaultTechnics = [];\r\n            defaultTags = [];\r\n            const { post_title, dream_date, post_content, technics, tags, rating } = props.location.defaultData;\r\n            setTitleText(post_title);\r\n            setSelectedDate(dream_date);\r\n            setContentText(post_content);\r\n            setPrevContentText(post_content);\r\n\r\n            if (typeof tags[0][0] === 'string') {\r\n                tags.forEach(item => {\r\n                    let location = {};\r\n                    location.id = Number(item[0]);\r\n                    location.name_rus = item[1];\r\n                    location.name_eng = item[2];\r\n                    location.img_url = item[3];\r\n                    defaultTags.push(location);\r\n                });\r\n                setselectedLocations(defaultTags);\r\n            }\r\n\r\n            if (typeof technics[0][0] === 'string') {\r\n                technics.forEach(item => {\r\n                    let tech = {};\r\n                    tech.id = Number(item[0]);\r\n                    tech.name_rus = item[1];\r\n                    tech.name_eng = item[2];\r\n                    defaultTechnics.push(tech);\r\n                });\r\n                setselectedTechnics(defaultTechnics);\r\n            }\r\n\r\n            setRealisticsValue(rating);\r\n        }\r\n    }, [props.location.defaultData, lang.currLang]);\r\n\r\n    return (\r\n        <MuiThemeProvider theme={muiTheme}>\r\n            <CssBaseline />\r\n            <div className={classes.root} >\r\n                <Grid className={classes.mainGridContainer}\r\n                    container\r\n                    direction=\"column\"\r\n                    justify=\"center\"\r\n                    alignItems=\"stretch\" >\r\n                    <Grid item xs={11} className={classes.mainGridBodyItem}>\r\n                        <Paper className={classes.paper}>\r\n                            <Grid className={`${classes.mainGridContainer} ${classes.noWrap}`}\r\n                                container\r\n                                direction=\"column\"\r\n                                justify=\"center\"\r\n                                alignItems=\"center\" >\r\n                                <Grid item xs={2} className={classes.fullMinWidth} >\r\n                                    <TextField className={classes.inputDiv}\r\n                                        required\r\n                                        id=\"outlined-required\"\r\n                                        value={titleText}\r\n                                        label={lang.currLang.texts.title}\r\n                                        variant=\"outlined\"\r\n                                        onChange={(e) => { blurTitle(e) }}\r\n                                        onBlur={saveToLocalStorage}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={1} className={classes.fullMinWidth} >\r\n                                    <MuiPickersUtilsProvider utils={DateFnsUtils}\r\n                                        locale={lang.currLang.current === \"Ru\"\r\n                                            ? ruLocale\r\n                                            : enLocale}\r\n                                    >\r\n                                        <Grid className={classes.pickerGridContainer}\r\n                                            container\r\n                                            direction=\"row\"\r\n                                            justify=\"center\"\r\n                                            alignItems=\"stretch\" >\r\n                                            <Grid item xs={7} >\r\n                                                <KeyboardDatePicker className={classes.pickers}\r\n                                                    id=\"date-picker-dialog\"\r\n                                                    label={lang.currLang.texts.pickDate}\r\n                                                    format=\"dd.MM.yyyy\"\r\n                                                    value={selectedDate}\r\n                                                    onChange={handleDateChange}\r\n                                                    KeyboardButtonProps={{\r\n                                                        'aria-label': 'change date',\r\n                                                    }}\r\n                                                />\r\n                                            </Grid>\r\n                                            <Grid item xs={5} >\r\n                                                <KeyboardTimePicker className={classes.pickers}\r\n                                                    id=\"time-picker\"\r\n                                                    label={lang.currLang.texts.pickTime}\r\n                                                    value={selectedDate}\r\n                                                    onChange={handleDateChange}\r\n                                                    ampm={false}\r\n                                                    KeyboardButtonProps={{\r\n                                                        'aria-label': 'change time',\r\n                                                    }}\r\n                                                />\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </MuiPickersUtilsProvider>\r\n                                </Grid>\r\n                                <Grid item xs={4} className={classes.fullMinWidth} >\r\n                                    <div className={classes.inputScrollableDiv}>\r\n                                        <MUIRichTextEditor\r\n                                            value={contentText}\r\n                                            onChange={changeContent}\r\n                                            label={lang.currLang.texts.content}\r\n                                            inlineToolbar={false}\r\n                                            controls={[\r\n                                                \"bold\",\r\n                                                \"italic\",\r\n                                                \"underline\",\r\n                                                \"strikethrough\",\r\n                                                \"colorfill\",\r\n                                            ]}\r\n                                            customControls={[\r\n                                                {\r\n                                                    name: \"colorfill\",\r\n                                                    icon: <FormatColorFillIcon />,\r\n                                                    type: \"inline\",\r\n                                                    inlineStyle: {\r\n                                                        backgroundColor: \"yellow\",\r\n                                                        color: \"black\"\r\n                                                    }\r\n                                                }\r\n                                            ]}\r\n                                        />\r\n                                    </div>\r\n                                </Grid>\r\n                                <Grid item xs={2} className={classes.fullMinWidth}>\r\n                                    <Grid container\r\n                                        className={classes.mainGridContainer}\r\n                                        direction=\"row\"\r\n                                        justify=\"center\"\r\n                                        alignItems=\"center\"\r\n                                    >\r\n                                        <Grid item xs={12} style={{ position: 'relative' }}>\r\n                                            {technics.length\r\n                                                ? <Autocomplete\r\n                                                    multiple\r\n                                                    className={classes.inputDiv}\r\n                                                    id=\"technics-outlined\"\r\n                                                    size=\"small\"\r\n                                                    options={technics}\r\n                                                    getOptionLabel={option => (\r\n                                                        <Chip\r\n                                                            size=\"small\"\r\n                                                            className={classes.chip}\r\n                                                            label={\r\n                                                                lang.currLang.current === \"Ru\"\r\n                                                                    ? option.name_rus\r\n                                                                    : option.name_eng\r\n                                                            }\r\n                                                        />\r\n                                                    )}\r\n                                                    defaultValue={\r\n                                                        defaultTechnics.map(item => {\r\n                                                            return technics[item.id - 1];\r\n                                                        })}\r\n                                                    onChange={(event, value) => handleChangeTechnics(event, value)}\r\n                                                    filterSelectedOptions\r\n                                                    renderInput={params => (\r\n                                                        <TextField\r\n                                                            {...params}\r\n                                                            label={lang.currLang.texts.technics}\r\n                                                            fullWidth\r\n                                                        />\r\n                                                    )}\r\n                                                />\r\n                                                : <div className={classes.inputDiv}>\r\n                                                    <LinearProgress />\r\n                                                </div>\r\n                                            }\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                                <Grid item xs={2} className={classes.fullMinWidth}>\r\n                                    <Grid container\r\n                                        className={classes.mainGridContainer}\r\n                                        direction=\"row\"\r\n                                        justify=\"center\"\r\n                                        alignItems=\"center\"\r\n                                    >\r\n                                        <Grid item xs={10} style={{ position: 'relative' }}>\r\n                                            {locations.length\r\n                                                ? <Autocomplete\r\n                                                    multiple\r\n                                                    className={classes.inputDiv}\r\n                                                    id=\"tags-outlined\"\r\n                                                    size=\"small\"\r\n                                                    options={locations}\r\n                                                    getOptionLabel={option => (\r\n                                                        <Chip\r\n                                                            size=\"small\"\r\n                                                            className={classes.chip}\r\n                                                            avatar={\r\n                                                                <Avatar src={option.img_url} />\r\n                                                            }\r\n                                                            label={\r\n                                                                lang.currLang.current === \"Ru\"\r\n                                                                    ? option.name_rus\r\n                                                                    : option.name_eng\r\n                                                            }\r\n                                                        />\r\n                                                    )}\r\n                                                    defaultValue={\r\n                                                        defaultTags.map(item => {\r\n                                                            return locations[item.id - 1];\r\n                                                        })}\r\n                                                    onChange={(event, value) => handleChangeLocations(event, value)}\r\n                                                    filterSelectedOptions\r\n                                                    renderInput={params => (\r\n                                                        <TextField\r\n                                                            {...params}\r\n                                                            label={lang.currLang.texts.tags}\r\n                                                            fullWidth\r\n                                                        />\r\n                                                    )}\r\n                                                />\r\n                                                : <div className={classes.inputDiv}>\r\n                                                    <LinearProgress />\r\n                                                </div>\r\n                                            }\r\n                                        </Grid>\r\n                                        <Grid item xs={2}>\r\n                                            <IconButton onClick={addLocation}>\r\n                                                <AddIcon fontSize=\"small\" />\r\n                                            </IconButton>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                                <Grid item xs={1} className={classes.fullMinWidth} >\r\n                                    <div className={classes.div85width}>\r\n                                        <Grid className={classes.ratingGridContainer}\r\n                                            container\r\n                                            direction=\"row\"\r\n                                            justify=\"center\"\r\n                                            alignItems=\"stretch\" >\r\n                                            <Grid item xs={6}>\r\n                                                <Typography variant=\"body2\">\r\n                                                    {lang.currLang.texts.rating}:\r\n                                                </Typography>\r\n                                            </Grid>\r\n                                            <Grid item xs={6}>\r\n                                                <Rating name=\"simple-controlled\"\r\n                                                    value={realisticsValue}\r\n                                                    onChange={handleChangeRealistics}\r\n                                                />\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </div>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Paper>\r\n                    </Grid>\r\n                    <Grid item xs={1} className={classes.mainGridBodyItem} >\r\n                        {isLoading\r\n                            ? <LinearProgress />\r\n                            : <Grid\r\n                                container\r\n                                direction=\"row\"\r\n                                justify=\"space-evenly\"\r\n                                alignItems=\"center\"\r\n                            >\r\n                                <Grid item>\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        color=\"secondary\"\r\n                                        className={classes.actionButton}\r\n                                        onClick={() => {\r\n                                            window.localStorage.removeItem(\"postСDreamData\");\r\n                                            isEditMode\r\n                                                ? history.push(\"/dreams\")\r\n                                                : history.push(\"/luciddreams\");\r\n                                        }}\r\n                                    >\r\n                                        {lang.currLang.buttons.close}\r\n                                    </Button>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        color=\"primary\"\r\n                                        className={classes.actionButton}\r\n                                        onClick={() => savepost()}\r\n                                    >\r\n                                        {isEditMode\r\n                                            ? lang.currLang.buttons.Save\r\n                                            : lang.currLang.buttons.add\r\n                                        }\r\n                                    </Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                        }\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </MuiThemeProvider >\r\n    );\r\n};\r\n\r\nAddCDream.propTypes = {\r\n    setSnackbar: PropTypes.func.isRequired,\r\n    themeMode: PropTypes.object.isRequired,\r\n    lang: PropTypes.object.isRequired,\r\n    auth: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        themeMode: store.themeMode,\r\n        lang: store.lang,\r\n        auth: store.auth,\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setSnackbar: snackbar => dispatch(setSnackbar(snackbar)),\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(AddCDream);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport SwipeableViews from \"react-swipeable-views\";\r\n\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from '@material-ui/core/Button';\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Tab from \"@material-ui/core/Tab\";\r\n\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\n\r\nimport { useStyles } from '../styles/Styles';\r\nimport { setSnackbar } from '../actions/Actions';\r\nimport { SET_SNACKBAR_MODE } from \"../actions/types\";\r\nimport { instance } from './Config';\r\n\r\nfunction AddTechnics(props) {\r\n    const classes = useStyles();\r\n    const { lang, themeMode, history, setSnackbar } = props;\r\n    const muiTheme = createMuiTheme(themeMode);\r\n    const [isLoading, setIsLoading] = React.useState(false);\r\n    const [isEditMode, setIsEditMode] = React.useState(false);\r\n    const [value, setValue] = React.useState(0);\r\n    const [technicsData, setTechnicsData] = React.useState({\r\n        titleRu: '',\r\n        titleEn: '',\r\n        descriptionRu: '',\r\n        descriptionEn: '',\r\n    });\r\n    const [fileldsErr, setFileldsErr] = React.useState({\r\n        titleRu: false,\r\n        titleEn: false,\r\n        descriptionRu: false,\r\n        descriptionEn: false,\r\n    });\r\n\r\n    const changeData = (event, field) => {\r\n        let newTechnicsData = technicsData;\r\n        let newFileldsErr = fileldsErr;\r\n        switch (field) {\r\n            case 'title-ru':\r\n                newTechnicsData = { ...newTechnicsData, titleRu: event.target.value };\r\n                if (newFileldsErr.titleRu) {\r\n                    newFileldsErr = { ...newFileldsErr, titleRu: false };\r\n                    setFileldsErr(newFileldsErr);\r\n                }\r\n                break;\r\n            case 'title-en':\r\n                newTechnicsData = { ...newTechnicsData, titleEn: event.target.value };\r\n                if (newFileldsErr.titleEn) {\r\n                    newFileldsErr = { ...newFileldsErr, titleEn: false };\r\n                    setFileldsErr(newFileldsErr);\r\n                }\r\n                break;\r\n            case 'description-ru':\r\n                newTechnicsData = { ...newTechnicsData, descriptionRu: event.target.value };\r\n                if (newFileldsErr.descriptionRu) {\r\n                    newFileldsErr = { ...newFileldsErr, descriptionRu: false };\r\n                    setFileldsErr(newFileldsErr);\r\n                }\r\n                break;\r\n            case 'description-en':\r\n                newTechnicsData = { ...newTechnicsData, descriptionEn: event.target.value };\r\n                if (newFileldsErr.descriptionEn) {\r\n                    newFileldsErr = { ...newFileldsErr, descriptionEn: false };\r\n                    setFileldsErr(newFileldsErr);\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        setTechnicsData(newTechnicsData);\r\n    };\r\n\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue);\r\n    };\r\n\r\n    const handleChangeIndex = index => {\r\n        setValue(index);\r\n    };\r\n\r\n    const save = () => {\r\n        setIsLoading(true);\r\n        if (!isEditMode) {\r\n            let isError = false;\r\n            let errorMessage = '';\r\n            let newFileldsErr = fileldsErr;\r\n\r\n            if (technicsData.titleRu.length === 0) {\r\n                isError = true;\r\n                errorMessage = lang.currLang.errors.EmptyTitle;\r\n                newFileldsErr = { ...newFileldsErr, titleRu: true };\r\n                setValue(0);\r\n            }\r\n            if (technicsData.titleEn.length === 0 && !isError) {\r\n                isError = true;\r\n                errorMessage = lang.currLang.errors.EmptyTitle;\r\n                newFileldsErr = { ...newFileldsErr, titleEn: true };\r\n                setValue(1);\r\n            }\r\n            if (technicsData.descriptionRu.length === 0 && !isError) {\r\n                isError = true;\r\n                errorMessage = lang.currLang.errors.EmptyDescription;\r\n                newFileldsErr = { ...newFileldsErr, descriptionRu: true };\r\n                setValue(0);\r\n            }\r\n            if (technicsData.descriptionEn.length === 0 && !isError) {\r\n                isError = true;\r\n                errorMessage = lang.currLang.errors.EmptyDescription;\r\n                newFileldsErr = { ...newFileldsErr, descriptionEn: true };\r\n                setValue(1);\r\n            }\r\n\r\n            if (isError) {\r\n                setFileldsErr(newFileldsErr);\r\n                setSnackbar({\r\n                    type: SET_SNACKBAR_MODE,\r\n                    snackbar: {\r\n                        open: true,\r\n                        variant: 'error',\r\n                        message: errorMessage,\r\n                    },\r\n                });\r\n                setIsLoading(false);\r\n            }\r\n            else {\r\n                instance\r\n                    .post('/actions/users/createtechnic', technicsData)\r\n                    .then(res => {\r\n                        setIsLoading(false);\r\n                        setSnackbar({\r\n                            type: SET_SNACKBAR_MODE,\r\n                            snackbar: {\r\n                                open: true,\r\n                                variant: 'success',\r\n                                message: lang.currLang.texts.success,\r\n                            },\r\n                        });\r\n                        history.push(\"/addtechnics\")\r\n                    })\r\n                    .catch(err => {\r\n                        console.log(err);\r\n                        setIsLoading(false);\r\n                    });\r\n            }\r\n        }\r\n        else {\r\n            let haveChanges = false;\r\n            let postData = {\r\n                id: props.location.defaultData.item.id,\r\n            };\r\n\r\n            if (technicsData.titleRu !== props.location.defaultData.item.name_rus) {\r\n                postData.name_rus = technicsData.titleRu;\r\n                haveChanges = true;\r\n            }\r\n            if (technicsData.descriptionRu !== props.location.defaultData.item.description_rus) {\r\n                postData.description_rus = technicsData.descriptionRu;\r\n                haveChanges = true;\r\n            }\r\n            if (technicsData.titleEn !== props.location.defaultData.item.name_eng) {\r\n                postData.name_eng = technicsData.titleEn;\r\n                haveChanges = true;\r\n            }\r\n            if (technicsData.descriptionEn !== props.location.defaultData.item.description_eng) {\r\n                postData.description_eng = technicsData.descriptionEn;\r\n                haveChanges = true;\r\n            }\r\n\r\n            if (haveChanges) {\r\n                instance\r\n                    .post('/actions/users/updatetechnic', postData)\r\n                    .then(res => {\r\n                        setIsLoading(false);\r\n                        setSnackbar({\r\n                            type: SET_SNACKBAR_MODE,\r\n                            snackbar: {\r\n                                open: true,\r\n                                variant: 'success',\r\n                                message: lang.currLang.texts.success,\r\n                            },\r\n                        });\r\n                        history.push(\"/addtechnics\")\r\n                    })\r\n                    .catch(err => {\r\n                        console.log(err);\r\n                        setIsLoading(false);\r\n                    });\r\n                setIsLoading(false);\r\n            }\r\n            else {\r\n                setSnackbar({\r\n                    type: SET_SNACKBAR_MODE,\r\n                    snackbar: {\r\n                        open: true,\r\n                        variant: 'error',\r\n                        message: lang.currLang.errors.NoChanges,\r\n                    },\r\n                });\r\n                setIsLoading(false);\r\n            }\r\n        }\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        if (typeof (props.location.defaultData) !== 'undefined') {\r\n            setIsEditMode(true);\r\n            const { name_rus, name_eng, description_rus, description_eng } = props.location.defaultData.item;\r\n            let newTechnicsData = {};\r\n            newTechnicsData = { ...newTechnicsData, titleRu: name_rus };\r\n            newTechnicsData = { ...newTechnicsData, titleEn: name_eng };\r\n            if (description_rus)\r\n                newTechnicsData = { ...newTechnicsData, descriptionRu: description_rus };\r\n            else\r\n                newTechnicsData = { ...newTechnicsData, descriptionRu: 'description_rus' };\r\n            if (description_eng)\r\n                newTechnicsData = { ...newTechnicsData, descriptionEn: description_eng };\r\n            else\r\n                newTechnicsData = { ...newTechnicsData, descriptionEn: 'description_eng' };\r\n            setTechnicsData(newTechnicsData);\r\n        }\r\n    }, [props.location.defaultData]);\r\n\r\n    return (\r\n        <MuiThemeProvider theme={muiTheme}>\r\n            <CssBaseline />\r\n            <div className={classes.root} >\r\n                <Grid container\r\n                    className={`${classes.height12}`}\r\n                    direction=\"column\"\r\n                    justify=\"center\"\r\n                    alignItems=\"stretch\" >\r\n                    <Grid item className={`${classes.mainGridBodyItem} ${classes.height11}`}>\r\n                        <Paper className={classes.paper}>\r\n                            <Paper style={{\r\n                                position: 'relative',\r\n                                height: '10%',\r\n                            }}>\r\n                                <Tabs centered\r\n                                    value={value}\r\n                                    onChange={handleChange}\r\n                                    indicatorColor=\"primary\"\r\n                                    textColor=\"primary\"\r\n                                >\r\n                                    <Tab label=\"RU\" />\r\n                                    <Tab label=\"EN\" />\r\n                                </Tabs>\r\n                            </Paper>\r\n                            <SwipeableViews className={classes.SwipeableViews}\r\n                                animateHeight\r\n                                axis={\r\n                                    muiTheme.direction === \"rtl\"\r\n                                        ? \"x-reverse\"\r\n                                        : \"x\"\r\n                                }\r\n                                index={value}\r\n                                onChangeIndex={handleChangeIndex}\r\n                            >\r\n                                <Grid container\r\n                                    className={`${classes.height12}`}\r\n                                    direction=\"column\"\r\n                                    justify=\"center\"\r\n                                    alignItems=\"stretch\"\r\n                                    role=\"tabpanel\"\r\n                                >\r\n                                    <Grid item className={`${classes.mainGridBodyItem} ${classes.height2}`}>\r\n                                        <TextField className={classes.inputDiv}\r\n                                            error={fileldsErr.titleRu}\r\n                                            required\r\n                                            id=\"title-ru\"\r\n                                            value={technicsData.titleRu}\r\n                                            label={lang.currLang.texts.title}\r\n                                            variant=\"outlined\"\r\n                                            onChange={(e) => { changeData(e, 'title-ru') }}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item className={`${classes.mainGridBodyItem} ${classes.height10}`}>\r\n                                        <TextField className={classes.inputDiv}\r\n                                            error={fileldsErr.descriptionRu}\r\n                                            required\r\n                                            id=\"description-ru\"\r\n                                            multiline\r\n                                            rows=\"5\"\r\n                                            value={technicsData.descriptionRu}\r\n                                            label={lang.currLang.texts.description}\r\n                                            variant=\"outlined\"\r\n                                            onChange={(e) => { changeData(e, 'description-ru') }}\r\n                                        />\r\n                                    </Grid>\r\n                                </Grid>\r\n                                <Grid container\r\n                                    className={`${classes.height12}`}\r\n                                    direction=\"column\"\r\n                                    justify=\"center\"\r\n                                    alignItems=\"stretch\"\r\n                                    role=\"tabpanel\"\r\n                                >\r\n                                    <Grid item className={`${classes.mainGridBodyItem} ${classes.height2}`}>\r\n                                        <TextField className={classes.inputDiv}\r\n                                            error={fileldsErr.titleEn}\r\n                                            required\r\n                                            id=\"title-en\"\r\n                                            value={technicsData.titleEn}\r\n                                            label={lang.currLang.texts.title}\r\n                                            variant=\"outlined\"\r\n                                            onChange={(e) => { changeData(e, 'title-en') }}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item className={`${classes.mainGridBodyItem} ${classes.height10}`}>\r\n                                        <TextField className={classes.inputDiv}\r\n                                            error={fileldsErr.descriptionEn}\r\n                                            required\r\n                                            id=\"description-en\"\r\n                                            multiline\r\n                                            rows=\"5\"\r\n                                            value={technicsData.descriptionEn}\r\n                                            label={lang.currLang.texts.description}\r\n                                            variant=\"outlined\"\r\n                                            onChange={(e) => { changeData(e, 'description-en') }}\r\n                                        />\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </SwipeableViews>\r\n                        </Paper>\r\n                    </Grid>\r\n                    <Grid item className={`${classes.mainGridBodyItem} ${classes.height1}`}>\r\n                        {isLoading\r\n                            ? <LinearProgress />\r\n                            : <Grid container\r\n                                direction=\"row\"\r\n                                justify=\"space-evenly\"\r\n                                alignItems=\"center\"\r\n                            >\r\n                                <Grid item>\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        color=\"secondary\"\r\n                                        className={classes.actionButton}\r\n                                        onClick={() => { history.push(\"/technics\") }}\r\n                                    >\r\n                                        {lang.currLang.buttons.close}\r\n                                    </Button>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        color=\"primary\"\r\n                                        className={classes.actionButton}\r\n                                        onClick={() => save()}\r\n                                    >\r\n                                        {isEditMode\r\n                                            ? lang.currLang.buttons.Save\r\n                                            : lang.currLang.buttons.add\r\n                                        }\r\n                                    </Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                        }\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </MuiThemeProvider>\r\n    )\r\n}\r\n\r\nAddTechnics.propTypes = {\r\n    setSnackbar: PropTypes.func.isRequired,\r\n    themeMode: PropTypes.object.isRequired,\r\n    lang: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        themeMode: store.themeMode,\r\n        lang: store.lang,\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setSnackbar: snackbar => dispatch(setSnackbar(snackbar)),\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(AddTechnics);","import React from 'react';\r\nimport clsx from \"clsx\";\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport MUIRichTextEditor from 'mui-rte';\r\nimport { EditorState, convertFromRaw } from 'draft-js';\r\n\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport CardHeader from \"@material-ui/core/CardHeader\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Collapse from \"@material-ui/core/Collapse\";\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Button from '@material-ui/core/Button';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Card from \"@material-ui/core/Card\";\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport Menu from '@material-ui/core/Menu';\r\n\r\nimport Rating from \"@material-ui/lab/Rating\";\r\n\r\nimport FormatColorFillIcon from '@material-ui/icons/FormatColorFill';\r\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport Visibility from '@material-ui/icons/Visibility';\r\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\n\r\nimport { useStyles } from '../../styles/Styles';\r\n\r\nimport { instance } from '../Config';\r\n\r\nimport { SET_SNACKBAR_MODE } from \"../../actions/types\";\r\nimport { setSnackbar } from '../../actions/Actions';\r\n\r\nfunction DreamCard(props) {\r\n    const classes = useStyles();\r\n    const { post_id, post_title, post_content, post_type, tags, technics, rating, dream_date, is_public } = props.item;\r\n    const { lang, palette, history, setSnackbar } = props;\r\n    const [expanded, setExpanded] = React.useState(false);\r\n    const [anchorEl, setAnchorEl] = React.useState(null);\r\n    const [openAlert, setOpenAlert] = React.useState(false);\r\n    const [publicChecked, setPublicChecked] = React.useState(false);\r\n    const [alertTexts, setAlertTexts] = React.useState({\r\n        header: '',\r\n        body: '',\r\n        commit: '',\r\n        action: '',\r\n    });\r\n    const dateOfDream = new Date(dream_date).getDate() + '.' + (new Date(dream_date).getMonth() + 1) + '.' + new Date(dream_date).getFullYear() + ' ' + new Date(dream_date).getHours() + ':' + (\"0\" + new Date(dream_date).getMinutes()).slice(-2);\r\n    const srcContent = post_content.toString();\r\n    const jsonPparse = JSON.parse(srcContent);\r\n    const convertfromraw = convertFromRaw(jsonPparse);\r\n    const text_content = EditorState.createWithContent(convertfromraw).getCurrentContent().getPlainText('');\r\n\r\n    React.useEffect(() => {\r\n        is_public === 1\r\n            ? setPublicChecked(true)\r\n            : setPublicChecked(false);\r\n    }, [is_public]);\r\n\r\n    const openMenu = event => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const closeMenu = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    const clickMenu = (action, event) => {\r\n        let newAlertTexts = alertTexts;\r\n        switch (action) {\r\n            case 'public':\r\n                if (event.target.checked) {\r\n                    newAlertTexts = { ...newAlertTexts, header: lang.currLang.texts.PublicAlert };\r\n                    newAlertTexts = { ...newAlertTexts, body: lang.currLang.texts.PublicText };\r\n                    newAlertTexts = { ...newAlertTexts, commit: lang.currLang.texts.Publish };\r\n                    newAlertTexts = { ...newAlertTexts, action: 'publicOk' };\r\n                    setAlertTexts(newAlertTexts);\r\n                }\r\n                else {\r\n                    newAlertTexts = { ...newAlertTexts, header: lang.currLang.texts.UnpublicAlert };\r\n                    newAlertTexts = { ...newAlertTexts, body: lang.currLang.texts.UnpublicText };\r\n                    newAlertTexts = { ...newAlertTexts, commit: lang.currLang.texts.Unpublish };\r\n                    newAlertTexts = { ...newAlertTexts, action: 'publicOk' };\r\n                    setAlertTexts(newAlertTexts);\r\n                }\r\n                setOpenAlert(true);\r\n                closeMenu();\r\n                break;\r\n\r\n            case 'edit':\r\n                closeMenu();\r\n                if (post_type === 0) {\r\n                    history.push({\r\n                        pathname: \"/addregulardream\",\r\n                        defaultData: {\r\n                            post_id: post_id,\r\n                            post_title: post_title,\r\n                            dream_date: new Date(dream_date),\r\n                            post_content: post_content,\r\n                            tags: tags,\r\n                        }\r\n                    });\r\n                }\r\n                else if (post_type === 1) {\r\n                    history.push({\r\n                        pathname: \"/addcdream\",\r\n                        defaultData: {\r\n                            post_id: post_id,\r\n                            post_title: post_title,\r\n                            dream_date: new Date(dream_date),\r\n                            post_content: post_content,\r\n                            tags: tags,\r\n                            technics: technics,\r\n                            rating: rating,\r\n                        }\r\n                    });\r\n                }\r\n                break;\r\n\r\n            case 'delete':\r\n                newAlertTexts = { ...newAlertTexts, header: lang.currLang.texts.DeleteAlert };\r\n                newAlertTexts = { ...newAlertTexts, body: lang.currLang.texts.DeleteText };\r\n                newAlertTexts = { ...newAlertTexts, commit: lang.currLang.buttons.Delete };\r\n                newAlertTexts = { ...newAlertTexts, action: 'deleteOk' };\r\n                setAlertTexts(newAlertTexts);\r\n                closeMenu();\r\n                setOpenAlert(true);\r\n                break;\r\n\r\n            case 'closeAlert':\r\n                setOpenAlert(false);\r\n                break;\r\n\r\n            case 'deleteOk':\r\n                const postData = {\r\n                    post_id: post_id\r\n                };\r\n                instance\r\n                    .post('/actions/users/deletepost', postData)\r\n                    .then(res => {\r\n                        closeMenu();\r\n                        setSnackbar({\r\n                            type: SET_SNACKBAR_MODE,\r\n                            snackbar: {\r\n                                open: true,\r\n                                variant: 'success',\r\n                                message: lang.currLang.texts.success,\r\n                            },\r\n                        });\r\n                        setOpenAlert(false);\r\n                        props.loadPosts();\r\n                    })\r\n                    .catch(err => {\r\n                        setSnackbar({\r\n                            type: SET_SNACKBAR_MODE,\r\n                            snackbar: {\r\n                                open: true,\r\n                                variant: 'error',\r\n                                message: lang.currLang.texts.CantDeletePost,\r\n                            },\r\n                        });\r\n                        closeMenu();\r\n                        setOpenAlert(false);\r\n                    });\r\n                break;\r\n\r\n            case 'publicOk':\r\n                closeMenu();\r\n                setOpenAlert(false);\r\n                if (publicChecked) {\r\n                    const postData = {\r\n                        post_id: post_id,\r\n                        newPublic: 0\r\n                    };\r\n                    instance\r\n                        .post('/actions/users/updatepost', postData)\r\n                        .then(res => {\r\n                            setPublicChecked(false);\r\n                            setSnackbar({\r\n                                type: SET_SNACKBAR_MODE,\r\n                                snackbar: {\r\n                                    open: true,\r\n                                    variant: 'success',\r\n                                    message: lang.currLang.texts.success,\r\n                                },\r\n                            });\r\n                        })\r\n                        .catch(err => {\r\n                            setPublicChecked(true);\r\n                        });\r\n                }\r\n                else {\r\n                    const postData = {\r\n                        post_id: post_id,\r\n                        newPublic: 1,\r\n                    };\r\n                    instance\r\n                        .post('/actions/users/updatepost', postData)\r\n                        .then(res => {\r\n                            setPublicChecked(true);\r\n                            setSnackbar({\r\n                                type: SET_SNACKBAR_MODE,\r\n                                snackbar: {\r\n                                    open: true,\r\n                                    variant: 'success',\r\n                                    message: lang.currLang.texts.success,\r\n                                },\r\n                            });\r\n                        })\r\n                        .catch(err => {\r\n                            setPublicChecked(false);\r\n                        });\r\n                }\r\n                break;\r\n\r\n            default:\r\n                console.log('Command not found');\r\n                break;\r\n        }\r\n    };\r\n\r\n    const handleExpandClick = () => {\r\n        setExpanded(!expanded);\r\n    };\r\n\r\n    return (\r\n        <Grid item className={classes.dreamCardDiv}>\r\n            <Dialog open={openAlert}\r\n                onClose={() => clickMenu('closeAlert')}\r\n                aria-labelledby=\"alert-dialog-title\"\r\n                aria-describedby=\"alert-dialog-description\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-title\" >\r\n                    {alertTexts.header}\r\n                </DialogTitle>\r\n                <DialogContent >\r\n                    <DialogContentText id=\"alert-dialog-description\" >\r\n                        {alertTexts.body}\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => clickMenu('closeAlert')}\r\n                        color=\"secondary\">\r\n                        {lang.currLang.buttons.cancel}\r\n                    </Button>\r\n                    <Button onClick={() => clickMenu(alertTexts.action)}\r\n                        color=\"primary\" autoFocus>\r\n                        {alertTexts.commit}\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n            <Menu id=\"simple-menu\"\r\n                anchorEl={anchorEl}\r\n                keepMounted\r\n                open={Boolean(anchorEl)}\r\n                onClose={closeMenu}\r\n            >\r\n                <MenuItem >\r\n                    <ListItemIcon>\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Checkbox\r\n                                    onChange={(e) => clickMenu('public', e)}\r\n                                    checked={publicChecked}\r\n                                    value=\"checkedB\"\r\n                                    color=\"primary\"\r\n                                />\r\n                            }\r\n                        />\r\n                    </ListItemIcon>\r\n                    {lang.currLang.texts.Public}\r\n                </MenuItem>\r\n                <MenuItem onClick={() => clickMenu('edit')}>\r\n                    <ListItemIcon>\r\n                        <EditIcon fontSize=\"small\" />\r\n                    </ListItemIcon>\r\n                    {lang.currLang.buttons.Edit}\r\n                </MenuItem>\r\n                <MenuItem onClick={() => clickMenu('delete')}>\r\n                    <ListItemIcon>\r\n                        <DeleteIcon fontSize=\"small\" />\r\n                    </ListItemIcon>\r\n                    {lang.currLang.buttons.Delete}\r\n                </MenuItem>\r\n            </Menu>\r\n            <Card raised={true} className={classes.card}>\r\n                <CardHeader\r\n                    style={{\r\n                        paddingBottom: '0px',\r\n                    }}\r\n                    title={\r\n                        <Grid container\r\n                            direction=\"row\"\r\n                            justify=\"flex-start\"\r\n                            alignItems=\"center\"\r\n                        >\r\n                            <Grid item xs={10} >\r\n                                <Typography variant='subtitle1'>\r\n                                    {post_title} (\r\n                                    {post_type === 0\r\n                                        ? lang.currLang.texts.Dream\r\n                                        : lang.currLang.texts.Cdream})\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid item xs={2} >\r\n                                <Tooltip\r\n                                    disableFocusListener\r\n                                    disableTouchListener\r\n                                    title={publicChecked\r\n                                        ? lang.currLang.texts.PublicDescription\r\n                                        : lang.currLang.texts.UnpublicDescription\r\n                                    }\r\n                                >\r\n                                    {publicChecked\r\n                                        ? <Visibility className={classes.iconCenter} />\r\n                                        : <VisibilityOff className={classes.iconCenter} />\r\n                                    }\r\n                                </Tooltip>\r\n                            </Grid>\r\n                        </Grid>\r\n                    }\r\n                    subheader={dateOfDream}\r\n                    action={\r\n                        <IconButton\r\n                            aria-label=\"settings\"\r\n                            onClick={(e) => openMenu(e)}\r\n                        >\r\n                            <MoreVertIcon />\r\n                        </IconButton>\r\n                    }\r\n                />\r\n                <CardActions disableSpacing={true}>\r\n                    <Typography\r\n                        noWrap={expanded\r\n                            ? false\r\n                            : true\r\n                        }\r\n                        variant='body2'\r\n                        style={{\r\n                            padding: '12px',\r\n                        }}\r\n                    >\r\n                        {expanded\r\n                            ? lang.currLang.texts.TapToShow\r\n                            : text_content\r\n                        }\r\n                    </Typography>\r\n                    <IconButton\r\n                        className={clsx(classes.expand, {\r\n                            [classes.expandOpen]: expanded\r\n                        })}\r\n                        onClick={handleExpandClick}\r\n                        aria-expanded={expanded}\r\n                        aria-label=\"show more\"\r\n                    >\r\n                        <ExpandMoreIcon />\r\n                    </IconButton>\r\n                </CardActions>\r\n                <Collapse in={expanded}\r\n                    timeout=\"auto\"\r\n                    unmountOnExit >\r\n                    <CardContent>\r\n                        <div className={classes.avatarRoot}>\r\n                            {technics.map((technic, key) =>\r\n                                technic[0]\r\n                                    ? <Chip className={classes.smallChip}\r\n                                        key={key}\r\n                                        label={lang.currLang.current === \"Ru\"\r\n                                            ? technic[1]\r\n                                            : technic[2]}\r\n                                    />\r\n                                    : ''\r\n                            )}\r\n                        </div>\r\n                        <div className={classes.avatarRoot}>\r\n                            {tags.map((tag, key) =>\r\n                                tag[0]\r\n                                    ? <Tooltip key={key}\r\n                                        disableFocusListener\r\n                                        disableTouchListener\r\n                                        title={\r\n                                            lang.currLang.current === \"Ru\"\r\n                                                ? tag[1]\r\n                                                : tag[2]\r\n                                        }\r\n                                    >\r\n                                        <Avatar className={classes.smallAvatar}\r\n                                            src={tag[3]}\r\n                                            style={palette.type === 'dark'\r\n                                                ? {\r\n                                                    filter: 'invert(1)',\r\n                                                }\r\n                                                : {}}\r\n                                        />\r\n                                    </Tooltip>\r\n                                    : ''\r\n                            )}\r\n                        </div>\r\n                        <Paper className={classes.contentPaper}>\r\n                            <MUIRichTextEditor\r\n                                controls={[\r\n                                    \"bold\",\r\n                                    \"italic\",\r\n                                    \"underline\",\r\n                                    \"strikethrough\",\r\n                                    \"colorfill\",\r\n                                ]}\r\n                                customControls={[\r\n                                    {\r\n                                        name: \"colorfill\",\r\n                                        icon: <FormatColorFillIcon />,\r\n                                        type: \"inline\",\r\n                                        inlineStyle: {\r\n                                            backgroundColor: \"yellow\",\r\n                                            color: \"black\"\r\n                                        }\r\n                                    }\r\n                                ]}\r\n                                readOnly={true}\r\n                                toolbar={false}\r\n                                value={post_content}\r\n                            />\r\n                        </Paper>\r\n                        {post_type === 0\r\n                            ? ''\r\n                            : <Grid container\r\n                                direction=\"row\"\r\n                                justify=\"center\"\r\n                                alignItems=\"stretch\"\r\n                                style={{\r\n                                    paddingTop: '10px',\r\n                                }}\r\n                            >\r\n                                <Grid item xs={6}>\r\n                                    <Typography component=\"legend\" variant='body2'>\r\n                                        {lang.currLang.texts.rating}:\r\n                                    </Typography>\r\n                                </Grid>\r\n                                <Grid item xs={6}>\r\n                                    <Rating name=\"simple-controlled\"\r\n                                        value={rating}\r\n                                        readOnly\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n                        }\r\n                    </CardContent>\r\n                </Collapse>\r\n            </Card>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nDreamCard.propTypes = {\r\n    setSnackbar: PropTypes.func.isRequired,\r\n    lang: PropTypes.object.isRequired,\r\n    palette: PropTypes.object.isRequired,\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        lang: store.lang,\r\n        palette: store.themeMode.palette,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setSnackbar: snackbar => dispatch(setSnackbar(snackbar)),\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(DreamCard);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Button from '@material-ui/core/Button';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\n\r\nimport DreamCard from './muiltiple/DreamCard';\r\nimport { useStyles } from '../styles/Styles';\r\nimport { instance } from './Config';\r\n\r\nfunction ViewDreams(props) {\r\n    const { lang, themeMode, history, auth } = props;\r\n    const muiTheme = createMuiTheme(themeMode);\r\n    const classes = useStyles();\r\n    const [isLoading, setIsLoading] = React.useState(true);\r\n    const [dreams, setDreams] = React.useState([]);\r\n\r\n    const loadPosts = React.useCallback(() => {\r\n        setIsLoading(true);\r\n        instance.post(\"/actions/users/getuserposts\", { id: auth.user.id })\r\n            .then(res => {\r\n                setDreams(res.data);\r\n                setIsLoading(false);\r\n            })\r\n            .catch(err => {\r\n                setIsLoading(false);\r\n            });\r\n    }, [auth.user.id]);\r\n\r\n    React.useEffect(() => {\r\n        loadPosts();\r\n    }, [loadPosts]);\r\n\r\n    return (\r\n        <MuiThemeProvider theme={muiTheme}>\r\n            <CssBaseline />\r\n            <div className={classes.root}>\r\n                <Grid container\r\n                    className={`${classes.height12}`}\r\n                    direction=\"column\"\r\n                    justify=\"center\"\r\n                    alignItems=\"stretch\"\r\n                >\r\n                    <Grid item className={`${classes.hiddenOverflow} ${classes.height11}`}>\r\n                        {isLoading\r\n                            ? <div className={classes.formControl}>\r\n                                <CircularProgress />\r\n                            </div>\r\n                            : <Container className={classes.mainGridDreamsBodyItemContainer}>\r\n                                <Paper className={classes.mainGridDreamsBodyItemContainerPaper}>\r\n                                    {dreams.length !== 0\r\n                                        ? <Grid className={`${classes.mainGridDreamsContainer}`}\r\n                                            container\r\n                                            direction=\"column\"\r\n                                            justify=\"center\"\r\n                                            alignItems=\"stretch\"\r\n                                        >\r\n                                            {dreams.map((item, key) => (\r\n                                                <DreamCard\r\n                                                    item={item}\r\n                                                    key={key}\r\n                                                    history={history}\r\n                                                    loadPosts={loadPosts}\r\n                                                />\r\n                                            ))}\r\n                                        </Grid>\r\n                                        : <div>\r\n                                            <div className={classes.divDreamsNotFound} />\r\n                                            <div className={`${classes.divDreamsNotFound} ${classes.divDreamsNotFoundImg}`} />\r\n                                            <div className={classes.divDreamsNotFound}>\r\n                                                <Typography>\r\n                                                    {lang.currLang.texts.NoDreams}\r\n                                                </Typography>\r\n                                            </div>\r\n                                        </div>\r\n                                    }\r\n                                </Paper>\r\n                            </Container>\r\n                        }\r\n                    </Grid>\r\n                    <Grid item className={`${classes.mainGridBodyItem} ${classes.height1}`}>\r\n                        <Grid container\r\n                            direction=\"row\"\r\n                            justify=\"space-evenly\"\r\n                            alignItems=\"center\"\r\n                        >\r\n                            <Grid item xs={6} align=\"center\">\r\n                                <Button variant=\"contained\"\r\n                                    color=\"secondary\"\r\n                                    className={classes.actionButton}\r\n                                    onClick={() => { history.push(\"/luciddreams\") }}\r\n                                >\r\n                                    {lang.currLang.buttons.close}\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid item xs={6} />\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </MuiThemeProvider >\r\n    );\r\n}\r\n\r\nViewDreams.propTypes = {\r\n    themeMode: PropTypes.object.isRequired,\r\n    lang: PropTypes.object.isRequired,\r\n    auth: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        themeMode: store.themeMode,\r\n        lang: store.lang,\r\n        auth: store.auth,\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(ViewDreams);","const words = {\r\n    current: 'Ru',\r\n    buttons: {\r\n        signIn: 'Вход',\r\n        signUp: 'Регистрация',\r\n        dreamJoirnal: 'Дневник снов',\r\n        addDream: 'Добавить сон',\r\n        addCDream: 'Добавить ос',\r\n        techniques: 'Техники',\r\n        adventures: 'Приключения',\r\n        close: 'Назад',\r\n        about: 'О нас',\r\n        cancel: 'Отмена',\r\n        add: 'Добавить',\r\n        Edit: 'Изменить',\r\n        Delete: 'Удалить',\r\n        Save: 'Сохранить',\r\n        addTag: '+ место',\r\n    },\r\n    texts: {\r\n        about: 'О нас О нас О нас О нас О нас О нас О нас О нас О нас О нас О нас О нас',\r\n        Nothink: 'Ничего',\r\n        nickname: 'Отображаемое имя',\r\n        password: 'Пароль',\r\n        passwordAgain: 'Поторите пароль',\r\n        cancel: 'Отмена',\r\n        sucessRegistration: 'Вы успешно зарегистрировались',\r\n        hello: 'Привет, ',\r\n        changleLanguage: 'Сохранить изменение языка на ',\r\n        success: 'Успешно',\r\n        title: 'Заголовок',\r\n        description: 'Описание',\r\n        content: 'Что снилось',\r\n        tags: 'Места',\r\n        dreams: 'Снов',\r\n        technics: 'Техники',\r\n        rating: 'Реалистичность',\r\n        Dream: 'Обычный сон',\r\n        Cdream: 'ОC',\r\n        NoDreams: \"У вас нет снов\",\r\n        pickDate: \"Дата\",\r\n        pickTime: \"Время\",\r\n        TapToShow: \"Нажмите на текст, чтобы отобразить подсвечивание\",\r\n        Public: \"Опубликовано\",\r\n        Publish: \"Опубликовать\",\r\n        Unpublish: \"Скрыть\",\r\n        PublicAlert: \"Вы точно хотите опубликовать сон?\",\r\n        PublicText: \"После публикации ваши друзья смогут прочитать этот сон.\",\r\n        PublicDescription: \"Ваши друзья могут прочитать этот сон\",\r\n        UnpublicAlert: \"Вы точно хотите скрыть сон?\",\r\n        UnpublicText: \"После скрытия ваши друзья не смогут прочитать этот сон.\",\r\n        UnpublicDescription: \"Ваши друзья не могут прочитать этот сон\",\r\n        DeleteAlert: \"Вы точно хотите удалить?\",\r\n        DeleteText: \"После удаления запись не получится восстановить.\",\r\n        Name: \"Наименование\",\r\n        ChangeIcon: \"Иконка\",\r\n        FindIcon: \"Поиск иконки (English only)\",\r\n    },\r\n    errors: {\r\n        emailLenght: 'Введите email',\r\n        nicknameLenght: 'Введите отображаемое имя',\r\n        passwordLenght: 'Введите пароль',\r\n        password2Lenght: 'Введите пароль',\r\n        passwordsCompare: 'Пароли не совпадают',\r\n        UserNotExist: 'Неверный email или пароль',\r\n        EmailIsNotValid: 'Введен некорректный email',\r\n        IncorrectPassword: 'Неверный email или пароль',\r\n        EmailIsBusy: 'Email занят',\r\n        PasswordLenght5Symbols: 'Длина пароля - больше 5 символов',\r\n        NotLogin: 'Вы не авторизированы',\r\n        EmptyName: 'Пустое наименование',\r\n        EmptyTitle: 'Пустой заголовок',\r\n        EmptyDescription: 'Пустое описание',\r\n        EmptyDream: 'Пустое поле сна',\r\n        NoChanges: 'Нет изменений',\r\n        CantDeletePost: 'Ошибка удаления сна',\r\n        CantAddLocation: 'Ошибка добавления локации',\r\n        CantUpdateLocation: 'Ошибка обновления локации',\r\n        IconNotChange: 'Выберите иконку',\r\n        ColorNotChange: 'Выберите цвет',\r\n    },\r\n};\r\n\r\nexport default words;","import React from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport SnackbarContent from \"@material-ui/core/SnackbarContent\";\r\nimport ButtonBase from '@material-ui/core/ButtonBase';\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport Button from '@material-ui/core/Button';\r\nimport Slide from \"@material-ui/core/Slide\";\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport { SET_THEME_MODE, SET_SNACKBAR_MODE } from \"../actions/types\";\r\n\r\nimport { setCurrLang, setTheme, setSnackbar } from '../actions/Actions';\r\nimport { useStyles } from '../styles/Styles';\r\nimport { instance } from './Config';\r\nimport { CheckTimeOut } from '../utils/CheckLoginTimeOut';\r\n\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\n\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\n\r\nimport RuDict from '../dictionary/ru';\r\nimport EnDict from '../dictionary/en';\r\n\r\nfunction TransitionDown(props) {\r\n    return <Slide {...props} direction=\"down\" />;\r\n}\r\n\r\nfunction MainPage(props) {\r\n    const classes = useStyles();\r\n    const { lang, themeMode, auth, history, setCurrLangAction, setTheme, setSnackbar } = props;\r\n    const muiTheme = createMuiTheme(themeMode);\r\n    const [prevLanguage, setPrevLanguage] = React.useState(undefined);\r\n    const [openLangSnakbar, setOpenLangSnakbar] = React.useState(false);\r\n    const [langSnakbarMessage, setLangSnakbarMessage] = React.useState('');\r\n    const [transition, setTransition] = React.useState(undefined);\r\n\r\n    const switchMode = () => {\r\n        let newPaletteType = themeMode.palette.type === \"light\" ? \"dark\" : \"light\";\r\n        let primaryColor = themeMode.palette.type === \"light\" ? \"#f9a825\" : \"#3f51b5\";\r\n        let secondaryColor = themeMode.palette.type === \"light\" ? \"#f50057\" : \"#f50057\";\r\n        setTheme({\r\n            type: SET_THEME_MODE,\r\n            palette: {\r\n                type: newPaletteType,\r\n                primary: { main: primaryColor },\r\n                secondary: { main: secondaryColor },\r\n            }\r\n        });\r\n    };\r\n\r\n    const onAstronautClick = () => {\r\n        alert('Тут должны перейти на страницу космонафта');\r\n    };\r\n\r\n    const onMapClick = () => {\r\n        let check = CheckTimeOut();\r\n        if (check) history.push(\"/dreammap\");\r\n        else history.push(\"/\");\r\n    };\r\n\r\n    const changeLanguage = (language) => {\r\n        if (language !== lang.currLang.current) {\r\n            if (language === 'Ru') {\r\n                setPrevLanguage(lang.currLang.current);\r\n                setCurrLangAction(RuDict);\r\n                setLangSnakbarMessage(language);\r\n                setTransition(() => TransitionDown);\r\n                setOpenLangSnakbar(true);\r\n            }\r\n            if (lang.currLang.current !== 'En') {\r\n                setPrevLanguage(lang.currLang.current);\r\n                setCurrLangAction(EnDict);\r\n                setLangSnakbarMessage(language);\r\n                setTransition(() => TransitionDown);\r\n                setOpenLangSnakbar(true);\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleCloseLangSnakbar = () => {\r\n        switch (prevLanguage) {\r\n            case 'En':\r\n                setCurrLangAction(EnDict);\r\n                break;\r\n            case 'Ru':\r\n                setCurrLangAction(RuDict);\r\n                break;\r\n            default:\r\n                setCurrLangAction(EnDict);\r\n                break;\r\n        }\r\n        setOpenLangSnakbar(false);\r\n    };\r\n\r\n    const handleSaveLangSnakbar = () => {\r\n        let newLang;\r\n        switch (lang.currLang.current) {\r\n            case 'En':\r\n                newLang = 0;\r\n                break;\r\n            case 'Ru':\r\n                newLang = 1;\r\n                break;\r\n            default:\r\n                newLang = 0;\r\n                break;\r\n        }\r\n        let userid = auth.user.id;\r\n        let usernickname = auth.user.nickname;\r\n        let newUserData = {\r\n            language: newLang,\r\n            id: userid,\r\n            nickname: usernickname,\r\n        };\r\n\r\n        const check = CheckTimeOut();\r\n        if (check) {\r\n            instance\r\n                .post('/actions/users/updateuserdata', newUserData)\r\n                .then(res => {\r\n                    setSnackbar({\r\n                        type: SET_SNACKBAR_MODE,\r\n                        snackbar: {\r\n                            open: true,\r\n                            variant: 'success',\r\n                            message: lang.currLang.texts.success,\r\n                        },\r\n                    });\r\n                    setOpenLangSnakbar(false);\r\n                })\r\n                .catch(err => {\r\n                    handleCloseLangSnakbar();\r\n                });\r\n\r\n        }\r\n        else {\r\n            setSnackbar({\r\n                type: SET_SNACKBAR_MODE,\r\n                snackbar: {\r\n                    open: true,\r\n                    variant: 'error',\r\n                    message: lang.currLang.errors.NotLogin,\r\n                },\r\n            });\r\n            handleCloseLangSnakbar();\r\n        }\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        let id = {\r\n            id: auth.user.id,\r\n        };\r\n        instance\r\n            .post('/actions/users/getuserdata', id)\r\n            .then(res => {\r\n                res.data.language === 0 ? setCurrLangAction(EnDict) : setCurrLangAction(RuDict);\r\n            })\r\n            .catch(err => {\r\n                auth.user.language === 0 ? setCurrLangAction(EnDict) : setCurrLangAction(RuDict);\r\n            });\r\n        // if (auth.user.times_mode === 0) {\r\n        //     setTheme({\r\n        //         type: SET_THEME_MODE,\r\n        //         palette: {\r\n        //             type: \"dark\",\r\n        //             primary: { main: \"#f9a825\" },\r\n        //             secondary: { main: \"#f50057\" },\r\n        //         }\r\n        //     });\r\n        // }\r\n        // else {\r\n        //     setTheme({\r\n        //         type: SET_THEME_MODE,\r\n        //         palette: {\r\n        //             type: \"light\",\r\n        //             primary: { main: \"#3f51b5\" },\r\n        //             secondary: { main: \"#f50057\" },\r\n        //         }\r\n        //     });\r\n        // }\r\n    }, [classes, setTheme, setCurrLangAction, auth.user.language, auth.user.times_mode, auth.user.id]);\r\n\r\n    return (\r\n        <MuiThemeProvider theme={muiTheme}>\r\n            <CssBaseline />\r\n            <Snackbar open={openLangSnakbar}\r\n                anchorOrigin={{\r\n                    vertical: \"top\",\r\n                    horizontal: \"center\"\r\n                }}\r\n                key={\"top, center\"}\r\n                TransitionComponent={transition}\r\n            >\r\n                <SnackbarContent aria-describedby=\"lang-snackbar\"\r\n                    message={\r\n                        <Typography className={`${classes.height12}`}\r\n                            align='center'\r\n                            id=\"lang-snackbar\"\r\n                            variant='body2'>\r\n                            {lang.currLang.texts.changleLanguage + langSnakbarMessage + ' ?'}\r\n                        </Typography>\r\n                    }\r\n                    action={[\r\n                        <div key={\"lang-snackbar-buttons\"}>\r\n                            <IconButton key=\"save\"\r\n                                aria-label=\"save\"\r\n                                color=\"inherit\"\r\n                                onClick={handleSaveLangSnakbar}\r\n                            >\r\n                                <SaveIcon />\r\n                            </IconButton>\r\n                            <IconButton key=\"close\"\r\n                                aria-label=\"close\"\r\n                                color=\"inherit\"\r\n                                onClick={handleCloseLangSnakbar}\r\n                            >\r\n                                <CloseIcon />\r\n                            </IconButton>\r\n                        </div>\r\n                    ]}\r\n                />\r\n            </Snackbar>\r\n            <div className={classes.root}>\r\n                <Grid container\r\n                    className={`${classes.height12}`}\r\n                    direction=\"column\"\r\n                    justify=\"center\"\r\n                    alignItems=\"stretch\"\r\n                >\r\n                    <Grid item className={`${classes.mainGridBodyItem} ${classes.height4}`}>\r\n                        <Grid container\r\n                            className={classes.mainGridContainer}\r\n                            direction=\"row\"\r\n                            justify=\"space-around\"\r\n                            alignItems=\"stretch\"\r\n                        >\r\n                            <Grid item xs={4} >\r\n                                <ButtonBase className={classes.AstronautButton}\r\n                                    type='button'\r\n                                    focusRipple\r\n                                    onClick={onAstronautClick}>\r\n                                    <div className={classes.AstronautDiv}>\r\n                                        <div className={classes.AstronautImg} style={themeMode.palette.type === \"light\" ? { filter: 'invert(0)', } : { filter: 'invert(1)', }} />\r\n                                    </div>\r\n                                </ButtonBase>\r\n                            </Grid>\r\n                            <Grid item xs={4} >\r\n                                <ButtonBase className={classes.image}\r\n                                    type='button'\r\n                                    focusRipple\r\n                                    onClick={switchMode}>\r\n                                    <div className={classes.SkyDiv}>\r\n                                        <div className={classes.SunSrc} style={themeMode.palette.type === \"dark\" ? { transform: 'translateY(36vw)' } : { transform: 'translateY(0)' }} />\r\n                                        <div className={classes.MoonSrc} style={themeMode.palette.type === \"dark\" ? { transform: 'translateY(0)' } : { transform: 'translateY(-36vw)' }} />\r\n                                    </div>\r\n                                </ButtonBase>\r\n                            </Grid>\r\n                            <Grid item xs={4} >\r\n                                <ButtonBase className={classes.MapButton}\r\n                                    type='button'\r\n                                    focusRipple\r\n                                    onClick={onMapClick}>\r\n                                    <div className={classes.MapDiv}>\r\n                                        <div className={classes.MapImg} style={themeMode.palette.type === \"light\" ? { filter: 'invert(0)', } : { filter: 'invert(1)', }} />\r\n                                    </div>\r\n                                </ButtonBase>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid item className={`${classes.mainGridBodyItem} ${classes.height1}`}>\r\n                        <Grid container\r\n                            className={`${classes.height12}`}\r\n                            direction=\"column\"\r\n                            justify=\"center\"\r\n                            alignItems=\"stretch\"\r\n                        >\r\n                            <Grid item className={`${classes.mainGridBodyItem} ${classes.height12}`}>\r\n                                <Typography className={classes.mainGridContainer}\r\n                                    align='center'\r\n                                    variant='h6'\r\n                                >\r\n                                    {lang.currLang.texts.hello + auth.user.nickname}\r\n                                </Typography>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid item className={`${classes.mainGridBodyItem} ${classes.height6}`}>\r\n                        <Grid container\r\n                            className={`${classes.menuButtonContainer} ${classes.height12}`}\r\n                            direction=\"column\"\r\n                            justify=\"center\"\r\n                            alignItems=\"stretch\"\r\n                        >\r\n                            <Grid item className={`${classes.menuDivButton} ${classes.height2}`} align=\"center\">\r\n                                <Button variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    className={`${classes.menuButton} ${classes.centerButton}`}\r\n                                    onClick={() => {\r\n                                        let check = CheckTimeOut();\r\n                                        if (check) history.push(\"/dreams\");\r\n                                        else history.push(\"/\");\r\n                                    }}\r\n                                >\r\n                                    {lang.currLang.buttons.dreamJoirnal}\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid item className={`${classes.menuDivButton} ${classes.height2}`} align=\"center\">\r\n                                <Button variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    className={`${classes.menuButton} ${classes.centerButton}`}\r\n                                    onClick={() => {\r\n                                        let check = CheckTimeOut();\r\n                                        if (check) history.push(\"/addregulardream\");\r\n                                        else history.push(\"/\");\r\n                                    }}\r\n                                >\r\n                                    {lang.currLang.buttons.addDream}\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid item className={`${classes.menuDivButton} ${classes.height2}`} align=\"center\">\r\n                                <Button variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    className={`${classes.menuButton} ${classes.centerButton}`}\r\n                                    onClick={() => {\r\n                                        let check = CheckTimeOut();\r\n                                        if (check) history.push(\"/addcdream\");\r\n                                        else history.push(\"/\");\r\n                                    }}\r\n                                >\r\n                                    {lang.currLang.buttons.addCDream}\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid item className={`${classes.menuDivButton} ${classes.height2}`} align=\"center\">\r\n                                <Button variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    className={`${classes.menuButton} ${classes.centerButton}`}\r\n                                    onClick={() => {\r\n                                        let check = CheckTimeOut();\r\n                                        if (check) history.push(\"/technics\");\r\n                                        else history.push(\"/\");\r\n                                    }}\r\n                                >\r\n                                    {lang.currLang.buttons.techniques}\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid item className={`${classes.menuDivButton} ${classes.height2}`} align=\"center\">\r\n                                <Button variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    className={`${classes.menuButton} ${classes.centerButton}`}\r\n                                >\r\n                                    {lang.currLang.buttons.adventures}\r\n                                </Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid item className={`${classes.mainGridBodyItem} ${classes.height1}`}>\r\n                        <Grid container\r\n                            direction=\"row\"\r\n                            justify=\"center\"\r\n                            alignItems=\"center\"\r\n                        >\r\n                            <Grid item>\r\n                                <Button onClick={() => { changeLanguage('Ru') }}>\r\n                                    RU\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Button onClick={() => { changeLanguage('En') }}>\r\n                                    EN\r\n                                </Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </MuiThemeProvider>\r\n    );\r\n};\r\n\r\nMainPage.propTypes = {\r\n    setCurrLangAction: PropTypes.func.isRequired,\r\n    setTheme: PropTypes.func.isRequired,\r\n    setSnackbar: PropTypes.func.isRequired,\r\n    lang: PropTypes.object.isRequired,\r\n    themeMode: PropTypes.object.isRequired,\r\n    auth: PropTypes.object.isRequired,\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        lang: store.lang,\r\n        themeMode: store.themeMode,\r\n        auth: store.auth,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setCurrLangAction: currLangState => dispatch(setCurrLang(currLangState)),\r\n        setTheme: palette => dispatch(setTheme(palette)),\r\n        setSnackbar: snackbar => dispatch(setSnackbar(snackbar)),\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(MainPage);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport jwt_decode from \"jwt-decode\";\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { GET_ERRORS, SET_CURRENT_USER, SET_SNACKBAR_MODE } from \"../actions/types\";\r\nimport { setCurrLang, setUserState, setSnackbar } from '../actions/Actions';\r\nimport { useStyles } from '../styles/Styles';\r\nimport setAuthToken from \"../utils/setAuthToken\";\r\nimport { instance } from './Config';\r\n\r\nimport RuDict from '../dictionary/ru';\r\nimport EnDict from '../dictionary/en';\r\n\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\r\nimport Visibility from '@material-ui/icons/Visibility';\r\n\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\n\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nfunction Sign(props) {\r\n    const classes = useStyles();\r\n    const { history, themeMode, lang, setUserState, setSnackbar, setCurrLang } = props;\r\n    const muiTheme = createMuiTheme(themeMode);\r\n    const [loginData, setLoginData] = React.useState({\r\n        email: '',\r\n        password: '',\r\n    });\r\n    const [registData, setRegistData] = React.useState({\r\n        email: '',\r\n        nickname: '',\r\n        password: '',\r\n        password2: '',\r\n    });\r\n    const [regFieldErrors, setRegFieldErrors] = React.useState({\r\n        emailErr: false,\r\n        emailErrText: '',\r\n        nicknameErr: false,\r\n        nicknameErrText: '',\r\n        passwordErr: false,\r\n        passwordErrText: '',\r\n        password2Err: false,\r\n        password2ErrText: '',\r\n    });\r\n    const [isLoading, setIsLoading] = React.useState(false);\r\n    const [showPassword, setShowPassword] = React.useState(false);\r\n    const [openLogin, setOpenLogin] = React.useState(false);\r\n    const [openRegist, setOpenRegist] = React.useState(false);\r\n    const [page, setPage] = React.useState({\r\n        mainPage: true,\r\n        aboutPage: false,\r\n    });\r\n\r\n    const handleMouseDownPassword = event => {\r\n        event.preventDefault();\r\n    };\r\n\r\n    const changeAuthLogin = (e) => {\r\n        let newLoginData = loginData;\r\n        newLoginData = { ...newLoginData, email: e.target.value };\r\n        setLoginData(newLoginData);\r\n    };\r\n\r\n    const changeAuthPassword = (e) => {\r\n        let newLoginData = loginData;\r\n        newLoginData = { ...newLoginData, password: e.target.value };\r\n        setLoginData(newLoginData);\r\n    };\r\n\r\n    const changeRegistLogin = (e) => {\r\n        let newRegFieldErrors = regFieldErrors;\r\n        newRegFieldErrors = { ...newRegFieldErrors, emailErr: false };\r\n        newRegFieldErrors = { ...newRegFieldErrors, emailErrText: '' };\r\n        setRegFieldErrors(newRegFieldErrors);\r\n\r\n        let newRegistData = registData;\r\n        newRegistData = { ...newRegistData, email: e.target.value };\r\n        setRegistData(newRegistData);\r\n    };\r\n\r\n    const changeRegistNickname = (e) => {\r\n        let newRegFieldErrors = regFieldErrors;\r\n        newRegFieldErrors = { ...newRegFieldErrors, nicknameErr: false };\r\n        newRegFieldErrors = { ...newRegFieldErrors, nicknameErrText: '' };\r\n        setRegFieldErrors(newRegFieldErrors);\r\n\r\n        let newRegistData = registData;\r\n        newRegistData = { ...newRegistData, nickname: e.target.value };\r\n        setRegistData(newRegistData);\r\n    };\r\n\r\n    const changeRegistPassword = (e) => {\r\n        let newRegFieldErrors = regFieldErrors;\r\n        newRegFieldErrors = { ...newRegFieldErrors, passwordErr: false };\r\n        newRegFieldErrors = { ...newRegFieldErrors, passwordErrText: '' };\r\n        newRegFieldErrors = { ...newRegFieldErrors, password2Err: false };\r\n        newRegFieldErrors = { ...newRegFieldErrors, password2ErrText: '' };\r\n        setRegFieldErrors(newRegFieldErrors);\r\n\r\n        let newRegistData = registData;\r\n        newRegistData = { ...newRegistData, password: e.target.value };\r\n        setRegistData(newRegistData);\r\n    };\r\n\r\n    const changeRegistPassword2 = (e) => {\r\n        let newRegFieldErrors = regFieldErrors;\r\n        newRegFieldErrors = { ...newRegFieldErrors, passwordErr: false };\r\n        newRegFieldErrors = { ...newRegFieldErrors, passwordErrText: '' };\r\n        newRegFieldErrors = { ...newRegFieldErrors, password2Err: false };\r\n        newRegFieldErrors = { ...newRegFieldErrors, password2ErrText: '' };\r\n        setRegFieldErrors(newRegFieldErrors);\r\n        let newRegistData = registData;\r\n        newRegistData = { ...newRegistData, password2: e.target.value };\r\n        setRegistData(newRegistData);\r\n    };\r\n\r\n    const singIn = () => {\r\n        instance\r\n            .post(\"/actions/users/login\", loginData)\r\n            .then(res => {\r\n                const { token } = res.data;\r\n                localStorage.setItem(\"jwtToken\", token);\r\n                setAuthToken(token);\r\n                const decoded = jwt_decode(token);\r\n                setUserState({\r\n                    type: SET_CURRENT_USER,\r\n                    payload: decoded\r\n                });\r\n                setIsLoading(false);\r\n                history.push(\"/luciddreams\");\r\n            })\r\n            .catch(err => {\r\n                //console.log(err);\r\n                let errorMessage = '';\r\n                if (err.response.data.email === 'UserNotExist') {\r\n                    errorMessage = lang.currLang.errors.UserNotExist;\r\n                }\r\n                if (err.response.data.email === 'EmailIsNotValid') {\r\n                    errorMessage = lang.currLang.errors.EmailIsNotValid;\r\n                }\r\n                if (err.response.data.passwordincorrect === 'IncorrectPassword') {\r\n                    errorMessage = lang.currLang.errors.IncorrectPassword;\r\n                }\r\n                setSnackbar({\r\n                    type: SET_SNACKBAR_MODE,\r\n                    snackbar: {\r\n                        open: true,\r\n                        variant: 'error',\r\n                        message: errorMessage,\r\n                    },\r\n                });\r\n                setIsLoading(false);\r\n            });\r\n    };\r\n\r\n    const singUp = () => {\r\n        let isErr = false;\r\n        let newRegFieldErrors = regFieldErrors;\r\n        if (registData.email.length === 0) {\r\n            newRegFieldErrors = { ...newRegFieldErrors, emailErr: true };\r\n            newRegFieldErrors = { ...newRegFieldErrors, emailErrText: lang.currLang.errors.emailLenght };\r\n            isErr = true;\r\n        }\r\n        if (registData.nickname.length === 0) {\r\n            newRegFieldErrors = { ...newRegFieldErrors, nicknameErr: true };\r\n            newRegFieldErrors = { ...newRegFieldErrors, nicknameErrText: lang.currLang.errors.nicknameLenght };\r\n            isErr = true;\r\n        }\r\n        if (registData.password.length === 0) {\r\n            newRegFieldErrors = { ...newRegFieldErrors, passwordErr: true };\r\n            newRegFieldErrors = { ...newRegFieldErrors, passwordErrText: lang.currLang.errors.passwordLenght };\r\n            isErr = true;\r\n        }\r\n        if (registData.password2.length === 0) {\r\n            newRegFieldErrors = { ...newRegFieldErrors, password2Err: true };\r\n            newRegFieldErrors = { ...newRegFieldErrors, password2ErrText: lang.currLang.errors.password2Lenght };\r\n            isErr = true;\r\n        }\r\n        if (registData.password !== registData.password2) {\r\n            newRegFieldErrors = { ...newRegFieldErrors, passwordErr: true };\r\n            newRegFieldErrors = { ...newRegFieldErrors, passwordErrText: lang.currLang.errors.passwordsCompare };\r\n            newRegFieldErrors = { ...newRegFieldErrors, password2Err: true };\r\n            newRegFieldErrors = { ...newRegFieldErrors, password2ErrText: lang.currLang.errors.passwordsCompare };\r\n            isErr = true;\r\n        }\r\n        if (isErr) {\r\n            setRegFieldErrors(newRegFieldErrors);\r\n            setIsLoading(false);\r\n        }\r\n        else {\r\n            instance\r\n                .post('/actions/users/register', registData)\r\n                .then(res => {\r\n                    setSnackbar({\r\n                        type: SET_SNACKBAR_MODE,\r\n                        snackbar: {\r\n                            open: true,\r\n                            variant: 'success',\r\n                            message: lang.currLang.texts.sucessRegistration,\r\n                        },\r\n                    });\r\n                    let newRegistData = registData;\r\n                    newRegistData = { ...newRegistData, email: '' };\r\n                    newRegistData = { ...newRegistData, nickname: '' };\r\n                    newRegistData = { ...newRegistData, password: '' };\r\n                    newRegistData = { ...newRegistData, password2: '' };\r\n                    setRegistData(newRegistData);\r\n                    click('closeRegist');\r\n                    click('openLogin');\r\n                    setIsLoading(false);\r\n                })\r\n                .catch(err => {\r\n                    let errorMessage = '';\r\n                    setUserState({\r\n                        type: GET_ERRORS,\r\n                        payload: err.response.data\r\n                    });\r\n                    if (err.response.data.email === 'EmailIsBusy') {\r\n                        errorMessage = lang.currLang.errors.EmailIsBusy;\r\n                    }\r\n                    if (err.response.data.password === 'PasswordLenght5Symbols') {\r\n                        errorMessage = lang.currLang.errors.PasswordLenght5Symbols;\r\n                    }\r\n                    setSnackbar({\r\n                        type: SET_SNACKBAR_MODE,\r\n                        snackbar: {\r\n                            open: true,\r\n                            variant: 'error',\r\n                            message: errorMessage,\r\n                        },\r\n                    });\r\n                    setIsLoading(false);\r\n                });\r\n        }\r\n    };\r\n\r\n    const click = (action) => {\r\n        let newPages = page;\r\n        switch (action) {\r\n            case 'useVk':\r\n                // window.VK.Auth.login(checkLoginState, 4194304);\r\n                // let loadItems = async () => {\r\n                //     const response = await fetch('http://10.203.117.137:3001/auth/vk', {\r\n                //         method: 'GET',\r\n                //         credentials: 'include',\r\n                //     });\r\n                //     const body = await response.json();\r\n\r\n                //     console.log(response);\r\n                // }\r\n                break;\r\n            case 'openLogin':\r\n                setOpenLogin(true);\r\n                break;\r\n            case 'openRegist':\r\n                setOpenRegist(true);\r\n                break;\r\n            case 'closeLogin':\r\n                setOpenLogin(false);\r\n                setShowPassword(false);\r\n                break;\r\n            case 'closeRegist':\r\n                setOpenRegist(false);\r\n                setShowPassword(false);\r\n                break;\r\n            case 'signIn':\r\n                setIsLoading(true);\r\n                singIn();\r\n                break;\r\n            case 'signUp':\r\n                setIsLoading(true);\r\n                singUp();\r\n                break;\r\n            case 'openAboutPage':\r\n                newPages = { ...newPages, aboutPage: true };\r\n                newPages = { ...newPages, mainPage: false };\r\n                setPage(newPages);\r\n                break;\r\n            case 'closeAboutPage':\r\n                newPages = { ...newPages, aboutPage: false };\r\n                newPages = { ...newPages, mainPage: true };\r\n                setPage(newPages);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    };\r\n\r\n    const changeLanguage = (language) => {\r\n        if (language === 'Ru') {\r\n            setCurrLang(RuDict);\r\n        }\r\n        else {\r\n            setCurrLang(EnDict);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <MuiThemeProvider theme={muiTheme}>\r\n            <CssBaseline />\r\n            <Dialog keepMounted\r\n                open={openLogin}\r\n                TransitionComponent={Transition}\r\n                aria-labelledby=\"alert-dialog-slide-title\"\r\n                aria-describedby=\"alert-dialog-slide-description\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-slide-title\">\r\n                    {lang.currLang.buttons.signIn}\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <Grid className={`${classes.menuDivButton}`} align=\"center\">\r\n                        <TextField\r\n                            className={classes.textField}\r\n                            id=\"email-field\"\r\n                            type=\"email\"\r\n                            label=\"Email\"\r\n                            onBlur={(e) => { changeAuthLogin(e) }} />\r\n                    </Grid>\r\n                    <Grid className={`${classes.menuDivButton}`} align=\"center\">\r\n                        <TextField\r\n                            id=\"password-field\"\r\n                            className={classes.textField}\r\n                            type={showPassword ? 'text' : 'password'}\r\n                            label={lang.currLang.texts.password}\r\n                            onBlur={(e) => { changeAuthPassword(e) }}\r\n                            InputProps={{\r\n                                endAdornment: (\r\n                                    <InputAdornment position=\"end\">\r\n                                        <IconButton\r\n                                            tabIndex=\"-1\"\r\n                                            edge=\"end\"\r\n                                            aria-label=\"toggle password visibility\"\r\n                                            onClick={() => { showPassword ? setShowPassword(false) : setShowPassword(true) }}\r\n                                            onMouseDown={handleMouseDownPassword} >\r\n                                            {showPassword ? <VisibilityOff /> : <Visibility />}\r\n                                        </IconButton>\r\n                                    </InputAdornment>\r\n                                ),\r\n                            }} />\r\n                    </Grid>\r\n                    {isLoading\r\n                        ? <LinearProgress /> :\r\n                        ''\r\n                    }\r\n                </DialogContent>\r\n                {!isLoading\r\n                    ? <DialogActions>\r\n                        <Button onClick={() => { click('closeLogin') }}\r\n                            color=\"secondary\"\r\n                            disabled={isLoading}>\r\n                            {lang.currLang.buttons.cancel}\r\n                        </Button>\r\n                        <Button onClick={() => { click('signIn') }}\r\n                            color=\"primary\"\r\n                            disabled={isLoading}>\r\n                            {lang.currLang.buttons.signIn}\r\n                        </Button>\r\n                    </DialogActions>\r\n                    : ''}\r\n            </Dialog>\r\n            <Dialog keepMounted\r\n                open={openRegist}\r\n                TransitionComponent={Transition}\r\n                aria-labelledby=\"alert-dialog-slide-title\"\r\n                aria-describedby=\"alert-dialog-slide-description\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-slide-title\">\r\n                    {lang.currLang.buttons.signUp}\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <Grid className={`${classes.menuDivButton}`} align=\"center\">\r\n                        <TextField id=\"reg-email-field\"\r\n                            error={regFieldErrors.emailErr}\r\n                            helperText={regFieldErrors.emailErrText}\r\n                            className={classes.textField}\r\n                            type=\"email\"\r\n                            label=\"Email\"\r\n                            onBlur={(e) => { changeRegistLogin(e) }} />\r\n                    </Grid>\r\n                    <Grid className={`${classes.menuDivButton}`} align=\"center\">\r\n                        <TextField id=\"reg-nickname-field\"\r\n                            error={regFieldErrors.nicknameErr}\r\n                            helperText={regFieldErrors.nicknameErrText}\r\n                            className={classes.textField}\r\n                            type=\"text\"\r\n                            label={lang.currLang.texts.nickname}\r\n                            onBlur={(e) => { changeRegistNickname(e) }} />\r\n                    </Grid>\r\n                    <Grid className={`${classes.menuDivButton}`} align=\"center\">\r\n                        <TextField id=\"reg-password-field\"\r\n                            error={regFieldErrors.passwordErr}\r\n                            helperText={regFieldErrors.passwordErrText}\r\n                            className={classes.textField}\r\n                            type={showPassword ? 'text' : 'password'}\r\n                            label={lang.currLang.texts.password}\r\n                            onBlur={(e) => { changeRegistPassword(e) }}\r\n                            InputProps={{\r\n                                endAdornment: (\r\n                                    <InputAdornment position=\"end\">\r\n                                        <IconButton\r\n                                            tabIndex=\"-1\"\r\n                                            edge=\"end\"\r\n                                            aria-label=\"toggle password visibility\"\r\n                                            onClick={() => { showPassword ? setShowPassword(false) : setShowPassword(true) }}\r\n                                            onMouseDown={handleMouseDownPassword} >\r\n                                            {showPassword ? <VisibilityOff /> : <Visibility />}\r\n                                        </IconButton>\r\n                                    </InputAdornment>\r\n                                ),\r\n                            }} />\r\n                    </Grid>\r\n                    <Grid className={`${classes.menuDivButton}`} align=\"center\">\r\n                        <TextField id=\"reg-password2-field\"\r\n                            error={regFieldErrors.password2Err}\r\n                            helperText={regFieldErrors.password2ErrText}\r\n                            className={classes.textField}\r\n                            type={showPassword ? 'text' : 'password'}\r\n                            label={lang.currLang.texts.passwordAgain}\r\n                            onBlur={(e) => { changeRegistPassword2(e) }}\r\n                            InputProps={{\r\n                                endAdornment: (\r\n                                    <InputAdornment position=\"end\">\r\n                                        <IconButton\r\n                                            tabIndex=\"-1\"\r\n                                            edge=\"end\"\r\n                                            aria-label=\"toggle password visibility\"\r\n                                            onClick={() => { showPassword ? setShowPassword(false) : setShowPassword(true) }}\r\n                                            onMouseDown={handleMouseDownPassword} >\r\n                                            {showPassword ? <VisibilityOff /> : <Visibility />}\r\n                                        </IconButton>\r\n                                    </InputAdornment>\r\n                                ),\r\n                            }} />\r\n                    </Grid>\r\n                    {isLoading\r\n                        ? <LinearProgress />\r\n                        : ''\r\n                    }\r\n                </DialogContent>\r\n                {!isLoading\r\n                    ? <DialogActions>\r\n                        <Button onClick={() => { click('closeRegist') }}\r\n                            color=\"secondary\"\r\n                            disabled={isLoading}>\r\n                            {lang.currLang.buttons.cancel}\r\n                        </Button>\r\n                        <Button onClick={() => { click('signUp') }}\r\n                            color=\"primary\"\r\n                            disabled={isLoading}>\r\n                            {lang.currLang.buttons.signUp}\r\n                        </Button>\r\n                    </DialogActions>\r\n                    : ''}\r\n            </Dialog>\r\n            <div className={classes.root}>\r\n                <div className={classes.mainPage}\r\n                    style={\r\n                        page.mainPage === true\r\n                            ? { transform: 'translateY(0%)' }\r\n                            : { transform: 'translateY(-100%)' }\r\n                    }\r\n                >\r\n                    <Grid container\r\n                        className={`${classes.height12}`}\r\n                        direction=\"column\"\r\n                        justify=\"center\"\r\n                        alignItems=\"stretch\"\r\n                    >\r\n                        <Grid item className={`${classes.mainGridBodyItem} ${classes.height11}`}>\r\n                            <Grid container\r\n                                className={`${classes.height12}`}\r\n                                direction=\"column\"\r\n                                justify=\"center\"\r\n                                alignItems=\"stretch\"\r\n                            >\r\n                                <Grid item className={`${classes.height3}`} />\r\n                                <Grid item className={`${classes.height6} ${classes.menuDivButton}`}>\r\n                                    <Grid item className={`${classes.menuDivButton} ${classes.height2}`} align=\"center\">\r\n                                        <Button variant=\"contained\" color=\"primary\"\r\n                                            className={`${classes.menuButton} ${classes.centerButton}`}\r\n                                            onClick={() => { click('openLogin') }}>\r\n                                            {lang.currLang.buttons.signIn}\r\n                                        </Button>\r\n                                    </Grid>\r\n                                    <Grid item className={`${classes.menuDivButton} ${classes.height2}`} align=\"center\">\r\n                                        <Button variant=\"contained\" color=\"primary\"\r\n                                            className={`${classes.menuButton} ${classes.centerButton}`}\r\n                                            onClick={() => { click('openRegist') }}>\r\n                                            {lang.currLang.buttons.signUp}\r\n                                        </Button>\r\n                                    </Grid>\r\n                                    <Grid item className={`${classes.menuDivButton} ${classes.height2}`} align=\"center\" />\r\n                                    <Grid item className={`${classes.menuDivButton} ${classes.height2}`} align=\"center\">\r\n                                        <Button variant=\"contained\" color=\"primary\"\r\n                                            className={`${classes.menuButton} ${classes.centerButton}`}\r\n                                            onClick={() => (click('openAboutPage'))} >\r\n                                            {lang.currLang.buttons.about}\r\n                                        </Button>\r\n                                    </Grid>\r\n                                </Grid>\r\n                                <Grid item className={`${classes.height3}`} />\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item className={`${classes.mainGridBodyItem} ${classes.height1}`}>\r\n                            <Grid container\r\n                                direction=\"row\"\r\n                                justify=\"center\"\r\n                                alignItems=\"center\"\r\n                            >\r\n                                <Grid item>\r\n                                    <Button onClick={() => { changeLanguage('Ru') }}>\r\n                                        RU\r\n                                    </Button>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Button onClick={() => { changeLanguage('En') }}>\r\n                                        EN\r\n                                    </Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </div >\r\n                <div className={classes.aboutPage}\r\n                    style={page.aboutPage === true\r\n                        ? { transform: 'translateY(-100%)' }\r\n                        : { transform: 'translateY(0%)' }\r\n                    }\r\n                >\r\n                    <Grid className={classes.aboutGridContainer}\r\n                        container\r\n                        direction=\"column\"\r\n                        justify=\"center\"\r\n                        alignItems=\"stretch\"\r\n                        spacing={5} >\r\n                        <Grid item\r\n                            className={classes.aboutGridItem}\r\n                            align='center'>\r\n                            <Paper className={classes.aboutPaper}>\r\n                                <Typography>\r\n                                    {lang.currLang.texts.about}\r\n                                </Typography>\r\n                            </Paper>\r\n                        </Grid>\r\n                        <Grid item\r\n                            className={classes.aboutGridItem}\r\n                            align='center'>\r\n                            <Button variant=\"contained\"\r\n                                color=\"primary\"\r\n                                className={classes.menuButton}\r\n                                onClick={() => (click('closeAboutPage'))} >\r\n                                {lang.currLang.buttons.close}\r\n                            </Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                </div>\r\n            </div >\r\n        </MuiThemeProvider>\r\n    )\r\n}\r\n\r\nSign.propTypes = {\r\n    setCurrLang: PropTypes.func.isRequired,\r\n    setUserState: PropTypes.func.isRequired,\r\n    setSnackbar: PropTypes.func.isRequired,\r\n    themeMode: PropTypes.object.isRequired,\r\n    lang: PropTypes.object.isRequired,\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        themeMode: store.themeMode,\r\n        lang: store.lang,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setCurrLang: currLangState => dispatch(setCurrLang(currLangState)),\r\n        setUserState: State => dispatch(setUserState(State)),\r\n        setSnackbar: snackbar => dispatch(setSnackbar(snackbar)),\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Sign);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Card from '@material-ui/core/Card';\r\n\r\nimport { useStyles } from '../../styles/Styles';\r\nimport { setSnackbar } from '../../actions/Actions';\r\n\r\nfunction TechnicCard(props) {\r\n    const { item, lang, auth, history } = props;\r\n    const classes = useStyles();\r\n    const [openAlert, setOpenAlert] = React.useState(false);\r\n    const [alertTexts, setAlertTexts] = React.useState({\r\n        header: '',\r\n        body: '',\r\n        commit: '',\r\n        action: '',\r\n    });\r\n\r\n    const actions = (action) => {\r\n        switch (action) {\r\n            case 'edit':\r\n                history.push({\r\n                    pathname: \"/addtechnics\",\r\n                    defaultData: {\r\n                        item: item,\r\n                    }\r\n                });\r\n                break;\r\n            case 'delete':\r\n                let newAlertTexts = alertTexts;\r\n                newAlertTexts = { ...newAlertTexts, header: lang.currLang.texts.DeleteAlert };\r\n                newAlertTexts = { ...newAlertTexts, body: lang.currLang.texts.DeleteText };\r\n                newAlertTexts = { ...newAlertTexts, commit: lang.currLang.buttons.Delete };\r\n                newAlertTexts = { ...newAlertTexts, action: 'deleteOk' };\r\n                setAlertTexts(newAlertTexts);\r\n                setOpenAlert(true);\r\n                break;\r\n            case 'deleteOk':\r\n                setOpenAlert(false);\r\n                props.loadTechnics();\r\n                break;\r\n            case 'closeAlert':\r\n                setOpenAlert(false);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Grid item className={classes.dreamCardDiv} >\r\n            <Dialog open={openAlert}\r\n                onClose={() => actions('closeAlert')}\r\n                aria-labelledby=\"alert-dialog-title\"\r\n                aria-describedby=\"alert-dialog-description\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-title\" >\r\n                    {alertTexts.header}\r\n                </DialogTitle>\r\n                <DialogContent >\r\n                    <DialogContentText id=\"alert-dialog-description\" >\r\n                        {alertTexts.body}\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => actions('closeAlert')}\r\n                        color=\"secondary\">\r\n                        {lang.currLang.buttons.cancel}\r\n                    </Button>\r\n                    <Button onClick={() => actions(alertTexts.action)}\r\n                        color=\"primary\" autoFocus>\r\n                        {alertTexts.commit}\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n            <Card raised={true} className={classes.card}>\r\n                <CardActionArea>\r\n                    <CardMedia className={classes.media}\r\n                        image=\"https://4.bp.blogspot.com/-imM00o7SslA/V8NXohT8AmI/AAAAAAAAFOM/F7h1SZjMaCU4mJ6PlwUlx7tpePjVJWlcACLcB/s1600/Cockpit%2B2.png\"\r\n                    />\r\n                    <CardContent>\r\n                        <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                            {lang.currLang.current === \"Ru\"\r\n                                ? item.name_rus\r\n                                : item.name_eng\r\n                            }\r\n                        </Typography>\r\n                        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                            {lang.currLang.current === \"Ru\"\r\n                                ? item.description_rus\r\n                                : item.description_eng\r\n                            }\r\n                        </Typography>\r\n                    </CardContent>\r\n                </CardActionArea>\r\n                {auth.user.roles < 2 //0 - admin; 1 - moderator\r\n                    ? <CardActions>\r\n                        <Button size=\"small\" color=\"secondary\" onClick={() => { actions('delete') }}>\r\n                            {lang.currLang.buttons.Delete}\r\n                        </Button>\r\n                        <Button size=\"small\" color=\"primary\" onClick={() => { actions('edit') }}>\r\n                            {lang.currLang.buttons.Edit}\r\n                        </Button>\r\n                    </CardActions>\r\n                    : ''\r\n                }\r\n            </Card>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nTechnicCard.propTypes = {\r\n    setSnackbar: PropTypes.func.isRequired,\r\n    lang: PropTypes.object.isRequired,\r\n    palette: PropTypes.object.isRequired,\r\n    auth: PropTypes.object.isRequired,\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        lang: store.lang,\r\n        palette: store.themeMode.palette,\r\n        auth: store.auth,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setSnackbar: snackbar => dispatch(setSnackbar(snackbar)),\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(TechnicCard);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Container from '@material-ui/core/Container';\r\nimport Button from '@material-ui/core/Button';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\n\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\n\r\nimport { CheckTimeOut } from '../utils/CheckLoginTimeOut';\r\nimport TechnicCard from './muiltiple/TechnicCard';\r\nimport { useStyles } from '../styles/Styles';\r\nimport { instance } from './Config';\r\n\r\nfunction Technics(props) {\r\n    const { lang, themeMode, history, auth } = props;\r\n    const muiTheme = createMuiTheme(themeMode);\r\n    const classes = useStyles();\r\n\r\n    const [isLoading, setIsLoading] = React.useState(true);\r\n    const [technics, setTechnics] = React.useState([]);\r\n\r\n    const loadTechnics = React.useCallback(() => {\r\n        setIsLoading(true);\r\n        instance.get(\"/gettechnics\")\r\n            .then(res => {\r\n                setTechnics(res.data);\r\n                setIsLoading(false);\r\n            })\r\n            .catch(err => {\r\n                setIsLoading(false);\r\n            });\r\n    }, []);\r\n\r\n    React.useEffect(() => {\r\n        loadTechnics();\r\n    }, [loadTechnics]);\r\n\r\n    return (\r\n        <MuiThemeProvider theme={muiTheme}>\r\n            <CssBaseline />\r\n            <div className={classes.root}>\r\n                <Grid container\r\n                    className={`${classes.height12}`}\r\n                    direction=\"column\"\r\n                    justify=\"center\"\r\n                    alignItems=\"stretch\"\r\n                >\r\n                    <Grid item className={`${classes.hiddenOverflow} ${classes.height11}`}>\r\n                        {isLoading\r\n                            ? <div className={classes.formControl}>\r\n                                <CircularProgress />\r\n                            </div>\r\n                            : <Container className={classes.mainGridDreamsBodyItemContainer}>\r\n                                <Paper className={classes.mainGridDreamsBodyItemContainerPaper}>\r\n                                    <Grid container\r\n                                        className={classes.mainGridDreamsContainer}\r\n                                        direction=\"column\"\r\n                                        justify=\"center\"\r\n                                        alignItems=\"stretch\"\r\n                                    >\r\n                                        {technics.map((item, key) => (\r\n                                            <TechnicCard key={key}\r\n                                                item={item}\r\n                                                loadTechnics={loadTechnics}\r\n                                                history={history}\r\n                                            />\r\n                                        ))}\r\n                                    </Grid>\r\n                                </Paper>\r\n                            </Container>\r\n                        }\r\n                    </Grid>\r\n                    <Grid item className={`${classes.mainGridBodyItem} ${classes.height1}`}>\r\n                        <Grid container\r\n                            direction=\"row\"\r\n                            justify=\"space-evenly\"\r\n                            alignItems=\"center\"\r\n                        >\r\n                            <Grid item>\r\n                                <Button variant=\"contained\"\r\n                                    color=\"secondary\"\r\n                                    className={classes.actionButton}\r\n                                    onClick={() => { history.push(\"/luciddreams\") }}\r\n                                >\r\n                                    {lang.currLang.buttons.close}\r\n                                </Button>\r\n                            </Grid>\r\n                            {auth.user.roles < 2 //0 - admin; 1 - moderator\r\n                                ? <Grid item align=\"center\">\r\n                                    <Button variant=\"contained\"\r\n                                        color=\"primary\"\r\n                                        className={classes.actionButton}\r\n                                        onClick={() => {\r\n                                            let check = CheckTimeOut();\r\n                                            if (check) history.push(\"/addtechnics\");\r\n                                            else history.push(\"/\");\r\n                                        }}\r\n                                    >\r\n                                        {lang.currLang.buttons.add}\r\n                                    </Button>\r\n                                </Grid>\r\n                                : <Grid item xs={6} />\r\n                            }\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </MuiThemeProvider >\r\n    );\r\n}\r\n\r\nTechnics.propTypes = {\r\n    themeMode: PropTypes.object.isRequired,\r\n    lang: PropTypes.object.isRequired,\r\n    auth: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        themeMode: store.themeMode,\r\n        lang: store.lang,\r\n        auth: store.auth,\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n    }\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Technics);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport { Route, Switch } from \"react-router-dom\";\r\n\r\nimport { SET_SNACKBAR_MODE } from \"./actions/types\";\r\nimport { setSnackbar } from './actions/Actions';\r\n\r\nimport PrivateRoute from \"./components/PrivateRoute\";\r\n\r\nimport DreamMap from './components/DreamMap';\r\nimport AddLocation from './components/AddLocation';\r\nimport AddDream from './components/AddDream';\r\nimport AddCDream from './components/AddCDream';\r\nimport AddTechnics from './components/AddTechnics';\r\nimport ViewDreams from './components/ViewDreams';\r\nimport MainPage from \"./components/MainPage\";\r\nimport Sign from './components/Sign';\r\nimport Technics from './components/Technics';\r\n\r\nimport { useStyles, variantIcon } from './styles/Styles';\r\n\r\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { amber, green } from '@material-ui/core/colors';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nconst useStyles1 = makeStyles(theme => ({\r\n    success: {\r\n        backgroundColor: green[600],\r\n    },\r\n    error: {\r\n        backgroundColor: theme.palette.error.dark,\r\n    },\r\n    info: {\r\n        backgroundColor: theme.palette.primary.main,\r\n    },\r\n    warning: {\r\n        backgroundColor: amber[700],\r\n    },\r\n    icon: {\r\n        fontSize: 20,\r\n    },\r\n    iconVariant: {\r\n        opacity: 0.9,\r\n        marginRight: theme.spacing(1),\r\n    },\r\n    message: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n    },\r\n}));\r\n\r\nfunction MySnackbarContentWrapper(props) {\r\n    const classes = useStyles1();\r\n    const { className, message, onClose, variant } = props;\r\n    const Icon = variantIcon[variant];\r\n    return (\r\n        <SnackbarContent\r\n            className={clsx(classes[variant], className)}\r\n            aria-describedby=\"client-snackbar\"\r\n            message={\r\n                <span id=\"client-snackbar\" className={classes.message}>\r\n                    <Icon className={clsx(classes.icon, classes.iconVariant)} />\r\n                    <Typography className={classes.mainGridContainer}\r\n                        align='center'\r\n                        variant='body2'>\r\n                        {message}\r\n                    </Typography>\r\n                </span>\r\n            }\r\n            action={[\r\n                <IconButton key=\"close\"\r\n                    aria-label=\"close\"\r\n                    color=\"inherit\"\r\n                    onClick={onClose}\r\n                >\r\n                    <CloseIcon className={classes.icon} />\r\n                </IconButton>,\r\n            ]}\r\n        />\r\n    );\r\n}\r\n\r\nfunction Routes(props) {\r\n    const classes = useStyles();\r\n    const { open, variant, message } = props;\r\n    const [openSnackbar, setOpenSnackbar] = React.useState(false);\r\n    const [openSnackbarVariant, setOpenSnackbarVariant] = React.useState('');\r\n    const [snackbarMessage, setSnackbarMessage] = React.useState('');\r\n\r\n    const handleCloseSnackbar = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setOpenSnackbar(false);\r\n        props.setSnackbar({\r\n            type: SET_SNACKBAR_MODE,\r\n            snackbar: {\r\n                open: false,\r\n                variant: openSnackbarVariant,\r\n                message: snackbarMessage,\r\n            },\r\n        });\r\n    };\r\n    React.useEffect(() => {\r\n        setOpenSnackbarVariant(variant);\r\n        setSnackbarMessage(message);\r\n        setOpenSnackbar(open);\r\n    }, [open, variant, message]);\r\n\r\n    return (\r\n        <div>\r\n            <Snackbar\r\n                open={openSnackbar}\r\n                onClose={handleCloseSnackbar}\r\n                autoHideDuration={3000}>\r\n                <MySnackbarContentWrapper\r\n                    className={classes.margin}\r\n                    onClose={handleCloseSnackbar}\r\n                    variant={openSnackbarVariant}\r\n                    message={snackbarMessage}\r\n                />\r\n            </Snackbar>\r\n            <Route exact path=\"/\" component={Sign} />\r\n            <Switch>\r\n                <PrivateRoute exact path=\"/dreammap\" component={DreamMap} />\r\n                <PrivateRoute exact path=\"/addlocation\" component={AddLocation} />\r\n                <PrivateRoute exact path=\"/luciddreams\" component={MainPage} />\r\n                <PrivateRoute exact path=\"/dreams\" component={ViewDreams} />\r\n                <PrivateRoute exact path=\"/addregulardream\" component={AddDream} />\r\n                <PrivateRoute exact path=\"/addcdream\" component={AddCDream} />\r\n                <PrivateRoute exact path=\"/technics\" component={Technics} />\r\n                <PrivateRoute exact path=\"/addtechnics\" component={AddTechnics} />\r\n            </Switch>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nRoutes.propTypes = {\r\n    open: PropTypes.bool.isRequired,\r\n    variant: PropTypes.string.isRequired,\r\n    message: PropTypes.string.isRequired,\r\n    setSnackbar: PropTypes.func.isRequired,\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        open: store.snackbar.snackbar.open,\r\n        variant: store.snackbar.snackbar.variant,\r\n        message: store.snackbar.snackbar.message,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setSnackbar: snackbar => dispatch(setSnackbar(snackbar)),\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Routes);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { Router } from \"react-router-dom\";\r\nimport './App.css';\r\n\r\nimport history from '../history';\r\nimport { store } from \"../store\";\r\nimport { CheckTimeOut } from '../utils/CheckLoginTimeOut';\r\nimport setAuthToken from \"../utils/setAuthToken\";\r\nimport { SET_CURRENT_USER, SET_THEME_MODE } from \"../actions/types\";\r\n\r\nimport Routes from '../Routes';\r\n\r\nimport { useStyles, params, randomBetween } from '../styles/Styles';\r\n\r\nlet check = CheckTimeOut();\r\nlet stars = [];\r\nlet clouds = [];\r\n\r\nif (!check) {\r\n    localStorage.removeItem(\"jwtToken\");\r\n    setAuthToken(false);\r\n    store.dispatch({\r\n        type: SET_CURRENT_USER,\r\n        payload: null\r\n    });\r\n    history.push(\"/\");\r\n}\r\nelse {\r\n    history.push(\"/luciddreams\");\r\n}\r\n\r\nif (new Date().getHours() >= 16 || (new Date().getHours() >= 0 && new Date().getHours() < 6)) {\r\n    store.dispatch({\r\n        type: SET_THEME_MODE,\r\n        palette: {\r\n            type: \"dark\",\r\n            primary: { main: \"#f9a825\" },\r\n            secondary: { main: \"#f50057\" },\r\n            error: { main: \"#cc0000\" },\r\n        }\r\n    });\r\n}\r\nelse {\r\n    store.dispatch({\r\n        type: SET_THEME_MODE,\r\n        palette: {\r\n            type: \"light\",\r\n            primary: { main: \"#3f51b5\" },\r\n            secondary: { main: \"#f50057\" },\r\n            error: { main: \"#cc0000\" },\r\n        }\r\n    });\r\n}\r\n\r\nfunction App(props) {\r\n    const { type } = props;\r\n    const classes = useStyles();\r\n    stars = [];\r\n    clouds = [];\r\n    for (let i = 0; i < params.amountStars; i++) {\r\n        let size = Math.round(Math.random() * 10) === 0\r\n            ? params.size.giant\r\n            : randomBetween(params.size.min, params.size.max);\r\n        stars.push(\r\n            <div\r\n                className={classes.AppStar}\r\n                key={i + 'AppStar'}\r\n                style={{\r\n                    left: randomBetween(0, 100) + \"%\",\r\n                    top: randomBetween(0, 100) + \"%\",\r\n                    width: size + \"px\",\r\n                    height: size + \"px\",\r\n                    boxShadow: \"0 0 \" + size + \"px \" + size / 2 + \"px #043668\",\r\n                    animationDuration: randomBetween(params.duration.min, params.duration.max) + \"s\",\r\n                }}\r\n            />\r\n        );\r\n    }\r\n\r\n    for (let i = 0; i < params.amountClouds; i++) {\r\n        let left = Math.round(Math.random() * 50 + 150);\r\n        let top = Math.round(Math.random() * 100 / 100 * 90);\r\n        let scale = Math.random() * 2 - 0.5;\r\n        let opacity = Math.random() * 90 / 100;\r\n        let speed = Math.random() * 30 + 15;\r\n        clouds.push(\r\n            <div className={classes.AppCloud}\r\n                key={i + 'AppCloud'}\r\n                style={{\r\n                    left: left + '%',\r\n                    top: top + '%',\r\n                    width: '400px',\r\n                    height: '100px',\r\n                    transform: 'scale(' + scale + ')',\r\n                    opacity: opacity,\r\n                    animationDuration: speed + 's',\r\n                }}\r\n            />\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Router history={history}>\r\n            <div className={classes.AppDivDark}>\r\n                <div className={classes.AppDivLight}\r\n                    style={type === \"light\"\r\n                        ? { opacity: 1, }\r\n                        : { opacity: 0, }}\r\n                />\r\n                {type === \"light\"\r\n                    ?\r\n                    <div className={classes.AppCloudsDiv}\r\n                        style={type === \"light\"\r\n                            ? { opacity: 1, }\r\n                            : { opacity: 0, }}\r\n                    >\r\n                        {clouds}\r\n                    </div>\r\n                    :\r\n                    <div className={classes.AppStarsDiv}\r\n                        style={type === \"light\"\r\n                            ? { opacity: 0, }\r\n                            : { opacity: 1, }}\r\n                    >\r\n                        {stars}\r\n                    </div>\r\n                }\r\n            </div>\r\n            <Routes />\r\n        </Router>\r\n    );\r\n};\r\n\r\nApp.propTypes = {\r\n    type: PropTypes.string.isRequired,\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        type: store.themeMode.palette.type,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from \"./store\";\r\n\r\nReactDOM.render(\r\n    <div id='global' >\r\n        <Provider store={store}>\r\n            <App />\r\n        </Provider>\r\n    </div>\r\n    , document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n\r\n"],"sourceRoot":""}